
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000134b4 memsz 0x000134b4 flags r-x
    LOAD off    0x000144d4 vaddr 0x100134d4 paddr 0x10014fc0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00016aac vaddr 0x10016aac paddr 0x10016aac align 2**12
         filesz 0x00000000 memsz 0x00000270 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000128ac  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a6c  10012a68  10012a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  100134d4  10014fc0  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000270  10016aac  10016aac  00016aac  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015fc0  2**0
                  CONTENTS
  7 .sdram        00000000  10016d1c  10016d1c  00015fc0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015fc0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d48  00000000  00000000  00015fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023a68  00000000  00000000  00016d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090c7  00000000  00000000  0003a798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b57f  00000000  00000000  0004385f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000024b4  00000000  00000000  0004ede0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000034d9  00000000  00000000  00051294  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  0005476d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b4bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001370  00000000  00000000  0006b500  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006fe1c  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006fe1f  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006fe2b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006fe2c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006fe2d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006fe31  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006fe35  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006fe39  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006fe44  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006fe4f  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006fe5a  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000010  00000000  00000000  0006fe65  2**0
                  CONTENTS, READONLY
 30 .jdi          000042ea  00000000  00000000  0006fe75  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00085ac6  00000000  00000000  0007415f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10012a68 l    d  .rodata	00000000 .rodata
100134d4 l    d  .rwdata	00000000 .rwdata
10016aac l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10016d1c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10016aac l     O .bss	00000002 ctl_reg.3330
10016aae l     O .bss	00000002 no_device.3331
00000000 l    df *ABS*	00000000 tetris_board.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
100038c0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001321a l     O .rodata	00000010 zeroes.4181
1001322a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10005e30 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100079d8 l     F .text	00000008 __fp_lock
100079e0 l     F .text	00000008 __fp_unlock
100079f4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100134d4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10013918 l     O .rwdata	00000020 lc_ctype_charset
100138f8 l     O .rwdata	00000020 lc_message_charset
10013938 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1001325c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000af24 l     F .text	000000fc __sprint_r.part.0
10013390 l     O .rodata	00000010 blanks.4125
10013380 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10010224 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1001034c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10010378 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10010480 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1001057c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10010660 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10010844 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014fb0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10010af8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010c48 l     F .text	00000038 alt_dev_reg
10013f20 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010f24 l     F .text	00000204 altera_avalon_jtag_uart_irq
10011128 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100119fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011e94 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011fec l     F .text	00000050 alt_get_errno
1001203c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000a564 g     F .text	00000074 _mprec_log10
1000a650 g     F .text	0000008c __any_on
1000c950 g     F .text	00000054 _isatty_r
10013268 g     O .rodata	00000028 __mprec_tinytens
1001078c g     F .text	00000078 alt_main
10003a7c g     F .text	000000b8 _puts_r
10016c1c g     O .bss	00000100 alt_irq
1000c9a4 g     F .text	0000005c _lseek_r
10014fc0 g       *ABS*	00000000 __flash_rwdata_start
1000ec44 g     F .text	00000084 .hidden __eqdf2
10016d1c g       *ABS*	00000000 __alt_heap_start
10003a40 g     F .text	0000003c printf
1000cbcc g     F .text	0000009c _wcrtomb_r
1000ae1c g     F .text	0000005c __sseek
10007d3c g     F .text	00000010 __sinit
10016abc g     O .bss	00000001 fallingPieceType
1000ca5c g     F .text	00000154 __swbuf_r
100087b4 g     F .text	0000007c _setlocale_r
10007b94 g     F .text	00000078 __sfmoreglue
10010824 g     F .text	00000020 __malloc_unlock
100037c4 g     F .text	00000080 UsbGetRetryCnt
10009414 g     F .text	0000015c memmove
100001f8 g     F .text	00000050 IO_init
10007d24 g     F .text	00000018 _cleanup
10009694 g     F .text	000000a8 _Balloc
1000ecc8 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10001db0 g     F .text	00000314 rotatePiece
1000c8f8 g     F .text	00000058 _fstat_r
10016ae8 g     O .bss	00000004 errno
1000ad98 g     F .text	00000008 __seofread
10016af0 g     O .bss	00000004 alt_argv
1001cf80 g       *ABS*	00000000 _gp
10010ac8 g     F .text	00000030 usleep
10013da0 g     O .rwdata	00000180 alt_fd_list
1001244c g     F .text	00000090 alt_find_dev
100092dc g     F .text	00000138 memcpy
10016b2c g     O .bss	000000f0 board
100079e8 g     F .text	0000000c _cleanup_r
1001004c g     F .text	000000d0 .hidden __floatsidf
10011f74 g     F .text	00000078 alt_io_redirect
1000eda8 g     F .text	000000e0 .hidden __ltdf2
10012a68 g       *ABS*	00000000 __DTOR_END__
10003b34 g     F .text	00000014 puts
1000ac7c g     F .text	00000074 __fpclassifyd
1000a4c0 g     F .text	000000a4 __ratio
1000c45c g     F .text	00000024 __vfiprintf_internal
10011324 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10003a14 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100039dc g     F .text	00000008 .hidden __udivsi3
100104d0 g     F .text	000000ac isatty
100132b8 g     O .rodata	000000c8 __mprec_tens
10008830 g     F .text	0000000c __locale_charset
10016ae4 g     O .bss	00000004 __malloc_top_pad
10002e64 g     F .text	00000264 UsbGetConfigDesc2
10016ac0 g     O .bss	00000004 piecesAdded
10014f88 g     O .rwdata	00000004 __mb_cur_max
10008860 g     F .text	0000000c _localeconv_r
10009abc g     F .text	0000003c __i2b
100081a0 g     F .text	000004a4 __sfvwrite_r
1000acf0 g     F .text	00000054 _sbrk_r
1000ca00 g     F .text	0000005c _read_r
10014fa8 g     O .rwdata	00000004 alt_max_fd
1000c608 g     F .text	00000100 _fclose_r
100079a8 g     F .text	00000030 fflush
10016ae0 g     O .bss	00000004 __malloc_max_sbrked_mem
1000da28 g     F .text	0000089c .hidden __adddf3
1000a268 g     F .text	0000011c __b2d
1000d40c g     F .text	0000061c .hidden __umoddi3
100106b0 g     F .text	000000dc lseek
100018ec g     F .text	00000148 processLoss
10014f80 g     O .rwdata	00000004 _global_impure_ptr
1000a6dc g     F .text	000005a0 _realloc_r
10016d1c g       *ABS*	00000000 __bss_end
10011da4 g     F .text	000000f0 alt_iic_isr_register
10012328 g     F .text	00000104 alt_tick
1000cdcc g     F .text	00000640 .hidden __udivdi3
1000c71c g     F .text	00000184 _fputwc_r
10013290 g     O .rodata	00000028 __mprec_bigtens
100098a0 g     F .text	00000104 __s2b
1001011c g     F .text	000000a4 .hidden __floatunsidf
1000a010 g     F .text	00000060 __mcmp
100028c4 g     F .text	000000fc UsbSetAddress
10007d5c g     F .text	00000018 __fp_lock_all
10011d58 g     F .text	0000004c alt_ic_irq_enabled
10012290 g     F .text	00000098 alt_alarm_stop
10016af8 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10013d78 g     O .rwdata	00000028 alt_dev_null
100119e0 g     F .text	0000001c alt_dcache_flush_all
100099a4 g     F .text	00000068 __hi0bits
100002b4 g     F .text	00000068 IO_read
1000ffc4 g     F .text	00000088 .hidden __fixdfsi
10014fc0 g       *ABS*	00000000 __ram_rwdata_end
10014fa0 g     O .rwdata	00000008 alt_dev_list
10016ab0 g     O .bss	00000004 score
10010b48 g     F .text	00000100 write
100134d4 g       *ABS*	00000000 __ram_rodata_end
100103c8 g     F .text	000000b8 fstat
1000eda8 g     F .text	000000e0 .hidden __ledf2
10001a34 g     F .text	0000037c checkForRowClear
10003844 g     F .text	0000007c UsbPrintMem
10009d88 g     F .text	00000140 __pow5mult
1000b038 g     F .text	00001424 ___vfiprintf_internal_r
10016ad8 g     O .bss	00000004 __nlocale_changed
100039e4 g     F .text	00000008 .hidden __umodsi3
10016d1c g       *ABS*	00000000 end
100024f0 g     F .text	0000028c drawBoard
10010e60 g     F .text	000000c4 altera_avalon_jtag_uart_init
10012a68 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100101c0 g     F .text	00000064 .hidden __clzsi2
10011530 g     F .text	00000218 altera_avalon_jtag_uart_write
10007d4c g     F .text	00000004 __sfp_lock_acquire
100091f4 g     F .text	000000e8 memchr
10003be0 g     F .text	000020fc ___vfprintf_internal_r
100031c4 g     F .text	000000fc UsbClassRequest
10007eb0 g     F .text	000002f0 _free_r
1000883c g     F .text	00000010 __locale_mb_cur_max
100128a0 g     F .text	00000194 __call_exitprocs
10016ad4 g     O .bss	00000004 __mlocale_changed
10014f8c g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
10016ab4 g     O .bss	00000004 level
10016afc g     O .bss	00000004 _alt_tick_rate
10009ec8 g     F .text	00000148 __lshift
10016b00 g     O .bss	00000004 _alt_nticks
10010894 g     F .text	00000104 read
10010cb4 g     F .text	00000048 alt_sys_init
1001278c g     F .text	00000114 __register_exitproc
10009af8 g     F .text	00000290 __multiply
100111d0 g     F .text	00000068 altera_avalon_jtag_uart_close
100039ec g     F .text	00000028 .hidden __mulsi3
100134d4 g       *ABS*	00000000 __ram_rwdata_start
10012a68 g       *ABS*	00000000 __ram_rodata_start
10016b04 g     O .bss	00000028 __malloc_current_mallinfo
1000a384 g     F .text	0000013c __d2b
10016ac4 g     O .bss	00000004 fallingPieceY
100029c0 g     F .text	00000144 UsbGetDeviceDesc1
10010cfc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100125f0 g     F .text	000000d4 alt_get_fd
10011888 g     F .text	00000158 alt_busy_sleep
1000c4dc g     F .text	00000054 _close_r
10012710 g     F .text	0000007c memcmp
10010dbc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016d1c g       *ABS*	00000000 __alt_stack_base
10010e0c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10005d00 g     F .text	00000130 __swsetup_r
1000e2c4 g     F .text	00000980 .hidden __divdf3
10007c0c g     F .text	00000118 __sfp
1000a5d8 g     F .text	00000078 __copybits
10013970 g     O .rwdata	00000408 __malloc_av_
10007d58 g     F .text	00000004 __sinit_lock_release
1000ee88 g     F .text	0000086c .hidden __muldf3
1000ad44 g     F .text	00000054 __sread
10003740 g     F .text	00000084 UsbWaitTDListDone
100124dc g     F .text	00000114 alt_find_file
10011a4c g     F .text	000000a4 alt_dev_llist_insert
10010804 g     F .text	00000020 __malloc_lock
10010a18 g     F .text	000000b0 sbrk
10007780 g     F .text	00000228 _fflush_r
1000c530 g     F .text	000000d8 _calloc_r
10016aac g       *ABS*	00000000 __bss_start
10009570 g     F .text	00000124 memset
1000031c g     F .text	00000e44 main
10016af4 g     O .bss	00000004 alt_envp
10016adc g     O .bss	00000004 __malloc_max_total_mem
10010d5c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100030c8 g     F .text	000000fc UsbSetConfig
1000cbb0 g     F .text	0000001c __swbuf
10016ac8 g     O .bss	00000001 has_landed
1000ae78 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000c708 g     F .text	00000014 fclose
10006058 g     F .text	00001728 _dtoa_r
10008a4c g     F .text	000007a8 _malloc_r
1000cd40 g     F .text	00000030 __ascii_wctomb
10014fac g     O .rwdata	00000004 alt_errno
10008644 g     F .text	000000b8 _fwalk
1000392c g     F .text	00000054 .hidden __divsi3
10007d8c g     F .text	00000124 _malloc_trim_r
100032c0 g     F .text	00000144 UsbGetHidDesc
10012a68 g       *ABS*	00000000 __CTOR_END__
1000ae80 g     F .text	000000a4 strcmp
10012a68 g       *ABS*	00000000 __flash_rodata_start
10016ac9 g     O .bss	00000004 fallingPieceX
10012a68 g       *ABS*	00000000 __DTOR_LIST__
1000121c g     F .text	0000040c addNextPiece
1000ec44 g     F .text	00000084 .hidden __nedf2
100027d0 g     F .text	00000044 UsbRead
10010c80 g     F .text	00000034 alt_irq_init
10010998 g     F .text	00000080 alt_release_fd
100133a0 g     O .rodata	00000100 .hidden __clz_tab
10016ad0 g     O .bss	00000004 _PathLocale
100126c4 g     F .text	00000014 atexit
1000c480 g     F .text	0000005c _write_r
1000886c g     F .text	0000001c setlocale
10014f84 g     O .rwdata	00000004 _impure_ptr
10016aec g     O .bss	00000004 alt_argc
10001160 g     F .text	000000bc initBoard
10011b4c g     F .text	0000005c _do_dtors
10008858 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000a208 g     F .text	00000060 __ulp
10007d74 g     F .text	00000018 __fp_unlock_all
10014f98 g     O .rwdata	00000008 alt_fs_list
100022d8 g     F .text	00000218 movePieceRight
10003404 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008888 g     F .text	0000000c localeconv
10011bc4 g     F .text	00000050 alt_ic_isr_register
10014fc0 g       *ABS*	00000000 _edata
10016d1c g       *ABS*	00000000 _end
1000277c g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
10011238 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10011cb4 g     F .text	000000a4 alt_ic_irq_disable
10001628 g     F .text	000002c4 updateBoard
1000ada0 g     F .text	0000007c __swrite
10014f90 g     O .rwdata	00000004 __malloc_trim_threshold
1001242c g     F .text	00000020 altera_nios2_qsys_irq_init
1000884c g     F .text	0000000c __locale_msgcharset
100126d8 g     F .text	00000038 exit
100086fc g     F .text	000000b8 _fwalk_reent
1000a070 g     F .text	00000198 __mdiff
10003980 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10007d50 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000248 g     F .text	0000006c IO_write
10012a34 g     F .text	00000034 _exit
10011748 g     F .text	00000140 alt_alarm_start
10008894 g     F .text	000001b8 __smakebuf_r
10003b48 g     F .text	00000098 strlen
10012130 g     F .text	00000160 open
1000ecc8 g     F .text	000000e0 .hidden __gedf2
10014f94 g     O .rwdata	00000004 __wctomb
1000b020 g     F .text	00000018 __sprint_r
10011ba8 g     F .text	0000001c alt_icache_flush_all
10014fb4 g     O .rwdata	00000004 alt_priority_mask
10011c14 g     F .text	000000a0 alt_ic_irq_enable
10005cdc g     F .text	00000024 __vfprintf_internal
1000cd70 g     F .text	0000005c _wctomb_r
1000f6f4 g     F .text	000008d0 .hidden __subdf3
10009a0c g     F .text	000000b0 __lo0bits
10002cd8 g     F .text	0000018c UsbGetConfigDesc1
10016ab8 g     O .bss	00000004 current_frame
10014fb8 g     O .rwdata	00000008 alt_alarm_list
10011af0 g     F .text	0000005c _do_ctors
10002814 g     F .text	000000b0 UsbSoftReset
1000cc68 g     F .text	000000d8 wcrtomb
10010274 g     F .text	000000d8 close
10002b04 g     F .text	000001d4 UsbGetDeviceDesc2
100105e0 g     F .text	00000080 alt_load
1000c8a0 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
10007d54 g     F .text	00000004 __sinit_lock_acquire
10009764 g     F .text	0000013c __multadd
1000973c g     F .text	00000028 _Bfree
100020c4 g     F .text	00000214 movePieceLeft



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00840074 	movhi	r2,4097
10000130:	109b0704 	addi	r2,r2,27676
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	00840074 	movhi	r2,4097
10000148:	109b0704 	addi	r2,r2,27676
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6b3e014 	ori	gp,gp,53120
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	109aab14 	ori	r2,r2,27308

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18db4714 	ori	r3,r3,27932

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	00105e00 	call	100105e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	001078c0 	call	1001078c <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001f8:	deffff04 	addi	sp,sp,-4
100001fc:	df000015 	stw	fp,0(sp)
10000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000204:	00802804 	movi	r2,160
10000208:	00c00044 	movi	r3,1
1000020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000210:	00801c04 	movi	r2,112
10000214:	00c00044 	movi	r3,1
10000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000021c:	00801804 	movi	r2,96
10000220:	00c00044 	movi	r3,1
10000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000228:	00802404 	movi	r2,144
1000022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000230:	00802004 	movi	r2,128
10000234:	10000015 	stw	zero,0(r2)
}
10000238:	e037883a 	mov	sp,fp
1000023c:	df000017 	ldw	fp,0(sp)
10000240:	dec00104 	addi	sp,sp,4
10000244:	f800283a 	ret

10000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000248:	defffd04 	addi	sp,sp,-12
1000024c:	df000215 	stw	fp,8(sp)
10000250:	df000204 	addi	fp,sp,8
10000254:	2007883a 	mov	r3,r4
10000258:	2805883a 	mov	r2,r5
1000025c:	e0fffe05 	stb	r3,-8(fp)
10000260:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_cs = 1;
10000264:	00802804 	movi	r2,160
10000268:	00c00044 	movi	r3,1
1000026c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
10000270:	00802404 	movi	r2,144
10000274:	e0fffe03 	ldbu	r3,-8(fp)
10000278:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1000027c:	00802004 	movi	r2,128
10000280:	e0ffff0b 	ldhu	r3,-4(fp)
10000284:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
10000288:	00801804 	movi	r2,96
1000028c:	00c00044 	movi	r3,1
10000290:	10c00005 	stb	r3,0(r2)

	//printf("Write: %x %x\n",Address,Data);
	*otg_hpi_w = 0;
10000294:	00801804 	movi	r2,96
10000298:	10000005 	stb	zero,0(r2)
	*otg_hpi_cs = 0;
1000029c:	00802804 	movi	r2,160
100002a0:	10000005 	stb	zero,0(r2)
}
100002a4:	e037883a 	mov	sp,fp
100002a8:	df000017 	ldw	fp,0(sp)
100002ac:	dec00104 	addi	sp,sp,4
100002b0:	f800283a 	ret

100002b4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002b4:	defffd04 	addi	sp,sp,-12
100002b8:	df000215 	stw	fp,8(sp)
100002bc:	df000204 	addi	fp,sp,8
100002c0:	2005883a 	mov	r2,r4
100002c4:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_cs = 1;
100002c8:	00802804 	movi	r2,160
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
100002d4:	00802404 	movi	r2,144
100002d8:	e0ffff03 	ldbu	r3,-4(fp)
100002dc:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 1;
100002e0:	00801c04 	movi	r2,112
100002e4:	00c00044 	movi	r3,1
100002e8:	10c00005 	stb	r3,0(r2)

	temp = *otg_hpi_data;
100002ec:	00802004 	movi	r2,128
100002f0:	10800017 	ldw	r2,0(r2)
100002f4:	e0bffe0d 	sth	r2,-8(fp)

	*otg_hpi_r = 0;
100002f8:	00801c04 	movi	r2,112
100002fc:	10000005 	stb	zero,0(r2)
	*otg_hpi_cs = 0;
10000300:	00802804 	movi	r2,160
10000304:	10000005 	stb	zero,0(r2)
	//printf("Read: %x %x\n",Address,temp);
	return temp;
10000308:	e0bffe0b 	ldhu	r2,-8(fp)
}
1000030c:	e037883a 	mov	sp,fp
10000310:	df000017 	ldw	fp,0(sp)
10000314:	dec00104 	addi	sp,sp,4
10000318:	f800283a 	ret

1000031c <main>:
//
//----------------------------------------------------------------------------------------//
int level;
int score;
int main(void)
{
1000031c:	defff604 	addi	sp,sp,-40
10000320:	dfc00915 	stw	ra,36(sp)
10000324:	df000815 	stw	fp,32(sp)
10000328:	df000804 	addi	fp,sp,32

	IO_init();
1000032c:	00001f80 	call	100001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10000330:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
10000334:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
10000338:	e03ff885 	stb	zero,-30(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
1000033c:	01040074 	movhi	r4,4097
10000340:	210a9a04 	addi	r4,r4,10856
10000344:	0003b340 	call	10003b34 <puts>
	IO_write(HPI_ADDR, 0x0F0F);
10000348:	01000084 	movi	r4,2
1000034c:	0143c3c4 	movi	r5,3855
10000350:	00002480 	call	10000248 <IO_write>
	IO_read(HPI_ADDR);
10000354:	01000084 	movi	r4,2
10000358:	00002b40 	call	100002b4 <IO_read>
	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
1000035c:	00028140 	call	10002814 <UsbSoftReset>
	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000360:	01005104 	movi	r4,324
10000364:	000b883a 	mov	r5,zero
10000368:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000036c:	01302414 	movui	r4,49296
10000370:	017fffd4 	movui	r5,65535
10000374:	000277c0 	call	1000277c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000378:	01006d04 	movi	r4,436
1000037c:	01409604 	movi	r5,600
10000380:	000277c0 	call	1000277c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000384:	00811004 	movi	r2,1088
10000388:	e0bff80d 	sth	r2,-32(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
1000038c:	e0bff80b 	ldhu	r2,-32(fp)
10000390:	01005084 	movi	r4,322
10000394:	100b883a 	mov	r5,r2
10000398:	000277c0 	call	1000277c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
1000039c:	00808404 	movi	r2,528
100003a0:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100003a4:	e0bffe0b 	ldhu	r2,-8(fp)
100003a8:	01302314 	movui	r4,49292
100003ac:	100b883a 	mov	r5,r2
100003b0:	000277c0 	call	1000277c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100003b4:	01007104 	movi	r4,452
100003b8:	000b883a 	mov	r5,zero
100003bc:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100003c0:	01007184 	movi	r4,454
100003c4:	000b883a 	mov	r5,zero
100003c8:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100003cc:	01007204 	movi	r4,456
100003d0:	000b883a 	mov	r5,zero
100003d4:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100003d8:	01007284 	movi	r4,458
100003dc:	000b883a 	mov	r5,zero
100003e0:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100003e4:	01007304 	movi	r4,460
100003e8:	000b883a 	mov	r5,zero
100003ec:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100003f0:	01007384 	movi	r4,462
100003f4:	000b883a 	mov	r5,zero
100003f8:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100003fc:	01007404 	movi	r4,464
10000400:	000b883a 	mov	r5,zero
10000404:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000408:	01007484 	movi	r4,466
1000040c:	000b883a 	mov	r5,zero
10000410:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000414:	01007504 	movi	r4,468
10000418:	000b883a 	mov	r5,zero
1000041c:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000420:	01007584 	movi	r4,470
10000424:	000b883a 	mov	r5,zero
10000428:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000042c:	01007604 	movi	r4,472
10000430:	000b883a 	mov	r5,zero
10000434:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000438:	01007684 	movi	r4,474
1000043c:	000b883a 	mov	r5,zero
10000440:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000444:	01007704 	movi	r4,476
10000448:	000b883a 	mov	r5,zero
1000044c:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000450:	01007784 	movi	r4,478
10000454:	000b883a 	mov	r5,zero
10000458:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
1000045c:	01007084 	movi	r4,450
10000460:	01401c84 	movi	r5,114
10000464:	000277c0 	call	1000277c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000468:	01000044 	movi	r4,1
1000046c:	01738054 	movui	r5,52737
10000470:	00002480 	call	10000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000474:	0001883a 	nop
10000478:	010000c4 	movi	r4,3
1000047c:	00002b40 	call	100002b4 <IO_read>
10000480:	10bfffcc 	andi	r2,r2,65535
10000484:	103ffc26 	beq	r2,zero,10000478 <__alt_data_end+0xf8000478>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000488:	0001883a 	nop
1000048c:	01000044 	movi	r4,1
10000490:	00002b40 	call	100002b4 <IO_read>
10000494:	10bfffcc 	andi	r2,r2,65535
10000498:	1083fb58 	cmpnei	r2,r2,4077
1000049c:	10000826 	beq	r2,zero,100004c0 <main+0x1a4>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100004a0:	01000044 	movi	r4,1
100004a4:	00002b40 	call	100002b4 <IO_read>
100004a8:	10bfffcc 	andi	r2,r2,65535
100004ac:	01040074 	movhi	r4,4097
100004b0:	210aa004 	addi	r4,r4,10880
100004b4:	100b883a 	mov	r5,r2
100004b8:	0003a400 	call	10003a40 <printf>
		goto USB_HOT_PLUG;
100004bc:	003fa706 	br	1000035c <__alt_data_end+0xf800035c>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100004c0:	01040074 	movhi	r4,4097
100004c4:	210aa904 	addi	r4,r4,10916
100004c8:	0003a400 	call	10003a40 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100004cc:	01007084 	movi	r4,450
100004d0:	01401d04 	movi	r5,116
100004d4:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100004d8:	01007104 	movi	r4,452
100004dc:	01400f04 	movi	r5,60
100004e0:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004e4:	01007184 	movi	r4,454
100004e8:	000b883a 	mov	r5,zero
100004ec:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100004f0:	01007204 	movi	r4,456
100004f4:	000b883a 	mov	r5,zero
100004f8:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100004fc:	01007284 	movi	r4,458
10000500:	000b883a 	mov	r5,zero
10000504:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000508:	01007304 	movi	r4,460
1000050c:	000b883a 	mov	r5,zero
10000510:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000514:	01007384 	movi	r4,462
10000518:	000b883a 	mov	r5,zero
1000051c:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000520:	01007404 	movi	r4,464
10000524:	000b883a 	mov	r5,zero
10000528:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000052c:	01007484 	movi	r4,466
10000530:	000b883a 	mov	r5,zero
10000534:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000538:	01007504 	movi	r4,468
1000053c:	000b883a 	mov	r5,zero
10000540:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000544:	01007584 	movi	r4,470
10000548:	000b883a 	mov	r5,zero
1000054c:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000550:	01007604 	movi	r4,472
10000554:	000b883a 	mov	r5,zero
10000558:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
1000055c:	01007684 	movi	r4,474
10000560:	000b883a 	mov	r5,zero
10000564:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000568:	01007704 	movi	r4,476
1000056c:	000b883a 	mov	r5,zero
10000570:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000574:	01007784 	movi	r4,478
10000578:	000b883a 	mov	r5,zero
1000057c:	000277c0 	call	1000277c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000580:	01000044 	movi	r4,1
10000584:	01738054 	movui	r5,52737
10000588:	00002480 	call	10000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000058c:	0001883a 	nop
10000590:	01000044 	movi	r4,1
10000594:	00002b40 	call	100002b4 <IO_read>
10000598:	10bfffcc 	andi	r2,r2,65535
1000059c:	1083fb58 	cmpnei	r2,r2,4077
100005a0:	10000826 	beq	r2,zero,100005c4 <main+0x2a8>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100005a4:	01000044 	movi	r4,1
100005a8:	00002b40 	call	100002b4 <IO_read>
100005ac:	10bfffcc 	andi	r2,r2,65535
100005b0:	01040074 	movhi	r4,4097
100005b4:	210aa004 	addi	r4,r4,10880
100005b8:	100b883a 	mov	r5,r2
100005bc:	0003a400 	call	10003a40 <printf>
		goto USB_HOT_PLUG;
100005c0:	003f6606 	br	1000035c <__alt_data_end+0xf800035c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100005c4:	00b02284 	movi	r2,-16246
100005c8:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100005cc:	008c0004 	movi	r2,12288
100005d0:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
100005d4:	00880004 	movi	r2,8192
100005d8:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100005dc:	d0a6cb0b 	ldhu	r2,-25812(gp)
100005e0:	10bfffcc 	andi	r2,r2,65535
100005e4:	1009883a 	mov	r4,r2
100005e8:	00027d00 	call	100027d0 <UsbRead>
100005ec:	e0bff80d 	sth	r2,-32(fp)

	if (!(usb_ctl_val & no_device))
100005f0:	d0a6cb8b 	ldhu	r2,-25810(gp)
100005f4:	e0fff80b 	ldhu	r3,-32(fp)
100005f8:	1884703a 	and	r2,r3,r2
100005fc:	10bfffcc 	andi	r2,r2,65535
10000600:	1000341e 	bne	r2,zero,100006d4 <main+0x3b8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000604:	e03ff8c5 	stb	zero,-29(fp)
10000608:	00001006 	br	1000064c <main+0x330>
		{
			usleep(5*1000);
1000060c:	0104e204 	movi	r4,5000
10000610:	0010ac80 	call	10010ac8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000614:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000618:	10bfffcc 	andi	r2,r2,65535
1000061c:	1009883a 	mov	r4,r2
10000620:	00027d00 	call	100027d0 <UsbRead>
10000624:	e0bff80d 	sth	r2,-32(fp)
			if(usb_ctl_val & no_device) break;
10000628:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000062c:	e0fff80b 	ldhu	r3,-32(fp)
10000630:	1884703a 	and	r2,r3,r2
10000634:	10bfffcc 	andi	r2,r2,65535
10000638:	10000126 	beq	r2,zero,10000640 <main+0x324>
1000063c:	00000606 	br	10000658 <main+0x33c>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000640:	e0bff8c3 	ldbu	r2,-29(fp)
10000644:	10800044 	addi	r2,r2,1
10000648:	e0bff8c5 	stb	r2,-29(fp)
1000064c:	e0bff8c3 	ldbu	r2,-29(fp)
10000650:	10800170 	cmpltui	r2,r2,5
10000654:	103fed1e 	bne	r2,zero,1000060c <__alt_data_end+0xf800060c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
10000658:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000065c:	e0fff80b 	ldhu	r3,-32(fp)
10000660:	1884703a 	and	r2,r3,r2
10000664:	10bfffcc 	andi	r2,r2,65535
10000668:	1000261e 	bne	r2,zero,10000704 <main+0x3e8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
1000066c:	01040074 	movhi	r4,4097
10000670:	210aad04 	addi	r4,r4,10932
10000674:	0003b340 	call	10003b34 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000678:	01040074 	movhi	r4,4097
1000067c:	210ab704 	addi	r4,r4,10972
10000680:	0003b340 	call	10003b34 <puts>
			while (!(usb_ctl_val & no_device))
10000684:	00000d06 	br	100006bc <main+0x3a0>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000688:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000068c:	10bfffcc 	andi	r2,r2,65535
10000690:	1009883a 	mov	r4,r2
10000694:	00027d00 	call	100027d0 <UsbRead>
10000698:	e0bff80d 	sth	r2,-32(fp)
				if(usb_ctl_val & no_device)
1000069c:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006a0:	e0fff80b 	ldhu	r3,-32(fp)
100006a4:	1884703a 	and	r2,r3,r2
100006a8:	10bfffcc 	andi	r2,r2,65535
100006ac:	10000126 	beq	r2,zero,100006b4 <main+0x398>
					goto USB_HOT_PLUG;
100006b0:	003f2a06 	br	1000035c <__alt_data_end+0xf800035c>

				usleep(2000);
100006b4:	0101f404 	movi	r4,2000
100006b8:	0010ac80 	call	10010ac8 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100006bc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006c0:	e0fff80b 	ldhu	r3,-32(fp)
100006c4:	1884703a 	and	r2,r3,r2
100006c8:	10bfffcc 	andi	r2,r2,65535
100006cc:	103fee26 	beq	r2,zero,10000688 <__alt_data_end+0xf8000688>
100006d0:	00000c06 	br	10000704 <main+0x3e8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100006d4:	e0fff80b 	ldhu	r3,-32(fp)
100006d8:	e0bffc0b 	ldhu	r2,-16(fp)
100006dc:	1884703a 	and	r2,r3,r2
100006e0:	10bfffcc 	andi	r2,r2,65535
100006e4:	10000426 	beq	r2,zero,100006f8 <main+0x3dc>
		{
			printf("[INFO]: full speed device\n");
100006e8:	01040074 	movhi	r4,4097
100006ec:	210ac304 	addi	r4,r4,11020
100006f0:	0003b340 	call	10003b34 <puts>
100006f4:	00000306 	br	10000704 <main+0x3e8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
100006f8:	01040074 	movhi	r4,4097
100006fc:	210aca04 	addi	r4,r4,11048
10000700:	0003b340 	call	10003b34 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000704:	00028c40 	call	100028c4 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000708:	00000306 	br	10000718 <main+0x3fc>
	{
		UsbSetAddress();
1000070c:	00028c40 	call	100028c4 <UsbSetAddress>
		usleep(10*1000);
10000710:	0109c404 	movi	r4,10000
10000714:	0010ac80 	call	10010ac8 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000718:	010000c4 	movi	r4,3
1000071c:	00002b40 	call	100002b4 <IO_read>
10000720:	10bfffcc 	andi	r2,r2,65535
10000724:	1080040c 	andi	r2,r2,16
10000728:	103ff826 	beq	r2,zero,1000070c <__alt_data_end+0xf800070c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000072c:	00037400 	call	10003740 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000730:	01000084 	movi	r4,2
10000734:	01414184 	movi	r5,1286
10000738:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000073c:	0009883a 	mov	r4,zero
10000740:	00002b40 	call	100002b4 <IO_read>
10000744:	10bfffcc 	andi	r2,r2,65535
10000748:	01040074 	movhi	r4,4097
1000074c:	210ad104 	addi	r4,r4,11076
10000750:	100b883a 	mov	r5,r2
10000754:	0003a400 	call	10003a40 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000758:	01000084 	movi	r4,2
1000075c:	01414204 	movi	r5,1288
10000760:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000764:	0009883a 	mov	r4,zero
10000768:	00002b40 	call	100002b4 <IO_read>
1000076c:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000770:	e0bff80b 	ldhu	r2,-32(fp)
10000774:	01040074 	movhi	r4,4097
10000778:	210adc04 	addi	r4,r4,11120
1000077c:	100b883a 	mov	r5,r2
10000780:	0003a400 	call	10003a40 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000784:	e0bff80b 	ldhu	r2,-32(fp)
10000788:	108000e0 	cmpeqi	r2,r2,3
1000078c:	1000031e 	bne	r2,zero,1000079c <main+0x480>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000790:	00037c40 	call	100037c4 <UsbGetRetryCnt>
10000794:	e0bff80d 	sth	r2,-32(fp)

		goto USB_HOT_PLUG;
10000798:	003ef006 	br	1000035c <__alt_data_end+0xf800035c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
1000079c:	01040074 	movhi	r4,4097
100007a0:	210ae804 	addi	r4,r4,11168
100007a4:	0003b340 	call	10003b34 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100007a8:	00029c00 	call	100029c0 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007ac:	00000306 	br	100007bc <main+0x4a0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100007b0:	00029c00 	call	100029c0 <UsbGetDeviceDesc1>
		usleep(10*1000);
100007b4:	0109c404 	movi	r4,10000
100007b8:	0010ac80 	call	10010ac8 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007bc:	010000c4 	movi	r4,3
100007c0:	00002b40 	call	100002b4 <IO_read>
100007c4:	10bfffcc 	andi	r2,r2,65535
100007c8:	1080040c 	andi	r2,r2,16
100007cc:	103ff826 	beq	r2,zero,100007b0 <__alt_data_end+0xf80007b0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007d0:	00037400 	call	10003740 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100007d4:	01000084 	movi	r4,2
100007d8:	01414184 	movi	r5,1286
100007dc:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007e0:	0009883a 	mov	r4,zero
100007e4:	00002b40 	call	100002b4 <IO_read>
100007e8:	10bfffcc 	andi	r2,r2,65535
100007ec:	01040074 	movhi	r4,4097
100007f0:	210af704 	addi	r4,r4,11228
100007f4:	100b883a 	mov	r5,r2
100007f8:	0003a400 	call	10003a40 <printf>

	IO_write(HPI_ADDR,0x0508);
100007fc:	01000084 	movi	r4,2
10000800:	01414204 	movi	r5,1288
10000804:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000808:	0009883a 	mov	r4,zero
1000080c:	00002b40 	call	100002b4 <IO_read>
10000810:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000814:	e0bff80b 	ldhu	r2,-32(fp)
10000818:	01040074 	movhi	r4,4097
1000081c:	210b0204 	addi	r4,r4,11272
10000820:	100b883a 	mov	r5,r2
10000824:	0003a400 	call	10003a40 <printf>
	while (usb_ctl_val != 0x03)
10000828:	00000206 	br	10000834 <main+0x518>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000082c:	00037c40 	call	100037c4 <UsbGetRetryCnt>
10000830:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000834:	e0bff80b 	ldhu	r2,-32(fp)
10000838:	108000d8 	cmpnei	r2,r2,3
1000083c:	103ffb1e 	bne	r2,zero,1000082c <__alt_data_end+0xf800082c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000840:	01040074 	movhi	r4,4097
10000844:	210b0e04 	addi	r4,r4,11320
10000848:	0003b340 	call	10003b34 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000084c:	0002b040 	call	10002b04 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000850:	00000306 	br	10000860 <main+0x544>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000854:	0002b040 	call	10002b04 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000858:	0109c404 	movi	r4,10000
1000085c:	0010ac80 	call	10010ac8 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000860:	010000c4 	movi	r4,3
10000864:	00002b40 	call	100002b4 <IO_read>
10000868:	10bfffcc 	andi	r2,r2,65535
1000086c:	1080040c 	andi	r2,r2,16
10000870:	103ff826 	beq	r2,zero,10000854 <__alt_data_end+0xf8000854>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000874:	00037400 	call	10003740 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000878:	01000084 	movi	r4,2
1000087c:	01414184 	movi	r5,1286
10000880:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000884:	0009883a 	mov	r4,zero
10000888:	00002b40 	call	100002b4 <IO_read>
1000088c:	10bfffcc 	andi	r2,r2,65535
10000890:	01040074 	movhi	r4,4097
10000894:	210af704 	addi	r4,r4,11228
10000898:	100b883a 	mov	r5,r2
1000089c:	0003a400 	call	10003a40 <printf>

	IO_write(HPI_ADDR,0x0508);
100008a0:	01000084 	movi	r4,2
100008a4:	01414204 	movi	r5,1288
100008a8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008ac:	0009883a 	mov	r4,zero
100008b0:	00002b40 	call	100002b4 <IO_read>
100008b4:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008b8:	e0bff80b 	ldhu	r2,-32(fp)
100008bc:	01040074 	movhi	r4,4097
100008c0:	210b0204 	addi	r4,r4,11272
100008c4:	100b883a 	mov	r5,r2
100008c8:	0003a400 	call	10003a40 <printf>
	while (usb_ctl_val != 0x03)
100008cc:	00000206 	br	100008d8 <main+0x5bc>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008d0:	00037c40 	call	100037c4 <UsbGetRetryCnt>
100008d4:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008d8:	e0bff80b 	ldhu	r2,-32(fp)
100008dc:	108000d8 	cmpnei	r2,r2,3
100008e0:	103ffb1e 	bne	r2,zero,100008d0 <__alt_data_end+0xf80008d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100008e4:	01040074 	movhi	r4,4097
100008e8:	210b2204 	addi	r4,r4,11400
100008ec:	0003b340 	call	10003b34 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100008f0:	0002cd80 	call	10002cd8 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008f4:	00000306 	br	10000904 <main+0x5e8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100008f8:	0002cd80 	call	10002cd8 <UsbGetConfigDesc1>
		usleep(10*1000);
100008fc:	0109c404 	movi	r4,10000
10000900:	0010ac80 	call	10010ac8 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000904:	010000c4 	movi	r4,3
10000908:	00002b40 	call	100002b4 <IO_read>
1000090c:	10bfffcc 	andi	r2,r2,65535
10000910:	1080040c 	andi	r2,r2,16
10000914:	103ff826 	beq	r2,zero,100008f8 <__alt_data_end+0xf80008f8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000918:	00037400 	call	10003740 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000091c:	01000084 	movi	r4,2
10000920:	01414184 	movi	r5,1286
10000924:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000928:	0009883a 	mov	r4,zero
1000092c:	00002b40 	call	100002b4 <IO_read>
10000930:	10bfffcc 	andi	r2,r2,65535
10000934:	01040074 	movhi	r4,4097
10000938:	210b3404 	addi	r4,r4,11472
1000093c:	100b883a 	mov	r5,r2
10000940:	0003a400 	call	10003a40 <printf>

	IO_write(HPI_ADDR,0x0508);
10000944:	01000084 	movi	r4,2
10000948:	01414204 	movi	r5,1288
1000094c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000950:	0009883a 	mov	r4,zero
10000954:	00002b40 	call	100002b4 <IO_read>
10000958:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000095c:	e0bff80b 	ldhu	r2,-32(fp)
10000960:	01040074 	movhi	r4,4097
10000964:	210b3f04 	addi	r4,r4,11516
10000968:	100b883a 	mov	r5,r2
1000096c:	0003a400 	call	10003a40 <printf>
	while (usb_ctl_val != 0x03)
10000970:	00000206 	br	1000097c <main+0x660>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000974:	00037c40 	call	100037c4 <UsbGetRetryCnt>
10000978:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000097c:	e0bff80b 	ldhu	r2,-32(fp)
10000980:	108000d8 	cmpnei	r2,r2,3
10000984:	103ffb1e 	bne	r2,zero,10000974 <__alt_data_end+0xf8000974>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000988:	01040074 	movhi	r4,4097
1000098c:	210b4b04 	addi	r4,r4,11564
10000990:	0003b340 	call	10003b34 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000994:	0002e640 	call	10002e64 <UsbGetConfigDesc2>

	usleep(100*1000);
10000998:	010000b4 	movhi	r4,2
1000099c:	2121a804 	addi	r4,r4,-31072
100009a0:	0010ac80 	call	10010ac8 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009a4:	00000306 	br	100009b4 <main+0x698>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100009a8:	0002e640 	call	10002e64 <UsbGetConfigDesc2>
		usleep(10*1000);
100009ac:	0109c404 	movi	r4,10000
100009b0:	0010ac80 	call	10010ac8 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009b4:	010000c4 	movi	r4,3
100009b8:	00002b40 	call	100002b4 <IO_read>
100009bc:	10bfffcc 	andi	r2,r2,65535
100009c0:	1080040c 	andi	r2,r2,16
100009c4:	103ff826 	beq	r2,zero,100009a8 <__alt_data_end+0xf80009a8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009c8:	00037400 	call	10003740 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009cc:	01000084 	movi	r4,2
100009d0:	01414184 	movi	r5,1286
100009d4:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009d8:	0009883a 	mov	r4,zero
100009dc:	00002b40 	call	100002b4 <IO_read>
100009e0:	10bfffcc 	andi	r2,r2,65535
100009e4:	01040074 	movhi	r4,4097
100009e8:	210b5e04 	addi	r4,r4,11640
100009ec:	100b883a 	mov	r5,r2
100009f0:	0003a400 	call	10003a40 <printf>

	IO_write(HPI_ADDR,0x0508);
100009f4:	01000084 	movi	r4,2
100009f8:	01414204 	movi	r5,1288
100009fc:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a00:	0009883a 	mov	r4,zero
10000a04:	00002b40 	call	100002b4 <IO_read>
10000a08:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000a0c:	e0bff80b 	ldhu	r2,-32(fp)
10000a10:	01040074 	movhi	r4,4097
10000a14:	210b6904 	addi	r4,r4,11684
10000a18:	100b883a 	mov	r5,r2
10000a1c:	0003a400 	call	10003a40 <printf>
	while (usb_ctl_val != 0x03)
10000a20:	00000206 	br	10000a2c <main+0x710>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a24:	00037c40 	call	100037c4 <UsbGetRetryCnt>
10000a28:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a2c:	e0bff80b 	ldhu	r2,-32(fp)
10000a30:	108000d8 	cmpnei	r2,r2,3
10000a34:	103ffb1e 	bne	r2,zero,10000a24 <__alt_data_end+0xf8000a24>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a38:	01040074 	movhi	r4,4097
10000a3c:	210b7504 	addi	r4,r4,11732
10000a40:	0003b340 	call	10003b34 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a44:	01000084 	movi	r4,2
10000a48:	01415b04 	movi	r5,1388
10000a4c:	00002480 	call	10000248 <IO_write>
	code = IO_read(HPI_DATA);
10000a50:	0009883a 	mov	r4,zero
10000a54:	00002b40 	call	100002b4 <IO_read>
10000a58:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000a5c:	e0bffe8b 	ldhu	r2,-6(fp)
10000a60:	108000cc 	andi	r2,r2,3
10000a64:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000a68:	e0bffe8b 	ldhu	r2,-6(fp)
10000a6c:	01040074 	movhi	r4,4097
10000a70:	210b8804 	addi	r4,r4,11808
10000a74:	100b883a 	mov	r5,r2
10000a78:	0003a400 	call	10003a40 <printf>

	if (code == 0x01)
10000a7c:	e0bffe8b 	ldhu	r2,-6(fp)
10000a80:	10800058 	cmpnei	r2,r2,1
10000a84:	1000041e 	bne	r2,zero,10000a98 <main+0x77c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000a88:	01040074 	movhi	r4,4097
10000a8c:	210b8b04 	addi	r4,r4,11820
10000a90:	0003b340 	call	10003b34 <puts>
10000a94:	00000306 	br	10000aa4 <main+0x788>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000a98:	01040074 	movhi	r4,4097
10000a9c:	210b9a04 	addi	r4,r4,11880
10000aa0:	0003b340 	call	10003b34 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000aa4:	01000084 	movi	r4,2
10000aa8:	01415d84 	movi	r5,1398
10000aac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000ab0:	0009883a 	mov	r4,zero
10000ab4:	0141cfc4 	movi	r5,1855
10000ab8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000abc:	0009883a 	mov	r4,zero
10000ac0:	01604154 	movui	r5,33029
10000ac4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000ac8:	0009883a 	mov	r4,zero
10000acc:	014000c4 	movi	r5,3
10000ad0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000ad4:	0009883a 	mov	r4,zero
10000ad8:	01400204 	movi	r5,8
10000adc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000ae0:	0009883a 	mov	r4,zero
10000ae4:	016b0294 	movui	r5,44042
10000ae8:	00002480 	call	10000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000aec:	01006c04 	movi	r4,432
10000af0:	01415d84 	movi	r5,1398
10000af4:	000277c0 	call	1000277c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000af8:	01000084 	movi	r4,2
10000afc:	01415f04 	movi	r5,1404
10000b00:	00002480 	call	10000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b04:	0009883a 	mov	r4,zero
10000b08:	00002b40 	call	100002b4 <IO_read>
10000b0c:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000b10:	e0bfff03 	ldbu	r2,-4(fp)
10000b14:	01040074 	movhi	r4,4097
10000b18:	210ba304 	addi	r4,r4,11916
10000b1c:	100b883a 	mov	r5,r2
10000b20:	0003a400 	call	10003a40 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b24:	00030c80 	call	100030c8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b28:	00000306 	br	10000b38 <main+0x81c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b2c:	00030c80 	call	100030c8 <UsbSetConfig>
		usleep(10*1000);
10000b30:	0109c404 	movi	r4,10000
10000b34:	0010ac80 	call	10010ac8 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b38:	010000c4 	movi	r4,3
10000b3c:	00002b40 	call	100002b4 <IO_read>
10000b40:	10bfffcc 	andi	r2,r2,65535
10000b44:	1080040c 	andi	r2,r2,16
10000b48:	103ff826 	beq	r2,zero,10000b2c <__alt_data_end+0xf8000b2c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b4c:	00037400 	call	10003740 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b50:	01000084 	movi	r4,2
10000b54:	01414184 	movi	r5,1286
10000b58:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b5c:	0009883a 	mov	r4,zero
10000b60:	00002b40 	call	100002b4 <IO_read>
10000b64:	10bfffcc 	andi	r2,r2,65535
10000b68:	01040074 	movhi	r4,4097
10000b6c:	210bad04 	addi	r4,r4,11956
10000b70:	100b883a 	mov	r5,r2
10000b74:	0003a400 	call	10003a40 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b78:	01000084 	movi	r4,2
10000b7c:	01414204 	movi	r5,1288
10000b80:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b84:	0009883a 	mov	r4,zero
10000b88:	00002b40 	call	100002b4 <IO_read>
10000b8c:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000b90:	e0bff80b 	ldhu	r2,-32(fp)
10000b94:	01040074 	movhi	r4,4097
10000b98:	210bb804 	addi	r4,r4,12000
10000b9c:	100b883a 	mov	r5,r2
10000ba0:	0003a400 	call	10003a40 <printf>
	while (usb_ctl_val != 0x03)
10000ba4:	00000206 	br	10000bb0 <main+0x894>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ba8:	00037c40 	call	100037c4 <UsbGetRetryCnt>
10000bac:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000bb0:	e0bff80b 	ldhu	r2,-32(fp)
10000bb4:	108000d8 	cmpnei	r2,r2,3
10000bb8:	103ffb1e 	bne	r2,zero,10000ba8 <__alt_data_end+0xf8000ba8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000bbc:	01040074 	movhi	r4,4097
10000bc0:	210bc404 	addi	r4,r4,12048
10000bc4:	0003b340 	call	10003b34 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000bc8:	00031c40 	call	100031c4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bcc:	00000306 	br	10000bdc <main+0x8c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000bd0:	00031c40 	call	100031c4 <UsbClassRequest>
		usleep(10*1000);
10000bd4:	0109c404 	movi	r4,10000
10000bd8:	0010ac80 	call	10010ac8 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bdc:	010000c4 	movi	r4,3
10000be0:	00002b40 	call	100002b4 <IO_read>
10000be4:	10bfffcc 	andi	r2,r2,65535
10000be8:	1080040c 	andi	r2,r2,16
10000bec:	103ff826 	beq	r2,zero,10000bd0 <__alt_data_end+0xf8000bd0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000bf0:	00037400 	call	10003740 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000bf4:	01000084 	movi	r4,2
10000bf8:	01414184 	movi	r5,1286
10000bfc:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c00:	0009883a 	mov	r4,zero
10000c04:	00002b40 	call	100002b4 <IO_read>
10000c08:	10bfffcc 	andi	r2,r2,65535
10000c0c:	01040074 	movhi	r4,4097
10000c10:	210bd604 	addi	r4,r4,12120
10000c14:	100b883a 	mov	r5,r2
10000c18:	0003a400 	call	10003a40 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c1c:	01000084 	movi	r4,2
10000c20:	01414204 	movi	r5,1288
10000c24:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c28:	0009883a 	mov	r4,zero
10000c2c:	00002b40 	call	100002b4 <IO_read>
10000c30:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c34:	e0bff80b 	ldhu	r2,-32(fp)
10000c38:	01040074 	movhi	r4,4097
10000c3c:	210be104 	addi	r4,r4,12164
10000c40:	100b883a 	mov	r5,r2
10000c44:	0003a400 	call	10003a40 <printf>
	while (usb_ctl_val != 0x03)
10000c48:	00000206 	br	10000c54 <main+0x938>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c4c:	00037c40 	call	100037c4 <UsbGetRetryCnt>
10000c50:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c54:	e0bff80b 	ldhu	r2,-32(fp)
10000c58:	108000d8 	cmpnei	r2,r2,3
10000c5c:	103ffb1e 	bne	r2,zero,10000c4c <__alt_data_end+0xf8000c4c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000c60:	01040074 	movhi	r4,4097
10000c64:	210bed04 	addi	r4,r4,12212
10000c68:	0003b340 	call	10003b34 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000c6c:	00032c00 	call	100032c0 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c70:	00000306 	br	10000c80 <main+0x964>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000c74:	00032c00 	call	100032c0 <UsbGetHidDesc>
		usleep(10*1000);
10000c78:	0109c404 	movi	r4,10000
10000c7c:	0010ac80 	call	10010ac8 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c80:	010000c4 	movi	r4,3
10000c84:	00002b40 	call	100002b4 <IO_read>
10000c88:	10bfffcc 	andi	r2,r2,65535
10000c8c:	1080040c 	andi	r2,r2,16
10000c90:	103ff826 	beq	r2,zero,10000c74 <__alt_data_end+0xf8000c74>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c94:	00037400 	call	10003740 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c98:	01000084 	movi	r4,2
10000c9c:	01414184 	movi	r5,1286
10000ca0:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000ca4:	0009883a 	mov	r4,zero
10000ca8:	00002b40 	call	100002b4 <IO_read>
10000cac:	10bfffcc 	andi	r2,r2,65535
10000cb0:	01040074 	movhi	r4,4097
10000cb4:	210bd604 	addi	r4,r4,12120
10000cb8:	100b883a 	mov	r5,r2
10000cbc:	0003a400 	call	10003a40 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cc0:	01000084 	movi	r4,2
10000cc4:	01414204 	movi	r5,1288
10000cc8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ccc:	0009883a 	mov	r4,zero
10000cd0:	00002b40 	call	100002b4 <IO_read>
10000cd4:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000cd8:	e0bff80b 	ldhu	r2,-32(fp)
10000cdc:	01040074 	movhi	r4,4097
10000ce0:	210be104 	addi	r4,r4,12164
10000ce4:	100b883a 	mov	r5,r2
10000ce8:	0003a400 	call	10003a40 <printf>
	while (usb_ctl_val != 0x03)
10000cec:	00000206 	br	10000cf8 <main+0x9dc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000cf0:	00037c40 	call	100037c4 <UsbGetRetryCnt>
10000cf4:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000cf8:	e0bff80b 	ldhu	r2,-32(fp)
10000cfc:	108000d8 	cmpnei	r2,r2,3
10000d00:	103ffb1e 	bne	r2,zero,10000cf0 <__alt_data_end+0xf8000cf0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d04:	01040074 	movhi	r4,4097
10000d08:	210bff04 	addi	r4,r4,12284
10000d0c:	0003b340 	call	10003b34 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000d10:	00034040 	call	10003404 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d14:	00000306 	br	10000d24 <main+0xa08>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d18:	00034040 	call	10003404 <UsbGetReportDesc>
		usleep(10*1000);
10000d1c:	0109c404 	movi	r4,10000
10000d20:	0010ac80 	call	10010ac8 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d24:	010000c4 	movi	r4,3
10000d28:	00002b40 	call	100002b4 <IO_read>
10000d2c:	10bfffcc 	andi	r2,r2,65535
10000d30:	1080040c 	andi	r2,r2,16
10000d34:	103ff826 	beq	r2,zero,10000d18 <__alt_data_end+0xf8000d18>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d38:	00037400 	call	10003740 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d3c:	01000084 	movi	r4,2
10000d40:	01414184 	movi	r5,1286
10000d44:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d48:	0009883a 	mov	r4,zero
10000d4c:	00002b40 	call	100002b4 <IO_read>
10000d50:	10bfffcc 	andi	r2,r2,65535
10000d54:	01040074 	movhi	r4,4097
10000d58:	210c1304 	addi	r4,r4,12364
10000d5c:	100b883a 	mov	r5,r2
10000d60:	0003a400 	call	10003a40 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d64:	01000084 	movi	r4,2
10000d68:	01414204 	movi	r5,1288
10000d6c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d70:	0009883a 	mov	r4,zero
10000d74:	00002b40 	call	100002b4 <IO_read>
10000d78:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000d7c:	e0bff80b 	ldhu	r2,-32(fp)
10000d80:	01040074 	movhi	r4,4097
10000d84:	210c1f04 	addi	r4,r4,12412
10000d88:	100b883a 	mov	r5,r2
10000d8c:	0003a400 	call	10003a40 <printf>
	while (usb_ctl_val != 0x03)
10000d90:	00000206 	br	10000d9c <main+0xa80>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d94:	00037c40 	call	100037c4 <UsbGetRetryCnt>
10000d98:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d9c:	e0bff80b 	ldhu	r2,-32(fp)
10000da0:	108000d8 	cmpnei	r2,r2,3
10000da4:	103ffb1e 	bne	r2,zero,10000d94 <__alt_data_end+0xf8000d94>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000da8:	01040074 	movhi	r4,4097
10000dac:	210c2b04 	addi	r4,r4,12460
10000db0:	0003b340 	call	10003b34 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000db4:	0109c404 	movi	r4,10000
10000db8:	0010ac80 	call	10010ac8 <usleep>
	int board_not_init = 1;
10000dbc:	00800044 	movi	r2,1
10000dc0:	e0bff915 	stw	r2,-28(fp)
	int updateCounter = 0;
10000dc4:	e03ffa15 	stw	zero,-24(fp)
	int prevkeycode = 0;
10000dc8:	e03ffb15 	stw	zero,-20(fp)
	while(1)
	{
		toggle++;
10000dcc:	e0bff883 	ldbu	r2,-30(fp)
10000dd0:	10800044 	addi	r2,r2,1
10000dd4:	e0bff885 	stb	r2,-30(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000dd8:	01000084 	movi	r4,2
10000ddc:	01414004 	movi	r5,1280
10000de0:	00002480 	call	10000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000de4:	0009883a 	mov	r4,zero
10000de8:	01414704 	movi	r5,1308
10000dec:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000df0:	e0bfff03 	ldbu	r2,-4(fp)
10000df4:	108003cc 	andi	r2,r2,15
10000df8:	0009883a 	mov	r4,zero
10000dfc:	100b883a 	mov	r5,r2
10000e00:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000e04:	0009883a 	mov	r4,zero
10000e08:	0140a444 	movi	r5,657
10000e0c:	00002480 	call	10000248 <IO_write>
		if(toggle%2)
10000e10:	e0bff883 	ldbu	r2,-30(fp)
10000e14:	1080004c 	andi	r2,r2,1
10000e18:	10803fcc 	andi	r2,r2,255
10000e1c:	10000426 	beq	r2,zero,10000e30 <main+0xb14>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000e20:	0009883a 	mov	r4,zero
10000e24:	01400044 	movi	r5,1
10000e28:	00002480 	call	10000248 <IO_write>
10000e2c:	00000306 	br	10000e3c <main+0xb20>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000e30:	0009883a 	mov	r4,zero
10000e34:	01401044 	movi	r5,65
10000e38:	00002480 	call	10000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000e3c:	0009883a 	mov	r4,zero
10000e40:	014004c4 	movi	r5,19
10000e44:	00002480 	call	10000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000e48:	0009883a 	mov	r4,zero
10000e4c:	000b883a 	mov	r5,zero
10000e50:	00002480 	call	10000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000e54:	01006c04 	movi	r4,432
10000e58:	01414004 	movi	r5,1280
10000e5c:	000277c0 	call	1000277c <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e60:	00002406 	br	10000ef4 <main+0xbd8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000e64:	01000084 	movi	r4,2
10000e68:	01414004 	movi	r5,1280
10000e6c:	00002480 	call	10000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000e70:	0009883a 	mov	r4,zero
10000e74:	01414704 	movi	r5,1308
10000e78:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e7c:	e0bfff03 	ldbu	r2,-4(fp)
10000e80:	108003cc 	andi	r2,r2,15
10000e84:	0009883a 	mov	r4,zero
10000e88:	100b883a 	mov	r5,r2
10000e8c:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000e90:	0009883a 	mov	r4,zero
10000e94:	0140a444 	movi	r5,657
10000e98:	00002480 	call	10000248 <IO_write>
			if(toggle%2)
10000e9c:	e0bff883 	ldbu	r2,-30(fp)
10000ea0:	1080004c 	andi	r2,r2,1
10000ea4:	10803fcc 	andi	r2,r2,255
10000ea8:	10000426 	beq	r2,zero,10000ebc <main+0xba0>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000eac:	0009883a 	mov	r4,zero
10000eb0:	01400044 	movi	r5,1
10000eb4:	00002480 	call	10000248 <IO_write>
10000eb8:	00000306 	br	10000ec8 <main+0xbac>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000ebc:	0009883a 	mov	r4,zero
10000ec0:	01401044 	movi	r5,65
10000ec4:	00002480 	call	10000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000ec8:	0009883a 	mov	r4,zero
10000ecc:	014004c4 	movi	r5,19
10000ed0:	00002480 	call	10000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000ed4:	0009883a 	mov	r4,zero
10000ed8:	000b883a 	mov	r5,zero
10000edc:	00002480 	call	10000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ee0:	01006c04 	movi	r4,432
10000ee4:	01414004 	movi	r5,1280
10000ee8:	000277c0 	call	1000277c <UsbWrite>
			usleep(10*1000);
10000eec:	0109c404 	movi	r4,10000
10000ef0:	0010ac80 	call	10010ac8 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ef4:	010000c4 	movi	r4,3
10000ef8:	00002b40 	call	100002b4 <IO_read>
10000efc:	10bfffcc 	andi	r2,r2,65535
10000f00:	1080040c 	andi	r2,r2,16
10000f04:	103fd726 	beq	r2,zero,10000e64 <__alt_data_end+0xf8000e64>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
10000f08:	00037400 	call	10003740 <UsbWaitTDListDone>
10000f0c:	e0bff80d 	sth	r2,-32(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10000f10:	01000084 	movi	r4,2
10000f14:	01414784 	movi	r5,1310
10000f18:	00002480 	call	10000248 <IO_write>
		keycode = IO_read(HPI_DATA);
10000f1c:	0009883a 	mov	r4,zero
10000f20:	00002b40 	call	100002b4 <IO_read>
10000f24:	10bfffcc 	andi	r2,r2,65535
10000f28:	e0bffd15 	stw	r2,-12(fp)
		//printf("\nfirst two keycode values are %04x\n",keycode);
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
10000f2c:	e0bffd17 	ldw	r2,-12(fp)
10000f30:	10c03fcc 	andi	r3,r2,255
10000f34:	00802c04 	movi	r2,176
10000f38:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
10000f3c:	01003204 	movi	r4,200
10000f40:	0010ac80 	call	10010ac8 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000f44:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000f48:	10bfffcc 	andi	r2,r2,65535
10000f4c:	1009883a 	mov	r4,r2
10000f50:	00027d00 	call	100027d0 <UsbRead>
10000f54:	e0bff80d 	sth	r2,-32(fp)

		if(!(usb_ctl_val & no_device))
10000f58:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000f5c:	e0fff80b 	ldhu	r3,-32(fp)
10000f60:	1884703a 	and	r2,r3,r2
10000f64:	10bfffcc 	andi	r2,r2,65535
10000f68:	1000201e 	bne	r2,zero,10000fec <main+0xcd0>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000f6c:	e03ff8c5 	stb	zero,-29(fp)
10000f70:	00001006 	br	10000fb4 <main+0xc98>
			{
				usleep(5*1000);
10000f74:	0104e204 	movi	r4,5000
10000f78:	0010ac80 	call	10010ac8 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10000f7c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000f80:	10bfffcc 	andi	r2,r2,65535
10000f84:	1009883a 	mov	r4,r2
10000f88:	00027d00 	call	100027d0 <UsbRead>
10000f8c:	e0bff80d 	sth	r2,-32(fp)
				if(usb_ctl_val & no_device) break;
10000f90:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000f94:	e0fff80b 	ldhu	r3,-32(fp)
10000f98:	1884703a 	and	r2,r3,r2
10000f9c:	10bfffcc 	andi	r2,r2,65535
10000fa0:	10000126 	beq	r2,zero,10000fa8 <main+0xc8c>
10000fa4:	00000606 	br	10000fc0 <main+0xca4>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000fa8:	e0bff8c3 	ldbu	r2,-29(fp)
10000fac:	10800044 	addi	r2,r2,1
10000fb0:	e0bff8c5 	stb	r2,-29(fp)
10000fb4:	e0bff8c3 	ldbu	r2,-29(fp)
10000fb8:	108001f0 	cmpltui	r2,r2,7
10000fbc:	103fed1e 	bne	r2,zero,10000f74 <__alt_data_end+0xf8000f74>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
10000fc0:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000fc4:	e0fff80b 	ldhu	r3,-32(fp)
10000fc8:	1884703a 	and	r2,r3,r2
10000fcc:	10bfffcc 	andi	r2,r2,65535
10000fd0:	1000061e 	bne	r2,zero,10000fec <main+0xcd0>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10000fd4:	01040074 	movhi	r4,4097
10000fd8:	210c3f04 	addi	r4,r4,12540
10000fdc:	0003b340 	call	10003b34 <puts>
				printf("[INFO]: please insert again!!! \n");
10000fe0:	01040074 	movhi	r4,4097
10000fe4:	210c4a04 	addi	r4,r4,12584
10000fe8:	0003b340 	call	10003b34 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10000fec:	00001d06 	br	10001064 <main+0xd48>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10000ff0:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000ff4:	10bfffcc 	andi	r2,r2,65535
10000ff8:	1009883a 	mov	r4,r2
10000ffc:	00027d00 	call	100027d0 <UsbRead>
10001000:	e0bff80d 	sth	r2,-32(fp)
			usleep(5*1000);
10001004:	0104e204 	movi	r4,5000
10001008:	0010ac80 	call	10010ac8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000100c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001010:	10bfffcc 	andi	r2,r2,65535
10001014:	1009883a 	mov	r4,r2
10001018:	00027d00 	call	100027d0 <UsbRead>
1000101c:	e0bff80d 	sth	r2,-32(fp)
			usleep(5*1000);
10001020:	0104e204 	movi	r4,5000
10001024:	0010ac80 	call	10010ac8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001028:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000102c:	10bfffcc 	andi	r2,r2,65535
10001030:	1009883a 	mov	r4,r2
10001034:	00027d00 	call	100027d0 <UsbRead>
10001038:	e0bff80d 	sth	r2,-32(fp)
			usleep(5*1000);
1000103c:	0104e204 	movi	r4,5000
10001040:	0010ac80 	call	10010ac8 <usleep>

			if(usb_ctl_val & no_device)
10001044:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001048:	e0fff80b 	ldhu	r3,-32(fp)
1000104c:	1884703a 	and	r2,r3,r2
10001050:	10bfffcc 	andi	r2,r2,65535
10001054:	10000126 	beq	r2,zero,1000105c <main+0xd40>
				goto USB_HOT_PLUG;
10001058:	003cc006 	br	1000035c <__alt_data_end+0xf800035c>

			usleep(200);
1000105c:	01003204 	movi	r4,200
10001060:	0010ac80 	call	10010ac8 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001064:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001068:	e0fff80b 	ldhu	r3,-32(fp)
1000106c:	1884703a 	and	r2,r3,r2
10001070:	10bfffcc 	andi	r2,r2,65535
10001074:	103fde26 	beq	r2,zero,10000ff0 <__alt_data_end+0xf8000ff0>
			if(usb_ctl_val & no_device)
				goto USB_HOT_PLUG;

			usleep(200);
		}
		if(board_not_init || keycode == 0x15){
10001078:	e0bff917 	ldw	r2,-28(fp)
1000107c:	1000031e 	bne	r2,zero,1000108c <main+0xd70>
10001080:	e0bffd17 	ldw	r2,-12(fp)
10001084:	10800558 	cmpnei	r2,r2,21
10001088:	1000031e 	bne	r2,zero,10001098 <main+0xd7c>
			initBoard();
1000108c:	00011600 	call	10001160 <initBoard>
			drawBoard();
10001090:	00024f00 	call	100024f0 <drawBoard>
			board_not_init = 0;
10001094:	e03ff915 	stw	zero,-28(fp)
		}
		if(updateCounter == 0 || (keycode == 0x51 && updateCounter%3 == 0)){
10001098:	e0bffa17 	ldw	r2,-24(fp)
1000109c:	10000826 	beq	r2,zero,100010c0 <main+0xda4>
100010a0:	e0bffd17 	ldw	r2,-12(fp)
100010a4:	10801458 	cmpnei	r2,r2,81
100010a8:	1000071e 	bne	r2,zero,100010c8 <main+0xdac>
100010ac:	e0bffa17 	ldw	r2,-24(fp)
100010b0:	1009883a 	mov	r4,r2
100010b4:	014000c4 	movi	r5,3
100010b8:	00039800 	call	10003980 <__modsi3>
100010bc:	1000021e 	bne	r2,zero,100010c8 <main+0xdac>
			updateBoard();
100010c0:	00016280 	call	10001628 <updateBoard>
			drawBoard();
100010c4:	00024f00 	call	100024f0 <drawBoard>
		}
		if(keycode == 0x50 && prevkeycode != 0x50){
100010c8:	e0bffd17 	ldw	r2,-12(fp)
100010cc:	10801418 	cmpnei	r2,r2,80
100010d0:	1000051e 	bne	r2,zero,100010e8 <main+0xdcc>
100010d4:	e0bffb17 	ldw	r2,-20(fp)
100010d8:	10801420 	cmpeqi	r2,r2,80
100010dc:	1000021e 	bne	r2,zero,100010e8 <main+0xdcc>
			movePieceLeft();
100010e0:	00020c40 	call	100020c4 <movePieceLeft>
			drawBoard();
100010e4:	00024f00 	call	100024f0 <drawBoard>
		}
		if(keycode == 0x4F && prevkeycode != 0x4F){
100010e8:	e0bffd17 	ldw	r2,-12(fp)
100010ec:	108013d8 	cmpnei	r2,r2,79
100010f0:	1000051e 	bne	r2,zero,10001108 <main+0xdec>
100010f4:	e0bffb17 	ldw	r2,-20(fp)
100010f8:	108013e0 	cmpeqi	r2,r2,79
100010fc:	1000021e 	bne	r2,zero,10001108 <main+0xdec>
			movePieceRight();
10001100:	00022d80 	call	100022d8 <movePieceRight>
			drawBoard();
10001104:	00024f00 	call	100024f0 <drawBoard>
		}
		if(keycode == 0x52 && prevkeycode != 0x52){
10001108:	e0bffd17 	ldw	r2,-12(fp)
1000110c:	10801498 	cmpnei	r2,r2,82
10001110:	1000051e 	bne	r2,zero,10001128 <main+0xe0c>
10001114:	e0bffb17 	ldw	r2,-20(fp)
10001118:	108014a0 	cmpeqi	r2,r2,82
1000111c:	1000021e 	bne	r2,zero,10001128 <main+0xe0c>
			rotatePiece();
10001120:	0001db00 	call	10001db0 <rotatePiece>
			drawBoard();
10001124:	00024f00 	call	100024f0 <drawBoard>
		}
		updateCounter++;
10001128:	e0bffa17 	ldw	r2,-24(fp)
1000112c:	10800044 	addi	r2,r2,1
10001130:	e0bffa15 	stw	r2,-24(fp)
		updateCounter %= (20-level);
10001134:	d0a6cd17 	ldw	r2,-25804(gp)
10001138:	00c00504 	movi	r3,20
1000113c:	1885c83a 	sub	r2,r3,r2
10001140:	e0fffa17 	ldw	r3,-24(fp)
10001144:	1809883a 	mov	r4,r3
10001148:	100b883a 	mov	r5,r2
1000114c:	00039800 	call	10003980 <__modsi3>
10001150:	e0bffa15 	stw	r2,-24(fp)
		prevkeycode = keycode;
10001154:	e0bffd17 	ldw	r2,-12(fp)
10001158:	e0bffb15 	stw	r2,-20(fp)
	}//end while
1000115c:	003f1b06 	br	10000dcc <__alt_data_end+0xf8000dcc>

10001160 <initBoard>:
char fallingPieceX[4];
char fallingPieceY[4];
char fallingPieceType;
char has_landed;
int piecesAdded;
void initBoard(){
10001160:	defffb04 	addi	sp,sp,-20
10001164:	dfc00415 	stw	ra,16(sp)
10001168:	df000315 	stw	fp,12(sp)
1000116c:	dc000215 	stw	r16,8(sp)
10001170:	df000304 	addi	fp,sp,12
	int boardX, boardY;
	piecesAdded = 0;
10001174:	d026d015 	stw	zero,-25792(gp)
	level = 1;
10001178:	00840074 	movhi	r2,4097
1000117c:	109aad04 	addi	r2,r2,27316
10001180:	00c00044 	movi	r3,1
10001184:	10c00015 	stw	r3,0(r2)
	score = 0;
10001188:	00840074 	movhi	r2,4097
1000118c:	109aac04 	addi	r2,r2,27312
10001190:	10000015 	stw	zero,0(r2)
	for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001194:	e03ffd15 	stw	zero,-12(fp)
10001198:	00001606 	br	100011f4 <initBoard+0x94>
		for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
1000119c:	e03ffe15 	stw	zero,-8(fp)
100011a0:	00000e06 	br	100011dc <initBoard+0x7c>
			board[boardX][boardY] = 0;
100011a4:	04040074 	movhi	r16,4097
100011a8:	841acb04 	addi	r16,r16,27436
100011ac:	e0bffd17 	ldw	r2,-12(fp)
100011b0:	1009883a 	mov	r4,r2
100011b4:	01400604 	movi	r5,24
100011b8:	00039ec0 	call	100039ec <__mulsi3>
100011bc:	1007883a 	mov	r3,r2
100011c0:	e0bffe17 	ldw	r2,-8(fp)
100011c4:	1885883a 	add	r2,r3,r2
100011c8:	8085883a 	add	r2,r16,r2
100011cc:	10000005 	stb	zero,0(r2)
	int boardX, boardY;
	piecesAdded = 0;
	level = 1;
	score = 0;
	for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
		for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
100011d0:	e0bffe17 	ldw	r2,-8(fp)
100011d4:	10800044 	addi	r2,r2,1
100011d8:	e0bffe15 	stw	r2,-8(fp)
100011dc:	e0bffe17 	ldw	r2,-8(fp)
100011e0:	10800610 	cmplti	r2,r2,24
100011e4:	103fef1e 	bne	r2,zero,100011a4 <__alt_data_end+0xf80011a4>
void initBoard(){
	int boardX, boardY;
	piecesAdded = 0;
	level = 1;
	score = 0;
	for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
100011e8:	e0bffd17 	ldw	r2,-12(fp)
100011ec:	10800044 	addi	r2,r2,1
100011f0:	e0bffd15 	stw	r2,-12(fp)
100011f4:	e0bffd17 	ldw	r2,-12(fp)
100011f8:	10800290 	cmplti	r2,r2,10
100011fc:	103fe71e 	bne	r2,zero,1000119c <__alt_data_end+0xf800119c>
		for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
			board[boardX][boardY] = 0;
		}
	}
	addNextPiece();
10001200:	000121c0 	call	1000121c <addNextPiece>
}
10001204:	e6ffff04 	addi	sp,fp,-4
10001208:	dfc00217 	ldw	ra,8(sp)
1000120c:	df000117 	ldw	fp,4(sp)
10001210:	dc000017 	ldw	r16,0(sp)
10001214:	dec00304 	addi	sp,sp,12
10001218:	f800283a 	ret

1000121c <addNextPiece>:
//3 = Square (Yellow)
//4 = Z (Green)
//5 = Straight (Blue)
//6 = T (Purple)
//7 = L (Light Blue)
void addNextPiece(){
1000121c:	defff904 	addi	sp,sp,-28
10001220:	dfc00615 	stw	ra,24(sp)
10001224:	df000515 	stw	fp,20(sp)
10001228:	dc800415 	stw	r18,16(sp)
1000122c:	dc400315 	stw	r17,12(sp)
10001230:	dc000215 	stw	r16,8(sp)
10001234:	df000504 	addi	fp,sp,20
	int random_val = (*random_seed)/2;
10001238:	00800c04 	movi	r2,48
1000123c:	10800003 	ldbu	r2,0(r2)
10001240:	10803fcc 	andi	r2,r2,255
10001244:	1080201c 	xori	r2,r2,128
10001248:	10bfe004 	addi	r2,r2,-128
1000124c:	1006d7fa 	srli	r3,r2,31
10001250:	1885883a 	add	r2,r3,r2
10001254:	1005d07a 	srai	r2,r2,1
10001258:	10803fcc 	andi	r2,r2,255
1000125c:	1080201c 	xori	r2,r2,128
10001260:	10bfe004 	addi	r2,r2,-128
10001264:	e0bffc15 	stw	r2,-16(fp)
	piecesAdded++;
10001268:	d0a6d017 	ldw	r2,-25792(gp)
1000126c:	10800044 	addi	r2,r2,1
10001270:	d0a6d015 	stw	r2,-25792(gp)
	if(piecesAdded == ((level*10)+15)){
10001274:	00840074 	movhi	r2,4097
10001278:	109aad04 	addi	r2,r2,27316
1000127c:	10800017 	ldw	r2,0(r2)
10001280:	1009883a 	mov	r4,r2
10001284:	01400284 	movi	r5,10
10001288:	00039ec0 	call	100039ec <__mulsi3>
1000128c:	10c003c4 	addi	r3,r2,15
10001290:	d0a6d017 	ldw	r2,-25792(gp)
10001294:	1880081e 	bne	r3,r2,100012b8 <addNextPiece+0x9c>
		level++;
10001298:	00840074 	movhi	r2,4097
1000129c:	109aad04 	addi	r2,r2,27316
100012a0:	10800017 	ldw	r2,0(r2)
100012a4:	10c00044 	addi	r3,r2,1
100012a8:	00840074 	movhi	r2,4097
100012ac:	109aad04 	addi	r2,r2,27316
100012b0:	10c00015 	stw	r3,0(r2)
		piecesAdded = 0;
100012b4:	d026d015 	stw	zero,-25792(gp)
	}
	switch(random_val){
100012b8:	e0bffc17 	ldw	r2,-16(fp)
100012bc:	10800228 	cmpgeui	r2,r2,8
100012c0:	1000a11e 	bne	r2,zero,10001548 <addNextPiece+0x32c>
100012c4:	e0bffc17 	ldw	r2,-16(fp)
100012c8:	100690ba 	slli	r3,r2,2
100012cc:	00840034 	movhi	r2,4096
100012d0:	1084b804 	addi	r2,r2,4832
100012d4:	1885883a 	add	r2,r3,r2
100012d8:	10800017 	ldw	r2,0(r2)
100012dc:	1000683a 	jmp	r2
100012e0:	10001454 	ori	zero,r2,81
100012e4:	10001300 	call	11000130 <_gp+0xfe31b0>
100012e8:	10001354 	ori	zero,r2,77
100012ec:	100013ac 	andhi	zero,r2,78
100012f0:	10001400 	call	11000140 <_gp+0xfe31c0>
100012f4:	10001454 	ori	zero,r2,81
100012f8:	100014a0 	cmpeqi	zero,r2,82
100012fc:	100014f0 	cmpltui	zero,r2,83
		case 1: fallingPieceX[0] = 4; fallingPieceX[1] = 5; fallingPieceX[2] = 5; fallingPieceX[3] = 6; //S peice
10001300:	00800104 	movi	r2,4
10001304:	d0a6d245 	stb	r2,-25783(gp)
10001308:	d0a6d284 	addi	r2,gp,-25782
1000130c:	00c00144 	movi	r3,5
10001310:	10c00005 	stb	r3,0(r2)
10001314:	d0a6d2c4 	addi	r2,gp,-25781
10001318:	00c00144 	movi	r3,5
1000131c:	10c00005 	stb	r3,0(r2)
10001320:	d0a6d304 	addi	r2,gp,-25780
10001324:	00c00184 	movi	r3,6
10001328:	10c00005 	stb	r3,0(r2)
				fallingPieceY[0] = 1; fallingPieceY[1] = 1; fallingPieceY[2] = 0; fallingPieceY[3] = 0;
1000132c:	00800044 	movi	r2,1
10001330:	d0a6d105 	stb	r2,-25788(gp)
10001334:	d0a6d144 	addi	r2,gp,-25787
10001338:	00c00044 	movi	r3,1
1000133c:	10c00005 	stb	r3,0(r2)
10001340:	d0a6d184 	addi	r2,gp,-25786
10001344:	10000005 	stb	zero,0(r2)
10001348:	d0a6d1c4 	addi	r2,gp,-25785
1000134c:	10000005 	stb	zero,0(r2)
				break;
10001350:	00007d06 	br	10001548 <addNextPiece+0x32c>
		case 2: fallingPieceX[0] = 4; fallingPieceX[1] = 4; fallingPieceX[2] = 5; fallingPieceX[3] = 6; //J peice
10001354:	00800104 	movi	r2,4
10001358:	d0a6d245 	stb	r2,-25783(gp)
1000135c:	d0a6d284 	addi	r2,gp,-25782
10001360:	00c00104 	movi	r3,4
10001364:	10c00005 	stb	r3,0(r2)
10001368:	d0a6d2c4 	addi	r2,gp,-25781
1000136c:	00c00144 	movi	r3,5
10001370:	10c00005 	stb	r3,0(r2)
10001374:	d0a6d304 	addi	r2,gp,-25780
10001378:	00c00184 	movi	r3,6
1000137c:	10c00005 	stb	r3,0(r2)
				fallingPieceY[0] = 0; fallingPieceY[1] = 1; fallingPieceY[2] = 1; fallingPieceY[3] = 1;
10001380:	d026d105 	stb	zero,-25788(gp)
10001384:	d0a6d144 	addi	r2,gp,-25787
10001388:	00c00044 	movi	r3,1
1000138c:	10c00005 	stb	r3,0(r2)
10001390:	d0a6d184 	addi	r2,gp,-25786
10001394:	00c00044 	movi	r3,1
10001398:	10c00005 	stb	r3,0(r2)
1000139c:	d0a6d1c4 	addi	r2,gp,-25785
100013a0:	00c00044 	movi	r3,1
100013a4:	10c00005 	stb	r3,0(r2)
				break;
100013a8:	00006706 	br	10001548 <addNextPiece+0x32c>
		case 3: fallingPieceX[0] = 4; fallingPieceX[1] = 4; fallingPieceX[2] = 5; fallingPieceX[3] = 5; //Square peice
100013ac:	00800104 	movi	r2,4
100013b0:	d0a6d245 	stb	r2,-25783(gp)
100013b4:	d0a6d284 	addi	r2,gp,-25782
100013b8:	00c00104 	movi	r3,4
100013bc:	10c00005 	stb	r3,0(r2)
100013c0:	d0a6d2c4 	addi	r2,gp,-25781
100013c4:	00c00144 	movi	r3,5
100013c8:	10c00005 	stb	r3,0(r2)
100013cc:	d0a6d304 	addi	r2,gp,-25780
100013d0:	00c00144 	movi	r3,5
100013d4:	10c00005 	stb	r3,0(r2)
				fallingPieceY[0] = 0; fallingPieceY[1] = 1; fallingPieceY[2] = 0; fallingPieceY[3] = 1;
100013d8:	d026d105 	stb	zero,-25788(gp)
100013dc:	d0a6d144 	addi	r2,gp,-25787
100013e0:	00c00044 	movi	r3,1
100013e4:	10c00005 	stb	r3,0(r2)
100013e8:	d0a6d184 	addi	r2,gp,-25786
100013ec:	10000005 	stb	zero,0(r2)
100013f0:	d0a6d1c4 	addi	r2,gp,-25785
100013f4:	00c00044 	movi	r3,1
100013f8:	10c00005 	stb	r3,0(r2)
				break;
100013fc:	00005206 	br	10001548 <addNextPiece+0x32c>
		case 4: fallingPieceX[0] = 4; fallingPieceX[1] = 5; fallingPieceX[2] = 5; fallingPieceX[3] = 6; //Z peice
10001400:	00800104 	movi	r2,4
10001404:	d0a6d245 	stb	r2,-25783(gp)
10001408:	d0a6d284 	addi	r2,gp,-25782
1000140c:	00c00144 	movi	r3,5
10001410:	10c00005 	stb	r3,0(r2)
10001414:	d0a6d2c4 	addi	r2,gp,-25781
10001418:	00c00144 	movi	r3,5
1000141c:	10c00005 	stb	r3,0(r2)
10001420:	d0a6d304 	addi	r2,gp,-25780
10001424:	00c00184 	movi	r3,6
10001428:	10c00005 	stb	r3,0(r2)
				fallingPieceY[0] = 0; fallingPieceY[1] = 0; fallingPieceY[2] = 1; fallingPieceY[3] = 1;
1000142c:	d026d105 	stb	zero,-25788(gp)
10001430:	d0a6d144 	addi	r2,gp,-25787
10001434:	10000005 	stb	zero,0(r2)
10001438:	d0a6d184 	addi	r2,gp,-25786
1000143c:	00c00044 	movi	r3,1
10001440:	10c00005 	stb	r3,0(r2)
10001444:	d0a6d1c4 	addi	r2,gp,-25785
10001448:	00c00044 	movi	r3,1
1000144c:	10c00005 	stb	r3,0(r2)
				break;
10001450:	00003d06 	br	10001548 <addNextPiece+0x32c>
		case 0:
		case 5: fallingPieceX[0] = 3; fallingPieceX[1] = 4; fallingPieceX[2] = 5; fallingPieceX[3] = 6; //Straight peice
10001454:	008000c4 	movi	r2,3
10001458:	d0a6d245 	stb	r2,-25783(gp)
1000145c:	d0a6d284 	addi	r2,gp,-25782
10001460:	00c00104 	movi	r3,4
10001464:	10c00005 	stb	r3,0(r2)
10001468:	d0a6d2c4 	addi	r2,gp,-25781
1000146c:	00c00144 	movi	r3,5
10001470:	10c00005 	stb	r3,0(r2)
10001474:	d0a6d304 	addi	r2,gp,-25780
10001478:	00c00184 	movi	r3,6
1000147c:	10c00005 	stb	r3,0(r2)
				fallingPieceY[0] = 0; fallingPieceY[1] = 0; fallingPieceY[2] = 0; fallingPieceY[3] = 0;
10001480:	d026d105 	stb	zero,-25788(gp)
10001484:	d0a6d144 	addi	r2,gp,-25787
10001488:	10000005 	stb	zero,0(r2)
1000148c:	d0a6d184 	addi	r2,gp,-25786
10001490:	10000005 	stb	zero,0(r2)
10001494:	d0a6d1c4 	addi	r2,gp,-25785
10001498:	10000005 	stb	zero,0(r2)
				break;
1000149c:	00002a06 	br	10001548 <addNextPiece+0x32c>
		case 6: fallingPieceX[0] = 4; fallingPieceX[1] = 5; fallingPieceX[2] = 5; fallingPieceX[3] = 6; //T peice
100014a0:	00800104 	movi	r2,4
100014a4:	d0a6d245 	stb	r2,-25783(gp)
100014a8:	d0a6d284 	addi	r2,gp,-25782
100014ac:	00c00144 	movi	r3,5
100014b0:	10c00005 	stb	r3,0(r2)
100014b4:	d0a6d2c4 	addi	r2,gp,-25781
100014b8:	00c00144 	movi	r3,5
100014bc:	10c00005 	stb	r3,0(r2)
100014c0:	d0a6d304 	addi	r2,gp,-25780
100014c4:	00c00184 	movi	r3,6
100014c8:	10c00005 	stb	r3,0(r2)
				fallingPieceY[0] = 0; fallingPieceY[1] = 0; fallingPieceY[2] = 1; fallingPieceY[3] = 0;
100014cc:	d026d105 	stb	zero,-25788(gp)
100014d0:	d0a6d144 	addi	r2,gp,-25787
100014d4:	10000005 	stb	zero,0(r2)
100014d8:	d0a6d184 	addi	r2,gp,-25786
100014dc:	00c00044 	movi	r3,1
100014e0:	10c00005 	stb	r3,0(r2)
100014e4:	d0a6d1c4 	addi	r2,gp,-25785
100014e8:	10000005 	stb	zero,0(r2)
				break;
100014ec:	00001606 	br	10001548 <addNextPiece+0x32c>
		case 7: fallingPieceX[0] = 4; fallingPieceX[1] = 5; fallingPieceX[2] = 6; fallingPieceX[3] = 6; //L peice
100014f0:	00800104 	movi	r2,4
100014f4:	d0a6d245 	stb	r2,-25783(gp)
100014f8:	d0a6d284 	addi	r2,gp,-25782
100014fc:	00c00144 	movi	r3,5
10001500:	10c00005 	stb	r3,0(r2)
10001504:	d0a6d2c4 	addi	r2,gp,-25781
10001508:	00c00184 	movi	r3,6
1000150c:	10c00005 	stb	r3,0(r2)
10001510:	d0a6d304 	addi	r2,gp,-25780
10001514:	00c00184 	movi	r3,6
10001518:	10c00005 	stb	r3,0(r2)
				fallingPieceY[0] = 1; fallingPieceY[1] = 1; fallingPieceY[2] = 1; fallingPieceY[3] = 0;
1000151c:	00800044 	movi	r2,1
10001520:	d0a6d105 	stb	r2,-25788(gp)
10001524:	d0a6d144 	addi	r2,gp,-25787
10001528:	00c00044 	movi	r3,1
1000152c:	10c00005 	stb	r3,0(r2)
10001530:	d0a6d184 	addi	r2,gp,-25786
10001534:	00c00044 	movi	r3,1
10001538:	10c00005 	stb	r3,0(r2)
1000153c:	d0a6d1c4 	addi	r2,gp,-25785
10001540:	10000005 	stb	zero,0(r2)
				break;
10001544:	0001883a 	nop
	}
	fallingPieceType = (char) random_val ? random_val : 5;
10001548:	e0bffc17 	ldw	r2,-16(fp)
1000154c:	10803fcc 	andi	r2,r2,255
10001550:	1080201c 	xori	r2,r2,128
10001554:	10bfe004 	addi	r2,r2,-128
10001558:	10000226 	beq	r2,zero,10001564 <addNextPiece+0x348>
1000155c:	e0bffc17 	ldw	r2,-16(fp)
10001560:	00000106 	br	10001568 <addNextPiece+0x34c>
10001564:	00800144 	movi	r2,5
10001568:	d0a6cf05 	stb	r2,-25796(gp)
	printf("New piece added: %d\n", (int) fallingPieceType);
1000156c:	d0a6cf03 	ldbu	r2,-25796(gp)
10001570:	10803fcc 	andi	r2,r2,255
10001574:	1080201c 	xori	r2,r2,128
10001578:	10bfe004 	addi	r2,r2,-128
1000157c:	01040074 	movhi	r4,4097
10001580:	210c5204 	addi	r4,r4,12616
10001584:	100b883a 	mov	r5,r2
10001588:	0003a400 	call	10003a40 <printf>
	int i;
	for (i = 0; i<4; i++){
1000158c:	e03ffb15 	stw	zero,-20(fp)
10001590:	00001906 	br	100015f8 <addNextPiece+0x3dc>
		board[(int) fallingPieceX[i]][(int) fallingPieceY[i]] = fallingPieceType;
10001594:	e0fffb17 	ldw	r3,-20(fp)
10001598:	d0a6d244 	addi	r2,gp,-25783
1000159c:	1885883a 	add	r2,r3,r2
100015a0:	10800003 	ldbu	r2,0(r2)
100015a4:	11003fcc 	andi	r4,r2,255
100015a8:	2100201c 	xori	r4,r4,128
100015ac:	213fe004 	addi	r4,r4,-128
100015b0:	e0fffb17 	ldw	r3,-20(fp)
100015b4:	d0a6d104 	addi	r2,gp,-25788
100015b8:	1885883a 	add	r2,r3,r2
100015bc:	10800003 	ldbu	r2,0(r2)
100015c0:	14803fcc 	andi	r18,r2,255
100015c4:	9480201c 	xori	r18,r18,128
100015c8:	94bfe004 	addi	r18,r18,-128
100015cc:	d466cf03 	ldbu	r17,-25796(gp)
100015d0:	04040074 	movhi	r16,4097
100015d4:	841acb04 	addi	r16,r16,27436
100015d8:	01400604 	movi	r5,24
100015dc:	00039ec0 	call	100039ec <__mulsi3>
100015e0:	1485883a 	add	r2,r2,r18
100015e4:	8085883a 	add	r2,r16,r2
100015e8:	14400005 	stb	r17,0(r2)
				break;
	}
	fallingPieceType = (char) random_val ? random_val : 5;
	printf("New piece added: %d\n", (int) fallingPieceType);
	int i;
	for (i = 0; i<4; i++){
100015ec:	e0bffb17 	ldw	r2,-20(fp)
100015f0:	10800044 	addi	r2,r2,1
100015f4:	e0bffb15 	stw	r2,-20(fp)
100015f8:	e0bffb17 	ldw	r2,-20(fp)
100015fc:	10800110 	cmplti	r2,r2,4
10001600:	103fe41e 	bne	r2,zero,10001594 <__alt_data_end+0xf8001594>
		board[(int) fallingPieceX[i]][(int) fallingPieceY[i]] = fallingPieceType;
	}
	has_landed = 0;
10001604:	d026d205 	stb	zero,-25784(gp)
}
10001608:	e6fffd04 	addi	sp,fp,-12
1000160c:	dfc00417 	ldw	ra,16(sp)
10001610:	df000317 	ldw	fp,12(sp)
10001614:	dc800217 	ldw	r18,8(sp)
10001618:	dc400117 	ldw	r17,4(sp)
1000161c:	dc000017 	ldw	r16,0(sp)
10001620:	dec00504 	addi	sp,sp,20
10001624:	f800283a 	ret

10001628 <updateBoard>:

void updateBoard(){
10001628:	defff904 	addi	sp,sp,-28
1000162c:	dfc00615 	stw	ra,24(sp)
10001630:	df000515 	stw	fp,20(sp)
10001634:	dc800415 	stw	r18,16(sp)
10001638:	dc400315 	stw	r17,12(sp)
1000163c:	dc000215 	stw	r16,8(sp)
10001640:	df000504 	addi	fp,sp,20
	//Check if next move would be legal
	//If so, then erase the current location and move all the poeces down by 1
	if(has_landed==0){ //Only update the board if a peice is falling
10001644:	d0a6d203 	ldbu	r2,-25784(gp)
10001648:	10803fcc 	andi	r2,r2,255
1000164c:	1080201c 	xori	r2,r2,128
10001650:	10bfe004 	addi	r2,r2,-128
10001654:	1000951e 	bne	r2,zero,100018ac <updateBoard+0x284>
		int i;
		for (i = 0; i<4; i++){
10001658:	e03ffb15 	stw	zero,-20(fp)
1000165c:	00001806 	br	100016c0 <updateBoard+0x98>
			board[(int)fallingPieceX[i]][(int)fallingPieceY[i]] = 0;
10001660:	e0fffb17 	ldw	r3,-20(fp)
10001664:	d0a6d244 	addi	r2,gp,-25783
10001668:	1885883a 	add	r2,r3,r2
1000166c:	10800003 	ldbu	r2,0(r2)
10001670:	11003fcc 	andi	r4,r2,255
10001674:	2100201c 	xori	r4,r4,128
10001678:	213fe004 	addi	r4,r4,-128
1000167c:	e0fffb17 	ldw	r3,-20(fp)
10001680:	d0a6d104 	addi	r2,gp,-25788
10001684:	1885883a 	add	r2,r3,r2
10001688:	10800003 	ldbu	r2,0(r2)
1000168c:	14403fcc 	andi	r17,r2,255
10001690:	8c40201c 	xori	r17,r17,128
10001694:	8c7fe004 	addi	r17,r17,-128
10001698:	04040074 	movhi	r16,4097
1000169c:	841acb04 	addi	r16,r16,27436
100016a0:	01400604 	movi	r5,24
100016a4:	00039ec0 	call	100039ec <__mulsi3>
100016a8:	1445883a 	add	r2,r2,r17
100016ac:	8085883a 	add	r2,r16,r2
100016b0:	10000005 	stb	zero,0(r2)
void updateBoard(){
	//Check if next move would be legal
	//If so, then erase the current location and move all the poeces down by 1
	if(has_landed==0){ //Only update the board if a peice is falling
		int i;
		for (i = 0; i<4; i++){
100016b4:	e0bffb17 	ldw	r2,-20(fp)
100016b8:	10800044 	addi	r2,r2,1
100016bc:	e0bffb15 	stw	r2,-20(fp)
100016c0:	e0bffb17 	ldw	r2,-20(fp)
100016c4:	10800110 	cmplti	r2,r2,4
100016c8:	103fe51e 	bne	r2,zero,10001660 <__alt_data_end+0xf8001660>
			board[(int)fallingPieceX[i]][(int)fallingPieceY[i]] = 0;
		}
		int min_landing = BOARD_Y_HEIGHT;
100016cc:	00800604 	movi	r2,24
100016d0:	e0bffc15 	stw	r2,-16(fp)
		for (i = 0; i<4; i++){
100016d4:	e03ffb15 	stw	zero,-20(fp)
100016d8:	00003a06 	br	100017c4 <updateBoard+0x19c>
			if(board[(int) fallingPieceX[i]][(int) fallingPieceY[i]+1] != 0 || (int) fallingPieceY[i]+1 >= BOARD_Y_HEIGHT){
100016dc:	e0fffb17 	ldw	r3,-20(fp)
100016e0:	d0a6d244 	addi	r2,gp,-25783
100016e4:	1885883a 	add	r2,r3,r2
100016e8:	10800003 	ldbu	r2,0(r2)
100016ec:	11003fcc 	andi	r4,r2,255
100016f0:	2100201c 	xori	r4,r4,128
100016f4:	213fe004 	addi	r4,r4,-128
100016f8:	e0fffb17 	ldw	r3,-20(fp)
100016fc:	d0a6d104 	addi	r2,gp,-25788
10001700:	1885883a 	add	r2,r3,r2
10001704:	10800003 	ldbu	r2,0(r2)
10001708:	10803fcc 	andi	r2,r2,255
1000170c:	1080201c 	xori	r2,r2,128
10001710:	10bfe004 	addi	r2,r2,-128
10001714:	14400044 	addi	r17,r2,1
10001718:	04040074 	movhi	r16,4097
1000171c:	841acb04 	addi	r16,r16,27436
10001720:	01400604 	movi	r5,24
10001724:	00039ec0 	call	100039ec <__mulsi3>
10001728:	1445883a 	add	r2,r2,r17
1000172c:	8085883a 	add	r2,r16,r2
10001730:	10800003 	ldbu	r2,0(r2)
10001734:	10803fcc 	andi	r2,r2,255
10001738:	1080201c 	xori	r2,r2,128
1000173c:	10bfe004 	addi	r2,r2,-128
10001740:	10000a1e 	bne	r2,zero,1000176c <updateBoard+0x144>
10001744:	e0fffb17 	ldw	r3,-20(fp)
10001748:	d0a6d104 	addi	r2,gp,-25788
1000174c:	1885883a 	add	r2,r3,r2
10001750:	10800003 	ldbu	r2,0(r2)
10001754:	10803fcc 	andi	r2,r2,255
10001758:	1080201c 	xori	r2,r2,128
1000175c:	10bfe004 	addi	r2,r2,-128
10001760:	10800044 	addi	r2,r2,1
10001764:	10800610 	cmplti	r2,r2,24
10001768:	1000131e 	bne	r2,zero,100017b8 <updateBoard+0x190>
				has_landed = 1;
1000176c:	00800044 	movi	r2,1
10001770:	d0a6d205 	stb	r2,-25784(gp)
				if(min_landing > fallingPieceY[i]){
10001774:	e0fffb17 	ldw	r3,-20(fp)
10001778:	d0a6d104 	addi	r2,gp,-25788
1000177c:	1885883a 	add	r2,r3,r2
10001780:	10800003 	ldbu	r2,0(r2)
10001784:	10c03fcc 	andi	r3,r2,255
10001788:	18c0201c 	xori	r3,r3,128
1000178c:	18ffe004 	addi	r3,r3,-128
10001790:	e0bffc17 	ldw	r2,-16(fp)
10001794:	1880080e 	bge	r3,r2,100017b8 <updateBoard+0x190>
					min_landing = fallingPieceY[i];
10001798:	e0fffb17 	ldw	r3,-20(fp)
1000179c:	d0a6d104 	addi	r2,gp,-25788
100017a0:	1885883a 	add	r2,r3,r2
100017a4:	10800003 	ldbu	r2,0(r2)
100017a8:	10803fcc 	andi	r2,r2,255
100017ac:	1080201c 	xori	r2,r2,128
100017b0:	10bfe004 	addi	r2,r2,-128
100017b4:	e0bffc15 	stw	r2,-16(fp)
		int i;
		for (i = 0; i<4; i++){
			board[(int)fallingPieceX[i]][(int)fallingPieceY[i]] = 0;
		}
		int min_landing = BOARD_Y_HEIGHT;
		for (i = 0; i<4; i++){
100017b8:	e0bffb17 	ldw	r2,-20(fp)
100017bc:	10800044 	addi	r2,r2,1
100017c0:	e0bffb15 	stw	r2,-20(fp)
100017c4:	e0bffb17 	ldw	r2,-20(fp)
100017c8:	10800110 	cmplti	r2,r2,4
100017cc:	103fc31e 	bne	r2,zero,100016dc <__alt_data_end+0xf80016dc>
				if(min_landing > fallingPieceY[i]){
					min_landing = fallingPieceY[i];
				}
			}
		}
		if(has_landed && min_landing <= 1){
100017d0:	d0a6d203 	ldbu	r2,-25784(gp)
100017d4:	10803fcc 	andi	r2,r2,255
100017d8:	1080201c 	xori	r2,r2,128
100017dc:	10bfe004 	addi	r2,r2,-128
100017e0:	10000526 	beq	r2,zero,100017f8 <updateBoard+0x1d0>
100017e4:	e0bffc17 	ldw	r2,-16(fp)
100017e8:	10800088 	cmpgei	r2,r2,2
100017ec:	1000021e 	bne	r2,zero,100017f8 <updateBoard+0x1d0>
			processLoss();
100017f0:	00018ec0 	call	100018ec <processLoss>
			return;
100017f4:	00003506 	br	100018cc <updateBoard+0x2a4>
		}
		for (i = 0; i<4; i++){
100017f8:	e03ffb15 	stw	zero,-20(fp)
100017fc:	00002806 	br	100018a0 <updateBoard+0x278>
			if(has_landed==0){ //Next move down is still legal, move the piece down
10001800:	d0a6d203 	ldbu	r2,-25784(gp)
10001804:	10803fcc 	andi	r2,r2,255
10001808:	1080201c 	xori	r2,r2,128
1000180c:	10bfe004 	addi	r2,r2,-128
10001810:	10000a1e 	bne	r2,zero,1000183c <updateBoard+0x214>
				fallingPieceY[i]++;
10001814:	e0fffb17 	ldw	r3,-20(fp)
10001818:	d0a6d104 	addi	r2,gp,-25788
1000181c:	1885883a 	add	r2,r3,r2
10001820:	10800003 	ldbu	r2,0(r2)
10001824:	10800044 	addi	r2,r2,1
10001828:	1009883a 	mov	r4,r2
1000182c:	e0fffb17 	ldw	r3,-20(fp)
10001830:	d0a6d104 	addi	r2,gp,-25788
10001834:	1885883a 	add	r2,r3,r2
10001838:	11000005 	stb	r4,0(r2)
			}
			board[(int) fallingPieceX[i]][(int) fallingPieceY[i]] = fallingPieceType;
1000183c:	e0fffb17 	ldw	r3,-20(fp)
10001840:	d0a6d244 	addi	r2,gp,-25783
10001844:	1885883a 	add	r2,r3,r2
10001848:	10800003 	ldbu	r2,0(r2)
1000184c:	11003fcc 	andi	r4,r2,255
10001850:	2100201c 	xori	r4,r4,128
10001854:	213fe004 	addi	r4,r4,-128
10001858:	e0fffb17 	ldw	r3,-20(fp)
1000185c:	d0a6d104 	addi	r2,gp,-25788
10001860:	1885883a 	add	r2,r3,r2
10001864:	10800003 	ldbu	r2,0(r2)
10001868:	14803fcc 	andi	r18,r2,255
1000186c:	9480201c 	xori	r18,r18,128
10001870:	94bfe004 	addi	r18,r18,-128
10001874:	d466cf03 	ldbu	r17,-25796(gp)
10001878:	04040074 	movhi	r16,4097
1000187c:	841acb04 	addi	r16,r16,27436
10001880:	01400604 	movi	r5,24
10001884:	00039ec0 	call	100039ec <__mulsi3>
10001888:	1485883a 	add	r2,r2,r18
1000188c:	8085883a 	add	r2,r16,r2
10001890:	14400005 	stb	r17,0(r2)
		}
		if(has_landed && min_landing <= 1){
			processLoss();
			return;
		}
		for (i = 0; i<4; i++){
10001894:	e0bffb17 	ldw	r2,-20(fp)
10001898:	10800044 	addi	r2,r2,1
1000189c:	e0bffb15 	stw	r2,-20(fp)
100018a0:	e0bffb17 	ldw	r2,-20(fp)
100018a4:	10800110 	cmplti	r2,r2,4
100018a8:	103fd51e 	bne	r2,zero,10001800 <__alt_data_end+0xf8001800>
				fallingPieceY[i]++;
			}
			board[(int) fallingPieceX[i]][(int) fallingPieceY[i]] = fallingPieceType;
		}
	}
	if(has_landed==1){
100018ac:	d0a6d203 	ldbu	r2,-25784(gp)
100018b0:	10803fcc 	andi	r2,r2,255
100018b4:	1080201c 	xori	r2,r2,128
100018b8:	10bfe004 	addi	r2,r2,-128
100018bc:	10800058 	cmpnei	r2,r2,1
100018c0:	1000021e 	bne	r2,zero,100018cc <updateBoard+0x2a4>
		//printf("Piece Landed, adding new piece: %d\n",(int) has_landed);
		checkForRowClear();
100018c4:	0001a340 	call	10001a34 <checkForRowClear>
		addNextPiece();
100018c8:	000121c0 	call	1000121c <addNextPiece>
	}
}
100018cc:	e6fffd04 	addi	sp,fp,-12
100018d0:	dfc00417 	ldw	ra,16(sp)
100018d4:	df000317 	ldw	fp,12(sp)
100018d8:	dc800217 	ldw	r18,8(sp)
100018dc:	dc400117 	ldw	r17,4(sp)
100018e0:	dc000017 	ldw	r16,0(sp)
100018e4:	dec00504 	addi	sp,sp,20
100018e8:	f800283a 	ret

100018ec <processLoss>:

void processLoss(){
100018ec:	defffa04 	addi	sp,sp,-24
100018f0:	dfc00515 	stw	ra,20(sp)
100018f4:	df000415 	stw	fp,16(sp)
100018f8:	dc000315 	stw	r16,12(sp)
100018fc:	df000404 	addi	fp,sp,16
	int loop_flash;
	for(loop_flash = 0; loop_flash < 10; loop_flash++){
10001900:	e03ffc15 	stw	zero,-16(fp)
10001904:	00004106 	br	10001a0c <processLoss+0x120>
		int boardX, boardY;
		for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001908:	e03ffd15 	stw	zero,-12(fp)
1000190c:	00001706 	br	1000196c <processLoss+0x80>
			for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
10001910:	e03ffe15 	stw	zero,-8(fp)
10001914:	00000f06 	br	10001954 <processLoss+0x68>
				board[boardX][boardY] = -1;
10001918:	04040074 	movhi	r16,4097
1000191c:	841acb04 	addi	r16,r16,27436
10001920:	e0bffd17 	ldw	r2,-12(fp)
10001924:	1009883a 	mov	r4,r2
10001928:	01400604 	movi	r5,24
1000192c:	00039ec0 	call	100039ec <__mulsi3>
10001930:	1007883a 	mov	r3,r2
10001934:	e0bffe17 	ldw	r2,-8(fp)
10001938:	1885883a 	add	r2,r3,r2
1000193c:	8085883a 	add	r2,r16,r2
10001940:	00ffffc4 	movi	r3,-1
10001944:	10c00005 	stb	r3,0(r2)
void processLoss(){
	int loop_flash;
	for(loop_flash = 0; loop_flash < 10; loop_flash++){
		int boardX, boardY;
		for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
			for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
10001948:	e0bffe17 	ldw	r2,-8(fp)
1000194c:	10800044 	addi	r2,r2,1
10001950:	e0bffe15 	stw	r2,-8(fp)
10001954:	e0bffe17 	ldw	r2,-8(fp)
10001958:	10800610 	cmplti	r2,r2,24
1000195c:	103fee1e 	bne	r2,zero,10001918 <__alt_data_end+0xf8001918>

void processLoss(){
	int loop_flash;
	for(loop_flash = 0; loop_flash < 10; loop_flash++){
		int boardX, boardY;
		for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001960:	e0bffd17 	ldw	r2,-12(fp)
10001964:	10800044 	addi	r2,r2,1
10001968:	e0bffd15 	stw	r2,-12(fp)
1000196c:	e0bffd17 	ldw	r2,-12(fp)
10001970:	10800290 	cmplti	r2,r2,10
10001974:	103fe61e 	bne	r2,zero,10001910 <__alt_data_end+0xf8001910>
			for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
				board[boardX][boardY] = -1;
			}
		}
		drawBoard();
10001978:	00024f00 	call	100024f0 <drawBoard>
		usleep(20000);
1000197c:	01138804 	movi	r4,20000
10001980:	0010ac80 	call	10010ac8 <usleep>
		for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001984:	e03ffd15 	stw	zero,-12(fp)
10001988:	00001706 	br	100019e8 <processLoss+0xfc>
			for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
1000198c:	e03ffe15 	stw	zero,-8(fp)
10001990:	00000f06 	br	100019d0 <processLoss+0xe4>
				board[boardX][boardY] = -2;
10001994:	04040074 	movhi	r16,4097
10001998:	841acb04 	addi	r16,r16,27436
1000199c:	e0bffd17 	ldw	r2,-12(fp)
100019a0:	1009883a 	mov	r4,r2
100019a4:	01400604 	movi	r5,24
100019a8:	00039ec0 	call	100039ec <__mulsi3>
100019ac:	1007883a 	mov	r3,r2
100019b0:	e0bffe17 	ldw	r2,-8(fp)
100019b4:	1885883a 	add	r2,r3,r2
100019b8:	8085883a 	add	r2,r16,r2
100019bc:	00ffff84 	movi	r3,-2
100019c0:	10c00005 	stb	r3,0(r2)
			}
		}
		drawBoard();
		usleep(20000);
		for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
			for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
100019c4:	e0bffe17 	ldw	r2,-8(fp)
100019c8:	10800044 	addi	r2,r2,1
100019cc:	e0bffe15 	stw	r2,-8(fp)
100019d0:	e0bffe17 	ldw	r2,-8(fp)
100019d4:	10800610 	cmplti	r2,r2,24
100019d8:	103fee1e 	bne	r2,zero,10001994 <__alt_data_end+0xf8001994>
				board[boardX][boardY] = -1;
			}
		}
		drawBoard();
		usleep(20000);
		for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
100019dc:	e0bffd17 	ldw	r2,-12(fp)
100019e0:	10800044 	addi	r2,r2,1
100019e4:	e0bffd15 	stw	r2,-12(fp)
100019e8:	e0bffd17 	ldw	r2,-12(fp)
100019ec:	10800290 	cmplti	r2,r2,10
100019f0:	103fe61e 	bne	r2,zero,1000198c <__alt_data_end+0xf800198c>
			for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
				board[boardX][boardY] = -2;
			}
		}
		drawBoard();
100019f4:	00024f00 	call	100024f0 <drawBoard>
		usleep(20000);
100019f8:	01138804 	movi	r4,20000
100019fc:	0010ac80 	call	10010ac8 <usleep>
	}
}

void processLoss(){
	int loop_flash;
	for(loop_flash = 0; loop_flash < 10; loop_flash++){
10001a00:	e0bffc17 	ldw	r2,-16(fp)
10001a04:	10800044 	addi	r2,r2,1
10001a08:	e0bffc15 	stw	r2,-16(fp)
10001a0c:	e0bffc17 	ldw	r2,-16(fp)
10001a10:	10800290 	cmplti	r2,r2,10
10001a14:	103fbc1e 	bne	r2,zero,10001908 <__alt_data_end+0xf8001908>
			}
		}
		drawBoard();
		usleep(20000);
	}
	initBoard();
10001a18:	00011600 	call	10001160 <initBoard>
};
10001a1c:	e6ffff04 	addi	sp,fp,-4
10001a20:	dfc00217 	ldw	ra,8(sp)
10001a24:	df000117 	ldw	fp,4(sp)
10001a28:	dc000017 	ldw	r16,0(sp)
10001a2c:	dec00304 	addi	sp,sp,12
10001a30:	f800283a 	ret

10001a34 <checkForRowClear>:

void checkForRowClear(){
10001a34:	defff804 	addi	sp,sp,-32
10001a38:	dfc00715 	stw	ra,28(sp)
10001a3c:	df000615 	stw	fp,24(sp)
10001a40:	dc400515 	stw	r17,20(sp)
10001a44:	dc000415 	stw	r16,16(sp)
10001a48:	df000604 	addi	fp,sp,24
	int boardX, boardY;
	int has_empty;
	for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
10001a4c:	e03ffb15 	stw	zero,-20(fp)
10001a50:	0000cd06 	br	10001d88 <checkForRowClear+0x354>
		has_empty = 0;
10001a54:	e03ffc15 	stw	zero,-16(fp)
		for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001a58:	e03ffa15 	stw	zero,-24(fp)
10001a5c:	00001406 	br	10001ab0 <checkForRowClear+0x7c>
			if(board[boardX][boardY] == 0)
10001a60:	04040074 	movhi	r16,4097
10001a64:	841acb04 	addi	r16,r16,27436
10001a68:	e0bffa17 	ldw	r2,-24(fp)
10001a6c:	1009883a 	mov	r4,r2
10001a70:	01400604 	movi	r5,24
10001a74:	00039ec0 	call	100039ec <__mulsi3>
10001a78:	1007883a 	mov	r3,r2
10001a7c:	e0bffb17 	ldw	r2,-20(fp)
10001a80:	1885883a 	add	r2,r3,r2
10001a84:	8085883a 	add	r2,r16,r2
10001a88:	10800003 	ldbu	r2,0(r2)
10001a8c:	10803fcc 	andi	r2,r2,255
10001a90:	1080201c 	xori	r2,r2,128
10001a94:	10bfe004 	addi	r2,r2,-128
10001a98:	1000021e 	bne	r2,zero,10001aa4 <checkForRowClear+0x70>
				has_empty = 1;
10001a9c:	00800044 	movi	r2,1
10001aa0:	e0bffc15 	stw	r2,-16(fp)
void checkForRowClear(){
	int boardX, boardY;
	int has_empty;
	for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
		has_empty = 0;
		for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001aa4:	e0bffa17 	ldw	r2,-24(fp)
10001aa8:	10800044 	addi	r2,r2,1
10001aac:	e0bffa15 	stw	r2,-24(fp)
10001ab0:	e0bffa17 	ldw	r2,-24(fp)
10001ab4:	10800290 	cmplti	r2,r2,10
10001ab8:	103fe91e 	bne	r2,zero,10001a60 <__alt_data_end+0xf8001a60>
			if(board[boardX][boardY] == 0)
				has_empty = 1;
		}
		if(!has_empty){
10001abc:	e0bffc17 	ldw	r2,-16(fp)
10001ac0:	1000ae1e 	bne	r2,zero,10001d7c <checkForRowClear+0x348>
			score += 1;
10001ac4:	00840074 	movhi	r2,4097
10001ac8:	109aac04 	addi	r2,r2,27312
10001acc:	10800017 	ldw	r2,0(r2)
10001ad0:	10c00044 	addi	r3,r2,1
10001ad4:	00840074 	movhi	r2,4097
10001ad8:	109aac04 	addi	r2,r2,27312
10001adc:	10c00015 	stw	r3,0(r2)
			//Flash the row white, then black, then white again, then clear it. Pause the game while doing this:
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001ae0:	e03ffa15 	stw	zero,-24(fp)
10001ae4:	00000f06 	br	10001b24 <checkForRowClear+0xf0>
				board[boardX][boardY] = -1;
10001ae8:	04040074 	movhi	r16,4097
10001aec:	841acb04 	addi	r16,r16,27436
10001af0:	e0bffa17 	ldw	r2,-24(fp)
10001af4:	1009883a 	mov	r4,r2
10001af8:	01400604 	movi	r5,24
10001afc:	00039ec0 	call	100039ec <__mulsi3>
10001b00:	1007883a 	mov	r3,r2
10001b04:	e0bffb17 	ldw	r2,-20(fp)
10001b08:	1885883a 	add	r2,r3,r2
10001b0c:	8085883a 	add	r2,r16,r2
10001b10:	00ffffc4 	movi	r3,-1
10001b14:	10c00005 	stb	r3,0(r2)
				has_empty = 1;
		}
		if(!has_empty){
			score += 1;
			//Flash the row white, then black, then white again, then clear it. Pause the game while doing this:
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001b18:	e0bffa17 	ldw	r2,-24(fp)
10001b1c:	10800044 	addi	r2,r2,1
10001b20:	e0bffa15 	stw	r2,-24(fp)
10001b24:	e0bffa17 	ldw	r2,-24(fp)
10001b28:	10800290 	cmplti	r2,r2,10
10001b2c:	103fee1e 	bne	r2,zero,10001ae8 <__alt_data_end+0xf8001ae8>
				board[boardX][boardY] = -1;
			}
			drawBoard();
10001b30:	00024f00 	call	100024f0 <drawBoard>
			usleep(10000);
10001b34:	0109c404 	movi	r4,10000
10001b38:	0010ac80 	call	10010ac8 <usleep>
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001b3c:	e03ffa15 	stw	zero,-24(fp)
10001b40:	00000f06 	br	10001b80 <checkForRowClear+0x14c>
				board[boardX][boardY] = -2;
10001b44:	04040074 	movhi	r16,4097
10001b48:	841acb04 	addi	r16,r16,27436
10001b4c:	e0bffa17 	ldw	r2,-24(fp)
10001b50:	1009883a 	mov	r4,r2
10001b54:	01400604 	movi	r5,24
10001b58:	00039ec0 	call	100039ec <__mulsi3>
10001b5c:	1007883a 	mov	r3,r2
10001b60:	e0bffb17 	ldw	r2,-20(fp)
10001b64:	1885883a 	add	r2,r3,r2
10001b68:	8085883a 	add	r2,r16,r2
10001b6c:	00ffff84 	movi	r3,-2
10001b70:	10c00005 	stb	r3,0(r2)
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
				board[boardX][boardY] = -1;
			}
			drawBoard();
			usleep(10000);
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001b74:	e0bffa17 	ldw	r2,-24(fp)
10001b78:	10800044 	addi	r2,r2,1
10001b7c:	e0bffa15 	stw	r2,-24(fp)
10001b80:	e0bffa17 	ldw	r2,-24(fp)
10001b84:	10800290 	cmplti	r2,r2,10
10001b88:	103fee1e 	bne	r2,zero,10001b44 <__alt_data_end+0xf8001b44>
				board[boardX][boardY] = -2;
			}
			drawBoard();
10001b8c:	00024f00 	call	100024f0 <drawBoard>
			usleep(10000);
10001b90:	0109c404 	movi	r4,10000
10001b94:	0010ac80 	call	10010ac8 <usleep>
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001b98:	e03ffa15 	stw	zero,-24(fp)
10001b9c:	00000f06 	br	10001bdc <checkForRowClear+0x1a8>
				board[boardX][boardY] = -1;
10001ba0:	04040074 	movhi	r16,4097
10001ba4:	841acb04 	addi	r16,r16,27436
10001ba8:	e0bffa17 	ldw	r2,-24(fp)
10001bac:	1009883a 	mov	r4,r2
10001bb0:	01400604 	movi	r5,24
10001bb4:	00039ec0 	call	100039ec <__mulsi3>
10001bb8:	1007883a 	mov	r3,r2
10001bbc:	e0bffb17 	ldw	r2,-20(fp)
10001bc0:	1885883a 	add	r2,r3,r2
10001bc4:	8085883a 	add	r2,r16,r2
10001bc8:	00ffffc4 	movi	r3,-1
10001bcc:	10c00005 	stb	r3,0(r2)
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
				board[boardX][boardY] = -2;
			}
			drawBoard();
			usleep(10000);
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001bd0:	e0bffa17 	ldw	r2,-24(fp)
10001bd4:	10800044 	addi	r2,r2,1
10001bd8:	e0bffa15 	stw	r2,-24(fp)
10001bdc:	e0bffa17 	ldw	r2,-24(fp)
10001be0:	10800290 	cmplti	r2,r2,10
10001be4:	103fee1e 	bne	r2,zero,10001ba0 <__alt_data_end+0xf8001ba0>
				board[boardX][boardY] = -1;
			}
			drawBoard();
10001be8:	00024f00 	call	100024f0 <drawBoard>
			usleep(10000);
10001bec:	0109c404 	movi	r4,10000
10001bf0:	0010ac80 	call	10010ac8 <usleep>
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001bf4:	e03ffa15 	stw	zero,-24(fp)
10001bf8:	00000f06 	br	10001c38 <checkForRowClear+0x204>
				board[boardX][boardY] = -2;
10001bfc:	04040074 	movhi	r16,4097
10001c00:	841acb04 	addi	r16,r16,27436
10001c04:	e0bffa17 	ldw	r2,-24(fp)
10001c08:	1009883a 	mov	r4,r2
10001c0c:	01400604 	movi	r5,24
10001c10:	00039ec0 	call	100039ec <__mulsi3>
10001c14:	1007883a 	mov	r3,r2
10001c18:	e0bffb17 	ldw	r2,-20(fp)
10001c1c:	1885883a 	add	r2,r3,r2
10001c20:	8085883a 	add	r2,r16,r2
10001c24:	00ffff84 	movi	r3,-2
10001c28:	10c00005 	stb	r3,0(r2)
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
				board[boardX][boardY] = -1;
			}
			drawBoard();
			usleep(10000);
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001c2c:	e0bffa17 	ldw	r2,-24(fp)
10001c30:	10800044 	addi	r2,r2,1
10001c34:	e0bffa15 	stw	r2,-24(fp)
10001c38:	e0bffa17 	ldw	r2,-24(fp)
10001c3c:	10800290 	cmplti	r2,r2,10
10001c40:	103fee1e 	bne	r2,zero,10001bfc <__alt_data_end+0xf8001bfc>
				board[boardX][boardY] = -2;
			}
			drawBoard();
10001c44:	00024f00 	call	100024f0 <drawBoard>
			usleep(10000);
10001c48:	0109c404 	movi	r4,10000
10001c4c:	0010ac80 	call	10010ac8 <usleep>
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001c50:	e03ffa15 	stw	zero,-24(fp)
10001c54:	00000f06 	br	10001c94 <checkForRowClear+0x260>
				board[boardX][boardY] = -1;
10001c58:	04040074 	movhi	r16,4097
10001c5c:	841acb04 	addi	r16,r16,27436
10001c60:	e0bffa17 	ldw	r2,-24(fp)
10001c64:	1009883a 	mov	r4,r2
10001c68:	01400604 	movi	r5,24
10001c6c:	00039ec0 	call	100039ec <__mulsi3>
10001c70:	1007883a 	mov	r3,r2
10001c74:	e0bffb17 	ldw	r2,-20(fp)
10001c78:	1885883a 	add	r2,r3,r2
10001c7c:	8085883a 	add	r2,r16,r2
10001c80:	00ffffc4 	movi	r3,-1
10001c84:	10c00005 	stb	r3,0(r2)
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
				board[boardX][boardY] = -2;
			}
			drawBoard();
			usleep(10000);
			for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001c88:	e0bffa17 	ldw	r2,-24(fp)
10001c8c:	10800044 	addi	r2,r2,1
10001c90:	e0bffa15 	stw	r2,-24(fp)
10001c94:	e0bffa17 	ldw	r2,-24(fp)
10001c98:	10800290 	cmplti	r2,r2,10
10001c9c:	103fee1e 	bne	r2,zero,10001c58 <__alt_data_end+0xf8001c58>
				board[boardX][boardY] = -1;
			}
			drawBoard();
10001ca0:	00024f00 	call	100024f0 <drawBoard>
			usleep(10000);
10001ca4:	0109c404 	movi	r4,10000
10001ca8:	0010ac80 	call	10010ac8 <usleep>

			int boardYShift;
			for(boardYShift = boardY; boardYShift>0; boardYShift--){
10001cac:	e0bffb17 	ldw	r2,-20(fp)
10001cb0:	e0bffd15 	stw	r2,-12(fp)
10001cb4:	00002c06 	br	10001d68 <checkForRowClear+0x334>
				for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001cb8:	e03ffa15 	stw	zero,-24(fp)
10001cbc:	00002406 	br	10001d50 <checkForRowClear+0x31c>
					board[boardX][boardYShift] = board[boardX][boardYShift-1];
10001cc0:	e0bffd17 	ldw	r2,-12(fp)
10001cc4:	147fffc4 	addi	r17,r2,-1
10001cc8:	04040074 	movhi	r16,4097
10001ccc:	841acb04 	addi	r16,r16,27436
10001cd0:	e0bffa17 	ldw	r2,-24(fp)
10001cd4:	1009883a 	mov	r4,r2
10001cd8:	01400604 	movi	r5,24
10001cdc:	00039ec0 	call	100039ec <__mulsi3>
10001ce0:	1445883a 	add	r2,r2,r17
10001ce4:	8085883a 	add	r2,r16,r2
10001ce8:	14400003 	ldbu	r17,0(r2)
10001cec:	04040074 	movhi	r16,4097
10001cf0:	841acb04 	addi	r16,r16,27436
10001cf4:	e0bffa17 	ldw	r2,-24(fp)
10001cf8:	1009883a 	mov	r4,r2
10001cfc:	01400604 	movi	r5,24
10001d00:	00039ec0 	call	100039ec <__mulsi3>
10001d04:	1007883a 	mov	r3,r2
10001d08:	e0bffd17 	ldw	r2,-12(fp)
10001d0c:	1885883a 	add	r2,r3,r2
10001d10:	8085883a 	add	r2,r16,r2
10001d14:	14400005 	stb	r17,0(r2)
					board[boardX][boardYShift-1] = 0;
10001d18:	e0bffd17 	ldw	r2,-12(fp)
10001d1c:	147fffc4 	addi	r17,r2,-1
10001d20:	04040074 	movhi	r16,4097
10001d24:	841acb04 	addi	r16,r16,27436
10001d28:	e0bffa17 	ldw	r2,-24(fp)
10001d2c:	1009883a 	mov	r4,r2
10001d30:	01400604 	movi	r5,24
10001d34:	00039ec0 	call	100039ec <__mulsi3>
10001d38:	1445883a 	add	r2,r2,r17
10001d3c:	8085883a 	add	r2,r16,r2
10001d40:	10000005 	stb	zero,0(r2)
			drawBoard();
			usleep(10000);

			int boardYShift;
			for(boardYShift = boardY; boardYShift>0; boardYShift--){
				for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10001d44:	e0bffa17 	ldw	r2,-24(fp)
10001d48:	10800044 	addi	r2,r2,1
10001d4c:	e0bffa15 	stw	r2,-24(fp)
10001d50:	e0bffa17 	ldw	r2,-24(fp)
10001d54:	10800290 	cmplti	r2,r2,10
10001d58:	103fd91e 	bne	r2,zero,10001cc0 <__alt_data_end+0xf8001cc0>
			}
			drawBoard();
			usleep(10000);

			int boardYShift;
			for(boardYShift = boardY; boardYShift>0; boardYShift--){
10001d5c:	e0bffd17 	ldw	r2,-12(fp)
10001d60:	10bfffc4 	addi	r2,r2,-1
10001d64:	e0bffd15 	stw	r2,-12(fp)
10001d68:	e0bffd17 	ldw	r2,-12(fp)
10001d6c:	00bfd216 	blt	zero,r2,10001cb8 <__alt_data_end+0xf8001cb8>
				for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
					board[boardX][boardYShift] = board[boardX][boardYShift-1];
					board[boardX][boardYShift-1] = 0;
				}
			}
			boardY--;
10001d70:	e0bffb17 	ldw	r2,-20(fp)
10001d74:	10bfffc4 	addi	r2,r2,-1
10001d78:	e0bffb15 	stw	r2,-20(fp)
};

void checkForRowClear(){
	int boardX, boardY;
	int has_empty;
	for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
10001d7c:	e0bffb17 	ldw	r2,-20(fp)
10001d80:	10800044 	addi	r2,r2,1
10001d84:	e0bffb15 	stw	r2,-20(fp)
10001d88:	e0bffb17 	ldw	r2,-20(fp)
10001d8c:	10800610 	cmplti	r2,r2,24
10001d90:	103f301e 	bne	r2,zero,10001a54 <__alt_data_end+0xf8001a54>
				}
			}
			boardY--;
		}
	}
}
10001d94:	e6fffe04 	addi	sp,fp,-8
10001d98:	dfc00317 	ldw	ra,12(sp)
10001d9c:	df000217 	ldw	fp,8(sp)
10001da0:	dc400117 	ldw	r17,4(sp)
10001da4:	dc000017 	ldw	r16,0(sp)
10001da8:	dec00404 	addi	sp,sp,16
10001dac:	f800283a 	ret

10001db0 <rotatePiece>:

void rotatePiece(){
10001db0:	defff704 	addi	sp,sp,-36
10001db4:	dfc00815 	stw	ra,32(sp)
10001db8:	df000715 	stw	fp,28(sp)
10001dbc:	dc800615 	stw	r18,24(sp)
10001dc0:	dc400515 	stw	r17,20(sp)
10001dc4:	dc000415 	stw	r16,16(sp)
10001dc8:	df000704 	addi	fp,sp,28
	char fallingPieceCheckX[4];
	char fallingPieceCheckY[4];
	int i;
	int is_valid = 1;
10001dcc:	00800044 	movi	r2,1
10001dd0:	e0bffa15 	stw	r2,-24(fp)
	for (i = 0; i<4; i++){
10001dd4:	e03ff915 	stw	zero,-28(fp)
10001dd8:	00003a06 	br	10001ec4 <rotatePiece+0x114>
		board[fallingPieceX[i]][fallingPieceY[i]] = 0;
10001ddc:	e0fff917 	ldw	r3,-28(fp)
10001de0:	d0a6d244 	addi	r2,gp,-25783
10001de4:	1885883a 	add	r2,r3,r2
10001de8:	10800003 	ldbu	r2,0(r2)
10001dec:	11003fcc 	andi	r4,r2,255
10001df0:	2100201c 	xori	r4,r4,128
10001df4:	213fe004 	addi	r4,r4,-128
10001df8:	e0fff917 	ldw	r3,-28(fp)
10001dfc:	d0a6d104 	addi	r2,gp,-25788
10001e00:	1885883a 	add	r2,r3,r2
10001e04:	10800003 	ldbu	r2,0(r2)
10001e08:	14403fcc 	andi	r17,r2,255
10001e0c:	8c40201c 	xori	r17,r17,128
10001e10:	8c7fe004 	addi	r17,r17,-128
10001e14:	04040074 	movhi	r16,4097
10001e18:	841acb04 	addi	r16,r16,27436
10001e1c:	01400604 	movi	r5,24
10001e20:	00039ec0 	call	100039ec <__mulsi3>
10001e24:	1445883a 	add	r2,r2,r17
10001e28:	8085883a 	add	r2,r16,r2
10001e2c:	10000005 	stb	zero,0(r2)
		fallingPieceCheckX[i] = fallingPieceY[i]-fallingPieceY[1] + fallingPieceX[1];
10001e30:	e0fff917 	ldw	r3,-28(fp)
10001e34:	d0a6d104 	addi	r2,gp,-25788
10001e38:	1885883a 	add	r2,r3,r2
10001e3c:	10800003 	ldbu	r2,0(r2)
10001e40:	1007883a 	mov	r3,r2
10001e44:	d0a6d144 	addi	r2,gp,-25787
10001e48:	10800003 	ldbu	r2,0(r2)
10001e4c:	1885c83a 	sub	r2,r3,r2
10001e50:	1007883a 	mov	r3,r2
10001e54:	d0a6d284 	addi	r2,gp,-25782
10001e58:	10800003 	ldbu	r2,0(r2)
10001e5c:	1885883a 	add	r2,r3,r2
10001e60:	1009883a 	mov	r4,r2
10001e64:	e0fffb04 	addi	r3,fp,-20
10001e68:	e0bff917 	ldw	r2,-28(fp)
10001e6c:	1885883a 	add	r2,r3,r2
10001e70:	11000005 	stb	r4,0(r2)
		fallingPieceCheckY[i] = -(fallingPieceX[i]-fallingPieceX[1]) + fallingPieceY[1];
10001e74:	d0a6d284 	addi	r2,gp,-25782
10001e78:	10800003 	ldbu	r2,0(r2)
10001e7c:	1009883a 	mov	r4,r2
10001e80:	e0fff917 	ldw	r3,-28(fp)
10001e84:	d0a6d244 	addi	r2,gp,-25783
10001e88:	1885883a 	add	r2,r3,r2
10001e8c:	10800003 	ldbu	r2,0(r2)
10001e90:	2085c83a 	sub	r2,r4,r2
10001e94:	1007883a 	mov	r3,r2
10001e98:	d0a6d144 	addi	r2,gp,-25787
10001e9c:	10800003 	ldbu	r2,0(r2)
10001ea0:	1885883a 	add	r2,r3,r2
10001ea4:	1009883a 	mov	r4,r2
10001ea8:	e0fffc04 	addi	r3,fp,-16
10001eac:	e0bff917 	ldw	r2,-28(fp)
10001eb0:	1885883a 	add	r2,r3,r2
10001eb4:	11000005 	stb	r4,0(r2)
void rotatePiece(){
	char fallingPieceCheckX[4];
	char fallingPieceCheckY[4];
	int i;
	int is_valid = 1;
	for (i = 0; i<4; i++){
10001eb8:	e0bff917 	ldw	r2,-28(fp)
10001ebc:	10800044 	addi	r2,r2,1
10001ec0:	e0bff915 	stw	r2,-28(fp)
10001ec4:	e0bff917 	ldw	r2,-28(fp)
10001ec8:	10800110 	cmplti	r2,r2,4
10001ecc:	103fc31e 	bne	r2,zero,10001ddc <__alt_data_end+0xf8001ddc>
		board[fallingPieceX[i]][fallingPieceY[i]] = 0;
		fallingPieceCheckX[i] = fallingPieceY[i]-fallingPieceY[1] + fallingPieceX[1];
		fallingPieceCheckY[i] = -(fallingPieceX[i]-fallingPieceX[1]) + fallingPieceY[1];
	}
	for (i = 0; i<4; i++){
10001ed0:	e03ff915 	stw	zero,-28(fp)
10001ed4:	00004006 	br	10001fd8 <rotatePiece+0x228>
		if(board[fallingPieceCheckX[i]][fallingPieceCheckY[i]] != 0 || fallingPieceCheckX[i] < 0 || fallingPieceCheckX[i] >= BOARD_X_WIDTH
10001ed8:	e0fffb04 	addi	r3,fp,-20
10001edc:	e0bff917 	ldw	r2,-28(fp)
10001ee0:	1885883a 	add	r2,r3,r2
10001ee4:	10800003 	ldbu	r2,0(r2)
10001ee8:	11003fcc 	andi	r4,r2,255
10001eec:	2100201c 	xori	r4,r4,128
10001ef0:	213fe004 	addi	r4,r4,-128
10001ef4:	e0fffc04 	addi	r3,fp,-16
10001ef8:	e0bff917 	ldw	r2,-28(fp)
10001efc:	1885883a 	add	r2,r3,r2
10001f00:	10800003 	ldbu	r2,0(r2)
10001f04:	14403fcc 	andi	r17,r2,255
10001f08:	8c40201c 	xori	r17,r17,128
10001f0c:	8c7fe004 	addi	r17,r17,-128
10001f10:	04040074 	movhi	r16,4097
10001f14:	841acb04 	addi	r16,r16,27436
10001f18:	01400604 	movi	r5,24
10001f1c:	00039ec0 	call	100039ec <__mulsi3>
10001f20:	1445883a 	add	r2,r2,r17
10001f24:	8085883a 	add	r2,r16,r2
10001f28:	10800003 	ldbu	r2,0(r2)
10001f2c:	10803fcc 	andi	r2,r2,255
10001f30:	1080201c 	xori	r2,r2,128
10001f34:	10bfe004 	addi	r2,r2,-128
10001f38:	1000221e 	bne	r2,zero,10001fc4 <rotatePiece+0x214>
10001f3c:	e0fffb04 	addi	r3,fp,-20
10001f40:	e0bff917 	ldw	r2,-28(fp)
10001f44:	1885883a 	add	r2,r3,r2
10001f48:	10800003 	ldbu	r2,0(r2)
10001f4c:	10803fcc 	andi	r2,r2,255
10001f50:	1080201c 	xori	r2,r2,128
10001f54:	10bfe004 	addi	r2,r2,-128
10001f58:	10001a16 	blt	r2,zero,10001fc4 <rotatePiece+0x214>
10001f5c:	e0fffb04 	addi	r3,fp,-20
10001f60:	e0bff917 	ldw	r2,-28(fp)
10001f64:	1885883a 	add	r2,r3,r2
10001f68:	10800003 	ldbu	r2,0(r2)
10001f6c:	10803fcc 	andi	r2,r2,255
10001f70:	1080201c 	xori	r2,r2,128
10001f74:	10bfe004 	addi	r2,r2,-128
10001f78:	10800288 	cmpgei	r2,r2,10
10001f7c:	1000111e 	bne	r2,zero,10001fc4 <rotatePiece+0x214>
																	|| fallingPieceCheckY[i] < 0 || fallingPieceCheckY[i] >= BOARD_Y_HEIGHT){
10001f80:	e0fffc04 	addi	r3,fp,-16
10001f84:	e0bff917 	ldw	r2,-28(fp)
10001f88:	1885883a 	add	r2,r3,r2
10001f8c:	10800003 	ldbu	r2,0(r2)
10001f90:	10803fcc 	andi	r2,r2,255
10001f94:	1080201c 	xori	r2,r2,128
10001f98:	10bfe004 	addi	r2,r2,-128
10001f9c:	10000916 	blt	r2,zero,10001fc4 <rotatePiece+0x214>
10001fa0:	e0fffc04 	addi	r3,fp,-16
10001fa4:	e0bff917 	ldw	r2,-28(fp)
10001fa8:	1885883a 	add	r2,r3,r2
10001fac:	10800003 	ldbu	r2,0(r2)
10001fb0:	10803fcc 	andi	r2,r2,255
10001fb4:	1080201c 	xori	r2,r2,128
10001fb8:	10bfe004 	addi	r2,r2,-128
10001fbc:	10800610 	cmplti	r2,r2,24
10001fc0:	1000021e 	bne	r2,zero,10001fcc <rotatePiece+0x21c>
			is_valid = 0;
10001fc4:	e03ffa15 	stw	zero,-24(fp)
			break;
10001fc8:	00000606 	br	10001fe4 <rotatePiece+0x234>
	for (i = 0; i<4; i++){
		board[fallingPieceX[i]][fallingPieceY[i]] = 0;
		fallingPieceCheckX[i] = fallingPieceY[i]-fallingPieceY[1] + fallingPieceX[1];
		fallingPieceCheckY[i] = -(fallingPieceX[i]-fallingPieceX[1]) + fallingPieceY[1];
	}
	for (i = 0; i<4; i++){
10001fcc:	e0bff917 	ldw	r2,-28(fp)
10001fd0:	10800044 	addi	r2,r2,1
10001fd4:	e0bff915 	stw	r2,-28(fp)
10001fd8:	e0bff917 	ldw	r2,-28(fp)
10001fdc:	10800110 	cmplti	r2,r2,4
10001fe0:	103fbd1e 	bne	r2,zero,10001ed8 <__alt_data_end+0xf8001ed8>
																	|| fallingPieceCheckY[i] < 0 || fallingPieceCheckY[i] >= BOARD_Y_HEIGHT){
			is_valid = 0;
			break;
		}
	}
	for (i = 0; i<4; i++){
10001fe4:	e03ff915 	stw	zero,-28(fp)
10001fe8:	00002b06 	br	10002098 <rotatePiece+0x2e8>
		if(is_valid){ //Next move right is still legal, move the piece down
10001fec:	e0bffa17 	ldw	r2,-24(fp)
10001ff0:	10001026 	beq	r2,zero,10002034 <rotatePiece+0x284>
			fallingPieceX[i] = fallingPieceCheckX[i];
10001ff4:	e0fffb04 	addi	r3,fp,-20
10001ff8:	e0bff917 	ldw	r2,-28(fp)
10001ffc:	1885883a 	add	r2,r3,r2
10002000:	10c00003 	ldbu	r3,0(r2)
10002004:	e13ff917 	ldw	r4,-28(fp)
10002008:	d0a6d244 	addi	r2,gp,-25783
1000200c:	2085883a 	add	r2,r4,r2
10002010:	10c00005 	stb	r3,0(r2)
			fallingPieceY[i] = fallingPieceCheckY[i];
10002014:	e0fffc04 	addi	r3,fp,-16
10002018:	e0bff917 	ldw	r2,-28(fp)
1000201c:	1885883a 	add	r2,r3,r2
10002020:	10c00003 	ldbu	r3,0(r2)
10002024:	e13ff917 	ldw	r4,-28(fp)
10002028:	d0a6d104 	addi	r2,gp,-25788
1000202c:	2085883a 	add	r2,r4,r2
10002030:	10c00005 	stb	r3,0(r2)
		}
		board[fallingPieceX[i]][fallingPieceY[i]] = fallingPieceType;
10002034:	e0fff917 	ldw	r3,-28(fp)
10002038:	d0a6d244 	addi	r2,gp,-25783
1000203c:	1885883a 	add	r2,r3,r2
10002040:	10800003 	ldbu	r2,0(r2)
10002044:	11003fcc 	andi	r4,r2,255
10002048:	2100201c 	xori	r4,r4,128
1000204c:	213fe004 	addi	r4,r4,-128
10002050:	e0fff917 	ldw	r3,-28(fp)
10002054:	d0a6d104 	addi	r2,gp,-25788
10002058:	1885883a 	add	r2,r3,r2
1000205c:	10800003 	ldbu	r2,0(r2)
10002060:	14803fcc 	andi	r18,r2,255
10002064:	9480201c 	xori	r18,r18,128
10002068:	94bfe004 	addi	r18,r18,-128
1000206c:	d466cf03 	ldbu	r17,-25796(gp)
10002070:	04040074 	movhi	r16,4097
10002074:	841acb04 	addi	r16,r16,27436
10002078:	01400604 	movi	r5,24
1000207c:	00039ec0 	call	100039ec <__mulsi3>
10002080:	1485883a 	add	r2,r2,r18
10002084:	8085883a 	add	r2,r16,r2
10002088:	14400005 	stb	r17,0(r2)
																	|| fallingPieceCheckY[i] < 0 || fallingPieceCheckY[i] >= BOARD_Y_HEIGHT){
			is_valid = 0;
			break;
		}
	}
	for (i = 0; i<4; i++){
1000208c:	e0bff917 	ldw	r2,-28(fp)
10002090:	10800044 	addi	r2,r2,1
10002094:	e0bff915 	stw	r2,-28(fp)
10002098:	e0bff917 	ldw	r2,-28(fp)
1000209c:	10800110 	cmplti	r2,r2,4
100020a0:	103fd21e 	bne	r2,zero,10001fec <__alt_data_end+0xf8001fec>
			fallingPieceY[i] = fallingPieceCheckY[i];
		}
		board[fallingPieceX[i]][fallingPieceY[i]] = fallingPieceType;
	}

}
100020a4:	e6fffd04 	addi	sp,fp,-12
100020a8:	dfc00417 	ldw	ra,16(sp)
100020ac:	df000317 	ldw	fp,12(sp)
100020b0:	dc800217 	ldw	r18,8(sp)
100020b4:	dc400117 	ldw	r17,4(sp)
100020b8:	dc000017 	ldw	r16,0(sp)
100020bc:	dec00504 	addi	sp,sp,20
100020c0:	f800283a 	ret

100020c4 <movePieceLeft>:

//move the piece left if possible
void movePieceLeft(){
100020c4:	defff904 	addi	sp,sp,-28
100020c8:	dfc00615 	stw	ra,24(sp)
100020cc:	df000515 	stw	fp,20(sp)
100020d0:	dc800415 	stw	r18,16(sp)
100020d4:	dc400315 	stw	r17,12(sp)
100020d8:	dc000215 	stw	r16,8(sp)
100020dc:	df000504 	addi	fp,sp,20
	int i;
	int is_valid = 1;
100020e0:	00800044 	movi	r2,1
100020e4:	e0bffc15 	stw	r2,-16(fp)
	for (i = 0; i<4; i++){
100020e8:	e03ffb15 	stw	zero,-20(fp)
100020ec:	00001806 	br	10002150 <movePieceLeft+0x8c>
		board[fallingPieceX[i]][fallingPieceY[i]] = 0;
100020f0:	e0fffb17 	ldw	r3,-20(fp)
100020f4:	d0a6d244 	addi	r2,gp,-25783
100020f8:	1885883a 	add	r2,r3,r2
100020fc:	10800003 	ldbu	r2,0(r2)
10002100:	11003fcc 	andi	r4,r2,255
10002104:	2100201c 	xori	r4,r4,128
10002108:	213fe004 	addi	r4,r4,-128
1000210c:	e0fffb17 	ldw	r3,-20(fp)
10002110:	d0a6d104 	addi	r2,gp,-25788
10002114:	1885883a 	add	r2,r3,r2
10002118:	10800003 	ldbu	r2,0(r2)
1000211c:	14403fcc 	andi	r17,r2,255
10002120:	8c40201c 	xori	r17,r17,128
10002124:	8c7fe004 	addi	r17,r17,-128
10002128:	04040074 	movhi	r16,4097
1000212c:	841acb04 	addi	r16,r16,27436
10002130:	01400604 	movi	r5,24
10002134:	00039ec0 	call	100039ec <__mulsi3>
10002138:	1445883a 	add	r2,r2,r17
1000213c:	8085883a 	add	r2,r16,r2
10002140:	10000005 	stb	zero,0(r2)

//move the piece left if possible
void movePieceLeft(){
	int i;
	int is_valid = 1;
	for (i = 0; i<4; i++){
10002144:	e0bffb17 	ldw	r2,-20(fp)
10002148:	10800044 	addi	r2,r2,1
1000214c:	e0bffb15 	stw	r2,-20(fp)
10002150:	e0bffb17 	ldw	r2,-20(fp)
10002154:	10800110 	cmplti	r2,r2,4
10002158:	103fe51e 	bne	r2,zero,100020f0 <__alt_data_end+0xf80020f0>
		board[fallingPieceX[i]][fallingPieceY[i]] = 0;
	}
	for (i = 0; i<4; i++){
1000215c:	e03ffb15 	stw	zero,-20(fp)
10002160:	00002806 	br	10002204 <movePieceLeft+0x140>
		if(board[fallingPieceX[i]-1][fallingPieceY[i]] != 0 || fallingPieceX[i]-1 < 0){
10002164:	e0fffb17 	ldw	r3,-20(fp)
10002168:	d0a6d244 	addi	r2,gp,-25783
1000216c:	1885883a 	add	r2,r3,r2
10002170:	10800003 	ldbu	r2,0(r2)
10002174:	10803fcc 	andi	r2,r2,255
10002178:	1080201c 	xori	r2,r2,128
1000217c:	10bfe004 	addi	r2,r2,-128
10002180:	113fffc4 	addi	r4,r2,-1
10002184:	e0fffb17 	ldw	r3,-20(fp)
10002188:	d0a6d104 	addi	r2,gp,-25788
1000218c:	1885883a 	add	r2,r3,r2
10002190:	10800003 	ldbu	r2,0(r2)
10002194:	14403fcc 	andi	r17,r2,255
10002198:	8c40201c 	xori	r17,r17,128
1000219c:	8c7fe004 	addi	r17,r17,-128
100021a0:	04040074 	movhi	r16,4097
100021a4:	841acb04 	addi	r16,r16,27436
100021a8:	01400604 	movi	r5,24
100021ac:	00039ec0 	call	100039ec <__mulsi3>
100021b0:	1445883a 	add	r2,r2,r17
100021b4:	8085883a 	add	r2,r16,r2
100021b8:	10800003 	ldbu	r2,0(r2)
100021bc:	10803fcc 	andi	r2,r2,255
100021c0:	1080201c 	xori	r2,r2,128
100021c4:	10bfe004 	addi	r2,r2,-128
100021c8:	1000091e 	bne	r2,zero,100021f0 <movePieceLeft+0x12c>
100021cc:	e0fffb17 	ldw	r3,-20(fp)
100021d0:	d0a6d244 	addi	r2,gp,-25783
100021d4:	1885883a 	add	r2,r3,r2
100021d8:	10800003 	ldbu	r2,0(r2)
100021dc:	10803fcc 	andi	r2,r2,255
100021e0:	1080201c 	xori	r2,r2,128
100021e4:	10bfe004 	addi	r2,r2,-128
100021e8:	10bfffc4 	addi	r2,r2,-1
100021ec:	1000020e 	bge	r2,zero,100021f8 <movePieceLeft+0x134>
			is_valid = 0;
100021f0:	e03ffc15 	stw	zero,-16(fp)
			break;
100021f4:	00000606 	br	10002210 <movePieceLeft+0x14c>
	int i;
	int is_valid = 1;
	for (i = 0; i<4; i++){
		board[fallingPieceX[i]][fallingPieceY[i]] = 0;
	}
	for (i = 0; i<4; i++){
100021f8:	e0bffb17 	ldw	r2,-20(fp)
100021fc:	10800044 	addi	r2,r2,1
10002200:	e0bffb15 	stw	r2,-20(fp)
10002204:	e0bffb17 	ldw	r2,-20(fp)
10002208:	10800110 	cmplti	r2,r2,4
1000220c:	103fd51e 	bne	r2,zero,10002164 <__alt_data_end+0xf8002164>
		if(board[fallingPieceX[i]-1][fallingPieceY[i]] != 0 || fallingPieceX[i]-1 < 0){
			is_valid = 0;
			break;
		}
	}
	for (i = 0; i<4; i++){
10002210:	e03ffb15 	stw	zero,-20(fp)
10002214:	00002506 	br	100022ac <movePieceLeft+0x1e8>
		if(is_valid){ //Next move right is still legal, move the piece down
10002218:	e0bffc17 	ldw	r2,-16(fp)
1000221c:	10000a26 	beq	r2,zero,10002248 <movePieceLeft+0x184>
			fallingPieceX[i]-=1;
10002220:	e0fffb17 	ldw	r3,-20(fp)
10002224:	d0a6d244 	addi	r2,gp,-25783
10002228:	1885883a 	add	r2,r3,r2
1000222c:	10800003 	ldbu	r2,0(r2)
10002230:	10bfffc4 	addi	r2,r2,-1
10002234:	1009883a 	mov	r4,r2
10002238:	e0fffb17 	ldw	r3,-20(fp)
1000223c:	d0a6d244 	addi	r2,gp,-25783
10002240:	1885883a 	add	r2,r3,r2
10002244:	11000005 	stb	r4,0(r2)
		}
		board[fallingPieceX[i]][fallingPieceY[i]] = fallingPieceType;
10002248:	e0fffb17 	ldw	r3,-20(fp)
1000224c:	d0a6d244 	addi	r2,gp,-25783
10002250:	1885883a 	add	r2,r3,r2
10002254:	10800003 	ldbu	r2,0(r2)
10002258:	11003fcc 	andi	r4,r2,255
1000225c:	2100201c 	xori	r4,r4,128
10002260:	213fe004 	addi	r4,r4,-128
10002264:	e0fffb17 	ldw	r3,-20(fp)
10002268:	d0a6d104 	addi	r2,gp,-25788
1000226c:	1885883a 	add	r2,r3,r2
10002270:	10800003 	ldbu	r2,0(r2)
10002274:	14803fcc 	andi	r18,r2,255
10002278:	9480201c 	xori	r18,r18,128
1000227c:	94bfe004 	addi	r18,r18,-128
10002280:	d466cf03 	ldbu	r17,-25796(gp)
10002284:	04040074 	movhi	r16,4097
10002288:	841acb04 	addi	r16,r16,27436
1000228c:	01400604 	movi	r5,24
10002290:	00039ec0 	call	100039ec <__mulsi3>
10002294:	1485883a 	add	r2,r2,r18
10002298:	8085883a 	add	r2,r16,r2
1000229c:	14400005 	stb	r17,0(r2)
		if(board[fallingPieceX[i]-1][fallingPieceY[i]] != 0 || fallingPieceX[i]-1 < 0){
			is_valid = 0;
			break;
		}
	}
	for (i = 0; i<4; i++){
100022a0:	e0bffb17 	ldw	r2,-20(fp)
100022a4:	10800044 	addi	r2,r2,1
100022a8:	e0bffb15 	stw	r2,-20(fp)
100022ac:	e0bffb17 	ldw	r2,-20(fp)
100022b0:	10800110 	cmplti	r2,r2,4
100022b4:	103fd81e 	bne	r2,zero,10002218 <__alt_data_end+0xf8002218>
		if(is_valid){ //Next move right is still legal, move the piece down
			fallingPieceX[i]-=1;
		}
		board[fallingPieceX[i]][fallingPieceY[i]] = fallingPieceType;
	}
}
100022b8:	e6fffd04 	addi	sp,fp,-12
100022bc:	dfc00417 	ldw	ra,16(sp)
100022c0:	df000317 	ldw	fp,12(sp)
100022c4:	dc800217 	ldw	r18,8(sp)
100022c8:	dc400117 	ldw	r17,4(sp)
100022cc:	dc000017 	ldw	r16,0(sp)
100022d0:	dec00504 	addi	sp,sp,20
100022d4:	f800283a 	ret

100022d8 <movePieceRight>:
//Move the piece right if possible, can occur at any time
void movePieceRight(){
100022d8:	defff904 	addi	sp,sp,-28
100022dc:	dfc00615 	stw	ra,24(sp)
100022e0:	df000515 	stw	fp,20(sp)
100022e4:	dc800415 	stw	r18,16(sp)
100022e8:	dc400315 	stw	r17,12(sp)
100022ec:	dc000215 	stw	r16,8(sp)
100022f0:	df000504 	addi	fp,sp,20

	int i;
	int is_valid = 1;
100022f4:	00800044 	movi	r2,1
100022f8:	e0bffc15 	stw	r2,-16(fp)
	for (i = 0; i<4; i++){
100022fc:	e03ffb15 	stw	zero,-20(fp)
10002300:	00001806 	br	10002364 <movePieceRight+0x8c>
		board[fallingPieceX[i]][fallingPieceY[i]] = 0;
10002304:	e0fffb17 	ldw	r3,-20(fp)
10002308:	d0a6d244 	addi	r2,gp,-25783
1000230c:	1885883a 	add	r2,r3,r2
10002310:	10800003 	ldbu	r2,0(r2)
10002314:	11003fcc 	andi	r4,r2,255
10002318:	2100201c 	xori	r4,r4,128
1000231c:	213fe004 	addi	r4,r4,-128
10002320:	e0fffb17 	ldw	r3,-20(fp)
10002324:	d0a6d104 	addi	r2,gp,-25788
10002328:	1885883a 	add	r2,r3,r2
1000232c:	10800003 	ldbu	r2,0(r2)
10002330:	14403fcc 	andi	r17,r2,255
10002334:	8c40201c 	xori	r17,r17,128
10002338:	8c7fe004 	addi	r17,r17,-128
1000233c:	04040074 	movhi	r16,4097
10002340:	841acb04 	addi	r16,r16,27436
10002344:	01400604 	movi	r5,24
10002348:	00039ec0 	call	100039ec <__mulsi3>
1000234c:	1445883a 	add	r2,r2,r17
10002350:	8085883a 	add	r2,r16,r2
10002354:	10000005 	stb	zero,0(r2)
//Move the piece right if possible, can occur at any time
void movePieceRight(){

	int i;
	int is_valid = 1;
	for (i = 0; i<4; i++){
10002358:	e0bffb17 	ldw	r2,-20(fp)
1000235c:	10800044 	addi	r2,r2,1
10002360:	e0bffb15 	stw	r2,-20(fp)
10002364:	e0bffb17 	ldw	r2,-20(fp)
10002368:	10800110 	cmplti	r2,r2,4
1000236c:	103fe51e 	bne	r2,zero,10002304 <__alt_data_end+0xf8002304>
		board[fallingPieceX[i]][fallingPieceY[i]] = 0;
	}
	for (i = 0; i<4; i++){
10002370:	e03ffb15 	stw	zero,-20(fp)
10002374:	00002906 	br	1000241c <movePieceRight+0x144>
		if(board[fallingPieceX[i]+1][fallingPieceY[i]] != 0 || fallingPieceX[i]+1 >= BOARD_X_WIDTH){
10002378:	e0fffb17 	ldw	r3,-20(fp)
1000237c:	d0a6d244 	addi	r2,gp,-25783
10002380:	1885883a 	add	r2,r3,r2
10002384:	10800003 	ldbu	r2,0(r2)
10002388:	10803fcc 	andi	r2,r2,255
1000238c:	1080201c 	xori	r2,r2,128
10002390:	10bfe004 	addi	r2,r2,-128
10002394:	11000044 	addi	r4,r2,1
10002398:	e0fffb17 	ldw	r3,-20(fp)
1000239c:	d0a6d104 	addi	r2,gp,-25788
100023a0:	1885883a 	add	r2,r3,r2
100023a4:	10800003 	ldbu	r2,0(r2)
100023a8:	14403fcc 	andi	r17,r2,255
100023ac:	8c40201c 	xori	r17,r17,128
100023b0:	8c7fe004 	addi	r17,r17,-128
100023b4:	04040074 	movhi	r16,4097
100023b8:	841acb04 	addi	r16,r16,27436
100023bc:	01400604 	movi	r5,24
100023c0:	00039ec0 	call	100039ec <__mulsi3>
100023c4:	1445883a 	add	r2,r2,r17
100023c8:	8085883a 	add	r2,r16,r2
100023cc:	10800003 	ldbu	r2,0(r2)
100023d0:	10803fcc 	andi	r2,r2,255
100023d4:	1080201c 	xori	r2,r2,128
100023d8:	10bfe004 	addi	r2,r2,-128
100023dc:	10000a1e 	bne	r2,zero,10002408 <movePieceRight+0x130>
100023e0:	e0fffb17 	ldw	r3,-20(fp)
100023e4:	d0a6d244 	addi	r2,gp,-25783
100023e8:	1885883a 	add	r2,r3,r2
100023ec:	10800003 	ldbu	r2,0(r2)
100023f0:	10803fcc 	andi	r2,r2,255
100023f4:	1080201c 	xori	r2,r2,128
100023f8:	10bfe004 	addi	r2,r2,-128
100023fc:	10800044 	addi	r2,r2,1
10002400:	10800290 	cmplti	r2,r2,10
10002404:	1000021e 	bne	r2,zero,10002410 <movePieceRight+0x138>
			is_valid = 0;
10002408:	e03ffc15 	stw	zero,-16(fp)
			break;
1000240c:	00000606 	br	10002428 <movePieceRight+0x150>
	int i;
	int is_valid = 1;
	for (i = 0; i<4; i++){
		board[fallingPieceX[i]][fallingPieceY[i]] = 0;
	}
	for (i = 0; i<4; i++){
10002410:	e0bffb17 	ldw	r2,-20(fp)
10002414:	10800044 	addi	r2,r2,1
10002418:	e0bffb15 	stw	r2,-20(fp)
1000241c:	e0bffb17 	ldw	r2,-20(fp)
10002420:	10800110 	cmplti	r2,r2,4
10002424:	103fd41e 	bne	r2,zero,10002378 <__alt_data_end+0xf8002378>
		if(board[fallingPieceX[i]+1][fallingPieceY[i]] != 0 || fallingPieceX[i]+1 >= BOARD_X_WIDTH){
			is_valid = 0;
			break;
		}
	}
	for (i = 0; i<4; i++){
10002428:	e03ffb15 	stw	zero,-20(fp)
1000242c:	00002506 	br	100024c4 <movePieceRight+0x1ec>
		if(is_valid){ //Next move right is still legal, move the piece down
10002430:	e0bffc17 	ldw	r2,-16(fp)
10002434:	10000a26 	beq	r2,zero,10002460 <movePieceRight+0x188>
			fallingPieceX[i]+=1;
10002438:	e0fffb17 	ldw	r3,-20(fp)
1000243c:	d0a6d244 	addi	r2,gp,-25783
10002440:	1885883a 	add	r2,r3,r2
10002444:	10800003 	ldbu	r2,0(r2)
10002448:	10800044 	addi	r2,r2,1
1000244c:	1009883a 	mov	r4,r2
10002450:	e0fffb17 	ldw	r3,-20(fp)
10002454:	d0a6d244 	addi	r2,gp,-25783
10002458:	1885883a 	add	r2,r3,r2
1000245c:	11000005 	stb	r4,0(r2)
		}
		board[fallingPieceX[i]][fallingPieceY[i]] = fallingPieceType;
10002460:	e0fffb17 	ldw	r3,-20(fp)
10002464:	d0a6d244 	addi	r2,gp,-25783
10002468:	1885883a 	add	r2,r3,r2
1000246c:	10800003 	ldbu	r2,0(r2)
10002470:	11003fcc 	andi	r4,r2,255
10002474:	2100201c 	xori	r4,r4,128
10002478:	213fe004 	addi	r4,r4,-128
1000247c:	e0fffb17 	ldw	r3,-20(fp)
10002480:	d0a6d104 	addi	r2,gp,-25788
10002484:	1885883a 	add	r2,r3,r2
10002488:	10800003 	ldbu	r2,0(r2)
1000248c:	14803fcc 	andi	r18,r2,255
10002490:	9480201c 	xori	r18,r18,128
10002494:	94bfe004 	addi	r18,r18,-128
10002498:	d466cf03 	ldbu	r17,-25796(gp)
1000249c:	04040074 	movhi	r16,4097
100024a0:	841acb04 	addi	r16,r16,27436
100024a4:	01400604 	movi	r5,24
100024a8:	00039ec0 	call	100039ec <__mulsi3>
100024ac:	1485883a 	add	r2,r2,r18
100024b0:	8085883a 	add	r2,r16,r2
100024b4:	14400005 	stb	r17,0(r2)
		if(board[fallingPieceX[i]+1][fallingPieceY[i]] != 0 || fallingPieceX[i]+1 >= BOARD_X_WIDTH){
			is_valid = 0;
			break;
		}
	}
	for (i = 0; i<4; i++){
100024b8:	e0bffb17 	ldw	r2,-20(fp)
100024bc:	10800044 	addi	r2,r2,1
100024c0:	e0bffb15 	stw	r2,-20(fp)
100024c4:	e0bffb17 	ldw	r2,-20(fp)
100024c8:	10800110 	cmplti	r2,r2,4
100024cc:	103fd81e 	bne	r2,zero,10002430 <__alt_data_end+0xf8002430>
			fallingPieceX[i]+=1;
		}
		board[fallingPieceX[i]][fallingPieceY[i]] = fallingPieceType;
	}

}
100024d0:	e6fffd04 	addi	sp,fp,-12
100024d4:	dfc00417 	ldw	ra,16(sp)
100024d8:	df000317 	ldw	fp,12(sp)
100024dc:	dc800217 	ldw	r18,8(sp)
100024e0:	dc400117 	ldw	r17,4(sp)
100024e4:	dc000017 	ldw	r16,0(sp)
100024e8:	dec00504 	addi	sp,sp,20
100024ec:	f800283a 	ret

100024f0 <drawBoard>:

void drawBoard(){
100024f0:	defff804 	addi	sp,sp,-32
100024f4:	dfc00715 	stw	ra,28(sp)
100024f8:	df000615 	stw	fp,24(sp)
100024fc:	dc000515 	stw	r16,20(sp)
10002500:	df000604 	addi	fp,sp,24
	//Clear screen and wait for completion
	bd_u data;
	int boardX, boardY;
	int x_pos, y_pos;
	data.data_packed = 0;
10002504:	e03ffe15 	stw	zero,-8(fp)
	data.membs.curr_frame = current_frame;
10002508:	d0a6ce17 	ldw	r2,-25800(gp)
1000250c:	1080004c 	andi	r2,r2,1
10002510:	10803fcc 	andi	r2,r2,255
10002514:	1080004c 	andi	r2,r2,1
10002518:	100696ba 	slli	r3,r2,26
1000251c:	e13ffe17 	ldw	r4,-8(fp)
10002520:	00bf0034 	movhi	r2,64512
10002524:	10bfffc4 	addi	r2,r2,-1
10002528:	2084703a 	and	r2,r4,r2
1000252c:	10c4b03a 	or	r2,r2,r3
10002530:	e0bffe15 	stw	r2,-8(fp)
	*block_data = data.data_packed;
10002534:	00801404 	movi	r2,80
10002538:	e0fffe17 	ldw	r3,-8(fp)
1000253c:	10c00015 	stw	r3,0(r2)
	*level_score = (level << 28) + (score);
10002540:	00c00804 	movi	r3,32
10002544:	00840074 	movhi	r2,4097
10002548:	109aad04 	addi	r2,r2,27316
1000254c:	10800017 	ldw	r2,0(r2)
10002550:	1008973a 	slli	r4,r2,28
10002554:	00840074 	movhi	r2,4097
10002558:	109aac04 	addi	r2,r2,27312
1000255c:	10800017 	ldw	r2,0(r2)
10002560:	2085883a 	add	r2,r4,r2
10002564:	18800015 	stw	r2,0(r3)
	while((*drawing_status & 3) != 3);
10002568:	0001883a 	nop
1000256c:	00801004 	movi	r2,64
10002570:	10800003 	ldbu	r2,0(r2)
10002574:	10803fcc 	andi	r2,r2,255
10002578:	108000cc 	andi	r2,r2,3
1000257c:	108000d8 	cmpnei	r2,r2,3
10002580:	103ffa1e 	bne	r2,zero,1000256c <__alt_data_end+0xf800256c>
	data.membs.clear = 1;
10002584:	e0bffe17 	ldw	r2,-8(fp)
10002588:	10808034 	orhi	r2,r2,512
1000258c:	e0bffe15 	stw	r2,-8(fp)
	*block_data = data.data_packed;
10002590:	00801404 	movi	r2,80
10002594:	e0fffe17 	ldw	r3,-8(fp)
10002598:	10c00015 	stw	r3,0(r2)
	while((*drawing_status & 2) != 2); // Check for cleared screen completion
1000259c:	0001883a 	nop
100025a0:	00801004 	movi	r2,64
100025a4:	10800003 	ldbu	r2,0(r2)
100025a8:	10803fcc 	andi	r2,r2,255
100025ac:	1080008c 	andi	r2,r2,2
100025b0:	103ffb26 	beq	r2,zero,100025a0 <__alt_data_end+0xf80025a0>
	data.membs.clear = 0;
100025b4:	e0fffe17 	ldw	r3,-8(fp)
100025b8:	00bf8034 	movhi	r2,65024
100025bc:	10bfffc4 	addi	r2,r2,-1
100025c0:	1884703a 	and	r2,r3,r2
100025c4:	e0bffe15 	stw	r2,-8(fp)
	for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
100025c8:	e03ffa15 	stw	zero,-24(fp)
100025cc:	00005106 	br	10002714 <drawBoard+0x224>
		for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
100025d0:	e03ffb15 	stw	zero,-20(fp)
100025d4:	00004906 	br	100026fc <drawBoard+0x20c>
			x_pos = boardX*16 + BOARD_LEFT_OFFSET;
100025d8:	e0bffa17 	ldw	r2,-24(fp)
100025dc:	108003c4 	addi	r2,r2,15
100025e0:	1004913a 	slli	r2,r2,4
100025e4:	e0bffc15 	stw	r2,-16(fp)
			y_pos = boardY*16 + BOARD_TOP_OFFSET;
100025e8:	e0bffb17 	ldw	r2,-20(fp)
100025ec:	108000c4 	addi	r2,r2,3
100025f0:	1004913a 	slli	r2,r2,4
100025f4:	e0bffd15 	stw	r2,-12(fp)
			data.membs.x_pos = x_pos;
100025f8:	e0bffc17 	ldw	r2,-16(fp)
100025fc:	1080ffcc 	andi	r2,r2,1023
10002600:	10bfffcc 	andi	r2,r2,65535
10002604:	1080ffcc 	andi	r2,r2,1023
10002608:	e13ffe17 	ldw	r4,-8(fp)
1000260c:	00ff0004 	movi	r3,-1024
10002610:	20c6703a 	and	r3,r4,r3
10002614:	1884b03a 	or	r2,r3,r2
10002618:	e0bffe15 	stw	r2,-8(fp)
			data.membs.y_pos = y_pos;
1000261c:	e0bffd17 	ldw	r2,-12(fp)
10002620:	1080ffcc 	andi	r2,r2,1023
10002624:	10bfffcc 	andi	r2,r2,65535
10002628:	1080ffcc 	andi	r2,r2,1023
1000262c:	100692ba 	slli	r3,r2,10
10002630:	e13ffe17 	ldw	r4,-8(fp)
10002634:	00bffc34 	movhi	r2,65520
10002638:	1080ffc4 	addi	r2,r2,1023
1000263c:	2084703a 	and	r2,r4,r2
10002640:	10c4b03a 	or	r2,r2,r3
10002644:	e0bffe15 	stw	r2,-8(fp)
			data.membs.color = board[boardX][boardY]+2;
10002648:	04040074 	movhi	r16,4097
1000264c:	841acb04 	addi	r16,r16,27436
10002650:	e0bffa17 	ldw	r2,-24(fp)
10002654:	1009883a 	mov	r4,r2
10002658:	01400604 	movi	r5,24
1000265c:	00039ec0 	call	100039ec <__mulsi3>
10002660:	1007883a 	mov	r3,r2
10002664:	e0bffb17 	ldw	r2,-20(fp)
10002668:	1885883a 	add	r2,r3,r2
1000266c:	8085883a 	add	r2,r16,r2
10002670:	10800003 	ldbu	r2,0(r2)
10002674:	10800084 	addi	r2,r2,2
10002678:	108003cc 	andi	r2,r2,15
1000267c:	10803fcc 	andi	r2,r2,255
10002680:	108003cc 	andi	r2,r2,15
10002684:	1006953a 	slli	r3,r2,20
10002688:	e13ffe17 	ldw	r4,-8(fp)
1000268c:	00bfc434 	movhi	r2,65296
10002690:	10bfffc4 	addi	r2,r2,-1
10002694:	2084703a 	and	r2,r4,r2
10002698:	10c4b03a 	or	r2,r2,r3
1000269c:	e0bffe15 	stw	r2,-8(fp)
			data.membs.draw = 1;
100026a0:	e0bffe17 	ldw	r2,-8(fp)
100026a4:	10804034 	orhi	r2,r2,256
100026a8:	e0bffe15 	stw	r2,-8(fp)
			*block_data = data.data_packed;
100026ac:	00801404 	movi	r2,80
100026b0:	e0fffe17 	ldw	r3,-8(fp)
100026b4:	10c00015 	stw	r3,0(r2)
			while((*drawing_status & 1) != 1); //Check that the block has finished drawing
100026b8:	0001883a 	nop
100026bc:	00801004 	movi	r2,64
100026c0:	10800003 	ldbu	r2,0(r2)
100026c4:	10803fcc 	andi	r2,r2,255
100026c8:	1080004c 	andi	r2,r2,1
100026cc:	103ffb26 	beq	r2,zero,100026bc <__alt_data_end+0xf80026bc>
			data.membs.draw = 0;
100026d0:	e0fffe17 	ldw	r3,-8(fp)
100026d4:	00bfc034 	movhi	r2,65280
100026d8:	10bfffc4 	addi	r2,r2,-1
100026dc:	1884703a 	and	r2,r3,r2
100026e0:	e0bffe15 	stw	r2,-8(fp)
			*block_data = data.data_packed;
100026e4:	00801404 	movi	r2,80
100026e8:	e0fffe17 	ldw	r3,-8(fp)
100026ec:	10c00015 	stw	r3,0(r2)
	data.membs.clear = 1;
	*block_data = data.data_packed;
	while((*drawing_status & 2) != 2); // Check for cleared screen completion
	data.membs.clear = 0;
	for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
		for(boardY = 0; boardY < BOARD_Y_HEIGHT; boardY++){
100026f0:	e0bffb17 	ldw	r2,-20(fp)
100026f4:	10800044 	addi	r2,r2,1
100026f8:	e0bffb15 	stw	r2,-20(fp)
100026fc:	e0bffb17 	ldw	r2,-20(fp)
10002700:	10800610 	cmplti	r2,r2,24
10002704:	103fb41e 	bne	r2,zero,100025d8 <__alt_data_end+0xf80025d8>
	while((*drawing_status & 3) != 3);
	data.membs.clear = 1;
	*block_data = data.data_packed;
	while((*drawing_status & 2) != 2); // Check for cleared screen completion
	data.membs.clear = 0;
	for(boardX = 0; boardX < BOARD_X_WIDTH; boardX++){
10002708:	e0bffa17 	ldw	r2,-24(fp)
1000270c:	10800044 	addi	r2,r2,1
10002710:	e0bffa15 	stw	r2,-24(fp)
10002714:	e0bffa17 	ldw	r2,-24(fp)
10002718:	10800290 	cmplti	r2,r2,10
1000271c:	103fac1e 	bne	r2,zero,100025d0 <__alt_data_end+0xf80025d0>
			while((*drawing_status & 1) != 1); //Check that the block has finished drawing
			data.membs.draw = 0;
			*block_data = data.data_packed;
		}
	}
	current_frame = current_frame ^ 1;
10002720:	d0a6ce17 	ldw	r2,-25800(gp)
10002724:	1080005c 	xori	r2,r2,1
10002728:	d0a6ce15 	stw	r2,-25800(gp)
	data.membs.curr_frame = current_frame;
1000272c:	d0a6ce17 	ldw	r2,-25800(gp)
10002730:	1080004c 	andi	r2,r2,1
10002734:	10803fcc 	andi	r2,r2,255
10002738:	1080004c 	andi	r2,r2,1
1000273c:	100696ba 	slli	r3,r2,26
10002740:	e13ffe17 	ldw	r4,-8(fp)
10002744:	00bf0034 	movhi	r2,64512
10002748:	10bfffc4 	addi	r2,r2,-1
1000274c:	2084703a 	and	r2,r4,r2
10002750:	10c4b03a 	or	r2,r2,r3
10002754:	e0bffe15 	stw	r2,-8(fp)
	*block_data = data.data_packed;
10002758:	00801404 	movi	r2,80
1000275c:	e0fffe17 	ldw	r3,-8(fp)
10002760:	10c00015 	stw	r3,0(r2)



}
10002764:	e6ffff04 	addi	sp,fp,-4
10002768:	dfc00217 	ldw	ra,8(sp)
1000276c:	df000117 	ldw	fp,4(sp)
10002770:	dc000017 	ldw	r16,0(sp)
10002774:	dec00304 	addi	sp,sp,12
10002778:	f800283a 	ret

1000277c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
1000277c:	defffc04 	addi	sp,sp,-16
10002780:	dfc00315 	stw	ra,12(sp)
10002784:	df000215 	stw	fp,8(sp)
10002788:	df000204 	addi	fp,sp,8
1000278c:	2007883a 	mov	r3,r4
10002790:	2805883a 	mov	r2,r5
10002794:	e0fffe0d 	sth	r3,-8(fp)
10002798:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR,Address);
1000279c:	e0bffe0b 	ldhu	r2,-8(fp)
100027a0:	01000084 	movi	r4,2
100027a4:	100b883a 	mov	r5,r2
100027a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,Data);
100027ac:	e0bfff0b 	ldhu	r2,-4(fp)
100027b0:	0009883a 	mov	r4,zero
100027b4:	100b883a 	mov	r5,r2
100027b8:	00002480 	call	10000248 <IO_write>
}
100027bc:	e037883a 	mov	sp,fp
100027c0:	dfc00117 	ldw	ra,4(sp)
100027c4:	df000017 	ldw	fp,0(sp)
100027c8:	dec00204 	addi	sp,sp,8
100027cc:	f800283a 	ret

100027d0 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100027d0:	defffd04 	addi	sp,sp,-12
100027d4:	dfc00215 	stw	ra,8(sp)
100027d8:	df000115 	stw	fp,4(sp)
100027dc:	df000104 	addi	fp,sp,4
100027e0:	2005883a 	mov	r2,r4
100027e4:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR,Address);
100027e8:	e0bfff0b 	ldhu	r2,-4(fp)
100027ec:	01000084 	movi	r4,2
100027f0:	100b883a 	mov	r5,r2
100027f4:	00002480 	call	10000248 <IO_write>
	return IO_read(HPI_DATA);
100027f8:	0009883a 	mov	r4,zero
100027fc:	00002b40 	call	100002b4 <IO_read>
}
10002800:	e037883a 	mov	sp,fp
10002804:	dfc00117 	ldw	ra,4(sp)
10002808:	df000017 	ldw	fp,0(sp)
1000280c:	dec00204 	addi	sp,sp,8
10002810:	f800283a 	ret

10002814 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10002814:	defffe04 	addi	sp,sp,-8
10002818:	dfc00115 	stw	ra,4(sp)
1000281c:	df000015 	stw	fp,0(sp)
10002820:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10002824:	01000044 	movi	r4,1
10002828:	017e9414 	movui	r5,64080
1000282c:	00002480 	call	10000248 <IO_write>
	usleep(100000);
10002830:	010000b4 	movhi	r4,2
10002834:	2121a804 	addi	r4,r4,-31072
10002838:	0010ac80 	call	10010ac8 <usleep>
	printf("[USB INIT]:reset finished!\n");
1000283c:	01040074 	movhi	r4,4097
10002840:	210c5804 	addi	r4,r4,12640
10002844:	0003b340 	call	10003b34 <puts>

	usleep(500000);
10002848:	01000234 	movhi	r4,8
1000284c:	21284804 	addi	r4,r4,-24288
10002850:	0010ac80 	call	10010ac8 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10002854:	01040074 	movhi	r4,4097
10002858:	210c5f04 	addi	r4,r4,12668
1000285c:	0003b340 	call	10003b34 <puts>
	IO_read(HPI_MAILBOX);
10002860:	01000044 	movi	r4,1
10002864:	00002b40 	call	100002b4 <IO_read>
	IO_read(HPI_STATUS);
10002868:	010000c4 	movi	r4,3
1000286c:	00002b40 	call	100002b4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10002870:	01005104 	movi	r4,324
10002874:	00027d00 	call	100027d0 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10002878:	01005104 	movi	r4,324
1000287c:	000b883a 	mov	r5,zero
10002880:	000277c0 	call	1000277c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10002884:	01005204 	movi	r4,328
10002888:	00027d00 	call	100027d0 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
1000288c:	01005204 	movi	r4,328
10002890:	000b883a 	mov	r5,zero
10002894:	000277c0 	call	1000277c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10002898:	01302414 	movui	r4,49296
1000289c:	017fffd4 	movui	r5,65535
100028a0:	000277c0 	call	1000277c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
100028a4:	01302c14 	movui	r4,49328
100028a8:	017fffd4 	movui	r5,65535
100028ac:	000277c0 	call	1000277c <UsbWrite>
}
100028b0:	e037883a 	mov	sp,fp
100028b4:	dfc00117 	ldw	ra,4(sp)
100028b8:	df000017 	ldw	fp,0(sp)
100028bc:	dec00204 	addi	sp,sp,8
100028c0:	f800283a 	ret

100028c4 <UsbSetAddress>:


void UsbSetAddress()
{
100028c4:	defffe04 	addi	sp,sp,-8
100028c8:	dfc00115 	stw	ra,4(sp)
100028cc:	df000015 	stw	fp,0(sp)
100028d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100028d4:	01000084 	movi	r4,2
100028d8:	01414004 	movi	r5,1280
100028dc:	00002480 	call	10000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100028e0:	0009883a 	mov	r4,zero
100028e4:	01414304 	movi	r5,1292
100028e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100028ec:	0009883a 	mov	r4,zero
100028f0:	01400204 	movi	r5,8
100028f4:	00002480 	call	10000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100028f8:	0009883a 	mov	r4,zero
100028fc:	01403404 	movi	r5,208
10002900:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002904:	0009883a 	mov	r4,zero
10002908:	01400044 	movi	r5,1
1000290c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002910:	0009883a 	mov	r4,zero
10002914:	014004c4 	movi	r5,19
10002918:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000291c:	0009883a 	mov	r4,zero
10002920:	01414504 	movi	r5,1300
10002924:	00002480 	call	10000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10002928:	0009883a 	mov	r4,zero
1000292c:	01414004 	movi	r5,1280
10002930:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
10002934:	0009883a 	mov	r4,zero
10002938:	01400084 	movi	r5,2
1000293c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002940:	0009883a 	mov	r4,zero
10002944:	000b883a 	mov	r5,zero
10002948:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000294c:	0009883a 	mov	r4,zero
10002950:	000b883a 	mov	r5,zero
10002954:	00002480 	call	10000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10002958:	0009883a 	mov	r4,zero
1000295c:	000b883a 	mov	r5,zero
10002960:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10002964:	0009883a 	mov	r4,zero
10002968:	000b883a 	mov	r5,zero
1000296c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10002970:	0009883a 	mov	r4,zero
10002974:	01402404 	movi	r5,144
10002978:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000297c:	0009883a 	mov	r4,zero
10002980:	01401044 	movi	r5,65
10002984:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002988:	0009883a 	mov	r4,zero
1000298c:	014004c4 	movi	r5,19
10002990:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002994:	0009883a 	mov	r4,zero
10002998:	000b883a 	mov	r5,zero
1000299c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100029a0:	01006c04 	movi	r4,432
100029a4:	01414004 	movi	r5,1280
100029a8:	000277c0 	call	1000277c <UsbWrite>
}
100029ac:	e037883a 	mov	sp,fp
100029b0:	dfc00117 	ldw	ra,4(sp)
100029b4:	df000017 	ldw	fp,0(sp)
100029b8:	dec00204 	addi	sp,sp,8
100029bc:	f800283a 	ret

100029c0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100029c0:	defffe04 	addi	sp,sp,-8
100029c4:	dfc00115 	stw	ra,4(sp)
100029c8:	df000015 	stw	fp,0(sp)
100029cc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100029d0:	01000084 	movi	r4,2
100029d4:	01414004 	movi	r5,1280
100029d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100029dc:	0009883a 	mov	r4,zero
100029e0:	01414304 	movi	r5,1292
100029e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100029e8:	0009883a 	mov	r4,zero
100029ec:	01400204 	movi	r5,8
100029f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100029f4:	0009883a 	mov	r4,zero
100029f8:	0140b404 	movi	r5,720
100029fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002a00:	0009883a 	mov	r4,zero
10002a04:	01400044 	movi	r5,1
10002a08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002a0c:	0009883a 	mov	r4,zero
10002a10:	014004c4 	movi	r5,19
10002a14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002a18:	0009883a 	mov	r4,zero
10002a1c:	01414504 	movi	r5,1300
10002a20:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002a24:	0009883a 	mov	r4,zero
10002a28:	0141a004 	movi	r5,1664
10002a2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10002a30:	0009883a 	mov	r4,zero
10002a34:	01404004 	movi	r5,256
10002a38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002a3c:	0009883a 	mov	r4,zero
10002a40:	000b883a 	mov	r5,zero
10002a44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10002a48:	0009883a 	mov	r4,zero
10002a4c:	01400204 	movi	r5,8
10002a50:	00002480 	call	10000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10002a54:	0009883a 	mov	r4,zero
10002a58:	01414b04 	movi	r5,1324
10002a5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10002a60:	0009883a 	mov	r4,zero
10002a64:	01400204 	movi	r5,8
10002a68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10002a6c:	0009883a 	mov	r4,zero
10002a70:	0140a404 	movi	r5,656
10002a74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002a78:	0009883a 	mov	r4,zero
10002a7c:	01401044 	movi	r5,65
10002a80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002a84:	0009883a 	mov	r4,zero
10002a88:	014004c4 	movi	r5,19
10002a8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
10002a90:	0009883a 	mov	r4,zero
10002a94:	01414804 	movi	r5,1312
10002a98:	00002480 	call	10000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10002a9c:	0009883a 	mov	r4,zero
10002aa0:	000b883a 	mov	r5,zero
10002aa4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002aa8:	0009883a 	mov	r4,zero
10002aac:	000b883a 	mov	r5,zero
10002ab0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10002ab4:	0009883a 	mov	r4,zero
10002ab8:	01408404 	movi	r5,528
10002abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002ac0:	0009883a 	mov	r4,zero
10002ac4:	01401044 	movi	r5,65
10002ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002acc:	0009883a 	mov	r4,zero
10002ad0:	014004c4 	movi	r5,19
10002ad4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002ad8:	0009883a 	mov	r4,zero
10002adc:	000b883a 	mov	r5,zero
10002ae0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002ae4:	01006c04 	movi	r4,432
10002ae8:	01414004 	movi	r5,1280
10002aec:	000277c0 	call	1000277c <UsbWrite>
}
10002af0:	e037883a 	mov	sp,fp
10002af4:	dfc00117 	ldw	ra,4(sp)
10002af8:	df000017 	ldw	fp,0(sp)
10002afc:	dec00204 	addi	sp,sp,8
10002b00:	f800283a 	ret

10002b04 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10002b04:	defffe04 	addi	sp,sp,-8
10002b08:	dfc00115 	stw	ra,4(sp)
10002b0c:	df000015 	stw	fp,0(sp)
10002b10:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002b14:	01000084 	movi	r4,2
10002b18:	01414004 	movi	r5,1280
10002b1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002b20:	0009883a 	mov	r4,zero
10002b24:	01414304 	movi	r5,1292
10002b28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002b2c:	0009883a 	mov	r4,zero
10002b30:	01400204 	movi	r5,8
10002b34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002b38:	0009883a 	mov	r4,zero
10002b3c:	0140b404 	movi	r5,720
10002b40:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002b44:	0009883a 	mov	r4,zero
10002b48:	01400044 	movi	r5,1
10002b4c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002b50:	0009883a 	mov	r4,zero
10002b54:	014004c4 	movi	r5,19
10002b58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002b5c:	0009883a 	mov	r4,zero
10002b60:	01414504 	movi	r5,1300
10002b64:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002b68:	0009883a 	mov	r4,zero
10002b6c:	0141a004 	movi	r5,1664
10002b70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10002b74:	0009883a 	mov	r4,zero
10002b78:	01404004 	movi	r5,256
10002b7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002b80:	0009883a 	mov	r4,zero
10002b84:	000b883a 	mov	r5,zero
10002b88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10002b8c:	0009883a 	mov	r4,zero
10002b90:	01400484 	movi	r5,18
10002b94:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002b98:	0009883a 	mov	r4,zero
10002b9c:	01415104 	movi	r5,1348
10002ba0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002ba4:	0009883a 	mov	r4,zero
10002ba8:	01400204 	movi	r5,8
10002bac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002bb0:	0009883a 	mov	r4,zero
10002bb4:	0140a404 	movi	r5,656
10002bb8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002bbc:	0009883a 	mov	r4,zero
10002bc0:	01401044 	movi	r5,65
10002bc4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002bc8:	0009883a 	mov	r4,zero
10002bcc:	014004c4 	movi	r5,19
10002bd0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002bd4:	0009883a 	mov	r4,zero
10002bd8:	01414804 	movi	r5,1312
10002bdc:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002be0:	0009883a 	mov	r4,zero
10002be4:	01415304 	movi	r5,1356
10002be8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002bec:	0009883a 	mov	r4,zero
10002bf0:	01400204 	movi	r5,8
10002bf4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002bf8:	0009883a 	mov	r4,zero
10002bfc:	0140a404 	movi	r5,656
10002c00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10002c04:	0009883a 	mov	r4,zero
10002c08:	01400044 	movi	r5,1
10002c0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002c10:	0009883a 	mov	r4,zero
10002c14:	014004c4 	movi	r5,19
10002c18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002c1c:	0009883a 	mov	r4,zero
10002c20:	01414b04 	movi	r5,1324
10002c24:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10002c28:	0009883a 	mov	r4,zero
10002c2c:	01415504 	movi	r5,1364
10002c30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10002c34:	0009883a 	mov	r4,zero
10002c38:	01400084 	movi	r5,2
10002c3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002c40:	0009883a 	mov	r4,zero
10002c44:	0140a404 	movi	r5,656
10002c48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002c4c:	0009883a 	mov	r4,zero
10002c50:	01401044 	movi	r5,65
10002c54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002c58:	0009883a 	mov	r4,zero
10002c5c:	014004c4 	movi	r5,19
10002c60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002c64:	0009883a 	mov	r4,zero
10002c68:	01414e04 	movi	r5,1336
10002c6c:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10002c70:	0009883a 	mov	r4,zero
10002c74:	000b883a 	mov	r5,zero
10002c78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002c7c:	0009883a 	mov	r4,zero
10002c80:	000b883a 	mov	r5,zero
10002c84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10002c88:	0009883a 	mov	r4,zero
10002c8c:	01408404 	movi	r5,528
10002c90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10002c94:	0009883a 	mov	r4,zero
10002c98:	01401044 	movi	r5,65
10002c9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002ca0:	0009883a 	mov	r4,zero
10002ca4:	014004c4 	movi	r5,19
10002ca8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002cac:	0009883a 	mov	r4,zero
10002cb0:	000b883a 	mov	r5,zero
10002cb4:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002cb8:	01006c04 	movi	r4,432
10002cbc:	01414004 	movi	r5,1280
10002cc0:	000277c0 	call	1000277c <UsbWrite>
}
10002cc4:	e037883a 	mov	sp,fp
10002cc8:	dfc00117 	ldw	ra,4(sp)
10002ccc:	df000017 	ldw	fp,0(sp)
10002cd0:	dec00204 	addi	sp,sp,8
10002cd4:	f800283a 	ret

10002cd8 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10002cd8:	defffe04 	addi	sp,sp,-8
10002cdc:	dfc00115 	stw	ra,4(sp)
10002ce0:	df000015 	stw	fp,0(sp)
10002ce4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002ce8:	01000084 	movi	r4,2
10002cec:	01414004 	movi	r5,1280
10002cf0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002cf4:	0009883a 	mov	r4,zero
10002cf8:	01414304 	movi	r5,1292
10002cfc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002d00:	0009883a 	mov	r4,zero
10002d04:	01400204 	movi	r5,8
10002d08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002d0c:	0009883a 	mov	r4,zero
10002d10:	0140b404 	movi	r5,720
10002d14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002d18:	0009883a 	mov	r4,zero
10002d1c:	01400044 	movi	r5,1
10002d20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002d24:	0009883a 	mov	r4,zero
10002d28:	014004c4 	movi	r5,19
10002d2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002d30:	0009883a 	mov	r4,zero
10002d34:	01414504 	movi	r5,1300
10002d38:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002d3c:	0009883a 	mov	r4,zero
10002d40:	0141a004 	movi	r5,1664
10002d44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002d48:	0009883a 	mov	r4,zero
10002d4c:	01408004 	movi	r5,512
10002d50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002d54:	0009883a 	mov	r4,zero
10002d58:	000b883a 	mov	r5,zero
10002d5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10002d60:	0009883a 	mov	r4,zero
10002d64:	01400244 	movi	r5,9
10002d68:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002d6c:	0009883a 	mov	r4,zero
10002d70:	01415104 	movi	r5,1348
10002d74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002d78:	0009883a 	mov	r4,zero
10002d7c:	01400204 	movi	r5,8
10002d80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002d84:	0009883a 	mov	r4,zero
10002d88:	0140a404 	movi	r5,656
10002d8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002d90:	0009883a 	mov	r4,zero
10002d94:	01401044 	movi	r5,65
10002d98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002d9c:	0009883a 	mov	r4,zero
10002da0:	014004c4 	movi	r5,19
10002da4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002da8:	0009883a 	mov	r4,zero
10002dac:	01414804 	movi	r5,1312
10002db0:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002db4:	0009883a 	mov	r4,zero
10002db8:	01415304 	movi	r5,1356
10002dbc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10002dc0:	0009883a 	mov	r4,zero
10002dc4:	01400044 	movi	r5,1
10002dc8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002dcc:	0009883a 	mov	r4,zero
10002dd0:	0140a404 	movi	r5,656
10002dd4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002dd8:	0009883a 	mov	r4,zero
10002ddc:	01400044 	movi	r5,1
10002de0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002de4:	0009883a 	mov	r4,zero
10002de8:	014004c4 	movi	r5,19
10002dec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002df0:	0009883a 	mov	r4,zero
10002df4:	01414b04 	movi	r5,1324
10002df8:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002dfc:	0009883a 	mov	r4,zero
10002e00:	000b883a 	mov	r5,zero
10002e04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002e08:	0009883a 	mov	r4,zero
10002e0c:	000b883a 	mov	r5,zero
10002e10:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002e14:	0009883a 	mov	r4,zero
10002e18:	01408404 	movi	r5,528
10002e1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002e20:	0009883a 	mov	r4,zero
10002e24:	01401044 	movi	r5,65
10002e28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002e2c:	0009883a 	mov	r4,zero
10002e30:	014004c4 	movi	r5,19
10002e34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002e38:	0009883a 	mov	r4,zero
10002e3c:	000b883a 	mov	r5,zero
10002e40:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002e44:	01006c04 	movi	r4,432
10002e48:	01414004 	movi	r5,1280
10002e4c:	000277c0 	call	1000277c <UsbWrite>
}
10002e50:	e037883a 	mov	sp,fp
10002e54:	dfc00117 	ldw	ra,4(sp)
10002e58:	df000017 	ldw	fp,0(sp)
10002e5c:	dec00204 	addi	sp,sp,8
10002e60:	f800283a 	ret

10002e64 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10002e64:	defffe04 	addi	sp,sp,-8
10002e68:	dfc00115 	stw	ra,4(sp)
10002e6c:	df000015 	stw	fp,0(sp)
10002e70:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002e74:	01000084 	movi	r4,2
10002e78:	01414004 	movi	r5,1280
10002e7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002e80:	0009883a 	mov	r4,zero
10002e84:	01414304 	movi	r5,1292
10002e88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002e8c:	0009883a 	mov	r4,zero
10002e90:	01400204 	movi	r5,8
10002e94:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002e98:	0009883a 	mov	r4,zero
10002e9c:	0140b404 	movi	r5,720
10002ea0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002ea4:	0009883a 	mov	r4,zero
10002ea8:	01400044 	movi	r5,1
10002eac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002eb0:	0009883a 	mov	r4,zero
10002eb4:	014004c4 	movi	r5,19
10002eb8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002ebc:	0009883a 	mov	r4,zero
10002ec0:	01414504 	movi	r5,1300
10002ec4:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002ec8:	0009883a 	mov	r4,zero
10002ecc:	0141a004 	movi	r5,1664
10002ed0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002ed4:	0009883a 	mov	r4,zero
10002ed8:	01408004 	movi	r5,512
10002edc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002ee0:	0009883a 	mov	r4,zero
10002ee4:	000b883a 	mov	r5,zero
10002ee8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10002eec:	0009883a 	mov	r4,zero
10002ef0:	01403fc4 	movi	r5,255
10002ef4:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10002ef8:	0009883a 	mov	r4,zero
10002efc:	01415704 	movi	r5,1372
10002f00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002f04:	0009883a 	mov	r4,zero
10002f08:	01400204 	movi	r5,8
10002f0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002f10:	0009883a 	mov	r4,zero
10002f14:	0140a404 	movi	r5,656
10002f18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002f1c:	0009883a 	mov	r4,zero
10002f20:	01401044 	movi	r5,65
10002f24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002f28:	0009883a 	mov	r4,zero
10002f2c:	014004c4 	movi	r5,19
10002f30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002f34:	0009883a 	mov	r4,zero
10002f38:	01414804 	movi	r5,1312
10002f3c:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10002f40:	0009883a 	mov	r4,zero
10002f44:	01415904 	movi	r5,1380
10002f48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002f4c:	0009883a 	mov	r4,zero
10002f50:	01400204 	movi	r5,8
10002f54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002f58:	0009883a 	mov	r4,zero
10002f5c:	0140a404 	movi	r5,656
10002f60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002f64:	0009883a 	mov	r4,zero
10002f68:	01400044 	movi	r5,1
10002f6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002f70:	0009883a 	mov	r4,zero
10002f74:	014004c4 	movi	r5,19
10002f78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002f7c:	0009883a 	mov	r4,zero
10002f80:	01414b04 	movi	r5,1324
10002f84:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10002f88:	0009883a 	mov	r4,zero
10002f8c:	01415b04 	movi	r5,1388
10002f90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002f94:	0009883a 	mov	r4,zero
10002f98:	01400204 	movi	r5,8
10002f9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002fa0:	0009883a 	mov	r4,zero
10002fa4:	0140a404 	movi	r5,656
10002fa8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002fac:	0009883a 	mov	r4,zero
10002fb0:	01401044 	movi	r5,65
10002fb4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002fb8:	0009883a 	mov	r4,zero
10002fbc:	014004c4 	movi	r5,19
10002fc0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002fc4:	0009883a 	mov	r4,zero
10002fc8:	01414e04 	movi	r5,1336
10002fcc:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10002fd0:	0009883a 	mov	r4,zero
10002fd4:	01415d04 	movi	r5,1396
10002fd8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002fdc:	0009883a 	mov	r4,zero
10002fe0:	01400204 	movi	r5,8
10002fe4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002fe8:	0009883a 	mov	r4,zero
10002fec:	0140a404 	movi	r5,656
10002ff0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002ff4:	0009883a 	mov	r4,zero
10002ff8:	01400044 	movi	r5,1
10002ffc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10003000:	0009883a 	mov	r4,zero
10003004:	014004c4 	movi	r5,19
10003008:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000300c:	0009883a 	mov	r4,zero
10003010:	01415104 	movi	r5,1348
10003014:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10003018:	0009883a 	mov	r4,zero
1000301c:	01415f04 	movi	r5,1404
10003020:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10003024:	0009883a 	mov	r4,zero
10003028:	01400084 	movi	r5,2
1000302c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003030:	0009883a 	mov	r4,zero
10003034:	0140a404 	movi	r5,656
10003038:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000303c:	0009883a 	mov	r4,zero
10003040:	01401044 	movi	r5,65
10003044:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003048:	0009883a 	mov	r4,zero
1000304c:	014004c4 	movi	r5,19
10003050:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10003054:	0009883a 	mov	r4,zero
10003058:	01415404 	movi	r5,1360
1000305c:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10003060:	0009883a 	mov	r4,zero
10003064:	000b883a 	mov	r5,zero
10003068:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000306c:	0009883a 	mov	r4,zero
10003070:	000b883a 	mov	r5,zero
10003074:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10003078:	0009883a 	mov	r4,zero
1000307c:	01408404 	movi	r5,528
10003080:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10003084:	0009883a 	mov	r4,zero
10003088:	01401044 	movi	r5,65
1000308c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003090:	0009883a 	mov	r4,zero
10003094:	014004c4 	movi	r5,19
10003098:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000309c:	0009883a 	mov	r4,zero
100030a0:	000b883a 	mov	r5,zero
100030a4:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100030a8:	01006c04 	movi	r4,432
100030ac:	01414004 	movi	r5,1280
100030b0:	000277c0 	call	1000277c <UsbWrite>
}
100030b4:	e037883a 	mov	sp,fp
100030b8:	dfc00117 	ldw	ra,4(sp)
100030bc:	df000017 	ldw	fp,0(sp)
100030c0:	dec00204 	addi	sp,sp,8
100030c4:	f800283a 	ret

100030c8 <UsbSetConfig>:

void UsbSetConfig()
{
100030c8:	defffe04 	addi	sp,sp,-8
100030cc:	dfc00115 	stw	ra,4(sp)
100030d0:	df000015 	stw	fp,0(sp)
100030d4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100030d8:	01000084 	movi	r4,2
100030dc:	01414004 	movi	r5,1280
100030e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100030e4:	0009883a 	mov	r4,zero
100030e8:	01414304 	movi	r5,1292
100030ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100030f0:	0009883a 	mov	r4,zero
100030f4:	01400204 	movi	r5,8
100030f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100030fc:	0009883a 	mov	r4,zero
10003100:	0140b404 	movi	r5,720
10003104:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003108:	0009883a 	mov	r4,zero
1000310c:	01400044 	movi	r5,1
10003110:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003114:	0009883a 	mov	r4,zero
10003118:	014004c4 	movi	r5,19
1000311c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003120:	0009883a 	mov	r4,zero
10003124:	01414504 	movi	r5,1300
10003128:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
1000312c:	0009883a 	mov	r4,zero
10003130:	01424004 	movi	r5,2304
10003134:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10003138:	0009883a 	mov	r4,zero
1000313c:	01400044 	movi	r5,1
10003140:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003144:	0009883a 	mov	r4,zero
10003148:	000b883a 	mov	r5,zero
1000314c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003150:	0009883a 	mov	r4,zero
10003154:	000b883a 	mov	r5,zero
10003158:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
1000315c:	0009883a 	mov	r4,zero
10003160:	000b883a 	mov	r5,zero
10003164:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10003168:	0009883a 	mov	r4,zero
1000316c:	000b883a 	mov	r5,zero
10003170:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10003174:	0009883a 	mov	r4,zero
10003178:	0140a404 	movi	r5,656
1000317c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10003180:	0009883a 	mov	r4,zero
10003184:	01401044 	movi	r5,65
10003188:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000318c:	0009883a 	mov	r4,zero
10003190:	014004c4 	movi	r5,19
10003194:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003198:	0009883a 	mov	r4,zero
1000319c:	000b883a 	mov	r5,zero
100031a0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100031a4:	01006c04 	movi	r4,432
100031a8:	01414004 	movi	r5,1280
100031ac:	000277c0 	call	1000277c <UsbWrite>

}
100031b0:	e037883a 	mov	sp,fp
100031b4:	dfc00117 	ldw	ra,4(sp)
100031b8:	df000017 	ldw	fp,0(sp)
100031bc:	dec00204 	addi	sp,sp,8
100031c0:	f800283a 	ret

100031c4 <UsbClassRequest>:

void UsbClassRequest()
{
100031c4:	defffe04 	addi	sp,sp,-8
100031c8:	dfc00115 	stw	ra,4(sp)
100031cc:	df000015 	stw	fp,0(sp)
100031d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100031d4:	01000084 	movi	r4,2
100031d8:	01414004 	movi	r5,1280
100031dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100031e0:	0009883a 	mov	r4,zero
100031e4:	01414304 	movi	r5,1292
100031e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100031ec:	0009883a 	mov	r4,zero
100031f0:	01400204 	movi	r5,8
100031f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100031f8:	0009883a 	mov	r4,zero
100031fc:	0140b404 	movi	r5,720
10003200:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003204:	0009883a 	mov	r4,zero
10003208:	01400044 	movi	r5,1
1000320c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003210:	0009883a 	mov	r4,zero
10003214:	014004c4 	movi	r5,19
10003218:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000321c:	0009883a 	mov	r4,zero
10003220:	01414504 	movi	r5,1300
10003224:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10003228:	0009883a 	mov	r4,zero
1000322c:	01428844 	movi	r5,2593
10003230:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10003234:	0009883a 	mov	r4,zero
10003238:	000b883a 	mov	r5,zero
1000323c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003240:	0009883a 	mov	r4,zero
10003244:	000b883a 	mov	r5,zero
10003248:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000324c:	0009883a 	mov	r4,zero
10003250:	000b883a 	mov	r5,zero
10003254:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10003258:	0009883a 	mov	r4,zero
1000325c:	000b883a 	mov	r5,zero
10003260:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10003264:	0009883a 	mov	r4,zero
10003268:	000b883a 	mov	r5,zero
1000326c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10003270:	0009883a 	mov	r4,zero
10003274:	0140a404 	movi	r5,656
10003278:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
1000327c:	0009883a 	mov	r4,zero
10003280:	01401044 	movi	r5,65
10003284:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003288:	0009883a 	mov	r4,zero
1000328c:	014004c4 	movi	r5,19
10003290:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003294:	0009883a 	mov	r4,zero
10003298:	000b883a 	mov	r5,zero
1000329c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100032a0:	01006c04 	movi	r4,432
100032a4:	01414004 	movi	r5,1280
100032a8:	000277c0 	call	1000277c <UsbWrite>
}
100032ac:	e037883a 	mov	sp,fp
100032b0:	dfc00117 	ldw	ra,4(sp)
100032b4:	df000017 	ldw	fp,0(sp)
100032b8:	dec00204 	addi	sp,sp,8
100032bc:	f800283a 	ret

100032c0 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
100032c0:	defffe04 	addi	sp,sp,-8
100032c4:	dfc00115 	stw	ra,4(sp)
100032c8:	df000015 	stw	fp,0(sp)
100032cc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100032d0:	01000084 	movi	r4,2
100032d4:	01414004 	movi	r5,1280
100032d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100032dc:	0009883a 	mov	r4,zero
100032e0:	01414304 	movi	r5,1292
100032e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100032e8:	0009883a 	mov	r4,zero
100032ec:	01400204 	movi	r5,8
100032f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100032f4:	0009883a 	mov	r4,zero
100032f8:	0140b404 	movi	r5,720
100032fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003300:	0009883a 	mov	r4,zero
10003304:	01400044 	movi	r5,1
10003308:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000330c:	0009883a 	mov	r4,zero
10003310:	014004c4 	movi	r5,19
10003314:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003318:	0009883a 	mov	r4,zero
1000331c:	01414504 	movi	r5,1300
10003320:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003324:	0009883a 	mov	r4,zero
10003328:	0141a044 	movi	r5,1665
1000332c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10003330:	0009883a 	mov	r4,zero
10003334:	01484004 	movi	r5,8448
10003338:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000333c:	0009883a 	mov	r4,zero
10003340:	000b883a 	mov	r5,zero
10003344:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10003348:	0009883a 	mov	r4,zero
1000334c:	01401ec4 	movi	r5,123
10003350:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10003354:	0009883a 	mov	r4,zero
10003358:	01415104 	movi	r5,1348
1000335c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003360:	0009883a 	mov	r4,zero
10003364:	01400204 	movi	r5,8
10003368:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000336c:	0009883a 	mov	r4,zero
10003370:	0140a404 	movi	r5,656
10003374:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003378:	0009883a 	mov	r4,zero
1000337c:	01401044 	movi	r5,65
10003380:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003384:	0009883a 	mov	r4,zero
10003388:	014004c4 	movi	r5,19
1000338c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003390:	0009883a 	mov	r4,zero
10003394:	01414804 	movi	r5,1312
10003398:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
1000339c:	0009883a 	mov	r4,zero
100033a0:	000b883a 	mov	r5,zero
100033a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100033a8:	0009883a 	mov	r4,zero
100033ac:	000b883a 	mov	r5,zero
100033b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100033b4:	0009883a 	mov	r4,zero
100033b8:	01408404 	movi	r5,528
100033bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100033c0:	0009883a 	mov	r4,zero
100033c4:	01401044 	movi	r5,65
100033c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100033cc:	0009883a 	mov	r4,zero
100033d0:	014004c4 	movi	r5,19
100033d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100033d8:	0009883a 	mov	r4,zero
100033dc:	000b883a 	mov	r5,zero
100033e0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100033e4:	01006c04 	movi	r4,432
100033e8:	01414004 	movi	r5,1280
100033ec:	000277c0 	call	1000277c <UsbWrite>

}
100033f0:	e037883a 	mov	sp,fp
100033f4:	dfc00117 	ldw	ra,4(sp)
100033f8:	df000017 	ldw	fp,0(sp)
100033fc:	dec00204 	addi	sp,sp,8
10003400:	f800283a 	ret

10003404 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10003404:	defffe04 	addi	sp,sp,-8
10003408:	dfc00115 	stw	ra,4(sp)
1000340c:	df000015 	stw	fp,0(sp)
10003410:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003414:	01000084 	movi	r4,2
10003418:	01414004 	movi	r5,1280
1000341c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003420:	0009883a 	mov	r4,zero
10003424:	01414304 	movi	r5,1292
10003428:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000342c:	0009883a 	mov	r4,zero
10003430:	01400204 	movi	r5,8
10003434:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003438:	0009883a 	mov	r4,zero
1000343c:	0140b404 	movi	r5,720
10003440:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003444:	0009883a 	mov	r4,zero
10003448:	01400044 	movi	r5,1
1000344c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003450:	0009883a 	mov	r4,zero
10003454:	014004c4 	movi	r5,19
10003458:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000345c:	0009883a 	mov	r4,zero
10003460:	01414504 	movi	r5,1300
10003464:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003468:	0009883a 	mov	r4,zero
1000346c:	0141a044 	movi	r5,1665
10003470:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10003474:	0009883a 	mov	r4,zero
10003478:	01488004 	movi	r5,8704
1000347c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003480:	0009883a 	mov	r4,zero
10003484:	000b883a 	mov	r5,zero
10003488:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
1000348c:	0009883a 	mov	r4,zero
10003490:	01401ec4 	movi	r5,123
10003494:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10003498:	0009883a 	mov	r4,zero
1000349c:	01416004 	movi	r5,1408
100034a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100034a4:	0009883a 	mov	r4,zero
100034a8:	01400204 	movi	r5,8
100034ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100034b0:	0009883a 	mov	r4,zero
100034b4:	0140a404 	movi	r5,656
100034b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100034bc:	0009883a 	mov	r4,zero
100034c0:	01401044 	movi	r5,65
100034c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100034c8:	0009883a 	mov	r4,zero
100034cc:	014004c4 	movi	r5,19
100034d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100034d4:	0009883a 	mov	r4,zero
100034d8:	01414804 	movi	r5,1312
100034dc:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
100034e0:	0009883a 	mov	r4,zero
100034e4:	01416204 	movi	r5,1416
100034e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100034ec:	0009883a 	mov	r4,zero
100034f0:	01400204 	movi	r5,8
100034f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100034f8:	0009883a 	mov	r4,zero
100034fc:	0140a404 	movi	r5,656
10003500:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003504:	0009883a 	mov	r4,zero
10003508:	01400044 	movi	r5,1
1000350c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003510:	0009883a 	mov	r4,zero
10003514:	014004c4 	movi	r5,19
10003518:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000351c:	0009883a 	mov	r4,zero
10003520:	01414b04 	movi	r5,1324
10003524:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10003528:	0009883a 	mov	r4,zero
1000352c:	01416404 	movi	r5,1424
10003530:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003534:	0009883a 	mov	r4,zero
10003538:	01400204 	movi	r5,8
1000353c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10003540:	0009883a 	mov	r4,zero
10003544:	0140a404 	movi	r5,656
10003548:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000354c:	0009883a 	mov	r4,zero
10003550:	01401044 	movi	r5,65
10003554:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003558:	0009883a 	mov	r4,zero
1000355c:	014004c4 	movi	r5,19
10003560:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10003564:	0009883a 	mov	r4,zero
10003568:	01414e04 	movi	r5,1336
1000356c:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10003570:	0009883a 	mov	r4,zero
10003574:	01416604 	movi	r5,1432
10003578:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
1000357c:	0009883a 	mov	r4,zero
10003580:	01400204 	movi	r5,8
10003584:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003588:	0009883a 	mov	r4,zero
1000358c:	0140a404 	movi	r5,656
10003590:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003594:	0009883a 	mov	r4,zero
10003598:	01400044 	movi	r5,1
1000359c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100035a0:	0009883a 	mov	r4,zero
100035a4:	014004c4 	movi	r5,19
100035a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100035ac:	0009883a 	mov	r4,zero
100035b0:	01415104 	movi	r5,1348
100035b4:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
100035b8:	0009883a 	mov	r4,zero
100035bc:	01416804 	movi	r5,1440
100035c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100035c4:	0009883a 	mov	r4,zero
100035c8:	01400204 	movi	r5,8
100035cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100035d0:	0009883a 	mov	r4,zero
100035d4:	0140a404 	movi	r5,656
100035d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100035dc:	0009883a 	mov	r4,zero
100035e0:	01401044 	movi	r5,65
100035e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100035e8:	0009883a 	mov	r4,zero
100035ec:	014004c4 	movi	r5,19
100035f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100035f4:	0009883a 	mov	r4,zero
100035f8:	01415404 	movi	r5,1360
100035fc:	00002480 	call	10000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10003600:	0009883a 	mov	r4,zero
10003604:	01416a04 	movi	r5,1448
10003608:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000360c:	0009883a 	mov	r4,zero
10003610:	01400204 	movi	r5,8
10003614:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003618:	0009883a 	mov	r4,zero
1000361c:	0140a404 	movi	r5,656
10003620:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003624:	0009883a 	mov	r4,zero
10003628:	01400044 	movi	r5,1
1000362c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003630:	0009883a 	mov	r4,zero
10003634:	014004c4 	movi	r5,19
10003638:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
1000363c:	0009883a 	mov	r4,zero
10003640:	01415704 	movi	r5,1372
10003644:	00002480 	call	10000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10003648:	0009883a 	mov	r4,zero
1000364c:	01416c04 	movi	r5,1456
10003650:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003654:	0009883a 	mov	r4,zero
10003658:	01400204 	movi	r5,8
1000365c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10003660:	0009883a 	mov	r4,zero
10003664:	0140a404 	movi	r5,656
10003668:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
1000366c:	0009883a 	mov	r4,zero
10003670:	01401044 	movi	r5,65
10003674:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003678:	0009883a 	mov	r4,zero
1000367c:	014004c4 	movi	r5,19
10003680:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10003684:	0009883a 	mov	r4,zero
10003688:	01415a04 	movi	r5,1384
1000368c:	00002480 	call	10000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10003690:	0009883a 	mov	r4,zero
10003694:	01416e04 	movi	r5,1464
10003698:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
1000369c:	0009883a 	mov	r4,zero
100036a0:	014000c4 	movi	r5,3
100036a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100036a8:	0009883a 	mov	r4,zero
100036ac:	0140a404 	movi	r5,656
100036b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100036b4:	0009883a 	mov	r4,zero
100036b8:	01400044 	movi	r5,1
100036bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
100036c0:	0009883a 	mov	r4,zero
100036c4:	014004c4 	movi	r5,19
100036c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
100036cc:	0009883a 	mov	r4,zero
100036d0:	01415d04 	movi	r5,1396
100036d4:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
100036d8:	0009883a 	mov	r4,zero
100036dc:	000b883a 	mov	r5,zero
100036e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100036e4:	0009883a 	mov	r4,zero
100036e8:	000b883a 	mov	r5,zero
100036ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100036f0:	0009883a 	mov	r4,zero
100036f4:	01408404 	movi	r5,528
100036f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100036fc:	0009883a 	mov	r4,zero
10003700:	01401044 	movi	r5,65
10003704:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003708:	0009883a 	mov	r4,zero
1000370c:	014004c4 	movi	r5,19
10003710:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003714:	0009883a 	mov	r4,zero
10003718:	000b883a 	mov	r5,zero
1000371c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003720:	01006c04 	movi	r4,432
10003724:	01414004 	movi	r5,1280
10003728:	000277c0 	call	1000277c <UsbWrite>

}
1000372c:	e037883a 	mov	sp,fp
10003730:	dfc00117 	ldw	ra,4(sp)
10003734:	df000017 	ldw	fp,0(sp)
10003738:	dec00204 	addi	sp,sp,8
1000373c:	f800283a 	ret

10003740 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10003740:	defffd04 	addi	sp,sp,-12
10003744:	dfc00215 	stw	ra,8(sp)
10003748:	df000115 	stw	fp,4(sp)
1000374c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10003750:	01005104 	movi	r4,324
10003754:	00027d00 	call	100027d0 <UsbRead>
10003758:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000375c:	01005104 	movi	r4,324
10003760:	000b883a 	mov	r5,zero
10003764:	000277c0 	call	1000277c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10003768:	00000d06 	br	100037a0 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
1000376c:	e0bfff0b 	ldhu	r2,-4(fp)
10003770:	10000526 	beq	r2,zero,10003788 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10003774:	e0bfff0b 	ldhu	r2,-4(fp)
10003778:	01040074 	movhi	r4,4097
1000377c:	210c6804 	addi	r4,r4,12704
10003780:	100b883a 	mov	r5,r2
10003784:	0003a400 	call	10003a40 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10003788:	01005104 	movi	r4,324
1000378c:	00027d00 	call	100027d0 <UsbRead>
10003790:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003794:	01005104 	movi	r4,324
10003798:	000b883a 	mov	r5,zero
1000379c:	000277c0 	call	1000277c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100037a0:	e0bfff0b 	ldhu	r2,-4(fp)
100037a4:	10840018 	cmpnei	r2,r2,4096
100037a8:	103ff01e 	bne	r2,zero,1000376c <__alt_data_end+0xf800376c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
100037ac:	e0bfff0b 	ldhu	r2,-4(fp)
}
100037b0:	e037883a 	mov	sp,fp
100037b4:	dfc00117 	ldw	ra,4(sp)
100037b8:	df000017 	ldw	fp,0(sp)
100037bc:	dec00204 	addi	sp,sp,8
100037c0:	f800283a 	ret

100037c4 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
100037c4:	defffd04 	addi	sp,sp,-12
100037c8:	dfc00215 	stw	ra,8(sp)
100037cc:	df000115 	stw	fp,4(sp)
100037d0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
100037d4:	010000c4 	movi	r4,3
100037d8:	00002b40 	call	100002b4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
100037dc:	01005104 	movi	r4,324
100037e0:	00027d00 	call	100027d0 <UsbRead>
100037e4:	10bfffcc 	andi	r2,r2,65535
100037e8:	10840018 	cmpnei	r2,r2,4096
100037ec:	1000091e 	bne	r2,zero,10003814 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100037f0:	01005104 	movi	r4,324
100037f4:	000b883a 	mov	r5,zero
100037f8:	000277c0 	call	1000277c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100037fc:	0001883a 	nop
10003800:	010000c4 	movi	r4,3
10003804:	00002b40 	call	100002b4 <IO_read>
10003808:	10bfffcc 	andi	r2,r2,65535
1000380c:	1080040c 	andi	r2,r2,16
10003810:	103ffb26 	beq	r2,zero,10003800 <__alt_data_end+0xf8003800>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10003814:	01000084 	movi	r4,2
10003818:	01414204 	movi	r5,1288
1000381c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003820:	0009883a 	mov	r4,zero
10003824:	00002b40 	call	100002b4 <IO_read>
10003828:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
1000382c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003830:	e037883a 	mov	sp,fp
10003834:	dfc00117 	ldw	ra,4(sp)
10003838:	df000017 	ldw	fp,0(sp)
1000383c:	dec00204 	addi	sp,sp,8
10003840:	f800283a 	ret

10003844 <UsbPrintMem>:


void UsbPrintMem()
{
10003844:	defffc04 	addi	sp,sp,-16
10003848:	dfc00315 	stw	ra,12(sp)
1000384c:	df000215 	stw	fp,8(sp)
10003850:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10003854:	01000084 	movi	r4,2
10003858:	01414004 	movi	r5,1280
1000385c:	00002480 	call	10000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
10003860:	e03ffe15 	stw	zero,-8(fp)
10003864:	00000e06 	br	100038a0 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10003868:	0009883a 	mov	r4,zero
1000386c:	00002b40 	call	100002b4 <IO_read>
10003870:	10bfffcc 	andi	r2,r2,65535
10003874:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10003878:	e0bffe17 	ldw	r2,-8(fp)
1000387c:	10814004 	addi	r2,r2,1280
10003880:	01040074 	movhi	r4,4097
10003884:	210c7004 	addi	r4,r4,12736
10003888:	100b883a 	mov	r5,r2
1000388c:	e1bfff17 	ldw	r6,-4(fp)
10003890:	0003a400 	call	10003a40 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10003894:	e0bffe17 	ldw	r2,-8(fp)
10003898:	10800084 	addi	r2,r2,2
1000389c:	e0bffe15 	stw	r2,-8(fp)
100038a0:	e0bffe17 	ldw	r2,-8(fp)
100038a4:	10803250 	cmplti	r2,r2,201
100038a8:	103fef1e 	bne	r2,zero,10003868 <__alt_data_end+0xf8003868>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
100038ac:	e037883a 	mov	sp,fp
100038b0:	dfc00117 	ldw	ra,4(sp)
100038b4:	df000017 	ldw	fp,0(sp)
100038b8:	dec00204 	addi	sp,sp,8
100038bc:	f800283a 	ret

100038c0 <udivmodsi4>:
100038c0:	2900182e 	bgeu	r5,r4,10003924 <udivmodsi4+0x64>
100038c4:	28001716 	blt	r5,zero,10003924 <udivmodsi4+0x64>
100038c8:	00800804 	movi	r2,32
100038cc:	00c00044 	movi	r3,1
100038d0:	00000206 	br	100038dc <udivmodsi4+0x1c>
100038d4:	10001126 	beq	r2,zero,1000391c <udivmodsi4+0x5c>
100038d8:	28000516 	blt	r5,zero,100038f0 <udivmodsi4+0x30>
100038dc:	294b883a 	add	r5,r5,r5
100038e0:	10bfffc4 	addi	r2,r2,-1
100038e4:	18c7883a 	add	r3,r3,r3
100038e8:	293ffa36 	bltu	r5,r4,100038d4 <__alt_data_end+0xf80038d4>
100038ec:	18000b26 	beq	r3,zero,1000391c <udivmodsi4+0x5c>
100038f0:	0005883a 	mov	r2,zero
100038f4:	21400236 	bltu	r4,r5,10003900 <udivmodsi4+0x40>
100038f8:	2149c83a 	sub	r4,r4,r5
100038fc:	10c4b03a 	or	r2,r2,r3
10003900:	1806d07a 	srli	r3,r3,1
10003904:	280ad07a 	srli	r5,r5,1
10003908:	183ffa1e 	bne	r3,zero,100038f4 <__alt_data_end+0xf80038f4>
1000390c:	3000011e 	bne	r6,zero,10003914 <udivmodsi4+0x54>
10003910:	f800283a 	ret
10003914:	2005883a 	mov	r2,r4
10003918:	f800283a 	ret
1000391c:	0005883a 	mov	r2,zero
10003920:	003ffa06 	br	1000390c <__alt_data_end+0xf800390c>
10003924:	00c00044 	movi	r3,1
10003928:	003ff106 	br	100038f0 <__alt_data_end+0xf80038f0>

1000392c <__divsi3>:
1000392c:	defffe04 	addi	sp,sp,-8
10003930:	dfc00115 	stw	ra,4(sp)
10003934:	dc000015 	stw	r16,0(sp)
10003938:	20000b16 	blt	r4,zero,10003968 <__divsi3+0x3c>
1000393c:	0021883a 	mov	r16,zero
10003940:	28000c16 	blt	r5,zero,10003974 <__divsi3+0x48>
10003944:	000d883a 	mov	r6,zero
10003948:	00038c00 	call	100038c0 <udivmodsi4>
1000394c:	0407c83a 	sub	r3,zero,r16
10003950:	1884f03a 	xor	r2,r3,r2
10003954:	1405883a 	add	r2,r2,r16
10003958:	dfc00117 	ldw	ra,4(sp)
1000395c:	dc000017 	ldw	r16,0(sp)
10003960:	dec00204 	addi	sp,sp,8
10003964:	f800283a 	ret
10003968:	0109c83a 	sub	r4,zero,r4
1000396c:	04000044 	movi	r16,1
10003970:	283ff40e 	bge	r5,zero,10003944 <__alt_data_end+0xf8003944>
10003974:	014bc83a 	sub	r5,zero,r5
10003978:	8400005c 	xori	r16,r16,1
1000397c:	003ff106 	br	10003944 <__alt_data_end+0xf8003944>

10003980 <__modsi3>:
10003980:	defffd04 	addi	sp,sp,-12
10003984:	dfc00215 	stw	ra,8(sp)
10003988:	dc400115 	stw	r17,4(sp)
1000398c:	dc000015 	stw	r16,0(sp)
10003990:	20000c16 	blt	r4,zero,100039c4 <__modsi3+0x44>
10003994:	0023883a 	mov	r17,zero
10003998:	0021883a 	mov	r16,zero
1000399c:	28000d16 	blt	r5,zero,100039d4 <__modsi3+0x54>
100039a0:	01800044 	movi	r6,1
100039a4:	00038c00 	call	100038c0 <udivmodsi4>
100039a8:	1404f03a 	xor	r2,r2,r16
100039ac:	8885883a 	add	r2,r17,r2
100039b0:	dfc00217 	ldw	ra,8(sp)
100039b4:	dc400117 	ldw	r17,4(sp)
100039b8:	dc000017 	ldw	r16,0(sp)
100039bc:	dec00304 	addi	sp,sp,12
100039c0:	f800283a 	ret
100039c4:	0109c83a 	sub	r4,zero,r4
100039c8:	04400044 	movi	r17,1
100039cc:	043fffc4 	movi	r16,-1
100039d0:	283ff30e 	bge	r5,zero,100039a0 <__alt_data_end+0xf80039a0>
100039d4:	014bc83a 	sub	r5,zero,r5
100039d8:	003ff106 	br	100039a0 <__alt_data_end+0xf80039a0>

100039dc <__udivsi3>:
100039dc:	000d883a 	mov	r6,zero
100039e0:	00038c01 	jmpi	100038c0 <udivmodsi4>

100039e4 <__umodsi3>:
100039e4:	01800044 	movi	r6,1
100039e8:	00038c01 	jmpi	100038c0 <udivmodsi4>

100039ec <__mulsi3>:
100039ec:	0005883a 	mov	r2,zero
100039f0:	20000726 	beq	r4,zero,10003a10 <__mulsi3+0x24>
100039f4:	20c0004c 	andi	r3,r4,1
100039f8:	2008d07a 	srli	r4,r4,1
100039fc:	18000126 	beq	r3,zero,10003a04 <__mulsi3+0x18>
10003a00:	1145883a 	add	r2,r2,r5
10003a04:	294b883a 	add	r5,r5,r5
10003a08:	203ffa1e 	bne	r4,zero,100039f4 <__alt_data_end+0xf80039f4>
10003a0c:	f800283a 	ret
10003a10:	f800283a 	ret

10003a14 <_printf_r>:
10003a14:	defffd04 	addi	sp,sp,-12
10003a18:	dfc00015 	stw	ra,0(sp)
10003a1c:	d9800115 	stw	r6,4(sp)
10003a20:	d9c00215 	stw	r7,8(sp)
10003a24:	280d883a 	mov	r6,r5
10003a28:	21400217 	ldw	r5,8(r4)
10003a2c:	d9c00104 	addi	r7,sp,4
10003a30:	0003be00 	call	10003be0 <___vfprintf_internal_r>
10003a34:	dfc00017 	ldw	ra,0(sp)
10003a38:	dec00304 	addi	sp,sp,12
10003a3c:	f800283a 	ret

10003a40 <printf>:
10003a40:	defffc04 	addi	sp,sp,-16
10003a44:	dfc00015 	stw	ra,0(sp)
10003a48:	d9400115 	stw	r5,4(sp)
10003a4c:	d9800215 	stw	r6,8(sp)
10003a50:	d9c00315 	stw	r7,12(sp)
10003a54:	00840074 	movhi	r2,4097
10003a58:	1093e104 	addi	r2,r2,20356
10003a5c:	10800017 	ldw	r2,0(r2)
10003a60:	200b883a 	mov	r5,r4
10003a64:	d9800104 	addi	r6,sp,4
10003a68:	11000217 	ldw	r4,8(r2)
10003a6c:	0005cdc0 	call	10005cdc <__vfprintf_internal>
10003a70:	dfc00017 	ldw	ra,0(sp)
10003a74:	dec00404 	addi	sp,sp,16
10003a78:	f800283a 	ret

10003a7c <_puts_r>:
10003a7c:	defff604 	addi	sp,sp,-40
10003a80:	dc000715 	stw	r16,28(sp)
10003a84:	2021883a 	mov	r16,r4
10003a88:	2809883a 	mov	r4,r5
10003a8c:	dc400815 	stw	r17,32(sp)
10003a90:	dfc00915 	stw	ra,36(sp)
10003a94:	2823883a 	mov	r17,r5
10003a98:	0003b480 	call	10003b48 <strlen>
10003a9c:	00c40074 	movhi	r3,4097
10003aa0:	18d3e104 	addi	r3,r3,20356
10003aa4:	18c00017 	ldw	r3,0(r3)
10003aa8:	11000044 	addi	r4,r2,1
10003aac:	d8800115 	stw	r2,4(sp)
10003ab0:	18c00217 	ldw	r3,8(r3)
10003ab4:	01440074 	movhi	r5,4097
10003ab8:	294c7504 	addi	r5,r5,12756
10003abc:	1880030b 	ldhu	r2,12(r3)
10003ac0:	d9400215 	stw	r5,8(sp)
10003ac4:	d9000615 	stw	r4,24(sp)
10003ac8:	01400044 	movi	r5,1
10003acc:	01000084 	movi	r4,2
10003ad0:	d9000515 	stw	r4,20(sp)
10003ad4:	dc400015 	stw	r17,0(sp)
10003ad8:	d9400315 	stw	r5,12(sp)
10003adc:	dec00415 	stw	sp,16(sp)
10003ae0:	1108000c 	andi	r4,r2,8192
10003ae4:	2000061e 	bne	r4,zero,10003b00 <_puts_r+0x84>
10003ae8:	19401917 	ldw	r5,100(r3)
10003aec:	0137ffc4 	movi	r4,-8193
10003af0:	10880014 	ori	r2,r2,8192
10003af4:	2908703a 	and	r4,r5,r4
10003af8:	1880030d 	sth	r2,12(r3)
10003afc:	19001915 	stw	r4,100(r3)
10003b00:	81400217 	ldw	r5,8(r16)
10003b04:	8009883a 	mov	r4,r16
10003b08:	d9800404 	addi	r6,sp,16
10003b0c:	00081a00 	call	100081a0 <__sfvwrite_r>
10003b10:	1000061e 	bne	r2,zero,10003b2c <_puts_r+0xb0>
10003b14:	00800284 	movi	r2,10
10003b18:	dfc00917 	ldw	ra,36(sp)
10003b1c:	dc400817 	ldw	r17,32(sp)
10003b20:	dc000717 	ldw	r16,28(sp)
10003b24:	dec00a04 	addi	sp,sp,40
10003b28:	f800283a 	ret
10003b2c:	00bfffc4 	movi	r2,-1
10003b30:	003ff906 	br	10003b18 <__alt_data_end+0xf8003b18>

10003b34 <puts>:
10003b34:	00840074 	movhi	r2,4097
10003b38:	1093e104 	addi	r2,r2,20356
10003b3c:	200b883a 	mov	r5,r4
10003b40:	11000017 	ldw	r4,0(r2)
10003b44:	0003a7c1 	jmpi	10003a7c <_puts_r>

10003b48 <strlen>:
10003b48:	208000cc 	andi	r2,r4,3
10003b4c:	10002026 	beq	r2,zero,10003bd0 <strlen+0x88>
10003b50:	20800007 	ldb	r2,0(r4)
10003b54:	10002026 	beq	r2,zero,10003bd8 <strlen+0x90>
10003b58:	2005883a 	mov	r2,r4
10003b5c:	00000206 	br	10003b68 <strlen+0x20>
10003b60:	10c00007 	ldb	r3,0(r2)
10003b64:	18001826 	beq	r3,zero,10003bc8 <strlen+0x80>
10003b68:	10800044 	addi	r2,r2,1
10003b6c:	10c000cc 	andi	r3,r2,3
10003b70:	183ffb1e 	bne	r3,zero,10003b60 <__alt_data_end+0xf8003b60>
10003b74:	10c00017 	ldw	r3,0(r2)
10003b78:	01ffbff4 	movhi	r7,65279
10003b7c:	39ffbfc4 	addi	r7,r7,-257
10003b80:	00ca303a 	nor	r5,zero,r3
10003b84:	01a02074 	movhi	r6,32897
10003b88:	19c7883a 	add	r3,r3,r7
10003b8c:	31a02004 	addi	r6,r6,-32640
10003b90:	1946703a 	and	r3,r3,r5
10003b94:	1986703a 	and	r3,r3,r6
10003b98:	1800091e 	bne	r3,zero,10003bc0 <strlen+0x78>
10003b9c:	10800104 	addi	r2,r2,4
10003ba0:	10c00017 	ldw	r3,0(r2)
10003ba4:	19cb883a 	add	r5,r3,r7
10003ba8:	00c6303a 	nor	r3,zero,r3
10003bac:	28c6703a 	and	r3,r5,r3
10003bb0:	1986703a 	and	r3,r3,r6
10003bb4:	183ff926 	beq	r3,zero,10003b9c <__alt_data_end+0xf8003b9c>
10003bb8:	00000106 	br	10003bc0 <strlen+0x78>
10003bbc:	10800044 	addi	r2,r2,1
10003bc0:	10c00007 	ldb	r3,0(r2)
10003bc4:	183ffd1e 	bne	r3,zero,10003bbc <__alt_data_end+0xf8003bbc>
10003bc8:	1105c83a 	sub	r2,r2,r4
10003bcc:	f800283a 	ret
10003bd0:	2005883a 	mov	r2,r4
10003bd4:	003fe706 	br	10003b74 <__alt_data_end+0xf8003b74>
10003bd8:	0005883a 	mov	r2,zero
10003bdc:	f800283a 	ret

10003be0 <___vfprintf_internal_r>:
10003be0:	defeb604 	addi	sp,sp,-1320
10003be4:	dfc14915 	stw	ra,1316(sp)
10003be8:	ddc14715 	stw	r23,1308(sp)
10003bec:	dd814615 	stw	r22,1304(sp)
10003bf0:	202f883a 	mov	r23,r4
10003bf4:	282d883a 	mov	r22,r5
10003bf8:	d9812a15 	stw	r6,1192(sp)
10003bfc:	d9c12d15 	stw	r7,1204(sp)
10003c00:	df014815 	stw	fp,1312(sp)
10003c04:	dd414515 	stw	r21,1300(sp)
10003c08:	dd014415 	stw	r20,1296(sp)
10003c0c:	dcc14315 	stw	r19,1292(sp)
10003c10:	dc814215 	stw	r18,1288(sp)
10003c14:	dc414115 	stw	r17,1284(sp)
10003c18:	dc014015 	stw	r16,1280(sp)
10003c1c:	00088600 	call	10008860 <_localeconv_r>
10003c20:	10800017 	ldw	r2,0(r2)
10003c24:	1009883a 	mov	r4,r2
10003c28:	d8813515 	stw	r2,1236(sp)
10003c2c:	0003b480 	call	10003b48 <strlen>
10003c30:	d8813815 	stw	r2,1248(sp)
10003c34:	b8000226 	beq	r23,zero,10003c40 <___vfprintf_internal_r+0x60>
10003c38:	b8800e17 	ldw	r2,56(r23)
10003c3c:	10010526 	beq	r2,zero,10004054 <___vfprintf_internal_r+0x474>
10003c40:	b0c0030b 	ldhu	r3,12(r22)
10003c44:	1908000c 	andi	r4,r3,8192
10003c48:	1805883a 	mov	r2,r3
10003c4c:	2000071e 	bne	r4,zero,10003c6c <___vfprintf_internal_r+0x8c>
10003c50:	b1001917 	ldw	r4,100(r22)
10003c54:	18880014 	ori	r2,r3,8192
10003c58:	00f7ffc4 	movi	r3,-8193
10003c5c:	20c8703a 	and	r4,r4,r3
10003c60:	b080030d 	sth	r2,12(r22)
10003c64:	1007883a 	mov	r3,r2
10003c68:	b1001915 	stw	r4,100(r22)
10003c6c:	1100020c 	andi	r4,r2,8
10003c70:	2000a826 	beq	r4,zero,10003f14 <___vfprintf_internal_r+0x334>
10003c74:	b1000417 	ldw	r4,16(r22)
10003c78:	2000a626 	beq	r4,zero,10003f14 <___vfprintf_internal_r+0x334>
10003c7c:	1080068c 	andi	r2,r2,26
10003c80:	01000284 	movi	r4,10
10003c84:	1100ac26 	beq	r2,r4,10003f38 <___vfprintf_internal_r+0x358>
10003c88:	d8c10e04 	addi	r3,sp,1080
10003c8c:	d9010dc4 	addi	r4,sp,1079
10003c90:	d9400404 	addi	r5,sp,16
10003c94:	05040074 	movhi	r20,4097
10003c98:	1905c83a 	sub	r2,r3,r4
10003c9c:	a50c8684 	addi	r20,r20,12826
10003ca0:	d8c12815 	stw	r3,1184(sp)
10003ca4:	d9012915 	stw	r4,1188(sp)
10003ca8:	d9411e15 	stw	r5,1144(sp)
10003cac:	d8012015 	stw	zero,1152(sp)
10003cb0:	d8011f15 	stw	zero,1148(sp)
10003cb4:	d8013315 	stw	zero,1228(sp)
10003cb8:	d8013715 	stw	zero,1244(sp)
10003cbc:	d8013915 	stw	zero,1252(sp)
10003cc0:	d8013b15 	stw	zero,1260(sp)
10003cc4:	d8013a15 	stw	zero,1256(sp)
10003cc8:	d8012f15 	stw	zero,1212(sp)
10003ccc:	2811883a 	mov	r8,r5
10003cd0:	d8813c15 	stw	r2,1264(sp)
10003cd4:	d8c12a17 	ldw	r3,1192(sp)
10003cd8:	18800007 	ldb	r2,0(r3)
10003cdc:	10021326 	beq	r2,zero,1000452c <___vfprintf_internal_r+0x94c>
10003ce0:	00c00944 	movi	r3,37
10003ce4:	dc012a17 	ldw	r16,1192(sp)
10003ce8:	10c0021e 	bne	r2,r3,10003cf4 <___vfprintf_internal_r+0x114>
10003cec:	00001606 	br	10003d48 <___vfprintf_internal_r+0x168>
10003cf0:	10c08526 	beq	r2,r3,10003f08 <___vfprintf_internal_r+0x328>
10003cf4:	84000044 	addi	r16,r16,1
10003cf8:	80800007 	ldb	r2,0(r16)
10003cfc:	103ffc1e 	bne	r2,zero,10003cf0 <__alt_data_end+0xf8003cf0>
10003d00:	d9012a17 	ldw	r4,1192(sp)
10003d04:	8123c83a 	sub	r17,r16,r4
10003d08:	88000f26 	beq	r17,zero,10003d48 <___vfprintf_internal_r+0x168>
10003d0c:	d8812a17 	ldw	r2,1192(sp)
10003d10:	d8c12017 	ldw	r3,1152(sp)
10003d14:	44400115 	stw	r17,4(r8)
10003d18:	40800015 	stw	r2,0(r8)
10003d1c:	d8811f17 	ldw	r2,1148(sp)
10003d20:	1c47883a 	add	r3,r3,r17
10003d24:	d8c12015 	stw	r3,1152(sp)
10003d28:	10800044 	addi	r2,r2,1
10003d2c:	d8811f15 	stw	r2,1148(sp)
10003d30:	00c001c4 	movi	r3,7
10003d34:	1880b516 	blt	r3,r2,1000400c <___vfprintf_internal_r+0x42c>
10003d38:	42000204 	addi	r8,r8,8
10003d3c:	d8c12f17 	ldw	r3,1212(sp)
10003d40:	1c47883a 	add	r3,r3,r17
10003d44:	d8c12f15 	stw	r3,1212(sp)
10003d48:	80800007 	ldb	r2,0(r16)
10003d4c:	1000b626 	beq	r2,zero,10004028 <___vfprintf_internal_r+0x448>
10003d50:	80800044 	addi	r2,r16,1
10003d54:	84000047 	ldb	r16,1(r16)
10003d58:	0027883a 	mov	r19,zero
10003d5c:	0039883a 	mov	fp,zero
10003d60:	dcc12b05 	stb	r19,1196(sp)
10003d64:	d8012785 	stb	zero,1182(sp)
10003d68:	027fffc4 	movi	r9,-1
10003d6c:	d8012e15 	stw	zero,1208(sp)
10003d70:	04401604 	movi	r17,88
10003d74:	04800244 	movi	r18,9
10003d78:	da012a15 	stw	r8,1192(sp)
10003d7c:	e027883a 	mov	r19,fp
10003d80:	17000044 	addi	fp,r2,1
10003d84:	80bff804 	addi	r2,r16,-32
10003d88:	88831236 	bltu	r17,r2,100049d4 <___vfprintf_internal_r+0xdf4>
10003d8c:	100490ba 	slli	r2,r2,2
10003d90:	01040034 	movhi	r4,4096
10003d94:	210f6904 	addi	r4,r4,15780
10003d98:	1105883a 	add	r2,r2,r4
10003d9c:	10800017 	ldw	r2,0(r2)
10003da0:	1000683a 	jmp	r2
10003da4:	100048f0 	cmpltui	zero,r2,291
10003da8:	100049d4 	ori	zero,r2,295
10003dac:	100049d4 	ori	zero,r2,295
10003db0:	1000490c 	andi	zero,r2,292
10003db4:	100049d4 	ori	zero,r2,295
10003db8:	100049d4 	ori	zero,r2,295
10003dbc:	100049d4 	ori	zero,r2,295
10003dc0:	100049d4 	ori	zero,r2,295
10003dc4:	100049d4 	ori	zero,r2,295
10003dc8:	100049d4 	ori	zero,r2,295
10003dcc:	1000491c 	xori	zero,r2,292
10003dd0:	10004944 	addi	zero,r2,293
10003dd4:	100049d4 	ori	zero,r2,295
10003dd8:	10004060 	cmpeqi	zero,r2,257
10003ddc:	10004070 	cmpltui	zero,r2,257
10003de0:	100049d4 	ori	zero,r2,295
10003de4:	100040c0 	call	1100040c <_gp+0xfe348c>
10003de8:	100040d0 	cmplti	zero,r2,259
10003dec:	100040d0 	cmplti	zero,r2,259
10003df0:	100040d0 	cmplti	zero,r2,259
10003df4:	100040d0 	cmplti	zero,r2,259
10003df8:	100040d0 	cmplti	zero,r2,259
10003dfc:	100040d0 	cmplti	zero,r2,259
10003e00:	100040d0 	cmplti	zero,r2,259
10003e04:	100040d0 	cmplti	zero,r2,259
10003e08:	100040d0 	cmplti	zero,r2,259
10003e0c:	100049d4 	ori	zero,r2,295
10003e10:	100049d4 	ori	zero,r2,295
10003e14:	100049d4 	ori	zero,r2,295
10003e18:	100049d4 	ori	zero,r2,295
10003e1c:	100049d4 	ori	zero,r2,295
10003e20:	100049d4 	ori	zero,r2,295
10003e24:	100049d4 	ori	zero,r2,295
10003e28:	100049d4 	ori	zero,r2,295
10003e2c:	100049d4 	ori	zero,r2,295
10003e30:	100049d4 	ori	zero,r2,295
10003e34:	10004114 	ori	zero,r2,260
10003e38:	10004534 	orhi	zero,r2,276
10003e3c:	100049d4 	ori	zero,r2,295
10003e40:	10004534 	orhi	zero,r2,276
10003e44:	100049d4 	ori	zero,r2,295
10003e48:	100049d4 	ori	zero,r2,295
10003e4c:	100049d4 	ori	zero,r2,295
10003e50:	100049d4 	ori	zero,r2,295
10003e54:	100045dc 	xori	zero,r2,279
10003e58:	100049d4 	ori	zero,r2,295
10003e5c:	100049d4 	ori	zero,r2,295
10003e60:	100045ec 	andhi	zero,r2,279
10003e64:	100049d4 	ori	zero,r2,295
10003e68:	100049d4 	ori	zero,r2,295
10003e6c:	100049d4 	ori	zero,r2,295
10003e70:	100049d4 	ori	zero,r2,295
10003e74:	100049d4 	ori	zero,r2,295
10003e78:	10004630 	cmpltui	zero,r2,280
10003e7c:	100049d4 	ori	zero,r2,295
10003e80:	100049d4 	ori	zero,r2,295
10003e84:	10004668 	cmpgeui	zero,r2,281
10003e88:	100049d4 	ori	zero,r2,295
10003e8c:	100049d4 	ori	zero,r2,295
10003e90:	100049d4 	ori	zero,r2,295
10003e94:	100049d4 	ori	zero,r2,295
10003e98:	100049d4 	ori	zero,r2,295
10003e9c:	100049d4 	ori	zero,r2,295
10003ea0:	100049d4 	ori	zero,r2,295
10003ea4:	100049d4 	ori	zero,r2,295
10003ea8:	100049d4 	ori	zero,r2,295
10003eac:	100049d4 	ori	zero,r2,295
10003eb0:	100048a4 	muli	zero,r2,290
10003eb4:	10004850 	cmplti	zero,r2,289
10003eb8:	10004534 	orhi	zero,r2,276
10003ebc:	10004534 	orhi	zero,r2,276
10003ec0:	10004534 	orhi	zero,r2,276
10003ec4:	10004894 	ori	zero,r2,290
10003ec8:	10004850 	cmplti	zero,r2,289
10003ecc:	100049d4 	ori	zero,r2,295
10003ed0:	100049d4 	ori	zero,r2,295
10003ed4:	1000476c 	andhi	zero,r2,285
10003ed8:	100049d4 	ori	zero,r2,295
10003edc:	10004784 	addi	zero,r2,286
10003ee0:	100047c4 	addi	zero,r2,287
10003ee4:	10004804 	addi	zero,r2,288
10003ee8:	100046d0 	cmplti	zero,r2,283
10003eec:	100049d4 	ori	zero,r2,295
10003ef0:	10004958 	cmpnei	zero,r2,293
10003ef4:	100049d4 	ori	zero,r2,295
10003ef8:	100046e0 	cmpeqi	zero,r2,283
10003efc:	100049d4 	ori	zero,r2,295
10003f00:	100049d4 	ori	zero,r2,295
10003f04:	10004720 	cmpeqi	zero,r2,284
10003f08:	d9412a17 	ldw	r5,1192(sp)
10003f0c:	8163c83a 	sub	r17,r16,r5
10003f10:	003f7d06 	br	10003d08 <__alt_data_end+0xf8003d08>
10003f14:	b809883a 	mov	r4,r23
10003f18:	b00b883a 	mov	r5,r22
10003f1c:	0005d000 	call	10005d00 <__swsetup_r>
10003f20:	10002d1e 	bne	r2,zero,10003fd8 <___vfprintf_internal_r+0x3f8>
10003f24:	b0c0030b 	ldhu	r3,12(r22)
10003f28:	01000284 	movi	r4,10
10003f2c:	1805883a 	mov	r2,r3
10003f30:	1080068c 	andi	r2,r2,26
10003f34:	113f541e 	bne	r2,r4,10003c88 <__alt_data_end+0xf8003c88>
10003f38:	b080038b 	ldhu	r2,14(r22)
10003f3c:	113fffcc 	andi	r4,r2,65535
10003f40:	2120001c 	xori	r4,r4,32768
10003f44:	21200004 	addi	r4,r4,-32768
10003f48:	203f4f16 	blt	r4,zero,10003c88 <__alt_data_end+0xf8003c88>
10003f4c:	b2c01917 	ldw	r11,100(r22)
10003f50:	b2800717 	ldw	r10,28(r22)
10003f54:	b2400917 	ldw	r9,36(r22)
10003f58:	d9812a17 	ldw	r6,1192(sp)
10003f5c:	d9c12d17 	ldw	r7,1204(sp)
10003f60:	02010004 	movi	r8,1024
10003f64:	18ffff4c 	andi	r3,r3,65533
10003f68:	d881078d 	sth	r2,1054(sp)
10003f6c:	b809883a 	mov	r4,r23
10003f70:	d8800404 	addi	r2,sp,16
10003f74:	d9410404 	addi	r5,sp,1040
10003f78:	d8c1070d 	sth	r3,1052(sp)
10003f7c:	dac11d15 	stw	r11,1140(sp)
10003f80:	da810b15 	stw	r10,1068(sp)
10003f84:	da410d15 	stw	r9,1076(sp)
10003f88:	d8810415 	stw	r2,1040(sp)
10003f8c:	d8810815 	stw	r2,1056(sp)
10003f90:	da010615 	stw	r8,1048(sp)
10003f94:	da010915 	stw	r8,1060(sp)
10003f98:	d8010a15 	stw	zero,1064(sp)
10003f9c:	0003be00 	call	10003be0 <___vfprintf_internal_r>
10003fa0:	1021883a 	mov	r16,r2
10003fa4:	10000416 	blt	r2,zero,10003fb8 <___vfprintf_internal_r+0x3d8>
10003fa8:	b809883a 	mov	r4,r23
10003fac:	d9410404 	addi	r5,sp,1040
10003fb0:	00077800 	call	10007780 <_fflush_r>
10003fb4:	1007301e 	bne	r2,zero,10005c78 <___vfprintf_internal_r+0x2098>
10003fb8:	d881070b 	ldhu	r2,1052(sp)
10003fbc:	1080100c 	andi	r2,r2,64
10003fc0:	10000326 	beq	r2,zero,10003fd0 <___vfprintf_internal_r+0x3f0>
10003fc4:	b080030b 	ldhu	r2,12(r22)
10003fc8:	10801014 	ori	r2,r2,64
10003fcc:	b080030d 	sth	r2,12(r22)
10003fd0:	8005883a 	mov	r2,r16
10003fd4:	00000106 	br	10003fdc <___vfprintf_internal_r+0x3fc>
10003fd8:	00bfffc4 	movi	r2,-1
10003fdc:	dfc14917 	ldw	ra,1316(sp)
10003fe0:	df014817 	ldw	fp,1312(sp)
10003fe4:	ddc14717 	ldw	r23,1308(sp)
10003fe8:	dd814617 	ldw	r22,1304(sp)
10003fec:	dd414517 	ldw	r21,1300(sp)
10003ff0:	dd014417 	ldw	r20,1296(sp)
10003ff4:	dcc14317 	ldw	r19,1292(sp)
10003ff8:	dc814217 	ldw	r18,1288(sp)
10003ffc:	dc414117 	ldw	r17,1284(sp)
10004000:	dc014017 	ldw	r16,1280(sp)
10004004:	dec14a04 	addi	sp,sp,1320
10004008:	f800283a 	ret
1000400c:	b809883a 	mov	r4,r23
10004010:	b00b883a 	mov	r5,r22
10004014:	d9811e04 	addi	r6,sp,1144
10004018:	000b0200 	call	1000b020 <__sprint_r>
1000401c:	1000081e 	bne	r2,zero,10004040 <___vfprintf_internal_r+0x460>
10004020:	da000404 	addi	r8,sp,16
10004024:	003f4506 	br	10003d3c <__alt_data_end+0xf8003d3c>
10004028:	d8812017 	ldw	r2,1152(sp)
1000402c:	10000426 	beq	r2,zero,10004040 <___vfprintf_internal_r+0x460>
10004030:	b809883a 	mov	r4,r23
10004034:	b00b883a 	mov	r5,r22
10004038:	d9811e04 	addi	r6,sp,1144
1000403c:	000b0200 	call	1000b020 <__sprint_r>
10004040:	b080030b 	ldhu	r2,12(r22)
10004044:	1080100c 	andi	r2,r2,64
10004048:	103fe31e 	bne	r2,zero,10003fd8 <__alt_data_end+0xf8003fd8>
1000404c:	d8812f17 	ldw	r2,1212(sp)
10004050:	003fe206 	br	10003fdc <__alt_data_end+0xf8003fdc>
10004054:	b809883a 	mov	r4,r23
10004058:	0007d3c0 	call	10007d3c <__sinit>
1000405c:	003ef806 	br	10003c40 <__alt_data_end+0xf8003c40>
10004060:	e005883a 	mov	r2,fp
10004064:	9cc00114 	ori	r19,r19,4
10004068:	e4000007 	ldb	r16,0(fp)
1000406c:	003f4406 	br	10003d80 <__alt_data_end+0xf8003d80>
10004070:	e4000007 	ldb	r16,0(fp)
10004074:	01000a84 	movi	r4,42
10004078:	e0800044 	addi	r2,fp,1
1000407c:	8106f626 	beq	r16,r4,10005c58 <___vfprintf_internal_r+0x2078>
10004080:	857ff404 	addi	r21,r16,-48
10004084:	1039883a 	mov	fp,r2
10004088:	0013883a 	mov	r9,zero
1000408c:	957f3d36 	bltu	r18,r21,10003d84 <__alt_data_end+0xf8003d84>
10004090:	0009883a 	mov	r4,zero
10004094:	01400284 	movi	r5,10
10004098:	00039ec0 	call	100039ec <__mulsi3>
1000409c:	e4000007 	ldb	r16,0(fp)
100040a0:	a889883a 	add	r4,r21,r2
100040a4:	e7000044 	addi	fp,fp,1
100040a8:	857ff404 	addi	r21,r16,-48
100040ac:	957ff92e 	bgeu	r18,r21,10004094 <__alt_data_end+0xf8004094>
100040b0:	2013883a 	mov	r9,r4
100040b4:	203f330e 	bge	r4,zero,10003d84 <__alt_data_end+0xf8003d84>
100040b8:	027fffc4 	movi	r9,-1
100040bc:	003f3106 	br	10003d84 <__alt_data_end+0xf8003d84>
100040c0:	9cc02014 	ori	r19,r19,128
100040c4:	e005883a 	mov	r2,fp
100040c8:	e4000007 	ldb	r16,0(fp)
100040cc:	003f2c06 	br	10003d80 <__alt_data_end+0xf8003d80>
100040d0:	857ff404 	addi	r21,r16,-48
100040d4:	d8012e15 	stw	zero,1208(sp)
100040d8:	e021883a 	mov	r16,fp
100040dc:	0009883a 	mov	r4,zero
100040e0:	da412c15 	stw	r9,1200(sp)
100040e4:	01400284 	movi	r5,10
100040e8:	00039ec0 	call	100039ec <__mulsi3>
100040ec:	81400007 	ldb	r5,0(r16)
100040f0:	1549883a 	add	r4,r2,r21
100040f4:	e7000044 	addi	fp,fp,1
100040f8:	2d7ff404 	addi	r21,r5,-48
100040fc:	e021883a 	mov	r16,fp
10004100:	957ff82e 	bgeu	r18,r21,100040e4 <__alt_data_end+0xf80040e4>
10004104:	2821883a 	mov	r16,r5
10004108:	d9012e15 	stw	r4,1208(sp)
1000410c:	da412c17 	ldw	r9,1200(sp)
10004110:	003f1c06 	br	10003d84 <__alt_data_end+0xf8003d84>
10004114:	da012a17 	ldw	r8,1192(sp)
10004118:	df012a15 	stw	fp,1192(sp)
1000411c:	9839883a 	mov	fp,r19
10004120:	dcc12b03 	ldbu	r19,1196(sp)
10004124:	e7000414 	ori	fp,fp,16
10004128:	e080080c 	andi	r2,fp,32
1000412c:	dcc12785 	stb	r19,1182(sp)
10004130:	d8c12d17 	ldw	r3,1204(sp)
10004134:	1001ce26 	beq	r2,zero,10004870 <___vfprintf_internal_r+0xc90>
10004138:	d9012d17 	ldw	r4,1204(sp)
1000413c:	18800117 	ldw	r2,4(r3)
10004140:	1c800017 	ldw	r18,0(r3)
10004144:	21000204 	addi	r4,r4,8
10004148:	d9012d15 	stw	r4,1204(sp)
1000414c:	102b883a 	mov	r21,r2
10004150:	10044916 	blt	r2,zero,10005278 <___vfprintf_internal_r+0x1698>
10004154:	dcc12783 	ldbu	r19,1182(sp)
10004158:	da413215 	stw	r9,1224(sp)
1000415c:	00800044 	movi	r2,1
10004160:	9546b03a 	or	r3,r18,r21
10004164:	48000216 	blt	r9,zero,10004170 <___vfprintf_internal_r+0x590>
10004168:	013fdfc4 	movi	r4,-129
1000416c:	e138703a 	and	fp,fp,r4
10004170:	1802251e 	bne	r3,zero,10004a08 <___vfprintf_internal_r+0xe28>
10004174:	48031726 	beq	r9,zero,10004dd4 <___vfprintf_internal_r+0x11f4>
10004178:	10803fcc 	andi	r2,r2,255
1000417c:	00c00044 	movi	r3,1
10004180:	10c24526 	beq	r2,r3,10004a98 <___vfprintf_internal_r+0xeb8>
10004184:	00c00084 	movi	r3,2
10004188:	10c33426 	beq	r2,r3,10004e5c <___vfprintf_internal_r+0x127c>
1000418c:	d8c10e04 	addi	r3,sp,1080
10004190:	9008d0fa 	srli	r4,r18,3
10004194:	a80a977a 	slli	r5,r21,29
10004198:	a82ad0fa 	srli	r21,r21,3
1000419c:	948001cc 	andi	r18,r18,7
100041a0:	90800c04 	addi	r2,r18,48
100041a4:	18ffffc4 	addi	r3,r3,-1
100041a8:	2924b03a 	or	r18,r5,r4
100041ac:	18800005 	stb	r2,0(r3)
100041b0:	9548b03a 	or	r4,r18,r21
100041b4:	203ff61e 	bne	r4,zero,10004190 <__alt_data_end+0xf8004190>
100041b8:	e100004c 	andi	r4,fp,1
100041bc:	d8c13115 	stw	r3,1220(sp)
100041c0:	20039a1e 	bne	r4,zero,1000502c <___vfprintf_internal_r+0x144c>
100041c4:	d8812817 	ldw	r2,1184(sp)
100041c8:	10e3c83a 	sub	r17,r2,r3
100041cc:	8805883a 	mov	r2,r17
100041d0:	8a40010e 	bge	r17,r9,100041d8 <___vfprintf_internal_r+0x5f8>
100041d4:	4805883a 	mov	r2,r9
100041d8:	d8812b15 	stw	r2,1196(sp)
100041dc:	d8013415 	stw	zero,1232(sp)
100041e0:	98803fcc 	andi	r2,r19,255
100041e4:	1080201c 	xori	r2,r2,128
100041e8:	10bfe004 	addi	r2,r2,-128
100041ec:	10000326 	beq	r2,zero,100041fc <___vfprintf_internal_r+0x61c>
100041f0:	d8c12b17 	ldw	r3,1196(sp)
100041f4:	18c00044 	addi	r3,r3,1
100041f8:	d8c12b15 	stw	r3,1196(sp)
100041fc:	e0c0008c 	andi	r3,fp,2
10004200:	d8c12c15 	stw	r3,1200(sp)
10004204:	18000326 	beq	r3,zero,10004214 <___vfprintf_internal_r+0x634>
10004208:	d8c12b17 	ldw	r3,1196(sp)
1000420c:	18c00084 	addi	r3,r3,2
10004210:	d8c12b15 	stw	r3,1196(sp)
10004214:	e0c0210c 	andi	r3,fp,132
10004218:	d8c13015 	stw	r3,1216(sp)
1000421c:	1801f81e 	bne	r3,zero,10004a00 <___vfprintf_internal_r+0xe20>
10004220:	d9012e17 	ldw	r4,1208(sp)
10004224:	d8c12b17 	ldw	r3,1196(sp)
10004228:	20ebc83a 	sub	r21,r4,r3
1000422c:	0541f40e 	bge	zero,r21,10004a00 <___vfprintf_internal_r+0xe20>
10004230:	02400404 	movi	r9,16
10004234:	d8c12017 	ldw	r3,1152(sp)
10004238:	d8811f17 	ldw	r2,1148(sp)
1000423c:	4d45750e 	bge	r9,r21,10005814 <___vfprintf_internal_r+0x1c34>
10004240:	01440074 	movhi	r5,4097
10004244:	294c8a84 	addi	r5,r5,12842
10004248:	d9413615 	stw	r5,1240(sp)
1000424c:	4827883a 	mov	r19,r9
10004250:	048001c4 	movi	r18,7
10004254:	00000306 	br	10004264 <___vfprintf_internal_r+0x684>
10004258:	ad7ffc04 	addi	r21,r21,-16
1000425c:	42000204 	addi	r8,r8,8
10004260:	9d40130e 	bge	r19,r21,100042b0 <___vfprintf_internal_r+0x6d0>
10004264:	01040074 	movhi	r4,4097
10004268:	18c00404 	addi	r3,r3,16
1000426c:	10800044 	addi	r2,r2,1
10004270:	210c8a84 	addi	r4,r4,12842
10004274:	41000015 	stw	r4,0(r8)
10004278:	44c00115 	stw	r19,4(r8)
1000427c:	d8c12015 	stw	r3,1152(sp)
10004280:	d8811f15 	stw	r2,1148(sp)
10004284:	90bff40e 	bge	r18,r2,10004258 <__alt_data_end+0xf8004258>
10004288:	b809883a 	mov	r4,r23
1000428c:	b00b883a 	mov	r5,r22
10004290:	d9811e04 	addi	r6,sp,1144
10004294:	000b0200 	call	1000b020 <__sprint_r>
10004298:	103f691e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
1000429c:	ad7ffc04 	addi	r21,r21,-16
100042a0:	d8c12017 	ldw	r3,1152(sp)
100042a4:	d8811f17 	ldw	r2,1148(sp)
100042a8:	da000404 	addi	r8,sp,16
100042ac:	9d7fed16 	blt	r19,r21,10004264 <__alt_data_end+0xf8004264>
100042b0:	d9413617 	ldw	r5,1240(sp)
100042b4:	a8c7883a 	add	r3,r21,r3
100042b8:	10800044 	addi	r2,r2,1
100042bc:	41400015 	stw	r5,0(r8)
100042c0:	45400115 	stw	r21,4(r8)
100042c4:	d8c12015 	stw	r3,1152(sp)
100042c8:	d8811f15 	stw	r2,1148(sp)
100042cc:	010001c4 	movi	r4,7
100042d0:	20832b16 	blt	r4,r2,10004f80 <___vfprintf_internal_r+0x13a0>
100042d4:	d8812787 	ldb	r2,1182(sp)
100042d8:	42000204 	addi	r8,r8,8
100042dc:	10000c26 	beq	r2,zero,10004310 <___vfprintf_internal_r+0x730>
100042e0:	d8811f17 	ldw	r2,1148(sp)
100042e4:	d9012784 	addi	r4,sp,1182
100042e8:	18c00044 	addi	r3,r3,1
100042ec:	10800044 	addi	r2,r2,1
100042f0:	41000015 	stw	r4,0(r8)
100042f4:	01000044 	movi	r4,1
100042f8:	41000115 	stw	r4,4(r8)
100042fc:	d8c12015 	stw	r3,1152(sp)
10004300:	d8811f15 	stw	r2,1148(sp)
10004304:	010001c4 	movi	r4,7
10004308:	2082c416 	blt	r4,r2,10004e1c <___vfprintf_internal_r+0x123c>
1000430c:	42000204 	addi	r8,r8,8
10004310:	d8812c17 	ldw	r2,1200(sp)
10004314:	10000c26 	beq	r2,zero,10004348 <___vfprintf_internal_r+0x768>
10004318:	d8811f17 	ldw	r2,1148(sp)
1000431c:	d9012704 	addi	r4,sp,1180
10004320:	18c00084 	addi	r3,r3,2
10004324:	10800044 	addi	r2,r2,1
10004328:	41000015 	stw	r4,0(r8)
1000432c:	01000084 	movi	r4,2
10004330:	41000115 	stw	r4,4(r8)
10004334:	d8c12015 	stw	r3,1152(sp)
10004338:	d8811f15 	stw	r2,1148(sp)
1000433c:	010001c4 	movi	r4,7
10004340:	2082be16 	blt	r4,r2,10004e3c <___vfprintf_internal_r+0x125c>
10004344:	42000204 	addi	r8,r8,8
10004348:	d9013017 	ldw	r4,1216(sp)
1000434c:	00802004 	movi	r2,128
10004350:	20822026 	beq	r4,r2,10004bd4 <___vfprintf_internal_r+0xff4>
10004354:	d9413217 	ldw	r5,1224(sp)
10004358:	2c67c83a 	sub	r19,r5,r17
1000435c:	04c0260e 	bge	zero,r19,100043f8 <___vfprintf_internal_r+0x818>
10004360:	05400404 	movi	r21,16
10004364:	d8811f17 	ldw	r2,1148(sp)
10004368:	acc4720e 	bge	r21,r19,10005534 <___vfprintf_internal_r+0x1954>
1000436c:	01440074 	movhi	r5,4097
10004370:	294c8684 	addi	r5,r5,12826
10004374:	d9412c15 	stw	r5,1200(sp)
10004378:	048001c4 	movi	r18,7
1000437c:	00000306 	br	1000438c <___vfprintf_internal_r+0x7ac>
10004380:	9cfffc04 	addi	r19,r19,-16
10004384:	42000204 	addi	r8,r8,8
10004388:	acc0110e 	bge	r21,r19,100043d0 <___vfprintf_internal_r+0x7f0>
1000438c:	18c00404 	addi	r3,r3,16
10004390:	10800044 	addi	r2,r2,1
10004394:	45000015 	stw	r20,0(r8)
10004398:	45400115 	stw	r21,4(r8)
1000439c:	d8c12015 	stw	r3,1152(sp)
100043a0:	d8811f15 	stw	r2,1148(sp)
100043a4:	90bff60e 	bge	r18,r2,10004380 <__alt_data_end+0xf8004380>
100043a8:	b809883a 	mov	r4,r23
100043ac:	b00b883a 	mov	r5,r22
100043b0:	d9811e04 	addi	r6,sp,1144
100043b4:	000b0200 	call	1000b020 <__sprint_r>
100043b8:	103f211e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
100043bc:	9cfffc04 	addi	r19,r19,-16
100043c0:	d8c12017 	ldw	r3,1152(sp)
100043c4:	d8811f17 	ldw	r2,1148(sp)
100043c8:	da000404 	addi	r8,sp,16
100043cc:	acffef16 	blt	r21,r19,1000438c <__alt_data_end+0xf800438c>
100043d0:	d9012c17 	ldw	r4,1200(sp)
100043d4:	1cc7883a 	add	r3,r3,r19
100043d8:	10800044 	addi	r2,r2,1
100043dc:	41000015 	stw	r4,0(r8)
100043e0:	44c00115 	stw	r19,4(r8)
100043e4:	d8c12015 	stw	r3,1152(sp)
100043e8:	d8811f15 	stw	r2,1148(sp)
100043ec:	010001c4 	movi	r4,7
100043f0:	20828216 	blt	r4,r2,10004dfc <___vfprintf_internal_r+0x121c>
100043f4:	42000204 	addi	r8,r8,8
100043f8:	e080400c 	andi	r2,fp,256
100043fc:	1001ac1e 	bne	r2,zero,10004ab0 <___vfprintf_internal_r+0xed0>
10004400:	d8811f17 	ldw	r2,1148(sp)
10004404:	d9413117 	ldw	r5,1220(sp)
10004408:	1c47883a 	add	r3,r3,r17
1000440c:	10800044 	addi	r2,r2,1
10004410:	41400015 	stw	r5,0(r8)
10004414:	44400115 	stw	r17,4(r8)
10004418:	d8c12015 	stw	r3,1152(sp)
1000441c:	d8811f15 	stw	r2,1148(sp)
10004420:	010001c4 	movi	r4,7
10004424:	20825d16 	blt	r4,r2,10004d9c <___vfprintf_internal_r+0x11bc>
10004428:	42000204 	addi	r8,r8,8
1000442c:	e080010c 	andi	r2,fp,4
10004430:	10003126 	beq	r2,zero,100044f8 <___vfprintf_internal_r+0x918>
10004434:	d8812e17 	ldw	r2,1208(sp)
10004438:	d9012b17 	ldw	r4,1196(sp)
1000443c:	1121c83a 	sub	r16,r2,r4
10004440:	04002d0e 	bge	zero,r16,100044f8 <___vfprintf_internal_r+0x918>
10004444:	04400404 	movi	r17,16
10004448:	d8811f17 	ldw	r2,1148(sp)
1000444c:	8c05340e 	bge	r17,r16,10005920 <___vfprintf_internal_r+0x1d40>
10004450:	01040074 	movhi	r4,4097
10004454:	210c8a84 	addi	r4,r4,12842
10004458:	d9013615 	stw	r4,1240(sp)
1000445c:	048001c4 	movi	r18,7
10004460:	00000306 	br	10004470 <___vfprintf_internal_r+0x890>
10004464:	843ffc04 	addi	r16,r16,-16
10004468:	42000204 	addi	r8,r8,8
1000446c:	8c00130e 	bge	r17,r16,100044bc <___vfprintf_internal_r+0x8dc>
10004470:	01440074 	movhi	r5,4097
10004474:	18c00404 	addi	r3,r3,16
10004478:	10800044 	addi	r2,r2,1
1000447c:	294c8a84 	addi	r5,r5,12842
10004480:	41400015 	stw	r5,0(r8)
10004484:	44400115 	stw	r17,4(r8)
10004488:	d8c12015 	stw	r3,1152(sp)
1000448c:	d8811f15 	stw	r2,1148(sp)
10004490:	90bff40e 	bge	r18,r2,10004464 <__alt_data_end+0xf8004464>
10004494:	b809883a 	mov	r4,r23
10004498:	b00b883a 	mov	r5,r22
1000449c:	d9811e04 	addi	r6,sp,1144
100044a0:	000b0200 	call	1000b020 <__sprint_r>
100044a4:	103ee61e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
100044a8:	843ffc04 	addi	r16,r16,-16
100044ac:	d8c12017 	ldw	r3,1152(sp)
100044b0:	d8811f17 	ldw	r2,1148(sp)
100044b4:	da000404 	addi	r8,sp,16
100044b8:	8c3fed16 	blt	r17,r16,10004470 <__alt_data_end+0xf8004470>
100044bc:	d9013617 	ldw	r4,1240(sp)
100044c0:	1c07883a 	add	r3,r3,r16
100044c4:	10800044 	addi	r2,r2,1
100044c8:	41000015 	stw	r4,0(r8)
100044cc:	44000115 	stw	r16,4(r8)
100044d0:	d8c12015 	stw	r3,1152(sp)
100044d4:	d8811f15 	stw	r2,1148(sp)
100044d8:	010001c4 	movi	r4,7
100044dc:	2080060e 	bge	r4,r2,100044f8 <___vfprintf_internal_r+0x918>
100044e0:	b809883a 	mov	r4,r23
100044e4:	b00b883a 	mov	r5,r22
100044e8:	d9811e04 	addi	r6,sp,1144
100044ec:	000b0200 	call	1000b020 <__sprint_r>
100044f0:	103ed31e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
100044f4:	d8c12017 	ldw	r3,1152(sp)
100044f8:	df012b17 	ldw	fp,1196(sp)
100044fc:	d9412e17 	ldw	r5,1208(sp)
10004500:	e140010e 	bge	fp,r5,10004508 <___vfprintf_internal_r+0x928>
10004504:	2839883a 	mov	fp,r5
10004508:	d8812f17 	ldw	r2,1212(sp)
1000450c:	1705883a 	add	r2,r2,fp
10004510:	d8812f15 	stw	r2,1212(sp)
10004514:	1802291e 	bne	r3,zero,10004dbc <___vfprintf_internal_r+0x11dc>
10004518:	d8c12a17 	ldw	r3,1192(sp)
1000451c:	d8011f15 	stw	zero,1148(sp)
10004520:	da000404 	addi	r8,sp,16
10004524:	18800007 	ldb	r2,0(r3)
10004528:	103ded1e 	bne	r2,zero,10003ce0 <__alt_data_end+0xf8003ce0>
1000452c:	dc012a17 	ldw	r16,1192(sp)
10004530:	003e0506 	br	10003d48 <__alt_data_end+0xf8003d48>
10004534:	d9012d17 	ldw	r4,1204(sp)
10004538:	d9412d17 	ldw	r5,1204(sp)
1000453c:	da012a17 	ldw	r8,1192(sp)
10004540:	21000017 	ldw	r4,0(r4)
10004544:	29400117 	ldw	r5,4(r5)
10004548:	df012a15 	stw	fp,1192(sp)
1000454c:	9839883a 	mov	fp,r19
10004550:	dcc12b03 	ldbu	r19,1196(sp)
10004554:	d9013715 	stw	r4,1244(sp)
10004558:	d9413915 	stw	r5,1252(sp)
1000455c:	da013f15 	stw	r8,1276(sp)
10004560:	da413e15 	stw	r9,1272(sp)
10004564:	dcc12785 	stb	r19,1182(sp)
10004568:	000ac7c0 	call	1000ac7c <__fpclassifyd>
1000456c:	d8c12d17 	ldw	r3,1204(sp)
10004570:	04400044 	movi	r17,1
10004574:	da013f17 	ldw	r8,1276(sp)
10004578:	1c800204 	addi	r18,r3,8
1000457c:	da413e17 	ldw	r9,1272(sp)
10004580:	d9013717 	ldw	r4,1244(sp)
10004584:	d9413917 	ldw	r5,1252(sp)
10004588:	1443451e 	bne	r2,r17,100052a0 <___vfprintf_internal_r+0x16c0>
1000458c:	000d883a 	mov	r6,zero
10004590:	000f883a 	mov	r7,zero
10004594:	000eda80 	call	1000eda8 <__ledf2>
10004598:	da013f17 	ldw	r8,1276(sp)
1000459c:	1004fe16 	blt	r2,zero,10005998 <___vfprintf_internal_r+0x1db8>
100045a0:	dcc12783 	ldbu	r19,1182(sp)
100045a4:	008011c4 	movi	r2,71
100045a8:	14045d0e 	bge	r2,r16,10005720 <___vfprintf_internal_r+0x1b40>
100045ac:	01440074 	movhi	r5,4097
100045b0:	294c7704 	addi	r5,r5,12764
100045b4:	d9413115 	stw	r5,1220(sp)
100045b8:	00c000c4 	movi	r3,3
100045bc:	00bfdfc4 	movi	r2,-129
100045c0:	d8c12b15 	stw	r3,1196(sp)
100045c4:	e0b8703a 	and	fp,fp,r2
100045c8:	dc812d15 	stw	r18,1204(sp)
100045cc:	1823883a 	mov	r17,r3
100045d0:	d8013215 	stw	zero,1224(sp)
100045d4:	d8013415 	stw	zero,1232(sp)
100045d8:	003f0106 	br	100041e0 <__alt_data_end+0xf80041e0>
100045dc:	9cc00214 	ori	r19,r19,8
100045e0:	e005883a 	mov	r2,fp
100045e4:	e4000007 	ldb	r16,0(fp)
100045e8:	003de506 	br	10003d80 <__alt_data_end+0xf8003d80>
100045ec:	da012a17 	ldw	r8,1192(sp)
100045f0:	df012a15 	stw	fp,1192(sp)
100045f4:	9f000414 	ori	fp,r19,16
100045f8:	e0c0080c 	andi	r3,fp,32
100045fc:	d8812d17 	ldw	r2,1204(sp)
10004600:	18007626 	beq	r3,zero,100047dc <___vfprintf_internal_r+0xbfc>
10004604:	d9412d17 	ldw	r5,1204(sp)
10004608:	14800017 	ldw	r18,0(r2)
1000460c:	15400117 	ldw	r21,4(r2)
10004610:	29400204 	addi	r5,r5,8
10004614:	d9412d15 	stw	r5,1204(sp)
10004618:	0005883a 	mov	r2,zero
1000461c:	9546b03a 	or	r3,r18,r21
10004620:	d8012785 	stb	zero,1182(sp)
10004624:	da413215 	stw	r9,1224(sp)
10004628:	0027883a 	mov	r19,zero
1000462c:	003ecd06 	br	10004164 <__alt_data_end+0xf8004164>
10004630:	da012a17 	ldw	r8,1192(sp)
10004634:	df012a15 	stw	fp,1192(sp)
10004638:	9f000414 	ori	fp,r19,16
1000463c:	e0c0080c 	andi	r3,fp,32
10004640:	d8812d17 	ldw	r2,1204(sp)
10004644:	18002c26 	beq	r3,zero,100046f8 <___vfprintf_internal_r+0xb18>
10004648:	d9012d17 	ldw	r4,1204(sp)
1000464c:	14800017 	ldw	r18,0(r2)
10004650:	15400117 	ldw	r21,4(r2)
10004654:	21000204 	addi	r4,r4,8
10004658:	d9012d15 	stw	r4,1204(sp)
1000465c:	00800044 	movi	r2,1
10004660:	9546b03a 	or	r3,r18,r21
10004664:	003fee06 	br	10004620 <__alt_data_end+0xf8004620>
10004668:	da012a17 	ldw	r8,1192(sp)
1000466c:	df012a15 	stw	fp,1192(sp)
10004670:	9839883a 	mov	fp,r19
10004674:	dcc12b03 	ldbu	r19,1196(sp)
10004678:	01440074 	movhi	r5,4097
1000467c:	294c7a04 	addi	r5,r5,12776
10004680:	dcc12785 	stb	r19,1182(sp)
10004684:	d9413b15 	stw	r5,1260(sp)
10004688:	e0c0080c 	andi	r3,fp,32
1000468c:	d8812d17 	ldw	r2,1204(sp)
10004690:	18002e26 	beq	r3,zero,1000474c <___vfprintf_internal_r+0xb6c>
10004694:	d9412d17 	ldw	r5,1204(sp)
10004698:	14800017 	ldw	r18,0(r2)
1000469c:	15400117 	ldw	r21,4(r2)
100046a0:	29400204 	addi	r5,r5,8
100046a4:	d9412d15 	stw	r5,1204(sp)
100046a8:	e080004c 	andi	r2,fp,1
100046ac:	10025c26 	beq	r2,zero,10005020 <___vfprintf_internal_r+0x1440>
100046b0:	9546b03a 	or	r3,r18,r21
100046b4:	18038f26 	beq	r3,zero,100054f4 <___vfprintf_internal_r+0x1914>
100046b8:	00800c04 	movi	r2,48
100046bc:	d8812705 	stb	r2,1180(sp)
100046c0:	dc012745 	stb	r16,1181(sp)
100046c4:	e7000094 	ori	fp,fp,2
100046c8:	00800084 	movi	r2,2
100046cc:	003fd406 	br	10004620 <__alt_data_end+0xf8004620>
100046d0:	9cc00814 	ori	r19,r19,32
100046d4:	e005883a 	mov	r2,fp
100046d8:	e4000007 	ldb	r16,0(fp)
100046dc:	003da806 	br	10003d80 <__alt_data_end+0xf8003d80>
100046e0:	da012a17 	ldw	r8,1192(sp)
100046e4:	df012a15 	stw	fp,1192(sp)
100046e8:	9839883a 	mov	fp,r19
100046ec:	e0c0080c 	andi	r3,fp,32
100046f0:	d8812d17 	ldw	r2,1204(sp)
100046f4:	183fd41e 	bne	r3,zero,10004648 <__alt_data_end+0xf8004648>
100046f8:	e0c0040c 	andi	r3,fp,16
100046fc:	18035f26 	beq	r3,zero,1000547c <___vfprintf_internal_r+0x189c>
10004700:	d9412d17 	ldw	r5,1204(sp)
10004704:	14800017 	ldw	r18,0(r2)
10004708:	002b883a 	mov	r21,zero
1000470c:	29400104 	addi	r5,r5,4
10004710:	d9412d15 	stw	r5,1204(sp)
10004714:	00800044 	movi	r2,1
10004718:	9007883a 	mov	r3,r18
1000471c:	003fc006 	br	10004620 <__alt_data_end+0xf8004620>
10004720:	da012a17 	ldw	r8,1192(sp)
10004724:	df012a15 	stw	fp,1192(sp)
10004728:	9839883a 	mov	fp,r19
1000472c:	dcc12b03 	ldbu	r19,1196(sp)
10004730:	01040074 	movhi	r4,4097
10004734:	210c7f04 	addi	r4,r4,12796
10004738:	d9013b15 	stw	r4,1260(sp)
1000473c:	dcc12785 	stb	r19,1182(sp)
10004740:	e0c0080c 	andi	r3,fp,32
10004744:	d8812d17 	ldw	r2,1204(sp)
10004748:	183fd21e 	bne	r3,zero,10004694 <__alt_data_end+0xf8004694>
1000474c:	e0c0040c 	andi	r3,fp,16
10004750:	18035426 	beq	r3,zero,100054a4 <___vfprintf_internal_r+0x18c4>
10004754:	d8c12d17 	ldw	r3,1204(sp)
10004758:	14800017 	ldw	r18,0(r2)
1000475c:	002b883a 	mov	r21,zero
10004760:	18c00104 	addi	r3,r3,4
10004764:	d8c12d15 	stw	r3,1204(sp)
10004768:	003fcf06 	br	100046a8 <__alt_data_end+0xf80046a8>
1000476c:	e4000007 	ldb	r16,0(fp)
10004770:	00801b04 	movi	r2,108
10004774:	8083f726 	beq	r16,r2,10005754 <___vfprintf_internal_r+0x1b74>
10004778:	9cc00414 	ori	r19,r19,16
1000477c:	e005883a 	mov	r2,fp
10004780:	003d7f06 	br	10003d80 <__alt_data_end+0xf8003d80>
10004784:	da012a17 	ldw	r8,1192(sp)
10004788:	df012a15 	stw	fp,1192(sp)
1000478c:	9839883a 	mov	fp,r19
10004790:	dcc12b03 	ldbu	r19,1196(sp)
10004794:	e080080c 	andi	r2,fp,32
10004798:	dcc12785 	stb	r19,1182(sp)
1000479c:	10032226 	beq	r2,zero,10005428 <___vfprintf_internal_r+0x1848>
100047a0:	d9412d17 	ldw	r5,1204(sp)
100047a4:	d9012f17 	ldw	r4,1212(sp)
100047a8:	28800017 	ldw	r2,0(r5)
100047ac:	2007d7fa 	srai	r3,r4,31
100047b0:	29400104 	addi	r5,r5,4
100047b4:	d9412d15 	stw	r5,1204(sp)
100047b8:	11000015 	stw	r4,0(r2)
100047bc:	10c00115 	stw	r3,4(r2)
100047c0:	003d4406 	br	10003cd4 <__alt_data_end+0xf8003cd4>
100047c4:	da012a17 	ldw	r8,1192(sp)
100047c8:	df012a15 	stw	fp,1192(sp)
100047cc:	9839883a 	mov	fp,r19
100047d0:	e0c0080c 	andi	r3,fp,32
100047d4:	d8812d17 	ldw	r2,1204(sp)
100047d8:	183f8a1e 	bne	r3,zero,10004604 <__alt_data_end+0xf8004604>
100047dc:	e0c0040c 	andi	r3,fp,16
100047e0:	18031c26 	beq	r3,zero,10005454 <___vfprintf_internal_r+0x1874>
100047e4:	14800017 	ldw	r18,0(r2)
100047e8:	d8812d17 	ldw	r2,1204(sp)
100047ec:	002b883a 	mov	r21,zero
100047f0:	9007883a 	mov	r3,r18
100047f4:	10800104 	addi	r2,r2,4
100047f8:	d8812d15 	stw	r2,1204(sp)
100047fc:	0005883a 	mov	r2,zero
10004800:	003f8706 	br	10004620 <__alt_data_end+0xf8004620>
10004804:	d9412d17 	ldw	r5,1204(sp)
10004808:	00800c04 	movi	r2,48
1000480c:	d8812705 	stb	r2,1180(sp)
10004810:	2c800017 	ldw	r18,0(r5)
10004814:	00801e04 	movi	r2,120
10004818:	d8812745 	stb	r2,1181(sp)
1000481c:	00840074 	movhi	r2,4097
10004820:	108c7f04 	addi	r2,r2,12796
10004824:	29400104 	addi	r5,r5,4
10004828:	da012a17 	ldw	r8,1192(sp)
1000482c:	d8813b15 	stw	r2,1260(sp)
10004830:	df012a15 	stw	fp,1192(sp)
10004834:	002b883a 	mov	r21,zero
10004838:	9f000094 	ori	fp,r19,2
1000483c:	d9412d15 	stw	r5,1204(sp)
10004840:	00800084 	movi	r2,2
10004844:	04001e04 	movi	r16,120
10004848:	9007883a 	mov	r3,r18
1000484c:	003f7406 	br	10004620 <__alt_data_end+0xf8004620>
10004850:	da012a17 	ldw	r8,1192(sp)
10004854:	df012a15 	stw	fp,1192(sp)
10004858:	9839883a 	mov	fp,r19
1000485c:	dcc12b03 	ldbu	r19,1196(sp)
10004860:	e080080c 	andi	r2,fp,32
10004864:	d8c12d17 	ldw	r3,1204(sp)
10004868:	dcc12785 	stb	r19,1182(sp)
1000486c:	103e321e 	bne	r2,zero,10004138 <__alt_data_end+0xf8004138>
10004870:	e080040c 	andi	r2,fp,16
10004874:	10031326 	beq	r2,zero,100054c4 <___vfprintf_internal_r+0x18e4>
10004878:	1c800017 	ldw	r18,0(r3)
1000487c:	d9412d17 	ldw	r5,1204(sp)
10004880:	902bd7fa 	srai	r21,r18,31
10004884:	29400104 	addi	r5,r5,4
10004888:	d9412d15 	stw	r5,1204(sp)
1000488c:	a805883a 	mov	r2,r21
10004890:	003e2f06 	br	10004150 <__alt_data_end+0xf8004150>
10004894:	9cc01014 	ori	r19,r19,64
10004898:	e005883a 	mov	r2,fp
1000489c:	e4000007 	ldb	r16,0(fp)
100048a0:	003d3706 	br	10003d80 <__alt_data_end+0xf8003d80>
100048a4:	d8c12d17 	ldw	r3,1204(sp)
100048a8:	d9012d17 	ldw	r4,1204(sp)
100048ac:	da012a17 	ldw	r8,1192(sp)
100048b0:	18800017 	ldw	r2,0(r3)
100048b4:	21000104 	addi	r4,r4,4
100048b8:	00c00044 	movi	r3,1
100048bc:	df012a15 	stw	fp,1192(sp)
100048c0:	d8c12b15 	stw	r3,1196(sp)
100048c4:	9839883a 	mov	fp,r19
100048c8:	d8012785 	stb	zero,1182(sp)
100048cc:	d8810405 	stb	r2,1040(sp)
100048d0:	d9012d15 	stw	r4,1204(sp)
100048d4:	1823883a 	mov	r17,r3
100048d8:	d8c10404 	addi	r3,sp,1040
100048dc:	d8013215 	stw	zero,1224(sp)
100048e0:	d8013415 	stw	zero,1232(sp)
100048e4:	d8c13115 	stw	r3,1220(sp)
100048e8:	0005883a 	mov	r2,zero
100048ec:	003e4306 	br	100041fc <__alt_data_end+0xf80041fc>
100048f0:	d8812b07 	ldb	r2,1196(sp)
100048f4:	1002fc1e 	bne	r2,zero,100054e8 <___vfprintf_internal_r+0x1908>
100048f8:	00c00804 	movi	r3,32
100048fc:	d8c12b05 	stb	r3,1196(sp)
10004900:	e005883a 	mov	r2,fp
10004904:	e4000007 	ldb	r16,0(fp)
10004908:	003d1d06 	br	10003d80 <__alt_data_end+0xf8003d80>
1000490c:	9cc00054 	ori	r19,r19,1
10004910:	e005883a 	mov	r2,fp
10004914:	e4000007 	ldb	r16,0(fp)
10004918:	003d1906 	br	10003d80 <__alt_data_end+0xf8003d80>
1000491c:	d9012d17 	ldw	r4,1204(sp)
10004920:	d9412d17 	ldw	r5,1204(sp)
10004924:	21000017 	ldw	r4,0(r4)
10004928:	28c00104 	addi	r3,r5,4
1000492c:	d9012e15 	stw	r4,1208(sp)
10004930:	20038c16 	blt	r4,zero,10005764 <___vfprintf_internal_r+0x1b84>
10004934:	d8c12d15 	stw	r3,1204(sp)
10004938:	e005883a 	mov	r2,fp
1000493c:	e4000007 	ldb	r16,0(fp)
10004940:	003d0f06 	br	10003d80 <__alt_data_end+0xf8003d80>
10004944:	00c00ac4 	movi	r3,43
10004948:	d8c12b05 	stb	r3,1196(sp)
1000494c:	e005883a 	mov	r2,fp
10004950:	e4000007 	ldb	r16,0(fp)
10004954:	003d0a06 	br	10003d80 <__alt_data_end+0xf8003d80>
10004958:	d8c12d17 	ldw	r3,1204(sp)
1000495c:	d9012d17 	ldw	r4,1204(sp)
10004960:	da012a17 	ldw	r8,1192(sp)
10004964:	18c00017 	ldw	r3,0(r3)
10004968:	df012a15 	stw	fp,1192(sp)
1000496c:	d8012785 	stb	zero,1182(sp)
10004970:	d8c13115 	stw	r3,1220(sp)
10004974:	9839883a 	mov	fp,r19
10004978:	24800104 	addi	r18,r4,4
1000497c:	1803f726 	beq	r3,zero,1000595c <___vfprintf_internal_r+0x1d7c>
10004980:	d9013117 	ldw	r4,1220(sp)
10004984:	48038916 	blt	r9,zero,100057ac <___vfprintf_internal_r+0x1bcc>
10004988:	480d883a 	mov	r6,r9
1000498c:	000b883a 	mov	r5,zero
10004990:	da013f15 	stw	r8,1276(sp)
10004994:	da413e15 	stw	r9,1272(sp)
10004998:	00091f40 	call	100091f4 <memchr>
1000499c:	da013f17 	ldw	r8,1276(sp)
100049a0:	da413e17 	ldw	r9,1272(sp)
100049a4:	10045926 	beq	r2,zero,10005b0c <___vfprintf_internal_r+0x1f2c>
100049a8:	d8c13117 	ldw	r3,1220(sp)
100049ac:	10e3c83a 	sub	r17,r2,r3
100049b0:	4c433516 	blt	r9,r17,10005688 <___vfprintf_internal_r+0x1aa8>
100049b4:	8805883a 	mov	r2,r17
100049b8:	88038116 	blt	r17,zero,100057c0 <___vfprintf_internal_r+0x1be0>
100049bc:	dcc12783 	ldbu	r19,1182(sp)
100049c0:	d8812b15 	stw	r2,1196(sp)
100049c4:	dc812d15 	stw	r18,1204(sp)
100049c8:	d8013215 	stw	zero,1224(sp)
100049cc:	d8013415 	stw	zero,1232(sp)
100049d0:	003e0306 	br	100041e0 <__alt_data_end+0xf80041e0>
100049d4:	da012a17 	ldw	r8,1192(sp)
100049d8:	df012a15 	stw	fp,1192(sp)
100049dc:	9839883a 	mov	fp,r19
100049e0:	dcc12b03 	ldbu	r19,1196(sp)
100049e4:	dcc12785 	stb	r19,1182(sp)
100049e8:	803d8f26 	beq	r16,zero,10004028 <__alt_data_end+0xf8004028>
100049ec:	00c00044 	movi	r3,1
100049f0:	d8c12b15 	stw	r3,1196(sp)
100049f4:	dc010405 	stb	r16,1040(sp)
100049f8:	d8012785 	stb	zero,1182(sp)
100049fc:	003fb506 	br	100048d4 <__alt_data_end+0xf80048d4>
10004a00:	d8c12017 	ldw	r3,1152(sp)
10004a04:	003e3506 	br	100042dc <__alt_data_end+0xf80042dc>
10004a08:	10803fcc 	andi	r2,r2,255
10004a0c:	00c00044 	movi	r3,1
10004a10:	10fddc1e 	bne	r2,r3,10004184 <__alt_data_end+0xf8004184>
10004a14:	a800021e 	bne	r21,zero,10004a20 <___vfprintf_internal_r+0xe40>
10004a18:	00800244 	movi	r2,9
10004a1c:	14801e2e 	bgeu	r2,r18,10004a98 <___vfprintf_internal_r+0xeb8>
10004a20:	dc012b15 	stw	r16,1196(sp)
10004a24:	dc410e04 	addi	r17,sp,1080
10004a28:	9021883a 	mov	r16,r18
10004a2c:	da012c15 	stw	r8,1200(sp)
10004a30:	a825883a 	mov	r18,r21
10004a34:	482b883a 	mov	r21,r9
10004a38:	8009883a 	mov	r4,r16
10004a3c:	900b883a 	mov	r5,r18
10004a40:	01800284 	movi	r6,10
10004a44:	000f883a 	mov	r7,zero
10004a48:	000d40c0 	call	1000d40c <__umoddi3>
10004a4c:	10800c04 	addi	r2,r2,48
10004a50:	8c7fffc4 	addi	r17,r17,-1
10004a54:	8009883a 	mov	r4,r16
10004a58:	900b883a 	mov	r5,r18
10004a5c:	01800284 	movi	r6,10
10004a60:	000f883a 	mov	r7,zero
10004a64:	88800005 	stb	r2,0(r17)
10004a68:	000cdcc0 	call	1000cdcc <__udivdi3>
10004a6c:	1021883a 	mov	r16,r2
10004a70:	10c4b03a 	or	r2,r2,r3
10004a74:	1825883a 	mov	r18,r3
10004a78:	103fef1e 	bne	r2,zero,10004a38 <__alt_data_end+0xf8004a38>
10004a7c:	d9012817 	ldw	r4,1184(sp)
10004a80:	dc413115 	stw	r17,1220(sp)
10004a84:	dc012b17 	ldw	r16,1196(sp)
10004a88:	da012c17 	ldw	r8,1200(sp)
10004a8c:	a813883a 	mov	r9,r21
10004a90:	2463c83a 	sub	r17,r4,r17
10004a94:	003dcd06 	br	100041cc <__alt_data_end+0xf80041cc>
10004a98:	94800c04 	addi	r18,r18,48
10004a9c:	d8c10dc4 	addi	r3,sp,1079
10004aa0:	dc810dc5 	stb	r18,1079(sp)
10004aa4:	dc413c17 	ldw	r17,1264(sp)
10004aa8:	d8c13115 	stw	r3,1220(sp)
10004aac:	003dc706 	br	100041cc <__alt_data_end+0xf80041cc>
10004ab0:	00801944 	movi	r2,101
10004ab4:	1400720e 	bge	r2,r16,10004c80 <___vfprintf_internal_r+0x10a0>
10004ab8:	d9013717 	ldw	r4,1244(sp)
10004abc:	d9413917 	ldw	r5,1252(sp)
10004ac0:	000d883a 	mov	r6,zero
10004ac4:	000f883a 	mov	r7,zero
10004ac8:	d8c13d15 	stw	r3,1268(sp)
10004acc:	da013f15 	stw	r8,1276(sp)
10004ad0:	000ec440 	call	1000ec44 <__eqdf2>
10004ad4:	d8c13d17 	ldw	r3,1268(sp)
10004ad8:	da013f17 	ldw	r8,1276(sp)
10004adc:	1000f41e 	bne	r2,zero,10004eb0 <___vfprintf_internal_r+0x12d0>
10004ae0:	d8811f17 	ldw	r2,1148(sp)
10004ae4:	01040074 	movhi	r4,4097
10004ae8:	210c8604 	addi	r4,r4,12824
10004aec:	18c00044 	addi	r3,r3,1
10004af0:	10800044 	addi	r2,r2,1
10004af4:	41000015 	stw	r4,0(r8)
10004af8:	01000044 	movi	r4,1
10004afc:	41000115 	stw	r4,4(r8)
10004b00:	d8c12015 	stw	r3,1152(sp)
10004b04:	d8811f15 	stw	r2,1148(sp)
10004b08:	010001c4 	movi	r4,7
10004b0c:	20828d16 	blt	r4,r2,10005544 <___vfprintf_internal_r+0x1964>
10004b10:	42000204 	addi	r8,r8,8
10004b14:	d8812617 	ldw	r2,1176(sp)
10004b18:	d9413317 	ldw	r5,1228(sp)
10004b1c:	11400216 	blt	r2,r5,10004b28 <___vfprintf_internal_r+0xf48>
10004b20:	e080004c 	andi	r2,fp,1
10004b24:	103e4126 	beq	r2,zero,1000442c <__alt_data_end+0xf800442c>
10004b28:	d8813817 	ldw	r2,1248(sp)
10004b2c:	d9013517 	ldw	r4,1236(sp)
10004b30:	d9413817 	ldw	r5,1248(sp)
10004b34:	1887883a 	add	r3,r3,r2
10004b38:	d8811f17 	ldw	r2,1148(sp)
10004b3c:	41000015 	stw	r4,0(r8)
10004b40:	41400115 	stw	r5,4(r8)
10004b44:	10800044 	addi	r2,r2,1
10004b48:	d8c12015 	stw	r3,1152(sp)
10004b4c:	d8811f15 	stw	r2,1148(sp)
10004b50:	010001c4 	movi	r4,7
10004b54:	20830916 	blt	r4,r2,1000577c <___vfprintf_internal_r+0x1b9c>
10004b58:	42000204 	addi	r8,r8,8
10004b5c:	d8813317 	ldw	r2,1228(sp)
10004b60:	143fffc4 	addi	r16,r2,-1
10004b64:	043e310e 	bge	zero,r16,1000442c <__alt_data_end+0xf800442c>
10004b68:	04400404 	movi	r17,16
10004b6c:	d8811f17 	ldw	r2,1148(sp)
10004b70:	8c007e0e 	bge	r17,r16,10004d6c <___vfprintf_internal_r+0x118c>
10004b74:	01440074 	movhi	r5,4097
10004b78:	294c8684 	addi	r5,r5,12826
10004b7c:	d9412c15 	stw	r5,1200(sp)
10004b80:	04c001c4 	movi	r19,7
10004b84:	00000306 	br	10004b94 <___vfprintf_internal_r+0xfb4>
10004b88:	42000204 	addi	r8,r8,8
10004b8c:	843ffc04 	addi	r16,r16,-16
10004b90:	8c00790e 	bge	r17,r16,10004d78 <___vfprintf_internal_r+0x1198>
10004b94:	18c00404 	addi	r3,r3,16
10004b98:	10800044 	addi	r2,r2,1
10004b9c:	45000015 	stw	r20,0(r8)
10004ba0:	44400115 	stw	r17,4(r8)
10004ba4:	d8c12015 	stw	r3,1152(sp)
10004ba8:	d8811f15 	stw	r2,1148(sp)
10004bac:	98bff60e 	bge	r19,r2,10004b88 <__alt_data_end+0xf8004b88>
10004bb0:	b809883a 	mov	r4,r23
10004bb4:	b00b883a 	mov	r5,r22
10004bb8:	d9811e04 	addi	r6,sp,1144
10004bbc:	000b0200 	call	1000b020 <__sprint_r>
10004bc0:	103d1f1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10004bc4:	d8c12017 	ldw	r3,1152(sp)
10004bc8:	d8811f17 	ldw	r2,1148(sp)
10004bcc:	da000404 	addi	r8,sp,16
10004bd0:	003fee06 	br	10004b8c <__alt_data_end+0xf8004b8c>
10004bd4:	d9412e17 	ldw	r5,1208(sp)
10004bd8:	d8812b17 	ldw	r2,1196(sp)
10004bdc:	28a7c83a 	sub	r19,r5,r2
10004be0:	04fddc0e 	bge	zero,r19,10004354 <__alt_data_end+0xf8004354>
10004be4:	05400404 	movi	r21,16
10004be8:	d8811f17 	ldw	r2,1148(sp)
10004bec:	acc3870e 	bge	r21,r19,10005a0c <___vfprintf_internal_r+0x1e2c>
10004bf0:	01440074 	movhi	r5,4097
10004bf4:	294c8684 	addi	r5,r5,12826
10004bf8:	d9412c15 	stw	r5,1200(sp)
10004bfc:	048001c4 	movi	r18,7
10004c00:	00000306 	br	10004c10 <___vfprintf_internal_r+0x1030>
10004c04:	9cfffc04 	addi	r19,r19,-16
10004c08:	42000204 	addi	r8,r8,8
10004c0c:	acc0110e 	bge	r21,r19,10004c54 <___vfprintf_internal_r+0x1074>
10004c10:	18c00404 	addi	r3,r3,16
10004c14:	10800044 	addi	r2,r2,1
10004c18:	45000015 	stw	r20,0(r8)
10004c1c:	45400115 	stw	r21,4(r8)
10004c20:	d8c12015 	stw	r3,1152(sp)
10004c24:	d8811f15 	stw	r2,1148(sp)
10004c28:	90bff60e 	bge	r18,r2,10004c04 <__alt_data_end+0xf8004c04>
10004c2c:	b809883a 	mov	r4,r23
10004c30:	b00b883a 	mov	r5,r22
10004c34:	d9811e04 	addi	r6,sp,1144
10004c38:	000b0200 	call	1000b020 <__sprint_r>
10004c3c:	103d001e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10004c40:	9cfffc04 	addi	r19,r19,-16
10004c44:	d8c12017 	ldw	r3,1152(sp)
10004c48:	d8811f17 	ldw	r2,1148(sp)
10004c4c:	da000404 	addi	r8,sp,16
10004c50:	acffef16 	blt	r21,r19,10004c10 <__alt_data_end+0xf8004c10>
10004c54:	d9012c17 	ldw	r4,1200(sp)
10004c58:	1cc7883a 	add	r3,r3,r19
10004c5c:	10800044 	addi	r2,r2,1
10004c60:	41000015 	stw	r4,0(r8)
10004c64:	44c00115 	stw	r19,4(r8)
10004c68:	d8c12015 	stw	r3,1152(sp)
10004c6c:	d8811f15 	stw	r2,1148(sp)
10004c70:	010001c4 	movi	r4,7
10004c74:	20817816 	blt	r4,r2,10005258 <___vfprintf_internal_r+0x1678>
10004c78:	42000204 	addi	r8,r8,8
10004c7c:	003db506 	br	10004354 <__alt_data_end+0xf8004354>
10004c80:	d9413317 	ldw	r5,1228(sp)
10004c84:	00800044 	movi	r2,1
10004c88:	18c00044 	addi	r3,r3,1
10004c8c:	11413e0e 	bge	r2,r5,10005188 <___vfprintf_internal_r+0x15a8>
10004c90:	dc011f17 	ldw	r16,1148(sp)
10004c94:	d8813117 	ldw	r2,1220(sp)
10004c98:	d8c12015 	stw	r3,1152(sp)
10004c9c:	84000044 	addi	r16,r16,1
10004ca0:	40800015 	stw	r2,0(r8)
10004ca4:	00800044 	movi	r2,1
10004ca8:	40800115 	stw	r2,4(r8)
10004cac:	dc011f15 	stw	r16,1148(sp)
10004cb0:	008001c4 	movi	r2,7
10004cb4:	14015616 	blt	r2,r16,10005210 <___vfprintf_internal_r+0x1630>
10004cb8:	42000204 	addi	r8,r8,8
10004cbc:	d9013817 	ldw	r4,1248(sp)
10004cc0:	d9413517 	ldw	r5,1236(sp)
10004cc4:	84000044 	addi	r16,r16,1
10004cc8:	1907883a 	add	r3,r3,r4
10004ccc:	41400015 	stw	r5,0(r8)
10004cd0:	41000115 	stw	r4,4(r8)
10004cd4:	d8c12015 	stw	r3,1152(sp)
10004cd8:	dc011f15 	stw	r16,1148(sp)
10004cdc:	008001c4 	movi	r2,7
10004ce0:	14015416 	blt	r2,r16,10005234 <___vfprintf_internal_r+0x1654>
10004ce4:	44400204 	addi	r17,r8,8
10004ce8:	d9013717 	ldw	r4,1244(sp)
10004cec:	d9413917 	ldw	r5,1252(sp)
10004cf0:	000d883a 	mov	r6,zero
10004cf4:	000f883a 	mov	r7,zero
10004cf8:	d8c13d15 	stw	r3,1268(sp)
10004cfc:	000ec440 	call	1000ec44 <__eqdf2>
10004d00:	d8c13d17 	ldw	r3,1268(sp)
10004d04:	1000a726 	beq	r2,zero,10004fa4 <___vfprintf_internal_r+0x13c4>
10004d08:	d9013317 	ldw	r4,1228(sp)
10004d0c:	d9413117 	ldw	r5,1220(sp)
10004d10:	84000044 	addi	r16,r16,1
10004d14:	20bfffc4 	addi	r2,r4,-1
10004d18:	1887883a 	add	r3,r3,r2
10004d1c:	29000044 	addi	r4,r5,1
10004d20:	88800115 	stw	r2,4(r17)
10004d24:	89000015 	stw	r4,0(r17)
10004d28:	d8c12015 	stw	r3,1152(sp)
10004d2c:	dc011f15 	stw	r16,1148(sp)
10004d30:	008001c4 	movi	r2,7
10004d34:	14012d16 	blt	r2,r16,100051ec <___vfprintf_internal_r+0x160c>
10004d38:	8c400204 	addi	r17,r17,8
10004d3c:	d9413a17 	ldw	r5,1256(sp)
10004d40:	dcc122c4 	addi	r19,sp,1163
10004d44:	84000044 	addi	r16,r16,1
10004d48:	28c7883a 	add	r3,r5,r3
10004d4c:	8cc00015 	stw	r19,0(r17)
10004d50:	89400115 	stw	r5,4(r17)
10004d54:	d8c12015 	stw	r3,1152(sp)
10004d58:	dc011f15 	stw	r16,1148(sp)
10004d5c:	008001c4 	movi	r2,7
10004d60:	14000e16 	blt	r2,r16,10004d9c <___vfprintf_internal_r+0x11bc>
10004d64:	8a000204 	addi	r8,r17,8
10004d68:	003db006 	br	1000442c <__alt_data_end+0xf800442c>
10004d6c:	01040074 	movhi	r4,4097
10004d70:	210c8684 	addi	r4,r4,12826
10004d74:	d9012c15 	stw	r4,1200(sp)
10004d78:	d9012c17 	ldw	r4,1200(sp)
10004d7c:	1c07883a 	add	r3,r3,r16
10004d80:	44000115 	stw	r16,4(r8)
10004d84:	41000015 	stw	r4,0(r8)
10004d88:	10800044 	addi	r2,r2,1
10004d8c:	d8c12015 	stw	r3,1152(sp)
10004d90:	d8811f15 	stw	r2,1148(sp)
10004d94:	010001c4 	movi	r4,7
10004d98:	20bda30e 	bge	r4,r2,10004428 <__alt_data_end+0xf8004428>
10004d9c:	b809883a 	mov	r4,r23
10004da0:	b00b883a 	mov	r5,r22
10004da4:	d9811e04 	addi	r6,sp,1144
10004da8:	000b0200 	call	1000b020 <__sprint_r>
10004dac:	103ca41e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10004db0:	d8c12017 	ldw	r3,1152(sp)
10004db4:	da000404 	addi	r8,sp,16
10004db8:	003d9c06 	br	1000442c <__alt_data_end+0xf800442c>
10004dbc:	b809883a 	mov	r4,r23
10004dc0:	b00b883a 	mov	r5,r22
10004dc4:	d9811e04 	addi	r6,sp,1144
10004dc8:	000b0200 	call	1000b020 <__sprint_r>
10004dcc:	103dd226 	beq	r2,zero,10004518 <__alt_data_end+0xf8004518>
10004dd0:	003c9b06 	br	10004040 <__alt_data_end+0xf8004040>
10004dd4:	10803fcc 	andi	r2,r2,255
10004dd8:	1000311e 	bne	r2,zero,10004ea0 <___vfprintf_internal_r+0x12c0>
10004ddc:	e080004c 	andi	r2,fp,1
10004de0:	10002f26 	beq	r2,zero,10004ea0 <___vfprintf_internal_r+0x12c0>
10004de4:	00800c04 	movi	r2,48
10004de8:	d8c10dc4 	addi	r3,sp,1079
10004dec:	d8810dc5 	stb	r2,1079(sp)
10004df0:	dc413c17 	ldw	r17,1264(sp)
10004df4:	d8c13115 	stw	r3,1220(sp)
10004df8:	003cf406 	br	100041cc <__alt_data_end+0xf80041cc>
10004dfc:	b809883a 	mov	r4,r23
10004e00:	b00b883a 	mov	r5,r22
10004e04:	d9811e04 	addi	r6,sp,1144
10004e08:	000b0200 	call	1000b020 <__sprint_r>
10004e0c:	103c8c1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10004e10:	d8c12017 	ldw	r3,1152(sp)
10004e14:	da000404 	addi	r8,sp,16
10004e18:	003d7706 	br	100043f8 <__alt_data_end+0xf80043f8>
10004e1c:	b809883a 	mov	r4,r23
10004e20:	b00b883a 	mov	r5,r22
10004e24:	d9811e04 	addi	r6,sp,1144
10004e28:	000b0200 	call	1000b020 <__sprint_r>
10004e2c:	103c841e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10004e30:	d8c12017 	ldw	r3,1152(sp)
10004e34:	da000404 	addi	r8,sp,16
10004e38:	003d3506 	br	10004310 <__alt_data_end+0xf8004310>
10004e3c:	b809883a 	mov	r4,r23
10004e40:	b00b883a 	mov	r5,r22
10004e44:	d9811e04 	addi	r6,sp,1144
10004e48:	000b0200 	call	1000b020 <__sprint_r>
10004e4c:	103c7c1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10004e50:	d8c12017 	ldw	r3,1152(sp)
10004e54:	da000404 	addi	r8,sp,16
10004e58:	003d3b06 	br	10004348 <__alt_data_end+0xf8004348>
10004e5c:	d9413b17 	ldw	r5,1260(sp)
10004e60:	d8c10e04 	addi	r3,sp,1080
10004e64:	908003cc 	andi	r2,r18,15
10004e68:	a808973a 	slli	r4,r21,28
10004e6c:	2885883a 	add	r2,r5,r2
10004e70:	9024d13a 	srli	r18,r18,4
10004e74:	10800003 	ldbu	r2,0(r2)
10004e78:	a82ad13a 	srli	r21,r21,4
10004e7c:	18ffffc4 	addi	r3,r3,-1
10004e80:	24a4b03a 	or	r18,r4,r18
10004e84:	18800005 	stb	r2,0(r3)
10004e88:	9544b03a 	or	r2,r18,r21
10004e8c:	103ff51e 	bne	r2,zero,10004e64 <__alt_data_end+0xf8004e64>
10004e90:	d9412817 	ldw	r5,1184(sp)
10004e94:	d8c13115 	stw	r3,1220(sp)
10004e98:	28e3c83a 	sub	r17,r5,r3
10004e9c:	003ccb06 	br	100041cc <__alt_data_end+0xf80041cc>
10004ea0:	d8c10e04 	addi	r3,sp,1080
10004ea4:	0023883a 	mov	r17,zero
10004ea8:	d8c13115 	stw	r3,1220(sp)
10004eac:	003cc706 	br	100041cc <__alt_data_end+0xf80041cc>
10004eb0:	dc012617 	ldw	r16,1176(sp)
10004eb4:	0401ab0e 	bge	zero,r16,10005564 <___vfprintf_internal_r+0x1984>
10004eb8:	d8813317 	ldw	r2,1228(sp)
10004ebc:	d9413117 	ldw	r5,1220(sp)
10004ec0:	d9013417 	ldw	r4,1232(sp)
10004ec4:	1023883a 	mov	r17,r2
10004ec8:	28a1883a 	add	r16,r5,r2
10004ecc:	2080010e 	bge	r4,r2,10004ed4 <___vfprintf_internal_r+0x12f4>
10004ed0:	2023883a 	mov	r17,r4
10004ed4:	04400b0e 	bge	zero,r17,10004f04 <___vfprintf_internal_r+0x1324>
10004ed8:	d8811f17 	ldw	r2,1148(sp)
10004edc:	d9413117 	ldw	r5,1220(sp)
10004ee0:	1c47883a 	add	r3,r3,r17
10004ee4:	10800044 	addi	r2,r2,1
10004ee8:	41400015 	stw	r5,0(r8)
10004eec:	44400115 	stw	r17,4(r8)
10004ef0:	d8c12015 	stw	r3,1152(sp)
10004ef4:	d8811f15 	stw	r2,1148(sp)
10004ef8:	010001c4 	movi	r4,7
10004efc:	20826716 	blt	r4,r2,1000589c <___vfprintf_internal_r+0x1cbc>
10004f00:	42000204 	addi	r8,r8,8
10004f04:	88026316 	blt	r17,zero,10005894 <___vfprintf_internal_r+0x1cb4>
10004f08:	d8813417 	ldw	r2,1232(sp)
10004f0c:	1463c83a 	sub	r17,r2,r17
10004f10:	0440590e 	bge	zero,r17,10005078 <___vfprintf_internal_r+0x1498>
10004f14:	04c00404 	movi	r19,16
10004f18:	d8811f17 	ldw	r2,1148(sp)
10004f1c:	9c41770e 	bge	r19,r17,100054fc <___vfprintf_internal_r+0x191c>
10004f20:	01440074 	movhi	r5,4097
10004f24:	294c8684 	addi	r5,r5,12826
10004f28:	d9412c15 	stw	r5,1200(sp)
10004f2c:	054001c4 	movi	r21,7
10004f30:	00000306 	br	10004f40 <___vfprintf_internal_r+0x1360>
10004f34:	42000204 	addi	r8,r8,8
10004f38:	8c7ffc04 	addi	r17,r17,-16
10004f3c:	9c41720e 	bge	r19,r17,10005508 <___vfprintf_internal_r+0x1928>
10004f40:	18c00404 	addi	r3,r3,16
10004f44:	10800044 	addi	r2,r2,1
10004f48:	45000015 	stw	r20,0(r8)
10004f4c:	44c00115 	stw	r19,4(r8)
10004f50:	d8c12015 	stw	r3,1152(sp)
10004f54:	d8811f15 	stw	r2,1148(sp)
10004f58:	a8bff60e 	bge	r21,r2,10004f34 <__alt_data_end+0xf8004f34>
10004f5c:	b809883a 	mov	r4,r23
10004f60:	b00b883a 	mov	r5,r22
10004f64:	d9811e04 	addi	r6,sp,1144
10004f68:	000b0200 	call	1000b020 <__sprint_r>
10004f6c:	103c341e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10004f70:	d8c12017 	ldw	r3,1152(sp)
10004f74:	d8811f17 	ldw	r2,1148(sp)
10004f78:	da000404 	addi	r8,sp,16
10004f7c:	003fee06 	br	10004f38 <__alt_data_end+0xf8004f38>
10004f80:	b809883a 	mov	r4,r23
10004f84:	b00b883a 	mov	r5,r22
10004f88:	d9811e04 	addi	r6,sp,1144
10004f8c:	000b0200 	call	1000b020 <__sprint_r>
10004f90:	103c2b1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10004f94:	d8c12017 	ldw	r3,1152(sp)
10004f98:	d8812787 	ldb	r2,1182(sp)
10004f9c:	da000404 	addi	r8,sp,16
10004fa0:	003cce06 	br	100042dc <__alt_data_end+0xf80042dc>
10004fa4:	d8813317 	ldw	r2,1228(sp)
10004fa8:	14ffffc4 	addi	r19,r2,-1
10004fac:	04ff630e 	bge	zero,r19,10004d3c <__alt_data_end+0xf8004d3c>
10004fb0:	05400404 	movi	r21,16
10004fb4:	acc0810e 	bge	r21,r19,100051bc <___vfprintf_internal_r+0x15dc>
10004fb8:	01440074 	movhi	r5,4097
10004fbc:	294c8684 	addi	r5,r5,12826
10004fc0:	d9412c15 	stw	r5,1200(sp)
10004fc4:	01c001c4 	movi	r7,7
10004fc8:	00000306 	br	10004fd8 <___vfprintf_internal_r+0x13f8>
10004fcc:	8c400204 	addi	r17,r17,8
10004fd0:	9cfffc04 	addi	r19,r19,-16
10004fd4:	acc07c0e 	bge	r21,r19,100051c8 <___vfprintf_internal_r+0x15e8>
10004fd8:	18c00404 	addi	r3,r3,16
10004fdc:	84000044 	addi	r16,r16,1
10004fe0:	8d000015 	stw	r20,0(r17)
10004fe4:	8d400115 	stw	r21,4(r17)
10004fe8:	d8c12015 	stw	r3,1152(sp)
10004fec:	dc011f15 	stw	r16,1148(sp)
10004ff0:	3c3ff60e 	bge	r7,r16,10004fcc <__alt_data_end+0xf8004fcc>
10004ff4:	b809883a 	mov	r4,r23
10004ff8:	b00b883a 	mov	r5,r22
10004ffc:	d9811e04 	addi	r6,sp,1144
10005000:	d9c13d15 	stw	r7,1268(sp)
10005004:	000b0200 	call	1000b020 <__sprint_r>
10005008:	d9c13d17 	ldw	r7,1268(sp)
1000500c:	103c0c1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005010:	d8c12017 	ldw	r3,1152(sp)
10005014:	dc011f17 	ldw	r16,1148(sp)
10005018:	dc400404 	addi	r17,sp,16
1000501c:	003fec06 	br	10004fd0 <__alt_data_end+0xf8004fd0>
10005020:	00800084 	movi	r2,2
10005024:	9546b03a 	or	r3,r18,r21
10005028:	003d7d06 	br	10004620 <__alt_data_end+0xf8004620>
1000502c:	10803fcc 	andi	r2,r2,255
10005030:	1080201c 	xori	r2,r2,128
10005034:	10bfe004 	addi	r2,r2,-128
10005038:	01000c04 	movi	r4,48
1000503c:	1101d726 	beq	r2,r4,1000579c <___vfprintf_internal_r+0x1bbc>
10005040:	d9413117 	ldw	r5,1220(sp)
10005044:	d8812817 	ldw	r2,1184(sp)
10005048:	193fffc5 	stb	r4,-1(r3)
1000504c:	297fffc4 	addi	r5,r5,-1
10005050:	d9413115 	stw	r5,1220(sp)
10005054:	1163c83a 	sub	r17,r2,r5
10005058:	003c5c06 	br	100041cc <__alt_data_end+0xf80041cc>
1000505c:	b809883a 	mov	r4,r23
10005060:	b00b883a 	mov	r5,r22
10005064:	d9811e04 	addi	r6,sp,1144
10005068:	000b0200 	call	1000b020 <__sprint_r>
1000506c:	103bf41e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005070:	d8c12017 	ldw	r3,1152(sp)
10005074:	da000404 	addi	r8,sp,16
10005078:	d9413117 	ldw	r5,1220(sp)
1000507c:	d9013417 	ldw	r4,1232(sp)
10005080:	d8812617 	ldw	r2,1176(sp)
10005084:	2923883a 	add	r17,r5,r4
10005088:	d9413317 	ldw	r5,1228(sp)
1000508c:	11400216 	blt	r2,r5,10005098 <___vfprintf_internal_r+0x14b8>
10005090:	e100004c 	andi	r4,fp,1
10005094:	20000d26 	beq	r4,zero,100050cc <___vfprintf_internal_r+0x14ec>
10005098:	d9013817 	ldw	r4,1248(sp)
1000509c:	d9413517 	ldw	r5,1236(sp)
100050a0:	1907883a 	add	r3,r3,r4
100050a4:	d9011f17 	ldw	r4,1148(sp)
100050a8:	41400015 	stw	r5,0(r8)
100050ac:	d9413817 	ldw	r5,1248(sp)
100050b0:	21000044 	addi	r4,r4,1
100050b4:	d8c12015 	stw	r3,1152(sp)
100050b8:	41400115 	stw	r5,4(r8)
100050bc:	d9011f15 	stw	r4,1148(sp)
100050c0:	014001c4 	movi	r5,7
100050c4:	2901fd16 	blt	r5,r4,100058bc <___vfprintf_internal_r+0x1cdc>
100050c8:	42000204 	addi	r8,r8,8
100050cc:	d9013317 	ldw	r4,1228(sp)
100050d0:	2085c83a 	sub	r2,r4,r2
100050d4:	8449c83a 	sub	r4,r16,r17
100050d8:	1021883a 	mov	r16,r2
100050dc:	2080010e 	bge	r4,r2,100050e4 <___vfprintf_internal_r+0x1504>
100050e0:	2021883a 	mov	r16,r4
100050e4:	04000a0e 	bge	zero,r16,10005110 <___vfprintf_internal_r+0x1530>
100050e8:	d9011f17 	ldw	r4,1148(sp)
100050ec:	1c07883a 	add	r3,r3,r16
100050f0:	44400015 	stw	r17,0(r8)
100050f4:	21000044 	addi	r4,r4,1
100050f8:	44000115 	stw	r16,4(r8)
100050fc:	d8c12015 	stw	r3,1152(sp)
10005100:	d9011f15 	stw	r4,1148(sp)
10005104:	014001c4 	movi	r5,7
10005108:	29020916 	blt	r5,r4,10005930 <___vfprintf_internal_r+0x1d50>
1000510c:	42000204 	addi	r8,r8,8
10005110:	80020116 	blt	r16,zero,10005918 <___vfprintf_internal_r+0x1d38>
10005114:	1421c83a 	sub	r16,r2,r16
10005118:	043cc40e 	bge	zero,r16,1000442c <__alt_data_end+0xf800442c>
1000511c:	04400404 	movi	r17,16
10005120:	d8811f17 	ldw	r2,1148(sp)
10005124:	8c3f110e 	bge	r17,r16,10004d6c <__alt_data_end+0xf8004d6c>
10005128:	01440074 	movhi	r5,4097
1000512c:	294c8684 	addi	r5,r5,12826
10005130:	d9412c15 	stw	r5,1200(sp)
10005134:	04c001c4 	movi	r19,7
10005138:	00000306 	br	10005148 <___vfprintf_internal_r+0x1568>
1000513c:	42000204 	addi	r8,r8,8
10005140:	843ffc04 	addi	r16,r16,-16
10005144:	8c3f0c0e 	bge	r17,r16,10004d78 <__alt_data_end+0xf8004d78>
10005148:	18c00404 	addi	r3,r3,16
1000514c:	10800044 	addi	r2,r2,1
10005150:	45000015 	stw	r20,0(r8)
10005154:	44400115 	stw	r17,4(r8)
10005158:	d8c12015 	stw	r3,1152(sp)
1000515c:	d8811f15 	stw	r2,1148(sp)
10005160:	98bff60e 	bge	r19,r2,1000513c <__alt_data_end+0xf800513c>
10005164:	b809883a 	mov	r4,r23
10005168:	b00b883a 	mov	r5,r22
1000516c:	d9811e04 	addi	r6,sp,1144
10005170:	000b0200 	call	1000b020 <__sprint_r>
10005174:	103bb21e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005178:	d8c12017 	ldw	r3,1152(sp)
1000517c:	d8811f17 	ldw	r2,1148(sp)
10005180:	da000404 	addi	r8,sp,16
10005184:	003fee06 	br	10005140 <__alt_data_end+0xf8005140>
10005188:	e088703a 	and	r4,fp,r2
1000518c:	203ec01e 	bne	r4,zero,10004c90 <__alt_data_end+0xf8004c90>
10005190:	dc011f17 	ldw	r16,1148(sp)
10005194:	d9013117 	ldw	r4,1220(sp)
10005198:	40800115 	stw	r2,4(r8)
1000519c:	84000044 	addi	r16,r16,1
100051a0:	41000015 	stw	r4,0(r8)
100051a4:	d8c12015 	stw	r3,1152(sp)
100051a8:	dc011f15 	stw	r16,1148(sp)
100051ac:	008001c4 	movi	r2,7
100051b0:	14000e16 	blt	r2,r16,100051ec <___vfprintf_internal_r+0x160c>
100051b4:	44400204 	addi	r17,r8,8
100051b8:	003ee006 	br	10004d3c <__alt_data_end+0xf8004d3c>
100051bc:	01040074 	movhi	r4,4097
100051c0:	210c8684 	addi	r4,r4,12826
100051c4:	d9012c15 	stw	r4,1200(sp)
100051c8:	d8812c17 	ldw	r2,1200(sp)
100051cc:	1cc7883a 	add	r3,r3,r19
100051d0:	84000044 	addi	r16,r16,1
100051d4:	88800015 	stw	r2,0(r17)
100051d8:	8cc00115 	stw	r19,4(r17)
100051dc:	d8c12015 	stw	r3,1152(sp)
100051e0:	dc011f15 	stw	r16,1148(sp)
100051e4:	008001c4 	movi	r2,7
100051e8:	143ed30e 	bge	r2,r16,10004d38 <__alt_data_end+0xf8004d38>
100051ec:	b809883a 	mov	r4,r23
100051f0:	b00b883a 	mov	r5,r22
100051f4:	d9811e04 	addi	r6,sp,1144
100051f8:	000b0200 	call	1000b020 <__sprint_r>
100051fc:	103b901e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005200:	d8c12017 	ldw	r3,1152(sp)
10005204:	dc011f17 	ldw	r16,1148(sp)
10005208:	dc400404 	addi	r17,sp,16
1000520c:	003ecb06 	br	10004d3c <__alt_data_end+0xf8004d3c>
10005210:	b809883a 	mov	r4,r23
10005214:	b00b883a 	mov	r5,r22
10005218:	d9811e04 	addi	r6,sp,1144
1000521c:	000b0200 	call	1000b020 <__sprint_r>
10005220:	103b871e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005224:	d8c12017 	ldw	r3,1152(sp)
10005228:	dc011f17 	ldw	r16,1148(sp)
1000522c:	da000404 	addi	r8,sp,16
10005230:	003ea206 	br	10004cbc <__alt_data_end+0xf8004cbc>
10005234:	b809883a 	mov	r4,r23
10005238:	b00b883a 	mov	r5,r22
1000523c:	d9811e04 	addi	r6,sp,1144
10005240:	000b0200 	call	1000b020 <__sprint_r>
10005244:	103b7e1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005248:	d8c12017 	ldw	r3,1152(sp)
1000524c:	dc011f17 	ldw	r16,1148(sp)
10005250:	dc400404 	addi	r17,sp,16
10005254:	003ea406 	br	10004ce8 <__alt_data_end+0xf8004ce8>
10005258:	b809883a 	mov	r4,r23
1000525c:	b00b883a 	mov	r5,r22
10005260:	d9811e04 	addi	r6,sp,1144
10005264:	000b0200 	call	1000b020 <__sprint_r>
10005268:	103b751e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
1000526c:	d8c12017 	ldw	r3,1152(sp)
10005270:	da000404 	addi	r8,sp,16
10005274:	003c3706 	br	10004354 <__alt_data_end+0xf8004354>
10005278:	04a5c83a 	sub	r18,zero,r18
1000527c:	9004c03a 	cmpne	r2,r18,zero
10005280:	056bc83a 	sub	r21,zero,r21
10005284:	a8abc83a 	sub	r21,r21,r2
10005288:	04c00b44 	movi	r19,45
1000528c:	dcc12785 	stb	r19,1182(sp)
10005290:	da413215 	stw	r9,1224(sp)
10005294:	00800044 	movi	r2,1
10005298:	9546b03a 	or	r3,r18,r21
1000529c:	003bb106 	br	10004164 <__alt_data_end+0xf8004164>
100052a0:	da013f15 	stw	r8,1276(sp)
100052a4:	da413e15 	stw	r9,1272(sp)
100052a8:	000ac7c0 	call	1000ac7c <__fpclassifyd>
100052ac:	da013f17 	ldw	r8,1276(sp)
100052b0:	da413e17 	ldw	r9,1272(sp)
100052b4:	1000e526 	beq	r2,zero,1000564c <___vfprintf_internal_r+0x1a6c>
100052b8:	04fff7c4 	movi	r19,-33
100052bc:	00bfffc4 	movi	r2,-1
100052c0:	84e6703a 	and	r19,r16,r19
100052c4:	48822926 	beq	r9,r2,10005b6c <___vfprintf_internal_r+0x1f8c>
100052c8:	008011c4 	movi	r2,71
100052cc:	98821626 	beq	r19,r2,10005b28 <___vfprintf_internal_r+0x1f48>
100052d0:	d9013917 	ldw	r4,1252(sp)
100052d4:	e0c04014 	ori	r3,fp,256
100052d8:	d8c12d15 	stw	r3,1204(sp)
100052dc:	20021f16 	blt	r4,zero,10005b5c <___vfprintf_internal_r+0x1f7c>
100052e0:	dc413917 	ldw	r17,1252(sp)
100052e4:	d8012b05 	stb	zero,1196(sp)
100052e8:	00801984 	movi	r2,102
100052ec:	80814d26 	beq	r16,r2,10005824 <___vfprintf_internal_r+0x1c44>
100052f0:	00801184 	movi	r2,70
100052f4:	80814b26 	beq	r16,r2,10005824 <___vfprintf_internal_r+0x1c44>
100052f8:	00801144 	movi	r2,69
100052fc:	98821d26 	beq	r19,r2,10005b74 <___vfprintf_internal_r+0x1f94>
10005300:	482b883a 	mov	r21,r9
10005304:	d8812604 	addi	r2,sp,1176
10005308:	d8800115 	stw	r2,4(sp)
1000530c:	d9413717 	ldw	r5,1244(sp)
10005310:	d8812504 	addi	r2,sp,1172
10005314:	d8800215 	stw	r2,8(sp)
10005318:	d8812104 	addi	r2,sp,1156
1000531c:	dd400015 	stw	r21,0(sp)
10005320:	d8800315 	stw	r2,12(sp)
10005324:	b809883a 	mov	r4,r23
10005328:	880d883a 	mov	r6,r17
1000532c:	01c00084 	movi	r7,2
10005330:	da013f15 	stw	r8,1276(sp)
10005334:	da413e15 	stw	r9,1272(sp)
10005338:	00060580 	call	10006058 <_dtoa_r>
1000533c:	d8813115 	stw	r2,1220(sp)
10005340:	008019c4 	movi	r2,103
10005344:	da013f17 	ldw	r8,1276(sp)
10005348:	da413e17 	ldw	r9,1272(sp)
1000534c:	80800226 	beq	r16,r2,10005358 <___vfprintf_internal_r+0x1778>
10005350:	008011c4 	movi	r2,71
10005354:	8081451e 	bne	r16,r2,1000586c <___vfprintf_internal_r+0x1c8c>
10005358:	e080004c 	andi	r2,fp,1
1000535c:	10021e26 	beq	r2,zero,10005bd8 <___vfprintf_internal_r+0x1ff8>
10005360:	d8c13117 	ldw	r3,1220(sp)
10005364:	1d55883a 	add	r10,r3,r21
10005368:	d9013717 	ldw	r4,1244(sp)
1000536c:	880b883a 	mov	r5,r17
10005370:	000d883a 	mov	r6,zero
10005374:	000f883a 	mov	r7,zero
10005378:	da013f15 	stw	r8,1276(sp)
1000537c:	da413e15 	stw	r9,1272(sp)
10005380:	da813d15 	stw	r10,1268(sp)
10005384:	000ec440 	call	1000ec44 <__eqdf2>
10005388:	da013f17 	ldw	r8,1276(sp)
1000538c:	da413e17 	ldw	r9,1272(sp)
10005390:	da813d17 	ldw	r10,1268(sp)
10005394:	1001a126 	beq	r2,zero,10005a1c <___vfprintf_internal_r+0x1e3c>
10005398:	d8812117 	ldw	r2,1156(sp)
1000539c:	1280062e 	bgeu	r2,r10,100053b8 <___vfprintf_internal_r+0x17d8>
100053a0:	01000c04 	movi	r4,48
100053a4:	10c00044 	addi	r3,r2,1
100053a8:	d8c12115 	stw	r3,1156(sp)
100053ac:	11000005 	stb	r4,0(r2)
100053b0:	d8812117 	ldw	r2,1156(sp)
100053b4:	12bffb36 	bltu	r2,r10,100053a4 <__alt_data_end+0xf80053a4>
100053b8:	d8c13117 	ldw	r3,1220(sp)
100053bc:	10c5c83a 	sub	r2,r2,r3
100053c0:	d8813315 	stw	r2,1228(sp)
100053c4:	008011c4 	movi	r2,71
100053c8:	98818926 	beq	r19,r2,100059f0 <___vfprintf_internal_r+0x1e10>
100053cc:	00801944 	movi	r2,101
100053d0:	14023c0e 	bge	r2,r16,10005cc4 <___vfprintf_internal_r+0x20e4>
100053d4:	d8c12617 	ldw	r3,1176(sp)
100053d8:	00801984 	movi	r2,102
100053dc:	d8c13415 	stw	r3,1232(sp)
100053e0:	8081ef26 	beq	r16,r2,10005ba0 <___vfprintf_internal_r+0x1fc0>
100053e4:	d8c13417 	ldw	r3,1232(sp)
100053e8:	d9013317 	ldw	r4,1228(sp)
100053ec:	1901e316 	blt	r3,r4,10005b7c <___vfprintf_internal_r+0x1f9c>
100053f0:	e080004c 	andi	r2,fp,1
100053f4:	1001f426 	beq	r2,zero,10005bc8 <___vfprintf_internal_r+0x1fe8>
100053f8:	d8c13417 	ldw	r3,1232(sp)
100053fc:	1c400044 	addi	r17,r3,1
10005400:	8839883a 	mov	fp,r17
10005404:	8801e416 	blt	r17,zero,10005b98 <___vfprintf_internal_r+0x1fb8>
10005408:	dd412b07 	ldb	r21,1196(sp)
1000540c:	a801701e 	bne	r21,zero,100059d0 <___vfprintf_internal_r+0x1df0>
10005410:	df012b15 	stw	fp,1196(sp)
10005414:	dcc12783 	ldbu	r19,1182(sp)
10005418:	df012d17 	ldw	fp,1204(sp)
1000541c:	d8013215 	stw	zero,1224(sp)
10005420:	dc812d15 	stw	r18,1204(sp)
10005424:	003b6e06 	br	100041e0 <__alt_data_end+0xf80041e0>
10005428:	e080040c 	andi	r2,fp,16
1000542c:	1000b51e 	bne	r2,zero,10005704 <___vfprintf_internal_r+0x1b24>
10005430:	e080100c 	andi	r2,fp,64
10005434:	10015b26 	beq	r2,zero,100059a4 <___vfprintf_internal_r+0x1dc4>
10005438:	d9012d17 	ldw	r4,1204(sp)
1000543c:	d9412f17 	ldw	r5,1212(sp)
10005440:	20800017 	ldw	r2,0(r4)
10005444:	21000104 	addi	r4,r4,4
10005448:	d9012d15 	stw	r4,1204(sp)
1000544c:	1140000d 	sth	r5,0(r2)
10005450:	003a2006 	br	10003cd4 <__alt_data_end+0xf8003cd4>
10005454:	e0c0100c 	andi	r3,fp,64
10005458:	1800a226 	beq	r3,zero,100056e4 <___vfprintf_internal_r+0x1b04>
1000545c:	d8c12d17 	ldw	r3,1204(sp)
10005460:	1480000b 	ldhu	r18,0(r2)
10005464:	002b883a 	mov	r21,zero
10005468:	18c00104 	addi	r3,r3,4
1000546c:	d8c12d15 	stw	r3,1204(sp)
10005470:	0005883a 	mov	r2,zero
10005474:	9007883a 	mov	r3,r18
10005478:	003c6906 	br	10004620 <__alt_data_end+0xf8004620>
1000547c:	e0c0100c 	andi	r3,fp,64
10005480:	18009026 	beq	r3,zero,100056c4 <___vfprintf_internal_r+0x1ae4>
10005484:	1480000b 	ldhu	r18,0(r2)
10005488:	d8812d17 	ldw	r2,1204(sp)
1000548c:	002b883a 	mov	r21,zero
10005490:	9007883a 	mov	r3,r18
10005494:	10800104 	addi	r2,r2,4
10005498:	d8812d15 	stw	r2,1204(sp)
1000549c:	00800044 	movi	r2,1
100054a0:	003c5f06 	br	10004620 <__alt_data_end+0xf8004620>
100054a4:	e0c0100c 	andi	r3,fp,64
100054a8:	18008026 	beq	r3,zero,100056ac <___vfprintf_internal_r+0x1acc>
100054ac:	d9012d17 	ldw	r4,1204(sp)
100054b0:	1480000b 	ldhu	r18,0(r2)
100054b4:	002b883a 	mov	r21,zero
100054b8:	21000104 	addi	r4,r4,4
100054bc:	d9012d15 	stw	r4,1204(sp)
100054c0:	003c7906 	br	100046a8 <__alt_data_end+0xf80046a8>
100054c4:	e080100c 	andi	r2,fp,64
100054c8:	10007126 	beq	r2,zero,10005690 <___vfprintf_internal_r+0x1ab0>
100054cc:	1c80000f 	ldh	r18,0(r3)
100054d0:	d8812d17 	ldw	r2,1204(sp)
100054d4:	902bd7fa 	srai	r21,r18,31
100054d8:	10800104 	addi	r2,r2,4
100054dc:	d8812d15 	stw	r2,1204(sp)
100054e0:	a805883a 	mov	r2,r21
100054e4:	003b1a06 	br	10004150 <__alt_data_end+0xf8004150>
100054e8:	e4000007 	ldb	r16,0(fp)
100054ec:	e005883a 	mov	r2,fp
100054f0:	003a2306 	br	10003d80 <__alt_data_end+0xf8003d80>
100054f4:	00800084 	movi	r2,2
100054f8:	003c4906 	br	10004620 <__alt_data_end+0xf8004620>
100054fc:	01040074 	movhi	r4,4097
10005500:	210c8684 	addi	r4,r4,12826
10005504:	d9012c15 	stw	r4,1200(sp)
10005508:	d9012c17 	ldw	r4,1200(sp)
1000550c:	1c47883a 	add	r3,r3,r17
10005510:	10800044 	addi	r2,r2,1
10005514:	41000015 	stw	r4,0(r8)
10005518:	44400115 	stw	r17,4(r8)
1000551c:	d8c12015 	stw	r3,1152(sp)
10005520:	d8811f15 	stw	r2,1148(sp)
10005524:	010001c4 	movi	r4,7
10005528:	20becc16 	blt	r4,r2,1000505c <__alt_data_end+0xf800505c>
1000552c:	42000204 	addi	r8,r8,8
10005530:	003ed106 	br	10005078 <__alt_data_end+0xf8005078>
10005534:	01040074 	movhi	r4,4097
10005538:	210c8684 	addi	r4,r4,12826
1000553c:	d9012c15 	stw	r4,1200(sp)
10005540:	003ba306 	br	100043d0 <__alt_data_end+0xf80043d0>
10005544:	b809883a 	mov	r4,r23
10005548:	b00b883a 	mov	r5,r22
1000554c:	d9811e04 	addi	r6,sp,1144
10005550:	000b0200 	call	1000b020 <__sprint_r>
10005554:	103aba1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005558:	d8c12017 	ldw	r3,1152(sp)
1000555c:	da000404 	addi	r8,sp,16
10005560:	003d6c06 	br	10004b14 <__alt_data_end+0xf8004b14>
10005564:	d8811f17 	ldw	r2,1148(sp)
10005568:	01440074 	movhi	r5,4097
1000556c:	01000044 	movi	r4,1
10005570:	18c00044 	addi	r3,r3,1
10005574:	10800044 	addi	r2,r2,1
10005578:	294c8604 	addi	r5,r5,12824
1000557c:	41000115 	stw	r4,4(r8)
10005580:	41400015 	stw	r5,0(r8)
10005584:	d8c12015 	stw	r3,1152(sp)
10005588:	d8811f15 	stw	r2,1148(sp)
1000558c:	010001c4 	movi	r4,7
10005590:	20806716 	blt	r4,r2,10005730 <___vfprintf_internal_r+0x1b50>
10005594:	42000204 	addi	r8,r8,8
10005598:	8000041e 	bne	r16,zero,100055ac <___vfprintf_internal_r+0x19cc>
1000559c:	d8813317 	ldw	r2,1228(sp)
100055a0:	1000021e 	bne	r2,zero,100055ac <___vfprintf_internal_r+0x19cc>
100055a4:	e080004c 	andi	r2,fp,1
100055a8:	103ba026 	beq	r2,zero,1000442c <__alt_data_end+0xf800442c>
100055ac:	d9013817 	ldw	r4,1248(sp)
100055b0:	d8811f17 	ldw	r2,1148(sp)
100055b4:	d9413517 	ldw	r5,1236(sp)
100055b8:	1907883a 	add	r3,r3,r4
100055bc:	10800044 	addi	r2,r2,1
100055c0:	41000115 	stw	r4,4(r8)
100055c4:	41400015 	stw	r5,0(r8)
100055c8:	d8c12015 	stw	r3,1152(sp)
100055cc:	d8811f15 	stw	r2,1148(sp)
100055d0:	010001c4 	movi	r4,7
100055d4:	20815716 	blt	r4,r2,10005b34 <___vfprintf_internal_r+0x1f54>
100055d8:	42000204 	addi	r8,r8,8
100055dc:	0421c83a 	sub	r16,zero,r16
100055e0:	0400810e 	bge	zero,r16,100057e8 <___vfprintf_internal_r+0x1c08>
100055e4:	04400404 	movi	r17,16
100055e8:	8c00bd0e 	bge	r17,r16,100058e0 <___vfprintf_internal_r+0x1d00>
100055ec:	01440074 	movhi	r5,4097
100055f0:	294c8684 	addi	r5,r5,12826
100055f4:	d9412c15 	stw	r5,1200(sp)
100055f8:	04c001c4 	movi	r19,7
100055fc:	00000306 	br	1000560c <___vfprintf_internal_r+0x1a2c>
10005600:	42000204 	addi	r8,r8,8
10005604:	843ffc04 	addi	r16,r16,-16
10005608:	8c00b80e 	bge	r17,r16,100058ec <___vfprintf_internal_r+0x1d0c>
1000560c:	18c00404 	addi	r3,r3,16
10005610:	10800044 	addi	r2,r2,1
10005614:	45000015 	stw	r20,0(r8)
10005618:	44400115 	stw	r17,4(r8)
1000561c:	d8c12015 	stw	r3,1152(sp)
10005620:	d8811f15 	stw	r2,1148(sp)
10005624:	98bff60e 	bge	r19,r2,10005600 <__alt_data_end+0xf8005600>
10005628:	b809883a 	mov	r4,r23
1000562c:	b00b883a 	mov	r5,r22
10005630:	d9811e04 	addi	r6,sp,1144
10005634:	000b0200 	call	1000b020 <__sprint_r>
10005638:	103a811e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
1000563c:	d8c12017 	ldw	r3,1152(sp)
10005640:	d8811f17 	ldw	r2,1148(sp)
10005644:	da000404 	addi	r8,sp,16
10005648:	003fee06 	br	10005604 <__alt_data_end+0xf8005604>
1000564c:	008011c4 	movi	r2,71
10005650:	1400db16 	blt	r2,r16,100059c0 <___vfprintf_internal_r+0x1de0>
10005654:	01040074 	movhi	r4,4097
10005658:	210c7804 	addi	r4,r4,12768
1000565c:	d9013115 	stw	r4,1220(sp)
10005660:	00c000c4 	movi	r3,3
10005664:	00bfdfc4 	movi	r2,-129
10005668:	d8c12b15 	stw	r3,1196(sp)
1000566c:	e0b8703a 	and	fp,fp,r2
10005670:	dcc12783 	ldbu	r19,1182(sp)
10005674:	dc812d15 	stw	r18,1204(sp)
10005678:	1823883a 	mov	r17,r3
1000567c:	d8013215 	stw	zero,1224(sp)
10005680:	d8013415 	stw	zero,1232(sp)
10005684:	003ad606 	br	100041e0 <__alt_data_end+0xf80041e0>
10005688:	4823883a 	mov	r17,r9
1000568c:	003cc906 	br	100049b4 <__alt_data_end+0xf80049b4>
10005690:	1c800017 	ldw	r18,0(r3)
10005694:	d8c12d17 	ldw	r3,1204(sp)
10005698:	902bd7fa 	srai	r21,r18,31
1000569c:	18c00104 	addi	r3,r3,4
100056a0:	d8c12d15 	stw	r3,1204(sp)
100056a4:	a805883a 	mov	r2,r21
100056a8:	003aa906 	br	10004150 <__alt_data_end+0xf8004150>
100056ac:	d9412d17 	ldw	r5,1204(sp)
100056b0:	14800017 	ldw	r18,0(r2)
100056b4:	002b883a 	mov	r21,zero
100056b8:	29400104 	addi	r5,r5,4
100056bc:	d9412d15 	stw	r5,1204(sp)
100056c0:	003bf906 	br	100046a8 <__alt_data_end+0xf80046a8>
100056c4:	d8c12d17 	ldw	r3,1204(sp)
100056c8:	14800017 	ldw	r18,0(r2)
100056cc:	002b883a 	mov	r21,zero
100056d0:	18c00104 	addi	r3,r3,4
100056d4:	d8c12d15 	stw	r3,1204(sp)
100056d8:	00800044 	movi	r2,1
100056dc:	9007883a 	mov	r3,r18
100056e0:	003bcf06 	br	10004620 <__alt_data_end+0xf8004620>
100056e4:	d9012d17 	ldw	r4,1204(sp)
100056e8:	14800017 	ldw	r18,0(r2)
100056ec:	002b883a 	mov	r21,zero
100056f0:	21000104 	addi	r4,r4,4
100056f4:	d9012d15 	stw	r4,1204(sp)
100056f8:	0005883a 	mov	r2,zero
100056fc:	9007883a 	mov	r3,r18
10005700:	003bc706 	br	10004620 <__alt_data_end+0xf8004620>
10005704:	d9412d17 	ldw	r5,1204(sp)
10005708:	d8c12f17 	ldw	r3,1212(sp)
1000570c:	28800017 	ldw	r2,0(r5)
10005710:	29400104 	addi	r5,r5,4
10005714:	d9412d15 	stw	r5,1204(sp)
10005718:	10c00015 	stw	r3,0(r2)
1000571c:	00396d06 	br	10003cd4 <__alt_data_end+0xf8003cd4>
10005720:	01040074 	movhi	r4,4097
10005724:	210c7604 	addi	r4,r4,12760
10005728:	d9013115 	stw	r4,1220(sp)
1000572c:	003ba206 	br	100045b8 <__alt_data_end+0xf80045b8>
10005730:	b809883a 	mov	r4,r23
10005734:	b00b883a 	mov	r5,r22
10005738:	d9811e04 	addi	r6,sp,1144
1000573c:	000b0200 	call	1000b020 <__sprint_r>
10005740:	103a3f1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005744:	dc012617 	ldw	r16,1176(sp)
10005748:	d8c12017 	ldw	r3,1152(sp)
1000574c:	da000404 	addi	r8,sp,16
10005750:	003f9106 	br	10005598 <__alt_data_end+0xf8005598>
10005754:	e0800044 	addi	r2,fp,1
10005758:	9cc00814 	ori	r19,r19,32
1000575c:	e4000047 	ldb	r16,1(fp)
10005760:	00398706 	br	10003d80 <__alt_data_end+0xf8003d80>
10005764:	d8812e17 	ldw	r2,1208(sp)
10005768:	d8c12d15 	stw	r3,1204(sp)
1000576c:	0085c83a 	sub	r2,zero,r2
10005770:	d8812e15 	stw	r2,1208(sp)
10005774:	e005883a 	mov	r2,fp
10005778:	003a3a06 	br	10004064 <__alt_data_end+0xf8004064>
1000577c:	b809883a 	mov	r4,r23
10005780:	b00b883a 	mov	r5,r22
10005784:	d9811e04 	addi	r6,sp,1144
10005788:	000b0200 	call	1000b020 <__sprint_r>
1000578c:	103a2c1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005790:	d8c12017 	ldw	r3,1152(sp)
10005794:	da000404 	addi	r8,sp,16
10005798:	003cf006 	br	10004b5c <__alt_data_end+0xf8004b5c>
1000579c:	d8c12817 	ldw	r3,1184(sp)
100057a0:	d9013117 	ldw	r4,1220(sp)
100057a4:	1923c83a 	sub	r17,r3,r4
100057a8:	003a8806 	br	100041cc <__alt_data_end+0xf80041cc>
100057ac:	da013f15 	stw	r8,1276(sp)
100057b0:	0003b480 	call	10003b48 <strlen>
100057b4:	1023883a 	mov	r17,r2
100057b8:	da013f17 	ldw	r8,1276(sp)
100057bc:	883c7f0e 	bge	r17,zero,100049bc <__alt_data_end+0xf80049bc>
100057c0:	0005883a 	mov	r2,zero
100057c4:	003c7d06 	br	100049bc <__alt_data_end+0xf80049bc>
100057c8:	b809883a 	mov	r4,r23
100057cc:	b00b883a 	mov	r5,r22
100057d0:	d9811e04 	addi	r6,sp,1144
100057d4:	000b0200 	call	1000b020 <__sprint_r>
100057d8:	103a191e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
100057dc:	d8c12017 	ldw	r3,1152(sp)
100057e0:	d8811f17 	ldw	r2,1148(sp)
100057e4:	da000404 	addi	r8,sp,16
100057e8:	d9413317 	ldw	r5,1228(sp)
100057ec:	d9013117 	ldw	r4,1220(sp)
100057f0:	10800044 	addi	r2,r2,1
100057f4:	28c7883a 	add	r3,r5,r3
100057f8:	41000015 	stw	r4,0(r8)
100057fc:	41400115 	stw	r5,4(r8)
10005800:	d8c12015 	stw	r3,1152(sp)
10005804:	d8811f15 	stw	r2,1148(sp)
10005808:	010001c4 	movi	r4,7
1000580c:	20bb060e 	bge	r4,r2,10004428 <__alt_data_end+0xf8004428>
10005810:	003d6206 	br	10004d9c <__alt_data_end+0xf8004d9c>
10005814:	01040074 	movhi	r4,4097
10005818:	210c8a84 	addi	r4,r4,12842
1000581c:	d9013615 	stw	r4,1240(sp)
10005820:	003aa306 	br	100042b0 <__alt_data_end+0xf80042b0>
10005824:	d8812604 	addi	r2,sp,1176
10005828:	d8800115 	stw	r2,4(sp)
1000582c:	d9413717 	ldw	r5,1244(sp)
10005830:	d8812504 	addi	r2,sp,1172
10005834:	d8800215 	stw	r2,8(sp)
10005838:	d8812104 	addi	r2,sp,1156
1000583c:	da400015 	stw	r9,0(sp)
10005840:	d8800315 	stw	r2,12(sp)
10005844:	b809883a 	mov	r4,r23
10005848:	880d883a 	mov	r6,r17
1000584c:	01c000c4 	movi	r7,3
10005850:	da013f15 	stw	r8,1276(sp)
10005854:	da413e15 	stw	r9,1272(sp)
10005858:	00060580 	call	10006058 <_dtoa_r>
1000585c:	da413e17 	ldw	r9,1272(sp)
10005860:	da013f17 	ldw	r8,1276(sp)
10005864:	d8813115 	stw	r2,1220(sp)
10005868:	482b883a 	mov	r21,r9
1000586c:	d8c13117 	ldw	r3,1220(sp)
10005870:	00801184 	movi	r2,70
10005874:	1d55883a 	add	r10,r3,r21
10005878:	98bebb1e 	bne	r19,r2,10005368 <__alt_data_end+0xf8005368>
1000587c:	19000007 	ldb	r4,0(r3)
10005880:	00800c04 	movi	r2,48
10005884:	2080dd26 	beq	r4,r2,10005bfc <___vfprintf_internal_r+0x201c>
10005888:	d8c12617 	ldw	r3,1176(sp)
1000588c:	50d5883a 	add	r10,r10,r3
10005890:	003eb506 	br	10005368 <__alt_data_end+0xf8005368>
10005894:	0023883a 	mov	r17,zero
10005898:	003d9b06 	br	10004f08 <__alt_data_end+0xf8004f08>
1000589c:	b809883a 	mov	r4,r23
100058a0:	b00b883a 	mov	r5,r22
100058a4:	d9811e04 	addi	r6,sp,1144
100058a8:	000b0200 	call	1000b020 <__sprint_r>
100058ac:	1039e41e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
100058b0:	d8c12017 	ldw	r3,1152(sp)
100058b4:	da000404 	addi	r8,sp,16
100058b8:	003d9206 	br	10004f04 <__alt_data_end+0xf8004f04>
100058bc:	b809883a 	mov	r4,r23
100058c0:	b00b883a 	mov	r5,r22
100058c4:	d9811e04 	addi	r6,sp,1144
100058c8:	000b0200 	call	1000b020 <__sprint_r>
100058cc:	1039dc1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
100058d0:	d8812617 	ldw	r2,1176(sp)
100058d4:	d8c12017 	ldw	r3,1152(sp)
100058d8:	da000404 	addi	r8,sp,16
100058dc:	003dfb06 	br	100050cc <__alt_data_end+0xf80050cc>
100058e0:	01040074 	movhi	r4,4097
100058e4:	210c8684 	addi	r4,r4,12826
100058e8:	d9012c15 	stw	r4,1200(sp)
100058ec:	d9012c17 	ldw	r4,1200(sp)
100058f0:	1c07883a 	add	r3,r3,r16
100058f4:	10800044 	addi	r2,r2,1
100058f8:	41000015 	stw	r4,0(r8)
100058fc:	44000115 	stw	r16,4(r8)
10005900:	d8c12015 	stw	r3,1152(sp)
10005904:	d8811f15 	stw	r2,1148(sp)
10005908:	010001c4 	movi	r4,7
1000590c:	20bfae16 	blt	r4,r2,100057c8 <__alt_data_end+0xf80057c8>
10005910:	42000204 	addi	r8,r8,8
10005914:	003fb406 	br	100057e8 <__alt_data_end+0xf80057e8>
10005918:	0021883a 	mov	r16,zero
1000591c:	003dfd06 	br	10005114 <__alt_data_end+0xf8005114>
10005920:	01440074 	movhi	r5,4097
10005924:	294c8a84 	addi	r5,r5,12842
10005928:	d9413615 	stw	r5,1240(sp)
1000592c:	003ae306 	br	100044bc <__alt_data_end+0xf80044bc>
10005930:	b809883a 	mov	r4,r23
10005934:	b00b883a 	mov	r5,r22
10005938:	d9811e04 	addi	r6,sp,1144
1000593c:	000b0200 	call	1000b020 <__sprint_r>
10005940:	1039bf1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005944:	d8812617 	ldw	r2,1176(sp)
10005948:	d9413317 	ldw	r5,1228(sp)
1000594c:	d8c12017 	ldw	r3,1152(sp)
10005950:	da000404 	addi	r8,sp,16
10005954:	2885c83a 	sub	r2,r5,r2
10005958:	003ded06 	br	10005110 <__alt_data_end+0xf8005110>
1000595c:	00800184 	movi	r2,6
10005960:	1240012e 	bgeu	r2,r9,10005968 <___vfprintf_internal_r+0x1d88>
10005964:	1013883a 	mov	r9,r2
10005968:	4823883a 	mov	r17,r9
1000596c:	4805883a 	mov	r2,r9
10005970:	4800b216 	blt	r9,zero,10005c3c <___vfprintf_internal_r+0x205c>
10005974:	01440074 	movhi	r5,4097
10005978:	294c8404 	addi	r5,r5,12816
1000597c:	d8812b15 	stw	r2,1196(sp)
10005980:	dc812d15 	stw	r18,1204(sp)
10005984:	d8013215 	stw	zero,1224(sp)
10005988:	d8013415 	stw	zero,1232(sp)
1000598c:	d9413115 	stw	r5,1220(sp)
10005990:	0005883a 	mov	r2,zero
10005994:	003a1906 	br	100041fc <__alt_data_end+0xf80041fc>
10005998:	04c00b44 	movi	r19,45
1000599c:	dcc12785 	stb	r19,1182(sp)
100059a0:	003b0006 	br	100045a4 <__alt_data_end+0xf80045a4>
100059a4:	d8c12d17 	ldw	r3,1204(sp)
100059a8:	d9012f17 	ldw	r4,1212(sp)
100059ac:	18800017 	ldw	r2,0(r3)
100059b0:	18c00104 	addi	r3,r3,4
100059b4:	d8c12d15 	stw	r3,1204(sp)
100059b8:	11000015 	stw	r4,0(r2)
100059bc:	0038c506 	br	10003cd4 <__alt_data_end+0xf8003cd4>
100059c0:	01440074 	movhi	r5,4097
100059c4:	294c7904 	addi	r5,r5,12772
100059c8:	d9413115 	stw	r5,1220(sp)
100059cc:	003f2406 	br	10005660 <__alt_data_end+0xf8005660>
100059d0:	00800b44 	movi	r2,45
100059d4:	d8812785 	stb	r2,1182(sp)
100059d8:	df012b15 	stw	fp,1196(sp)
100059dc:	d8013215 	stw	zero,1224(sp)
100059e0:	df012d17 	ldw	fp,1204(sp)
100059e4:	00800b44 	movi	r2,45
100059e8:	dc812d15 	stw	r18,1204(sp)
100059ec:	003a0006 	br	100041f0 <__alt_data_end+0xf80041f0>
100059f0:	d8c12617 	ldw	r3,1176(sp)
100059f4:	00bfff44 	movi	r2,-3
100059f8:	18800a16 	blt	r3,r2,10005a24 <___vfprintf_internal_r+0x1e44>
100059fc:	48c00916 	blt	r9,r3,10005a24 <___vfprintf_internal_r+0x1e44>
10005a00:	d8c13415 	stw	r3,1232(sp)
10005a04:	040019c4 	movi	r16,103
10005a08:	003e7606 	br	100053e4 <__alt_data_end+0xf80053e4>
10005a0c:	01040074 	movhi	r4,4097
10005a10:	210c8684 	addi	r4,r4,12826
10005a14:	d9012c15 	stw	r4,1200(sp)
10005a18:	003c8e06 	br	10004c54 <__alt_data_end+0xf8004c54>
10005a1c:	5005883a 	mov	r2,r10
10005a20:	003e6506 	br	100053b8 <__alt_data_end+0xf80053b8>
10005a24:	843fff84 	addi	r16,r16,-2
10005a28:	1d7fffc4 	addi	r21,r3,-1
10005a2c:	dd412615 	stw	r21,1176(sp)
10005a30:	dc0122c5 	stb	r16,1163(sp)
10005a34:	a8009216 	blt	r21,zero,10005c80 <___vfprintf_internal_r+0x20a0>
10005a38:	00800ac4 	movi	r2,43
10005a3c:	d8812305 	stb	r2,1164(sp)
10005a40:	00800244 	movi	r2,9
10005a44:	1540660e 	bge	r2,r21,10005be0 <___vfprintf_internal_r+0x2000>
10005a48:	dcc122c4 	addi	r19,sp,1163
10005a4c:	dc012c15 	stw	r16,1200(sp)
10005a50:	4023883a 	mov	r17,r8
10005a54:	9821883a 	mov	r16,r19
10005a58:	a809883a 	mov	r4,r21
10005a5c:	01400284 	movi	r5,10
10005a60:	00039800 	call	10003980 <__modsi3>
10005a64:	10800c04 	addi	r2,r2,48
10005a68:	843fffc4 	addi	r16,r16,-1
10005a6c:	a809883a 	mov	r4,r21
10005a70:	01400284 	movi	r5,10
10005a74:	80800005 	stb	r2,0(r16)
10005a78:	000392c0 	call	1000392c <__divsi3>
10005a7c:	01000244 	movi	r4,9
10005a80:	102b883a 	mov	r21,r2
10005a84:	20bff416 	blt	r4,r2,10005a58 <__alt_data_end+0xf8005a58>
10005a88:	8811883a 	mov	r8,r17
10005a8c:	10800c04 	addi	r2,r2,48
10005a90:	8023883a 	mov	r17,r16
10005a94:	897fffc4 	addi	r5,r17,-1
10005a98:	88bfffc5 	stb	r2,-1(r17)
10005a9c:	dc012c17 	ldw	r16,1200(sp)
10005aa0:	2cc08a2e 	bgeu	r5,r19,10005ccc <___vfprintf_internal_r+0x20ec>
10005aa4:	d9812384 	addi	r6,sp,1166
10005aa8:	344dc83a 	sub	r6,r6,r17
10005aac:	d9012344 	addi	r4,sp,1165
10005ab0:	998d883a 	add	r6,r19,r6
10005ab4:	00000106 	br	10005abc <___vfprintf_internal_r+0x1edc>
10005ab8:	28800003 	ldbu	r2,0(r5)
10005abc:	20800005 	stb	r2,0(r4)
10005ac0:	21000044 	addi	r4,r4,1
10005ac4:	29400044 	addi	r5,r5,1
10005ac8:	21bffb1e 	bne	r4,r6,10005ab8 <__alt_data_end+0xf8005ab8>
10005acc:	d8812304 	addi	r2,sp,1164
10005ad0:	1445c83a 	sub	r2,r2,r17
10005ad4:	d9412344 	addi	r5,sp,1165
10005ad8:	2885883a 	add	r2,r5,r2
10005adc:	14e7c83a 	sub	r19,r2,r19
10005ae0:	d8813317 	ldw	r2,1228(sp)
10005ae4:	d8c13317 	ldw	r3,1228(sp)
10005ae8:	dcc13a15 	stw	r19,1256(sp)
10005aec:	14e3883a 	add	r17,r2,r19
10005af0:	00800044 	movi	r2,1
10005af4:	10c0550e 	bge	r2,r3,10005c4c <___vfprintf_internal_r+0x206c>
10005af8:	8c400044 	addi	r17,r17,1
10005afc:	8839883a 	mov	fp,r17
10005b00:	88005016 	blt	r17,zero,10005c44 <___vfprintf_internal_r+0x2064>
10005b04:	d8013415 	stw	zero,1232(sp)
10005b08:	003e3f06 	br	10005408 <__alt_data_end+0xf8005408>
10005b0c:	da412b15 	stw	r9,1196(sp)
10005b10:	dcc12783 	ldbu	r19,1182(sp)
10005b14:	4823883a 	mov	r17,r9
10005b18:	dc812d15 	stw	r18,1204(sp)
10005b1c:	d8013215 	stw	zero,1224(sp)
10005b20:	d8013415 	stw	zero,1232(sp)
10005b24:	0039ae06 	br	100041e0 <__alt_data_end+0xf80041e0>
10005b28:	483de91e 	bne	r9,zero,100052d0 <__alt_data_end+0xf80052d0>
10005b2c:	8813883a 	mov	r9,r17
10005b30:	003de706 	br	100052d0 <__alt_data_end+0xf80052d0>
10005b34:	b809883a 	mov	r4,r23
10005b38:	b00b883a 	mov	r5,r22
10005b3c:	d9811e04 	addi	r6,sp,1144
10005b40:	000b0200 	call	1000b020 <__sprint_r>
10005b44:	10393e1e 	bne	r2,zero,10004040 <__alt_data_end+0xf8004040>
10005b48:	dc012617 	ldw	r16,1176(sp)
10005b4c:	d8c12017 	ldw	r3,1152(sp)
10005b50:	d8811f17 	ldw	r2,1148(sp)
10005b54:	da000404 	addi	r8,sp,16
10005b58:	003ea006 	br	100055dc <__alt_data_end+0xf80055dc>
10005b5c:	00c00b44 	movi	r3,45
10005b60:	2460003c 	xorhi	r17,r4,32768
10005b64:	d8c12b05 	stb	r3,1196(sp)
10005b68:	003ddf06 	br	100052e8 <__alt_data_end+0xf80052e8>
10005b6c:	02400184 	movi	r9,6
10005b70:	003dd706 	br	100052d0 <__alt_data_end+0xf80052d0>
10005b74:	4d400044 	addi	r21,r9,1
10005b78:	003de206 	br	10005304 <__alt_data_end+0xf8005304>
10005b7c:	d8c13417 	ldw	r3,1232(sp)
10005b80:	00c0490e 	bge	zero,r3,10005ca8 <___vfprintf_internal_r+0x20c8>
10005b84:	04400044 	movi	r17,1
10005b88:	d9013317 	ldw	r4,1228(sp)
10005b8c:	8923883a 	add	r17,r17,r4
10005b90:	8839883a 	mov	fp,r17
10005b94:	883e1c0e 	bge	r17,zero,10005408 <__alt_data_end+0xf8005408>
10005b98:	0039883a 	mov	fp,zero
10005b9c:	003e1a06 	br	10005408 <__alt_data_end+0xf8005408>
10005ba0:	00c03b0e 	bge	zero,r3,10005c90 <___vfprintf_internal_r+0x20b0>
10005ba4:	4800021e 	bne	r9,zero,10005bb0 <___vfprintf_internal_r+0x1fd0>
10005ba8:	e080004c 	andi	r2,fp,1
10005bac:	10000626 	beq	r2,zero,10005bc8 <___vfprintf_internal_r+0x1fe8>
10005bb0:	d8c13417 	ldw	r3,1232(sp)
10005bb4:	4a400044 	addi	r9,r9,1
10005bb8:	1a63883a 	add	r17,r3,r9
10005bbc:	8839883a 	mov	fp,r17
10005bc0:	883e110e 	bge	r17,zero,10005408 <__alt_data_end+0xf8005408>
10005bc4:	003ff406 	br	10005b98 <__alt_data_end+0xf8005b98>
10005bc8:	1839883a 	mov	fp,r3
10005bcc:	18004116 	blt	r3,zero,10005cd4 <___vfprintf_internal_r+0x20f4>
10005bd0:	dc413417 	ldw	r17,1232(sp)
10005bd4:	003e0c06 	br	10005408 <__alt_data_end+0xf8005408>
10005bd8:	d8812117 	ldw	r2,1156(sp)
10005bdc:	003df606 	br	100053b8 <__alt_data_end+0xf80053b8>
10005be0:	00800c04 	movi	r2,48
10005be4:	a8c00c04 	addi	r3,r21,48
10005be8:	d8812345 	stb	r2,1165(sp)
10005bec:	d8c12385 	stb	r3,1166(sp)
10005bf0:	d88123c4 	addi	r2,sp,1167
10005bf4:	dcc122c4 	addi	r19,sp,1163
10005bf8:	003fb806 	br	10005adc <__alt_data_end+0xf8005adc>
10005bfc:	d9013717 	ldw	r4,1244(sp)
10005c00:	880b883a 	mov	r5,r17
10005c04:	000d883a 	mov	r6,zero
10005c08:	000f883a 	mov	r7,zero
10005c0c:	da013f15 	stw	r8,1276(sp)
10005c10:	da413e15 	stw	r9,1272(sp)
10005c14:	da813d15 	stw	r10,1268(sp)
10005c18:	000ec440 	call	1000ec44 <__eqdf2>
10005c1c:	da013f17 	ldw	r8,1276(sp)
10005c20:	da413e17 	ldw	r9,1272(sp)
10005c24:	da813d17 	ldw	r10,1268(sp)
10005c28:	103f1726 	beq	r2,zero,10005888 <__alt_data_end+0xf8005888>
10005c2c:	00800044 	movi	r2,1
10005c30:	1547c83a 	sub	r3,r2,r21
10005c34:	d8c12615 	stw	r3,1176(sp)
10005c38:	003f1406 	br	1000588c <__alt_data_end+0xf800588c>
10005c3c:	0005883a 	mov	r2,zero
10005c40:	003f4c06 	br	10005974 <__alt_data_end+0xf8005974>
10005c44:	0039883a 	mov	fp,zero
10005c48:	003fae06 	br	10005b04 <__alt_data_end+0xf8005b04>
10005c4c:	e084703a 	and	r2,fp,r2
10005c50:	103faa26 	beq	r2,zero,10005afc <__alt_data_end+0xf8005afc>
10005c54:	003fa806 	br	10005af8 <__alt_data_end+0xf8005af8>
10005c58:	d9412d17 	ldw	r5,1204(sp)
10005c5c:	2a400017 	ldw	r9,0(r5)
10005c60:	28c00104 	addi	r3,r5,4
10005c64:	d8c12d15 	stw	r3,1204(sp)
10005c68:	483ebc0e 	bge	r9,zero,1000575c <__alt_data_end+0xf800575c>
10005c6c:	027fffc4 	movi	r9,-1
10005c70:	e4000047 	ldb	r16,1(fp)
10005c74:	00384206 	br	10003d80 <__alt_data_end+0xf8003d80>
10005c78:	043fffc4 	movi	r16,-1
10005c7c:	0038ce06 	br	10003fb8 <__alt_data_end+0xf8003fb8>
10005c80:	00800b44 	movi	r2,45
10005c84:	056bc83a 	sub	r21,zero,r21
10005c88:	d8812305 	stb	r2,1164(sp)
10005c8c:	003f6c06 	br	10005a40 <__alt_data_end+0xf8005a40>
10005c90:	4800081e 	bne	r9,zero,10005cb4 <___vfprintf_internal_r+0x20d4>
10005c94:	e080004c 	andi	r2,fp,1
10005c98:	1000061e 	bne	r2,zero,10005cb4 <___vfprintf_internal_r+0x20d4>
10005c9c:	07000044 	movi	fp,1
10005ca0:	e023883a 	mov	r17,fp
10005ca4:	003dd806 	br	10005408 <__alt_data_end+0xf8005408>
10005ca8:	04400084 	movi	r17,2
10005cac:	88e3c83a 	sub	r17,r17,r3
10005cb0:	003fb506 	br	10005b88 <__alt_data_end+0xf8005b88>
10005cb4:	4c400084 	addi	r17,r9,2
10005cb8:	8839883a 	mov	fp,r17
10005cbc:	883dd20e 	bge	r17,zero,10005408 <__alt_data_end+0xf8005408>
10005cc0:	003fb506 	br	10005b98 <__alt_data_end+0xf8005b98>
10005cc4:	d8c12617 	ldw	r3,1176(sp)
10005cc8:	003f5706 	br	10005a28 <__alt_data_end+0xf8005a28>
10005ccc:	d8812344 	addi	r2,sp,1165
10005cd0:	003f8206 	br	10005adc <__alt_data_end+0xf8005adc>
10005cd4:	0039883a 	mov	fp,zero
10005cd8:	003fbd06 	br	10005bd0 <__alt_data_end+0xf8005bd0>

10005cdc <__vfprintf_internal>:
10005cdc:	2007883a 	mov	r3,r4
10005ce0:	01040074 	movhi	r4,4097
10005ce4:	2113e104 	addi	r4,r4,20356
10005ce8:	21000017 	ldw	r4,0(r4)
10005cec:	2805883a 	mov	r2,r5
10005cf0:	300f883a 	mov	r7,r6
10005cf4:	180b883a 	mov	r5,r3
10005cf8:	100d883a 	mov	r6,r2
10005cfc:	0003be01 	jmpi	10003be0 <___vfprintf_internal_r>

10005d00 <__swsetup_r>:
10005d00:	00840074 	movhi	r2,4097
10005d04:	defffd04 	addi	sp,sp,-12
10005d08:	1093e104 	addi	r2,r2,20356
10005d0c:	dc400115 	stw	r17,4(sp)
10005d10:	2023883a 	mov	r17,r4
10005d14:	11000017 	ldw	r4,0(r2)
10005d18:	dc000015 	stw	r16,0(sp)
10005d1c:	dfc00215 	stw	ra,8(sp)
10005d20:	2821883a 	mov	r16,r5
10005d24:	20000226 	beq	r4,zero,10005d30 <__swsetup_r+0x30>
10005d28:	20c00e17 	ldw	r3,56(r4)
10005d2c:	18002e26 	beq	r3,zero,10005de8 <__swsetup_r+0xe8>
10005d30:	8080030b 	ldhu	r2,12(r16)
10005d34:	10c0020c 	andi	r3,r2,8
10005d38:	100d883a 	mov	r6,r2
10005d3c:	18000f26 	beq	r3,zero,10005d7c <__swsetup_r+0x7c>
10005d40:	80c00417 	ldw	r3,16(r16)
10005d44:	18001526 	beq	r3,zero,10005d9c <__swsetup_r+0x9c>
10005d48:	1100004c 	andi	r4,r2,1
10005d4c:	20001c1e 	bne	r4,zero,10005dc0 <__swsetup_r+0xc0>
10005d50:	1080008c 	andi	r2,r2,2
10005d54:	1000261e 	bne	r2,zero,10005df0 <__swsetup_r+0xf0>
10005d58:	80800517 	ldw	r2,20(r16)
10005d5c:	80800215 	stw	r2,8(r16)
10005d60:	18001c26 	beq	r3,zero,10005dd4 <__swsetup_r+0xd4>
10005d64:	0005883a 	mov	r2,zero
10005d68:	dfc00217 	ldw	ra,8(sp)
10005d6c:	dc400117 	ldw	r17,4(sp)
10005d70:	dc000017 	ldw	r16,0(sp)
10005d74:	dec00304 	addi	sp,sp,12
10005d78:	f800283a 	ret
10005d7c:	3080040c 	andi	r2,r6,16
10005d80:	10001726 	beq	r2,zero,10005de0 <__swsetup_r+0xe0>
10005d84:	3080010c 	andi	r2,r6,4
10005d88:	10001b1e 	bne	r2,zero,10005df8 <__swsetup_r+0xf8>
10005d8c:	80c00417 	ldw	r3,16(r16)
10005d90:	30800214 	ori	r2,r6,8
10005d94:	8080030d 	sth	r2,12(r16)
10005d98:	183feb1e 	bne	r3,zero,10005d48 <__alt_data_end+0xf8005d48>
10005d9c:	1140a00c 	andi	r5,r2,640
10005da0:	01008004 	movi	r4,512
10005da4:	293fe826 	beq	r5,r4,10005d48 <__alt_data_end+0xf8005d48>
10005da8:	8809883a 	mov	r4,r17
10005dac:	800b883a 	mov	r5,r16
10005db0:	00088940 	call	10008894 <__smakebuf_r>
10005db4:	8080030b 	ldhu	r2,12(r16)
10005db8:	80c00417 	ldw	r3,16(r16)
10005dbc:	003fe206 	br	10005d48 <__alt_data_end+0xf8005d48>
10005dc0:	80800517 	ldw	r2,20(r16)
10005dc4:	80000215 	stw	zero,8(r16)
10005dc8:	0085c83a 	sub	r2,zero,r2
10005dcc:	80800615 	stw	r2,24(r16)
10005dd0:	183fe41e 	bne	r3,zero,10005d64 <__alt_data_end+0xf8005d64>
10005dd4:	8080030b 	ldhu	r2,12(r16)
10005dd8:	1080200c 	andi	r2,r2,128
10005ddc:	103fe226 	beq	r2,zero,10005d68 <__alt_data_end+0xf8005d68>
10005de0:	00bfffc4 	movi	r2,-1
10005de4:	003fe006 	br	10005d68 <__alt_data_end+0xf8005d68>
10005de8:	0007d3c0 	call	10007d3c <__sinit>
10005dec:	003fd006 	br	10005d30 <__alt_data_end+0xf8005d30>
10005df0:	0005883a 	mov	r2,zero
10005df4:	003fd906 	br	10005d5c <__alt_data_end+0xf8005d5c>
10005df8:	81400c17 	ldw	r5,48(r16)
10005dfc:	28000626 	beq	r5,zero,10005e18 <__swsetup_r+0x118>
10005e00:	80801004 	addi	r2,r16,64
10005e04:	28800326 	beq	r5,r2,10005e14 <__swsetup_r+0x114>
10005e08:	8809883a 	mov	r4,r17
10005e0c:	0007eb00 	call	10007eb0 <_free_r>
10005e10:	8180030b 	ldhu	r6,12(r16)
10005e14:	80000c15 	stw	zero,48(r16)
10005e18:	80c00417 	ldw	r3,16(r16)
10005e1c:	00bff6c4 	movi	r2,-37
10005e20:	118c703a 	and	r6,r2,r6
10005e24:	80000115 	stw	zero,4(r16)
10005e28:	80c00015 	stw	r3,0(r16)
10005e2c:	003fd806 	br	10005d90 <__alt_data_end+0xf8005d90>

10005e30 <quorem>:
10005e30:	defff204 	addi	sp,sp,-56
10005e34:	ddc00b15 	stw	r23,44(sp)
10005e38:	20800417 	ldw	r2,16(r4)
10005e3c:	2dc00417 	ldw	r23,16(r5)
10005e40:	dfc00d15 	stw	ra,52(sp)
10005e44:	df000c15 	stw	fp,48(sp)
10005e48:	dd800a15 	stw	r22,40(sp)
10005e4c:	dd400915 	stw	r21,36(sp)
10005e50:	dd000815 	stw	r20,32(sp)
10005e54:	dcc00715 	stw	r19,28(sp)
10005e58:	dc800615 	stw	r18,24(sp)
10005e5c:	dc400515 	stw	r17,20(sp)
10005e60:	dc000415 	stw	r16,16(sp)
10005e64:	15c07a16 	blt	r2,r23,10006050 <quorem+0x220>
10005e68:	bdffffc4 	addi	r23,r23,-1
10005e6c:	bde9883a 	add	r20,r23,r23
10005e70:	28c00504 	addi	r3,r5,20
10005e74:	a529883a 	add	r20,r20,r20
10005e78:	1d39883a 	add	fp,r3,r20
10005e7c:	24c00504 	addi	r19,r4,20
10005e80:	d9400215 	stw	r5,8(sp)
10005e84:	9d29883a 	add	r20,r19,r20
10005e88:	e1400017 	ldw	r5,0(fp)
10005e8c:	d9000015 	stw	r4,0(sp)
10005e90:	a1000017 	ldw	r4,0(r20)
10005e94:	29400044 	addi	r5,r5,1
10005e98:	d8c00115 	stw	r3,4(sp)
10005e9c:	dd000315 	stw	r20,12(sp)
10005ea0:	00039dc0 	call	100039dc <__udivsi3>
10005ea4:	1025883a 	mov	r18,r2
10005ea8:	10003026 	beq	r2,zero,10005f6c <quorem+0x13c>
10005eac:	dc400117 	ldw	r17,4(sp)
10005eb0:	9829883a 	mov	r20,r19
10005eb4:	002d883a 	mov	r22,zero
10005eb8:	0021883a 	mov	r16,zero
10005ebc:	8d400017 	ldw	r21,0(r17)
10005ec0:	900b883a 	mov	r5,r18
10005ec4:	8c400104 	addi	r17,r17,4
10005ec8:	a93fffcc 	andi	r4,r21,65535
10005ecc:	00039ec0 	call	100039ec <__mulsi3>
10005ed0:	a808d43a 	srli	r4,r21,16
10005ed4:	900b883a 	mov	r5,r18
10005ed8:	b0ad883a 	add	r22,r22,r2
10005edc:	00039ec0 	call	100039ec <__mulsi3>
10005ee0:	a1000017 	ldw	r4,0(r20)
10005ee4:	b00cd43a 	srli	r6,r22,16
10005ee8:	b0ffffcc 	andi	r3,r22,65535
10005eec:	217fffcc 	andi	r5,r4,65535
10005ef0:	2c21883a 	add	r16,r5,r16
10005ef4:	80c7c83a 	sub	r3,r16,r3
10005ef8:	2008d43a 	srli	r4,r4,16
10005efc:	3085883a 	add	r2,r6,r2
10005f00:	1821d43a 	srai	r16,r3,16
10005f04:	117fffcc 	andi	r5,r2,65535
10005f08:	2149c83a 	sub	r4,r4,r5
10005f0c:	2421883a 	add	r16,r4,r16
10005f10:	8008943a 	slli	r4,r16,16
10005f14:	18ffffcc 	andi	r3,r3,65535
10005f18:	102cd43a 	srli	r22,r2,16
10005f1c:	20c8b03a 	or	r4,r4,r3
10005f20:	a1000015 	stw	r4,0(r20)
10005f24:	8021d43a 	srai	r16,r16,16
10005f28:	a5000104 	addi	r20,r20,4
10005f2c:	e47fe32e 	bgeu	fp,r17,10005ebc <__alt_data_end+0xf8005ebc>
10005f30:	d8c00317 	ldw	r3,12(sp)
10005f34:	18800017 	ldw	r2,0(r3)
10005f38:	10000c1e 	bne	r2,zero,10005f6c <quorem+0x13c>
10005f3c:	18bfff04 	addi	r2,r3,-4
10005f40:	9880082e 	bgeu	r19,r2,10005f64 <quorem+0x134>
10005f44:	18ffff17 	ldw	r3,-4(r3)
10005f48:	18000326 	beq	r3,zero,10005f58 <quorem+0x128>
10005f4c:	00000506 	br	10005f64 <quorem+0x134>
10005f50:	10c00017 	ldw	r3,0(r2)
10005f54:	1800031e 	bne	r3,zero,10005f64 <quorem+0x134>
10005f58:	10bfff04 	addi	r2,r2,-4
10005f5c:	bdffffc4 	addi	r23,r23,-1
10005f60:	98bffb36 	bltu	r19,r2,10005f50 <__alt_data_end+0xf8005f50>
10005f64:	d8c00017 	ldw	r3,0(sp)
10005f68:	1dc00415 	stw	r23,16(r3)
10005f6c:	d9000017 	ldw	r4,0(sp)
10005f70:	d9400217 	ldw	r5,8(sp)
10005f74:	000a0100 	call	1000a010 <__mcmp>
10005f78:	10002816 	blt	r2,zero,1000601c <quorem+0x1ec>
10005f7c:	dc400117 	ldw	r17,4(sp)
10005f80:	94800044 	addi	r18,r18,1
10005f84:	980d883a 	mov	r6,r19
10005f88:	0007883a 	mov	r3,zero
10005f8c:	31000017 	ldw	r4,0(r6)
10005f90:	89400017 	ldw	r5,0(r17)
10005f94:	31800104 	addi	r6,r6,4
10005f98:	20bfffcc 	andi	r2,r4,65535
10005f9c:	10c7883a 	add	r3,r2,r3
10005fa0:	28bfffcc 	andi	r2,r5,65535
10005fa4:	1885c83a 	sub	r2,r3,r2
10005fa8:	280ad43a 	srli	r5,r5,16
10005fac:	2008d43a 	srli	r4,r4,16
10005fb0:	1007d43a 	srai	r3,r2,16
10005fb4:	10bfffcc 	andi	r2,r2,65535
10005fb8:	2149c83a 	sub	r4,r4,r5
10005fbc:	20c9883a 	add	r4,r4,r3
10005fc0:	200a943a 	slli	r5,r4,16
10005fc4:	8c400104 	addi	r17,r17,4
10005fc8:	2007d43a 	srai	r3,r4,16
10005fcc:	2884b03a 	or	r2,r5,r2
10005fd0:	30bfff15 	stw	r2,-4(r6)
10005fd4:	e47fed2e 	bgeu	fp,r17,10005f8c <__alt_data_end+0xf8005f8c>
10005fd8:	bdc5883a 	add	r2,r23,r23
10005fdc:	1085883a 	add	r2,r2,r2
10005fe0:	9887883a 	add	r3,r19,r2
10005fe4:	18800017 	ldw	r2,0(r3)
10005fe8:	10000c1e 	bne	r2,zero,1000601c <quorem+0x1ec>
10005fec:	18bfff04 	addi	r2,r3,-4
10005ff0:	9880082e 	bgeu	r19,r2,10006014 <quorem+0x1e4>
10005ff4:	18ffff17 	ldw	r3,-4(r3)
10005ff8:	18000326 	beq	r3,zero,10006008 <quorem+0x1d8>
10005ffc:	00000506 	br	10006014 <quorem+0x1e4>
10006000:	10c00017 	ldw	r3,0(r2)
10006004:	1800031e 	bne	r3,zero,10006014 <quorem+0x1e4>
10006008:	10bfff04 	addi	r2,r2,-4
1000600c:	bdffffc4 	addi	r23,r23,-1
10006010:	98bffb36 	bltu	r19,r2,10006000 <__alt_data_end+0xf8006000>
10006014:	d8c00017 	ldw	r3,0(sp)
10006018:	1dc00415 	stw	r23,16(r3)
1000601c:	9005883a 	mov	r2,r18
10006020:	dfc00d17 	ldw	ra,52(sp)
10006024:	df000c17 	ldw	fp,48(sp)
10006028:	ddc00b17 	ldw	r23,44(sp)
1000602c:	dd800a17 	ldw	r22,40(sp)
10006030:	dd400917 	ldw	r21,36(sp)
10006034:	dd000817 	ldw	r20,32(sp)
10006038:	dcc00717 	ldw	r19,28(sp)
1000603c:	dc800617 	ldw	r18,24(sp)
10006040:	dc400517 	ldw	r17,20(sp)
10006044:	dc000417 	ldw	r16,16(sp)
10006048:	dec00e04 	addi	sp,sp,56
1000604c:	f800283a 	ret
10006050:	0005883a 	mov	r2,zero
10006054:	003ff206 	br	10006020 <__alt_data_end+0xf8006020>

10006058 <_dtoa_r>:
10006058:	20801017 	ldw	r2,64(r4)
1000605c:	deffde04 	addi	sp,sp,-136
10006060:	dd401d15 	stw	r21,116(sp)
10006064:	dcc01b15 	stw	r19,108(sp)
10006068:	dc801a15 	stw	r18,104(sp)
1000606c:	dc401915 	stw	r17,100(sp)
10006070:	dc001815 	stw	r16,96(sp)
10006074:	dfc02115 	stw	ra,132(sp)
10006078:	df002015 	stw	fp,128(sp)
1000607c:	ddc01f15 	stw	r23,124(sp)
10006080:	dd801e15 	stw	r22,120(sp)
10006084:	dd001c15 	stw	r20,112(sp)
10006088:	d9c00315 	stw	r7,12(sp)
1000608c:	2021883a 	mov	r16,r4
10006090:	302b883a 	mov	r21,r6
10006094:	2825883a 	mov	r18,r5
10006098:	dc402417 	ldw	r17,144(sp)
1000609c:	3027883a 	mov	r19,r6
100060a0:	10000826 	beq	r2,zero,100060c4 <_dtoa_r+0x6c>
100060a4:	21801117 	ldw	r6,68(r4)
100060a8:	00c00044 	movi	r3,1
100060ac:	100b883a 	mov	r5,r2
100060b0:	1986983a 	sll	r3,r3,r6
100060b4:	11800115 	stw	r6,4(r2)
100060b8:	10c00215 	stw	r3,8(r2)
100060bc:	000973c0 	call	1000973c <_Bfree>
100060c0:	80001015 	stw	zero,64(r16)
100060c4:	a8002d16 	blt	r21,zero,1000617c <_dtoa_r+0x124>
100060c8:	88000015 	stw	zero,0(r17)
100060cc:	a8dffc2c 	andhi	r3,r21,32752
100060d0:	009ffc34 	movhi	r2,32752
100060d4:	18801b26 	beq	r3,r2,10006144 <_dtoa_r+0xec>
100060d8:	9009883a 	mov	r4,r18
100060dc:	980b883a 	mov	r5,r19
100060e0:	000d883a 	mov	r6,zero
100060e4:	000f883a 	mov	r7,zero
100060e8:	000ec440 	call	1000ec44 <__eqdf2>
100060ec:	10002a1e 	bne	r2,zero,10006198 <_dtoa_r+0x140>
100060f0:	d8c02317 	ldw	r3,140(sp)
100060f4:	d9002517 	ldw	r4,148(sp)
100060f8:	00800044 	movi	r2,1
100060fc:	18800015 	stw	r2,0(r3)
10006100:	2001a226 	beq	r4,zero,1000678c <_dtoa_r+0x734>
10006104:	00840074 	movhi	r2,4097
10006108:	108c8644 	addi	r2,r2,12825
1000610c:	20800015 	stw	r2,0(r4)
10006110:	10bfffc4 	addi	r2,r2,-1
10006114:	dfc02117 	ldw	ra,132(sp)
10006118:	df002017 	ldw	fp,128(sp)
1000611c:	ddc01f17 	ldw	r23,124(sp)
10006120:	dd801e17 	ldw	r22,120(sp)
10006124:	dd401d17 	ldw	r21,116(sp)
10006128:	dd001c17 	ldw	r20,112(sp)
1000612c:	dcc01b17 	ldw	r19,108(sp)
10006130:	dc801a17 	ldw	r18,104(sp)
10006134:	dc401917 	ldw	r17,100(sp)
10006138:	dc001817 	ldw	r16,96(sp)
1000613c:	dec02204 	addi	sp,sp,136
10006140:	f800283a 	ret
10006144:	d8c02317 	ldw	r3,140(sp)
10006148:	0089c3c4 	movi	r2,9999
1000614c:	18800015 	stw	r2,0(r3)
10006150:	90017c26 	beq	r18,zero,10006744 <_dtoa_r+0x6ec>
10006154:	00840074 	movhi	r2,4097
10006158:	108c9204 	addi	r2,r2,12872
1000615c:	d9002517 	ldw	r4,148(sp)
10006160:	203fec26 	beq	r4,zero,10006114 <__alt_data_end+0xf8006114>
10006164:	10c000c7 	ldb	r3,3(r2)
10006168:	18017d1e 	bne	r3,zero,10006760 <_dtoa_r+0x708>
1000616c:	10c000c4 	addi	r3,r2,3
10006170:	d9802517 	ldw	r6,148(sp)
10006174:	30c00015 	stw	r3,0(r6)
10006178:	003fe606 	br	10006114 <__alt_data_end+0xf8006114>
1000617c:	04e00034 	movhi	r19,32768
10006180:	9cffffc4 	addi	r19,r19,-1
10006184:	00800044 	movi	r2,1
10006188:	ace6703a 	and	r19,r21,r19
1000618c:	88800015 	stw	r2,0(r17)
10006190:	982b883a 	mov	r21,r19
10006194:	003fcd06 	br	100060cc <__alt_data_end+0xf80060cc>
10006198:	d8800204 	addi	r2,sp,8
1000619c:	a822d53a 	srli	r17,r21,20
100061a0:	d8800015 	stw	r2,0(sp)
100061a4:	8009883a 	mov	r4,r16
100061a8:	900b883a 	mov	r5,r18
100061ac:	980d883a 	mov	r6,r19
100061b0:	d9c00104 	addi	r7,sp,4
100061b4:	000a3840 	call	1000a384 <__d2b>
100061b8:	1039883a 	mov	fp,r2
100061bc:	88016a1e 	bne	r17,zero,10006768 <_dtoa_r+0x710>
100061c0:	dd000217 	ldw	r20,8(sp)
100061c4:	dc400117 	ldw	r17,4(sp)
100061c8:	00befbc4 	movi	r2,-1041
100061cc:	a463883a 	add	r17,r20,r17
100061d0:	8882ea16 	blt	r17,r2,10006d7c <_dtoa_r+0xd24>
100061d4:	00bf0384 	movi	r2,-1010
100061d8:	1445c83a 	sub	r2,r2,r17
100061dc:	89010484 	addi	r4,r17,1042
100061e0:	a8aa983a 	sll	r21,r21,r2
100061e4:	9108d83a 	srl	r4,r18,r4
100061e8:	a908b03a 	or	r4,r21,r4
100061ec:	001011c0 	call	1001011c <__floatunsidf>
100061f0:	017f8434 	movhi	r5,65040
100061f4:	01800044 	movi	r6,1
100061f8:	1009883a 	mov	r4,r2
100061fc:	194b883a 	add	r5,r3,r5
10006200:	8c7fffc4 	addi	r17,r17,-1
10006204:	d9800f15 	stw	r6,60(sp)
10006208:	000d883a 	mov	r6,zero
1000620c:	01cffe34 	movhi	r7,16376
10006210:	000f6f40 	call	1000f6f4 <__subdf3>
10006214:	0198dbf4 	movhi	r6,25455
10006218:	01cff4f4 	movhi	r7,16339
1000621c:	1009883a 	mov	r4,r2
10006220:	180b883a 	mov	r5,r3
10006224:	3190d844 	addi	r6,r6,17249
10006228:	39e1e9c4 	addi	r7,r7,-30809
1000622c:	000ee880 	call	1000ee88 <__muldf3>
10006230:	01a2d874 	movhi	r6,35681
10006234:	01cff1f4 	movhi	r7,16327
10006238:	180b883a 	mov	r5,r3
1000623c:	31b22cc4 	addi	r6,r6,-14157
10006240:	39e28a04 	addi	r7,r7,-30168
10006244:	1009883a 	mov	r4,r2
10006248:	000da280 	call	1000da28 <__adddf3>
1000624c:	8809883a 	mov	r4,r17
10006250:	102d883a 	mov	r22,r2
10006254:	182b883a 	mov	r21,r3
10006258:	001004c0 	call	1001004c <__floatsidf>
1000625c:	019427f4 	movhi	r6,20639
10006260:	01cff4f4 	movhi	r7,16339
10006264:	1009883a 	mov	r4,r2
10006268:	180b883a 	mov	r5,r3
1000626c:	319e7ec4 	addi	r6,r6,31227
10006270:	39d104c4 	addi	r7,r7,17427
10006274:	000ee880 	call	1000ee88 <__muldf3>
10006278:	b009883a 	mov	r4,r22
1000627c:	a80b883a 	mov	r5,r21
10006280:	100d883a 	mov	r6,r2
10006284:	180f883a 	mov	r7,r3
10006288:	000da280 	call	1000da28 <__adddf3>
1000628c:	1009883a 	mov	r4,r2
10006290:	180b883a 	mov	r5,r3
10006294:	102d883a 	mov	r22,r2
10006298:	182b883a 	mov	r21,r3
1000629c:	000ffc40 	call	1000ffc4 <__fixdfsi>
100062a0:	b009883a 	mov	r4,r22
100062a4:	a80b883a 	mov	r5,r21
100062a8:	000d883a 	mov	r6,zero
100062ac:	000f883a 	mov	r7,zero
100062b0:	d8800515 	stw	r2,20(sp)
100062b4:	000eda80 	call	1000eda8 <__ledf2>
100062b8:	10023116 	blt	r2,zero,10006b80 <_dtoa_r+0xb28>
100062bc:	d8c00517 	ldw	r3,20(sp)
100062c0:	00800584 	movi	r2,22
100062c4:	10c21f36 	bltu	r2,r3,10006b44 <_dtoa_r+0xaec>
100062c8:	180490fa 	slli	r2,r3,3
100062cc:	00c40074 	movhi	r3,4097
100062d0:	18ccae04 	addi	r3,r3,12984
100062d4:	1885883a 	add	r2,r3,r2
100062d8:	11000017 	ldw	r4,0(r2)
100062dc:	11400117 	ldw	r5,4(r2)
100062e0:	900d883a 	mov	r6,r18
100062e4:	980f883a 	mov	r7,r19
100062e8:	000ecc80 	call	1000ecc8 <__gedf2>
100062ec:	0082a70e 	bge	zero,r2,10006d8c <_dtoa_r+0xd34>
100062f0:	d9000517 	ldw	r4,20(sp)
100062f4:	d8000c15 	stw	zero,48(sp)
100062f8:	213fffc4 	addi	r4,r4,-1
100062fc:	d9000515 	stw	r4,20(sp)
10006300:	a463c83a 	sub	r17,r20,r17
10006304:	8dbfffc4 	addi	r22,r17,-1
10006308:	b0021916 	blt	r22,zero,10006b70 <_dtoa_r+0xb18>
1000630c:	d8000815 	stw	zero,32(sp)
10006310:	d8800517 	ldw	r2,20(sp)
10006314:	10020e16 	blt	r2,zero,10006b50 <_dtoa_r+0xaf8>
10006318:	b0ad883a 	add	r22,r22,r2
1000631c:	d8800a15 	stw	r2,40(sp)
10006320:	d8000915 	stw	zero,36(sp)
10006324:	d8c00317 	ldw	r3,12(sp)
10006328:	00800244 	movi	r2,9
1000632c:	10c11a36 	bltu	r2,r3,10006798 <_dtoa_r+0x740>
10006330:	00800144 	movi	r2,5
10006334:	10c4fc0e 	bge	r2,r3,10007728 <_dtoa_r+0x16d0>
10006338:	18ffff04 	addi	r3,r3,-4
1000633c:	d8c00315 	stw	r3,12(sp)
10006340:	0029883a 	mov	r20,zero
10006344:	d9800317 	ldw	r6,12(sp)
10006348:	008000c4 	movi	r2,3
1000634c:	3083bd26 	beq	r6,r2,10007244 <_dtoa_r+0x11ec>
10006350:	1183670e 	bge	r2,r6,100070f0 <_dtoa_r+0x1098>
10006354:	d8c00317 	ldw	r3,12(sp)
10006358:	00800104 	movi	r2,4
1000635c:	1882e726 	beq	r3,r2,10006efc <_dtoa_r+0xea4>
10006360:	00800144 	movi	r2,5
10006364:	1884f21e 	bne	r3,r2,10007730 <_dtoa_r+0x16d8>
10006368:	00800044 	movi	r2,1
1000636c:	d8800b15 	stw	r2,44(sp)
10006370:	d8c02217 	ldw	r3,136(sp)
10006374:	d9000517 	ldw	r4,20(sp)
10006378:	1907883a 	add	r3,r3,r4
1000637c:	19800044 	addi	r6,r3,1
10006380:	d8c00d15 	stw	r3,52(sp)
10006384:	d9800615 	stw	r6,24(sp)
10006388:	0183c30e 	bge	zero,r6,10007298 <_dtoa_r+0x1240>
1000638c:	d9800617 	ldw	r6,24(sp)
10006390:	3023883a 	mov	r17,r6
10006394:	80001115 	stw	zero,68(r16)
10006398:	008005c4 	movi	r2,23
1000639c:	1184f62e 	bgeu	r2,r6,10007778 <_dtoa_r+0x1720>
100063a0:	00c00044 	movi	r3,1
100063a4:	00800104 	movi	r2,4
100063a8:	1085883a 	add	r2,r2,r2
100063ac:	11000504 	addi	r4,r2,20
100063b0:	180b883a 	mov	r5,r3
100063b4:	18c00044 	addi	r3,r3,1
100063b8:	313ffb2e 	bgeu	r6,r4,100063a8 <__alt_data_end+0xf80063a8>
100063bc:	81401115 	stw	r5,68(r16)
100063c0:	8009883a 	mov	r4,r16
100063c4:	00096940 	call	10009694 <_Balloc>
100063c8:	d8800715 	stw	r2,28(sp)
100063cc:	80801015 	stw	r2,64(r16)
100063d0:	00800384 	movi	r2,14
100063d4:	1440fd36 	bltu	r2,r17,100067cc <_dtoa_r+0x774>
100063d8:	a000fc26 	beq	r20,zero,100067cc <_dtoa_r+0x774>
100063dc:	d8800517 	ldw	r2,20(sp)
100063e0:	0083b90e 	bge	zero,r2,100072c8 <_dtoa_r+0x1270>
100063e4:	d8c00517 	ldw	r3,20(sp)
100063e8:	108003cc 	andi	r2,r2,15
100063ec:	100490fa 	slli	r2,r2,3
100063f0:	182fd13a 	srai	r23,r3,4
100063f4:	00c40074 	movhi	r3,4097
100063f8:	18ccae04 	addi	r3,r3,12984
100063fc:	1885883a 	add	r2,r3,r2
10006400:	b8c0040c 	andi	r3,r23,16
10006404:	12c00017 	ldw	r11,0(r2)
10006408:	12800117 	ldw	r10,4(r2)
1000640c:	18039726 	beq	r3,zero,1000726c <_dtoa_r+0x1214>
10006410:	00840074 	movhi	r2,4097
10006414:	108ca404 	addi	r2,r2,12944
10006418:	11800817 	ldw	r6,32(r2)
1000641c:	11c00917 	ldw	r7,36(r2)
10006420:	9009883a 	mov	r4,r18
10006424:	980b883a 	mov	r5,r19
10006428:	da801615 	stw	r10,88(sp)
1000642c:	dac01515 	stw	r11,84(sp)
10006430:	000e2c40 	call	1000e2c4 <__divdf3>
10006434:	da801617 	ldw	r10,88(sp)
10006438:	dac01517 	ldw	r11,84(sp)
1000643c:	bdc003cc 	andi	r23,r23,15
10006440:	044000c4 	movi	r17,3
10006444:	d8800e15 	stw	r2,56(sp)
10006448:	182b883a 	mov	r21,r3
1000644c:	b8001126 	beq	r23,zero,10006494 <_dtoa_r+0x43c>
10006450:	05040074 	movhi	r20,4097
10006454:	a50ca404 	addi	r20,r20,12944
10006458:	5805883a 	mov	r2,r11
1000645c:	5007883a 	mov	r3,r10
10006460:	b980004c 	andi	r6,r23,1
10006464:	1009883a 	mov	r4,r2
10006468:	b82fd07a 	srai	r23,r23,1
1000646c:	180b883a 	mov	r5,r3
10006470:	30000426 	beq	r6,zero,10006484 <_dtoa_r+0x42c>
10006474:	a1800017 	ldw	r6,0(r20)
10006478:	a1c00117 	ldw	r7,4(r20)
1000647c:	8c400044 	addi	r17,r17,1
10006480:	000ee880 	call	1000ee88 <__muldf3>
10006484:	a5000204 	addi	r20,r20,8
10006488:	b83ff51e 	bne	r23,zero,10006460 <__alt_data_end+0xf8006460>
1000648c:	1017883a 	mov	r11,r2
10006490:	1815883a 	mov	r10,r3
10006494:	d9000e17 	ldw	r4,56(sp)
10006498:	a80b883a 	mov	r5,r21
1000649c:	580d883a 	mov	r6,r11
100064a0:	500f883a 	mov	r7,r10
100064a4:	000e2c40 	call	1000e2c4 <__divdf3>
100064a8:	1029883a 	mov	r20,r2
100064ac:	182b883a 	mov	r21,r3
100064b0:	d9800c17 	ldw	r6,48(sp)
100064b4:	30000626 	beq	r6,zero,100064d0 <_dtoa_r+0x478>
100064b8:	a009883a 	mov	r4,r20
100064bc:	a80b883a 	mov	r5,r21
100064c0:	000d883a 	mov	r6,zero
100064c4:	01cffc34 	movhi	r7,16368
100064c8:	000eda80 	call	1000eda8 <__ledf2>
100064cc:	10043216 	blt	r2,zero,10007598 <_dtoa_r+0x1540>
100064d0:	8809883a 	mov	r4,r17
100064d4:	001004c0 	call	1001004c <__floatsidf>
100064d8:	1009883a 	mov	r4,r2
100064dc:	180b883a 	mov	r5,r3
100064e0:	a00d883a 	mov	r6,r20
100064e4:	a80f883a 	mov	r7,r21
100064e8:	000ee880 	call	1000ee88 <__muldf3>
100064ec:	000d883a 	mov	r6,zero
100064f0:	1009883a 	mov	r4,r2
100064f4:	180b883a 	mov	r5,r3
100064f8:	01d00734 	movhi	r7,16412
100064fc:	000da280 	call	1000da28 <__adddf3>
10006500:	1023883a 	mov	r17,r2
10006504:	d9800617 	ldw	r6,24(sp)
10006508:	00bf3034 	movhi	r2,64704
1000650c:	1885883a 	add	r2,r3,r2
10006510:	d8800e15 	stw	r2,56(sp)
10006514:	30032e26 	beq	r6,zero,100071d0 <_dtoa_r+0x1178>
10006518:	d8c00517 	ldw	r3,20(sp)
1000651c:	da800617 	ldw	r10,24(sp)
10006520:	d8c01215 	stw	r3,72(sp)
10006524:	d9000b17 	ldw	r4,44(sp)
10006528:	2003b026 	beq	r4,zero,100073ec <_dtoa_r+0x1394>
1000652c:	50bfffc4 	addi	r2,r10,-1
10006530:	100490fa 	slli	r2,r2,3
10006534:	00c40074 	movhi	r3,4097
10006538:	18ccae04 	addi	r3,r3,12984
1000653c:	1885883a 	add	r2,r3,r2
10006540:	11800017 	ldw	r6,0(r2)
10006544:	11c00117 	ldw	r7,4(r2)
10006548:	d8800717 	ldw	r2,28(sp)
1000654c:	0009883a 	mov	r4,zero
10006550:	014ff834 	movhi	r5,16352
10006554:	da801615 	stw	r10,88(sp)
10006558:	15c00044 	addi	r23,r2,1
1000655c:	000e2c40 	call	1000e2c4 <__divdf3>
10006560:	d9c00e17 	ldw	r7,56(sp)
10006564:	880d883a 	mov	r6,r17
10006568:	1009883a 	mov	r4,r2
1000656c:	180b883a 	mov	r5,r3
10006570:	000f6f40 	call	1000f6f4 <__subdf3>
10006574:	a80b883a 	mov	r5,r21
10006578:	a009883a 	mov	r4,r20
1000657c:	d8c01015 	stw	r3,64(sp)
10006580:	d8800e15 	stw	r2,56(sp)
10006584:	000ffc40 	call	1000ffc4 <__fixdfsi>
10006588:	1009883a 	mov	r4,r2
1000658c:	d8801715 	stw	r2,92(sp)
10006590:	001004c0 	call	1001004c <__floatsidf>
10006594:	a009883a 	mov	r4,r20
10006598:	a80b883a 	mov	r5,r21
1000659c:	100d883a 	mov	r6,r2
100065a0:	180f883a 	mov	r7,r3
100065a4:	000f6f40 	call	1000f6f4 <__subdf3>
100065a8:	da001717 	ldw	r8,92(sp)
100065ac:	1829883a 	mov	r20,r3
100065b0:	d8c00717 	ldw	r3,28(sp)
100065b4:	d9000e17 	ldw	r4,56(sp)
100065b8:	d9401017 	ldw	r5,64(sp)
100065bc:	42000c04 	addi	r8,r8,48
100065c0:	1023883a 	mov	r17,r2
100065c4:	1a000005 	stb	r8,0(r3)
100065c8:	880d883a 	mov	r6,r17
100065cc:	a00f883a 	mov	r7,r20
100065d0:	402b883a 	mov	r21,r8
100065d4:	000ecc80 	call	1000ecc8 <__gedf2>
100065d8:	00844516 	blt	zero,r2,100076f0 <_dtoa_r+0x1698>
100065dc:	0009883a 	mov	r4,zero
100065e0:	014ffc34 	movhi	r5,16368
100065e4:	880d883a 	mov	r6,r17
100065e8:	a00f883a 	mov	r7,r20
100065ec:	000f6f40 	call	1000f6f4 <__subdf3>
100065f0:	d9000e17 	ldw	r4,56(sp)
100065f4:	d9401017 	ldw	r5,64(sp)
100065f8:	100d883a 	mov	r6,r2
100065fc:	180f883a 	mov	r7,r3
10006600:	000ecc80 	call	1000ecc8 <__gedf2>
10006604:	da801617 	ldw	r10,88(sp)
10006608:	00843616 	blt	zero,r2,100076e4 <_dtoa_r+0x168c>
1000660c:	00800044 	movi	r2,1
10006610:	12806e0e 	bge	r2,r10,100067cc <_dtoa_r+0x774>
10006614:	d9000717 	ldw	r4,28(sp)
10006618:	dd801315 	stw	r22,76(sp)
1000661c:	dc001115 	stw	r16,68(sp)
10006620:	2295883a 	add	r10,r4,r10
10006624:	dcc01415 	stw	r19,80(sp)
10006628:	502d883a 	mov	r22,r10
1000662c:	dcc01017 	ldw	r19,64(sp)
10006630:	b821883a 	mov	r16,r23
10006634:	dc801015 	stw	r18,64(sp)
10006638:	dc800e17 	ldw	r18,56(sp)
1000663c:	00000906 	br	10006664 <_dtoa_r+0x60c>
10006640:	000f6f40 	call	1000f6f4 <__subdf3>
10006644:	1009883a 	mov	r4,r2
10006648:	180b883a 	mov	r5,r3
1000664c:	900d883a 	mov	r6,r18
10006650:	980f883a 	mov	r7,r19
10006654:	000eda80 	call	1000eda8 <__ledf2>
10006658:	10040e16 	blt	r2,zero,10007694 <_dtoa_r+0x163c>
1000665c:	b821883a 	mov	r16,r23
10006660:	bd841026 	beq	r23,r22,100076a4 <_dtoa_r+0x164c>
10006664:	9009883a 	mov	r4,r18
10006668:	980b883a 	mov	r5,r19
1000666c:	000d883a 	mov	r6,zero
10006670:	01d00934 	movhi	r7,16420
10006674:	000ee880 	call	1000ee88 <__muldf3>
10006678:	000d883a 	mov	r6,zero
1000667c:	01d00934 	movhi	r7,16420
10006680:	8809883a 	mov	r4,r17
10006684:	a00b883a 	mov	r5,r20
10006688:	1025883a 	mov	r18,r2
1000668c:	1827883a 	mov	r19,r3
10006690:	000ee880 	call	1000ee88 <__muldf3>
10006694:	180b883a 	mov	r5,r3
10006698:	1009883a 	mov	r4,r2
1000669c:	1823883a 	mov	r17,r3
100066a0:	1029883a 	mov	r20,r2
100066a4:	000ffc40 	call	1000ffc4 <__fixdfsi>
100066a8:	1009883a 	mov	r4,r2
100066ac:	102b883a 	mov	r21,r2
100066b0:	001004c0 	call	1001004c <__floatsidf>
100066b4:	a009883a 	mov	r4,r20
100066b8:	880b883a 	mov	r5,r17
100066bc:	100d883a 	mov	r6,r2
100066c0:	180f883a 	mov	r7,r3
100066c4:	000f6f40 	call	1000f6f4 <__subdf3>
100066c8:	ad400c04 	addi	r21,r21,48
100066cc:	1009883a 	mov	r4,r2
100066d0:	180b883a 	mov	r5,r3
100066d4:	900d883a 	mov	r6,r18
100066d8:	980f883a 	mov	r7,r19
100066dc:	85400005 	stb	r21,0(r16)
100066e0:	1023883a 	mov	r17,r2
100066e4:	1829883a 	mov	r20,r3
100066e8:	000eda80 	call	1000eda8 <__ledf2>
100066ec:	bdc00044 	addi	r23,r23,1
100066f0:	0009883a 	mov	r4,zero
100066f4:	014ffc34 	movhi	r5,16368
100066f8:	880d883a 	mov	r6,r17
100066fc:	a00f883a 	mov	r7,r20
10006700:	103fcf0e 	bge	r2,zero,10006640 <__alt_data_end+0xf8006640>
10006704:	d9801217 	ldw	r6,72(sp)
10006708:	dc001117 	ldw	r16,68(sp)
1000670c:	d9800515 	stw	r6,20(sp)
10006710:	8009883a 	mov	r4,r16
10006714:	e00b883a 	mov	r5,fp
10006718:	000973c0 	call	1000973c <_Bfree>
1000671c:	d8c00517 	ldw	r3,20(sp)
10006720:	d9002317 	ldw	r4,140(sp)
10006724:	d9802517 	ldw	r6,148(sp)
10006728:	b8000005 	stb	zero,0(r23)
1000672c:	18800044 	addi	r2,r3,1
10006730:	20800015 	stw	r2,0(r4)
10006734:	30027226 	beq	r6,zero,10007100 <_dtoa_r+0x10a8>
10006738:	35c00015 	stw	r23,0(r6)
1000673c:	d8800717 	ldw	r2,28(sp)
10006740:	003e7406 	br	10006114 <__alt_data_end+0xf8006114>
10006744:	00800434 	movhi	r2,16
10006748:	10bfffc4 	addi	r2,r2,-1
1000674c:	a8aa703a 	and	r21,r21,r2
10006750:	a83e801e 	bne	r21,zero,10006154 <__alt_data_end+0xf8006154>
10006754:	00840074 	movhi	r2,4097
10006758:	108c8f04 	addi	r2,r2,12860
1000675c:	003e7f06 	br	1000615c <__alt_data_end+0xf800615c>
10006760:	10c00204 	addi	r3,r2,8
10006764:	003e8206 	br	10006170 <__alt_data_end+0xf8006170>
10006768:	01400434 	movhi	r5,16
1000676c:	297fffc4 	addi	r5,r5,-1
10006770:	994a703a 	and	r5,r19,r5
10006774:	9009883a 	mov	r4,r18
10006778:	8c7f0044 	addi	r17,r17,-1023
1000677c:	294ffc34 	orhi	r5,r5,16368
10006780:	dd000217 	ldw	r20,8(sp)
10006784:	d8000f15 	stw	zero,60(sp)
10006788:	003e9f06 	br	10006208 <__alt_data_end+0xf8006208>
1000678c:	00840074 	movhi	r2,4097
10006790:	108c8604 	addi	r2,r2,12824
10006794:	003e5f06 	br	10006114 <__alt_data_end+0xf8006114>
10006798:	80001115 	stw	zero,68(r16)
1000679c:	8009883a 	mov	r4,r16
100067a0:	000b883a 	mov	r5,zero
100067a4:	00096940 	call	10009694 <_Balloc>
100067a8:	01bfffc4 	movi	r6,-1
100067ac:	d8800715 	stw	r2,28(sp)
100067b0:	80801015 	stw	r2,64(r16)
100067b4:	00800044 	movi	r2,1
100067b8:	d9800615 	stw	r6,24(sp)
100067bc:	d8800b15 	stw	r2,44(sp)
100067c0:	d8002215 	stw	zero,136(sp)
100067c4:	d9800d15 	stw	r6,52(sp)
100067c8:	d8000315 	stw	zero,12(sp)
100067cc:	d8800117 	ldw	r2,4(sp)
100067d0:	10008e16 	blt	r2,zero,10006a0c <_dtoa_r+0x9b4>
100067d4:	d9000517 	ldw	r4,20(sp)
100067d8:	00c00384 	movi	r3,14
100067dc:	19008b16 	blt	r3,r4,10006a0c <_dtoa_r+0x9b4>
100067e0:	200490fa 	slli	r2,r4,3
100067e4:	00c40074 	movhi	r3,4097
100067e8:	d9802217 	ldw	r6,136(sp)
100067ec:	18ccae04 	addi	r3,r3,12984
100067f0:	1885883a 	add	r2,r3,r2
100067f4:	14400017 	ldw	r17,0(r2)
100067f8:	15000117 	ldw	r20,4(r2)
100067fc:	3001c716 	blt	r6,zero,10006f1c <_dtoa_r+0xec4>
10006800:	880d883a 	mov	r6,r17
10006804:	a00f883a 	mov	r7,r20
10006808:	9009883a 	mov	r4,r18
1000680c:	980b883a 	mov	r5,r19
10006810:	000e2c40 	call	1000e2c4 <__divdf3>
10006814:	180b883a 	mov	r5,r3
10006818:	1009883a 	mov	r4,r2
1000681c:	000ffc40 	call	1000ffc4 <__fixdfsi>
10006820:	1009883a 	mov	r4,r2
10006824:	102d883a 	mov	r22,r2
10006828:	001004c0 	call	1001004c <__floatsidf>
1000682c:	1009883a 	mov	r4,r2
10006830:	180b883a 	mov	r5,r3
10006834:	880d883a 	mov	r6,r17
10006838:	a00f883a 	mov	r7,r20
1000683c:	000ee880 	call	1000ee88 <__muldf3>
10006840:	9009883a 	mov	r4,r18
10006844:	980b883a 	mov	r5,r19
10006848:	100d883a 	mov	r6,r2
1000684c:	180f883a 	mov	r7,r3
10006850:	000f6f40 	call	1000f6f4 <__subdf3>
10006854:	d9000717 	ldw	r4,28(sp)
10006858:	d9800617 	ldw	r6,24(sp)
1000685c:	180b883a 	mov	r5,r3
10006860:	b0c00c04 	addi	r3,r22,48
10006864:	20c00005 	stb	r3,0(r4)
10006868:	25c00044 	addi	r23,r4,1
1000686c:	01000044 	movi	r4,1
10006870:	1011883a 	mov	r8,r2
10006874:	2807883a 	mov	r3,r5
10006878:	31003d26 	beq	r6,r4,10006970 <_dtoa_r+0x918>
1000687c:	000d883a 	mov	r6,zero
10006880:	01d00934 	movhi	r7,16420
10006884:	1009883a 	mov	r4,r2
10006888:	000ee880 	call	1000ee88 <__muldf3>
1000688c:	1009883a 	mov	r4,r2
10006890:	180b883a 	mov	r5,r3
10006894:	000d883a 	mov	r6,zero
10006898:	000f883a 	mov	r7,zero
1000689c:	1027883a 	mov	r19,r2
100068a0:	182b883a 	mov	r21,r3
100068a4:	000ec440 	call	1000ec44 <__eqdf2>
100068a8:	103f9926 	beq	r2,zero,10006710 <__alt_data_end+0xf8006710>
100068ac:	d8c00617 	ldw	r3,24(sp)
100068b0:	d9000717 	ldw	r4,28(sp)
100068b4:	b825883a 	mov	r18,r23
100068b8:	18bfffc4 	addi	r2,r3,-1
100068bc:	20ad883a 	add	r22,r4,r2
100068c0:	dc000315 	stw	r16,12(sp)
100068c4:	00000a06 	br	100068f0 <_dtoa_r+0x898>
100068c8:	000ee880 	call	1000ee88 <__muldf3>
100068cc:	1009883a 	mov	r4,r2
100068d0:	180b883a 	mov	r5,r3
100068d4:	000d883a 	mov	r6,zero
100068d8:	000f883a 	mov	r7,zero
100068dc:	1027883a 	mov	r19,r2
100068e0:	182b883a 	mov	r21,r3
100068e4:	b825883a 	mov	r18,r23
100068e8:	000ec440 	call	1000ec44 <__eqdf2>
100068ec:	10022626 	beq	r2,zero,10007188 <_dtoa_r+0x1130>
100068f0:	880d883a 	mov	r6,r17
100068f4:	a00f883a 	mov	r7,r20
100068f8:	9809883a 	mov	r4,r19
100068fc:	a80b883a 	mov	r5,r21
10006900:	000e2c40 	call	1000e2c4 <__divdf3>
10006904:	180b883a 	mov	r5,r3
10006908:	1009883a 	mov	r4,r2
1000690c:	000ffc40 	call	1000ffc4 <__fixdfsi>
10006910:	1009883a 	mov	r4,r2
10006914:	1021883a 	mov	r16,r2
10006918:	001004c0 	call	1001004c <__floatsidf>
1000691c:	1009883a 	mov	r4,r2
10006920:	180b883a 	mov	r5,r3
10006924:	880d883a 	mov	r6,r17
10006928:	a00f883a 	mov	r7,r20
1000692c:	000ee880 	call	1000ee88 <__muldf3>
10006930:	9809883a 	mov	r4,r19
10006934:	a80b883a 	mov	r5,r21
10006938:	100d883a 	mov	r6,r2
1000693c:	180f883a 	mov	r7,r3
10006940:	000f6f40 	call	1000f6f4 <__subdf3>
10006944:	82000c04 	addi	r8,r16,48
10006948:	92000005 	stb	r8,0(r18)
1000694c:	1009883a 	mov	r4,r2
10006950:	180b883a 	mov	r5,r3
10006954:	000d883a 	mov	r6,zero
10006958:	01d00934 	movhi	r7,16420
1000695c:	1011883a 	mov	r8,r2
10006960:	bdc00044 	addi	r23,r23,1
10006964:	95bfd81e 	bne	r18,r22,100068c8 <__alt_data_end+0xf80068c8>
10006968:	802d883a 	mov	r22,r16
1000696c:	dc000317 	ldw	r16,12(sp)
10006970:	4009883a 	mov	r4,r8
10006974:	180b883a 	mov	r5,r3
10006978:	400d883a 	mov	r6,r8
1000697c:	180f883a 	mov	r7,r3
10006980:	000da280 	call	1000da28 <__adddf3>
10006984:	8809883a 	mov	r4,r17
10006988:	a00b883a 	mov	r5,r20
1000698c:	100d883a 	mov	r6,r2
10006990:	180f883a 	mov	r7,r3
10006994:	1027883a 	mov	r19,r2
10006998:	1825883a 	mov	r18,r3
1000699c:	000eda80 	call	1000eda8 <__ledf2>
100069a0:	10000816 	blt	r2,zero,100069c4 <_dtoa_r+0x96c>
100069a4:	8809883a 	mov	r4,r17
100069a8:	a00b883a 	mov	r5,r20
100069ac:	980d883a 	mov	r6,r19
100069b0:	900f883a 	mov	r7,r18
100069b4:	000ec440 	call	1000ec44 <__eqdf2>
100069b8:	103f551e 	bne	r2,zero,10006710 <__alt_data_end+0xf8006710>
100069bc:	b580004c 	andi	r22,r22,1
100069c0:	b03f5326 	beq	r22,zero,10006710 <__alt_data_end+0xf8006710>
100069c4:	bd7fffc3 	ldbu	r21,-1(r23)
100069c8:	b8bfffc4 	addi	r2,r23,-1
100069cc:	1007883a 	mov	r3,r2
100069d0:	01400e44 	movi	r5,57
100069d4:	d9800717 	ldw	r6,28(sp)
100069d8:	00000506 	br	100069f0 <_dtoa_r+0x998>
100069dc:	18ffffc4 	addi	r3,r3,-1
100069e0:	30825e26 	beq	r6,r2,1000735c <_dtoa_r+0x1304>
100069e4:	1d400003 	ldbu	r21,0(r3)
100069e8:	102f883a 	mov	r23,r2
100069ec:	10bfffc4 	addi	r2,r2,-1
100069f0:	a9003fcc 	andi	r4,r21,255
100069f4:	2100201c 	xori	r4,r4,128
100069f8:	213fe004 	addi	r4,r4,-128
100069fc:	217ff726 	beq	r4,r5,100069dc <__alt_data_end+0xf80069dc>
10006a00:	aa000044 	addi	r8,r21,1
10006a04:	12000005 	stb	r8,0(r2)
10006a08:	003f4106 	br	10006710 <__alt_data_end+0xf8006710>
10006a0c:	d8c00b17 	ldw	r3,44(sp)
10006a10:	18006726 	beq	r3,zero,10006bb0 <_dtoa_r+0xb58>
10006a14:	d9000317 	ldw	r4,12(sp)
10006a18:	00c00044 	movi	r3,1
10006a1c:	19016a0e 	bge	r3,r4,10006fc8 <_dtoa_r+0xf70>
10006a20:	d8800617 	ldw	r2,24(sp)
10006a24:	d8c00917 	ldw	r3,36(sp)
10006a28:	157fffc4 	addi	r21,r2,-1
10006a2c:	1d420716 	blt	r3,r21,1000724c <_dtoa_r+0x11f4>
10006a30:	1d6bc83a 	sub	r21,r3,r21
10006a34:	d8800617 	ldw	r2,24(sp)
10006a38:	1002c716 	blt	r2,zero,10007558 <_dtoa_r+0x1500>
10006a3c:	dd000817 	ldw	r20,32(sp)
10006a40:	d8800617 	ldw	r2,24(sp)
10006a44:	d9800817 	ldw	r6,32(sp)
10006a48:	8009883a 	mov	r4,r16
10006a4c:	01400044 	movi	r5,1
10006a50:	308d883a 	add	r6,r6,r2
10006a54:	d9800815 	stw	r6,32(sp)
10006a58:	b0ad883a 	add	r22,r22,r2
10006a5c:	0009abc0 	call	10009abc <__i2b>
10006a60:	1023883a 	mov	r17,r2
10006a64:	a0000826 	beq	r20,zero,10006a88 <_dtoa_r+0xa30>
10006a68:	0580070e 	bge	zero,r22,10006a88 <_dtoa_r+0xa30>
10006a6c:	b005883a 	mov	r2,r22
10006a70:	a5812016 	blt	r20,r22,10006ef4 <_dtoa_r+0xe9c>
10006a74:	d8c00817 	ldw	r3,32(sp)
10006a78:	a0a9c83a 	sub	r20,r20,r2
10006a7c:	b0adc83a 	sub	r22,r22,r2
10006a80:	1887c83a 	sub	r3,r3,r2
10006a84:	d8c00815 	stw	r3,32(sp)
10006a88:	d9000917 	ldw	r4,36(sp)
10006a8c:	0100140e 	bge	zero,r4,10006ae0 <_dtoa_r+0xa88>
10006a90:	d9800b17 	ldw	r6,44(sp)
10006a94:	3001e526 	beq	r6,zero,1000722c <_dtoa_r+0x11d4>
10006a98:	05400e0e 	bge	zero,r21,10006ad4 <_dtoa_r+0xa7c>
10006a9c:	880b883a 	mov	r5,r17
10006aa0:	8009883a 	mov	r4,r16
10006aa4:	a80d883a 	mov	r6,r21
10006aa8:	0009d880 	call	10009d88 <__pow5mult>
10006aac:	e00d883a 	mov	r6,fp
10006ab0:	8009883a 	mov	r4,r16
10006ab4:	100b883a 	mov	r5,r2
10006ab8:	1023883a 	mov	r17,r2
10006abc:	0009af80 	call	10009af8 <__multiply>
10006ac0:	102f883a 	mov	r23,r2
10006ac4:	e00b883a 	mov	r5,fp
10006ac8:	8009883a 	mov	r4,r16
10006acc:	000973c0 	call	1000973c <_Bfree>
10006ad0:	b839883a 	mov	fp,r23
10006ad4:	d8800917 	ldw	r2,36(sp)
10006ad8:	154dc83a 	sub	r6,r2,r21
10006adc:	3001281e 	bne	r6,zero,10006f80 <_dtoa_r+0xf28>
10006ae0:	05c00044 	movi	r23,1
10006ae4:	8009883a 	mov	r4,r16
10006ae8:	b80b883a 	mov	r5,r23
10006aec:	0009abc0 	call	10009abc <__i2b>
10006af0:	d8c00a17 	ldw	r3,40(sp)
10006af4:	102b883a 	mov	r21,r2
10006af8:	00c0310e 	bge	zero,r3,10006bc0 <_dtoa_r+0xb68>
10006afc:	8009883a 	mov	r4,r16
10006b00:	100b883a 	mov	r5,r2
10006b04:	180d883a 	mov	r6,r3
10006b08:	0009d880 	call	10009d88 <__pow5mult>
10006b0c:	d9000317 	ldw	r4,12(sp)
10006b10:	102b883a 	mov	r21,r2
10006b14:	b9011f0e 	bge	r23,r4,10006f94 <_dtoa_r+0xf3c>
10006b18:	0027883a 	mov	r19,zero
10006b1c:	a8800417 	ldw	r2,16(r21)
10006b20:	10800104 	addi	r2,r2,4
10006b24:	1085883a 	add	r2,r2,r2
10006b28:	1085883a 	add	r2,r2,r2
10006b2c:	a885883a 	add	r2,r21,r2
10006b30:	11000017 	ldw	r4,0(r2)
10006b34:	00099a40 	call	100099a4 <__hi0bits>
10006b38:	00c00804 	movi	r3,32
10006b3c:	1885c83a 	sub	r2,r3,r2
10006b40:	00002506 	br	10006bd8 <_dtoa_r+0xb80>
10006b44:	01800044 	movi	r6,1
10006b48:	d9800c15 	stw	r6,48(sp)
10006b4c:	003dec06 	br	10006300 <__alt_data_end+0xf8006300>
10006b50:	d8c00817 	ldw	r3,32(sp)
10006b54:	d9000517 	ldw	r4,20(sp)
10006b58:	d8000a15 	stw	zero,40(sp)
10006b5c:	1907c83a 	sub	r3,r3,r4
10006b60:	010dc83a 	sub	r6,zero,r4
10006b64:	d8c00815 	stw	r3,32(sp)
10006b68:	d9800915 	stw	r6,36(sp)
10006b6c:	003ded06 	br	10006324 <__alt_data_end+0xf8006324>
10006b70:	05adc83a 	sub	r22,zero,r22
10006b74:	dd800815 	stw	r22,32(sp)
10006b78:	002d883a 	mov	r22,zero
10006b7c:	003de406 	br	10006310 <__alt_data_end+0xf8006310>
10006b80:	d9000517 	ldw	r4,20(sp)
10006b84:	001004c0 	call	1001004c <__floatsidf>
10006b88:	1009883a 	mov	r4,r2
10006b8c:	180b883a 	mov	r5,r3
10006b90:	b00d883a 	mov	r6,r22
10006b94:	a80f883a 	mov	r7,r21
10006b98:	000ec440 	call	1000ec44 <__eqdf2>
10006b9c:	103dc726 	beq	r2,zero,100062bc <__alt_data_end+0xf80062bc>
10006ba0:	d8800517 	ldw	r2,20(sp)
10006ba4:	10bfffc4 	addi	r2,r2,-1
10006ba8:	d8800515 	stw	r2,20(sp)
10006bac:	003dc306 	br	100062bc <__alt_data_end+0xf80062bc>
10006bb0:	dd400917 	ldw	r21,36(sp)
10006bb4:	dd000817 	ldw	r20,32(sp)
10006bb8:	0023883a 	mov	r17,zero
10006bbc:	003fa906 	br	10006a64 <__alt_data_end+0xf8006a64>
10006bc0:	d9800317 	ldw	r6,12(sp)
10006bc4:	b981670e 	bge	r23,r6,10007164 <_dtoa_r+0x110c>
10006bc8:	0027883a 	mov	r19,zero
10006bcc:	d8c00a17 	ldw	r3,40(sp)
10006bd0:	183fd21e 	bne	r3,zero,10006b1c <__alt_data_end+0xf8006b1c>
10006bd4:	00800044 	movi	r2,1
10006bd8:	1585883a 	add	r2,r2,r22
10006bdc:	108007cc 	andi	r2,r2,31
10006be0:	10005f26 	beq	r2,zero,10006d60 <_dtoa_r+0xd08>
10006be4:	00c00804 	movi	r3,32
10006be8:	1887c83a 	sub	r3,r3,r2
10006bec:	01000104 	movi	r4,4
10006bf0:	20c2dd0e 	bge	r4,r3,10007768 <_dtoa_r+0x1710>
10006bf4:	d9000817 	ldw	r4,32(sp)
10006bf8:	00c00704 	movi	r3,28
10006bfc:	1885c83a 	sub	r2,r3,r2
10006c00:	2089883a 	add	r4,r4,r2
10006c04:	d9000815 	stw	r4,32(sp)
10006c08:	a0a9883a 	add	r20,r20,r2
10006c0c:	b0ad883a 	add	r22,r22,r2
10006c10:	d8800817 	ldw	r2,32(sp)
10006c14:	0080050e 	bge	zero,r2,10006c2c <_dtoa_r+0xbd4>
10006c18:	e00b883a 	mov	r5,fp
10006c1c:	8009883a 	mov	r4,r16
10006c20:	100d883a 	mov	r6,r2
10006c24:	0009ec80 	call	10009ec8 <__lshift>
10006c28:	1039883a 	mov	fp,r2
10006c2c:	0580050e 	bge	zero,r22,10006c44 <_dtoa_r+0xbec>
10006c30:	a80b883a 	mov	r5,r21
10006c34:	8009883a 	mov	r4,r16
10006c38:	b00d883a 	mov	r6,r22
10006c3c:	0009ec80 	call	10009ec8 <__lshift>
10006c40:	102b883a 	mov	r21,r2
10006c44:	d8c00c17 	ldw	r3,48(sp)
10006c48:	1801161e 	bne	r3,zero,100070a4 <_dtoa_r+0x104c>
10006c4c:	d8c00617 	ldw	r3,24(sp)
10006c50:	00c12d0e 	bge	zero,r3,10007108 <_dtoa_r+0x10b0>
10006c54:	d8c00b17 	ldw	r3,44(sp)
10006c58:	1800571e 	bne	r3,zero,10006db8 <_dtoa_r+0xd60>
10006c5c:	dc800717 	ldw	r18,28(sp)
10006c60:	dcc00617 	ldw	r19,24(sp)
10006c64:	9029883a 	mov	r20,r18
10006c68:	00000206 	br	10006c74 <_dtoa_r+0xc1c>
10006c6c:	00097640 	call	10009764 <__multadd>
10006c70:	1039883a 	mov	fp,r2
10006c74:	e009883a 	mov	r4,fp
10006c78:	a80b883a 	mov	r5,r21
10006c7c:	0005e300 	call	10005e30 <quorem>
10006c80:	10800c04 	addi	r2,r2,48
10006c84:	90800005 	stb	r2,0(r18)
10006c88:	94800044 	addi	r18,r18,1
10006c8c:	9507c83a 	sub	r3,r18,r20
10006c90:	8009883a 	mov	r4,r16
10006c94:	e00b883a 	mov	r5,fp
10006c98:	01800284 	movi	r6,10
10006c9c:	000f883a 	mov	r7,zero
10006ca0:	1cfff216 	blt	r3,r19,10006c6c <__alt_data_end+0xf8006c6c>
10006ca4:	1011883a 	mov	r8,r2
10006ca8:	d8800617 	ldw	r2,24(sp)
10006cac:	00822e0e 	bge	zero,r2,10007568 <_dtoa_r+0x1510>
10006cb0:	d9000717 	ldw	r4,28(sp)
10006cb4:	0025883a 	mov	r18,zero
10006cb8:	20af883a 	add	r23,r4,r2
10006cbc:	e00b883a 	mov	r5,fp
10006cc0:	01800044 	movi	r6,1
10006cc4:	8009883a 	mov	r4,r16
10006cc8:	da001715 	stw	r8,92(sp)
10006ccc:	0009ec80 	call	10009ec8 <__lshift>
10006cd0:	1009883a 	mov	r4,r2
10006cd4:	a80b883a 	mov	r5,r21
10006cd8:	1039883a 	mov	fp,r2
10006cdc:	000a0100 	call	1000a010 <__mcmp>
10006ce0:	da001717 	ldw	r8,92(sp)
10006ce4:	00816e0e 	bge	zero,r2,100072a0 <_dtoa_r+0x1248>
10006ce8:	b93fffc3 	ldbu	r4,-1(r23)
10006cec:	b8bfffc4 	addi	r2,r23,-1
10006cf0:	1007883a 	mov	r3,r2
10006cf4:	01800e44 	movi	r6,57
10006cf8:	d9c00717 	ldw	r7,28(sp)
10006cfc:	00000506 	br	10006d14 <_dtoa_r+0xcbc>
10006d00:	18ffffc4 	addi	r3,r3,-1
10006d04:	38811926 	beq	r7,r2,1000716c <_dtoa_r+0x1114>
10006d08:	19000003 	ldbu	r4,0(r3)
10006d0c:	102f883a 	mov	r23,r2
10006d10:	10bfffc4 	addi	r2,r2,-1
10006d14:	21403fcc 	andi	r5,r4,255
10006d18:	2940201c 	xori	r5,r5,128
10006d1c:	297fe004 	addi	r5,r5,-128
10006d20:	29bff726 	beq	r5,r6,10006d00 <__alt_data_end+0xf8006d00>
10006d24:	21000044 	addi	r4,r4,1
10006d28:	11000005 	stb	r4,0(r2)
10006d2c:	8009883a 	mov	r4,r16
10006d30:	a80b883a 	mov	r5,r21
10006d34:	000973c0 	call	1000973c <_Bfree>
10006d38:	883e7526 	beq	r17,zero,10006710 <__alt_data_end+0xf8006710>
10006d3c:	90000426 	beq	r18,zero,10006d50 <_dtoa_r+0xcf8>
10006d40:	94400326 	beq	r18,r17,10006d50 <_dtoa_r+0xcf8>
10006d44:	8009883a 	mov	r4,r16
10006d48:	900b883a 	mov	r5,r18
10006d4c:	000973c0 	call	1000973c <_Bfree>
10006d50:	8009883a 	mov	r4,r16
10006d54:	880b883a 	mov	r5,r17
10006d58:	000973c0 	call	1000973c <_Bfree>
10006d5c:	003e6c06 	br	10006710 <__alt_data_end+0xf8006710>
10006d60:	00800704 	movi	r2,28
10006d64:	d9800817 	ldw	r6,32(sp)
10006d68:	a0a9883a 	add	r20,r20,r2
10006d6c:	b0ad883a 	add	r22,r22,r2
10006d70:	308d883a 	add	r6,r6,r2
10006d74:	d9800815 	stw	r6,32(sp)
10006d78:	003fa506 	br	10006c10 <__alt_data_end+0xf8006c10>
10006d7c:	013efb84 	movi	r4,-1042
10006d80:	246bc83a 	sub	r21,r4,r17
10006d84:	9548983a 	sll	r4,r18,r21
10006d88:	003d1806 	br	100061ec <__alt_data_end+0xf80061ec>
10006d8c:	d8000c15 	stw	zero,48(sp)
10006d90:	003d5b06 	br	10006300 <__alt_data_end+0xf8006300>
10006d94:	880b883a 	mov	r5,r17
10006d98:	8009883a 	mov	r4,r16
10006d9c:	01800284 	movi	r6,10
10006da0:	000f883a 	mov	r7,zero
10006da4:	00097640 	call	10009764 <__multadd>
10006da8:	1023883a 	mov	r17,r2
10006dac:	d8800d17 	ldw	r2,52(sp)
10006db0:	0082550e 	bge	zero,r2,10007708 <_dtoa_r+0x16b0>
10006db4:	d8800615 	stw	r2,24(sp)
10006db8:	0500050e 	bge	zero,r20,10006dd0 <_dtoa_r+0xd78>
10006dbc:	880b883a 	mov	r5,r17
10006dc0:	8009883a 	mov	r4,r16
10006dc4:	a00d883a 	mov	r6,r20
10006dc8:	0009ec80 	call	10009ec8 <__lshift>
10006dcc:	1023883a 	mov	r17,r2
10006dd0:	98016a1e 	bne	r19,zero,1000737c <_dtoa_r+0x1324>
10006dd4:	8829883a 	mov	r20,r17
10006dd8:	d9000617 	ldw	r4,24(sp)
10006ddc:	dcc00717 	ldw	r19,28(sp)
10006de0:	9480004c 	andi	r18,r18,1
10006de4:	20bfffc4 	addi	r2,r4,-1
10006de8:	9885883a 	add	r2,r19,r2
10006dec:	d8800415 	stw	r2,16(sp)
10006df0:	dc800615 	stw	r18,24(sp)
10006df4:	e009883a 	mov	r4,fp
10006df8:	a80b883a 	mov	r5,r21
10006dfc:	0005e300 	call	10005e30 <quorem>
10006e00:	e009883a 	mov	r4,fp
10006e04:	880b883a 	mov	r5,r17
10006e08:	102f883a 	mov	r23,r2
10006e0c:	000a0100 	call	1000a010 <__mcmp>
10006e10:	8009883a 	mov	r4,r16
10006e14:	a80b883a 	mov	r5,r21
10006e18:	a00d883a 	mov	r6,r20
10006e1c:	102d883a 	mov	r22,r2
10006e20:	000a0700 	call	1000a070 <__mdiff>
10006e24:	1007883a 	mov	r3,r2
10006e28:	10800317 	ldw	r2,12(r2)
10006e2c:	bc800c04 	addi	r18,r23,48
10006e30:	1000971e 	bne	r2,zero,10007090 <_dtoa_r+0x1038>
10006e34:	180b883a 	mov	r5,r3
10006e38:	e009883a 	mov	r4,fp
10006e3c:	d8c01515 	stw	r3,84(sp)
10006e40:	000a0100 	call	1000a010 <__mcmp>
10006e44:	d8c01517 	ldw	r3,84(sp)
10006e48:	8009883a 	mov	r4,r16
10006e4c:	d8801515 	stw	r2,84(sp)
10006e50:	180b883a 	mov	r5,r3
10006e54:	000973c0 	call	1000973c <_Bfree>
10006e58:	d8801517 	ldw	r2,84(sp)
10006e5c:	1000041e 	bne	r2,zero,10006e70 <_dtoa_r+0xe18>
10006e60:	d9800317 	ldw	r6,12(sp)
10006e64:	3000021e 	bne	r6,zero,10006e70 <_dtoa_r+0xe18>
10006e68:	d8c00617 	ldw	r3,24(sp)
10006e6c:	18007626 	beq	r3,zero,10007048 <_dtoa_r+0xff0>
10006e70:	b0005b16 	blt	r22,zero,10006fe0 <_dtoa_r+0xf88>
10006e74:	b000041e 	bne	r22,zero,10006e88 <_dtoa_r+0xe30>
10006e78:	d9000317 	ldw	r4,12(sp)
10006e7c:	2000021e 	bne	r4,zero,10006e88 <_dtoa_r+0xe30>
10006e80:	d8c00617 	ldw	r3,24(sp)
10006e84:	18005626 	beq	r3,zero,10006fe0 <_dtoa_r+0xf88>
10006e88:	00814d16 	blt	zero,r2,100073c0 <_dtoa_r+0x1368>
10006e8c:	d8c00417 	ldw	r3,16(sp)
10006e90:	9d800044 	addi	r22,r19,1
10006e94:	9c800005 	stb	r18,0(r19)
10006e98:	b02f883a 	mov	r23,r22
10006e9c:	98c14c26 	beq	r19,r3,100073d0 <_dtoa_r+0x1378>
10006ea0:	e00b883a 	mov	r5,fp
10006ea4:	8009883a 	mov	r4,r16
10006ea8:	01800284 	movi	r6,10
10006eac:	000f883a 	mov	r7,zero
10006eb0:	00097640 	call	10009764 <__multadd>
10006eb4:	1039883a 	mov	fp,r2
10006eb8:	8d006d26 	beq	r17,r20,10007070 <_dtoa_r+0x1018>
10006ebc:	880b883a 	mov	r5,r17
10006ec0:	01800284 	movi	r6,10
10006ec4:	000f883a 	mov	r7,zero
10006ec8:	8009883a 	mov	r4,r16
10006ecc:	00097640 	call	10009764 <__multadd>
10006ed0:	a00b883a 	mov	r5,r20
10006ed4:	8009883a 	mov	r4,r16
10006ed8:	01800284 	movi	r6,10
10006edc:	000f883a 	mov	r7,zero
10006ee0:	1023883a 	mov	r17,r2
10006ee4:	00097640 	call	10009764 <__multadd>
10006ee8:	1029883a 	mov	r20,r2
10006eec:	b027883a 	mov	r19,r22
10006ef0:	003fc006 	br	10006df4 <__alt_data_end+0xf8006df4>
10006ef4:	a005883a 	mov	r2,r20
10006ef8:	003ede06 	br	10006a74 <__alt_data_end+0xf8006a74>
10006efc:	01000044 	movi	r4,1
10006f00:	d9000b15 	stw	r4,44(sp)
10006f04:	d9802217 	ldw	r6,136(sp)
10006f08:	0180dc0e 	bge	zero,r6,1000727c <_dtoa_r+0x1224>
10006f0c:	3023883a 	mov	r17,r6
10006f10:	d9800d15 	stw	r6,52(sp)
10006f14:	d9800615 	stw	r6,24(sp)
10006f18:	003d1e06 	br	10006394 <__alt_data_end+0xf8006394>
10006f1c:	d8800617 	ldw	r2,24(sp)
10006f20:	00be3716 	blt	zero,r2,10006800 <__alt_data_end+0xf8006800>
10006f24:	1000be1e 	bne	r2,zero,10007220 <_dtoa_r+0x11c8>
10006f28:	8809883a 	mov	r4,r17
10006f2c:	a00b883a 	mov	r5,r20
10006f30:	000d883a 	mov	r6,zero
10006f34:	01d00534 	movhi	r7,16404
10006f38:	000ee880 	call	1000ee88 <__muldf3>
10006f3c:	1009883a 	mov	r4,r2
10006f40:	180b883a 	mov	r5,r3
10006f44:	900d883a 	mov	r6,r18
10006f48:	980f883a 	mov	r7,r19
10006f4c:	000ecc80 	call	1000ecc8 <__gedf2>
10006f50:	002b883a 	mov	r21,zero
10006f54:	0023883a 	mov	r17,zero
10006f58:	10007a16 	blt	r2,zero,10007144 <_dtoa_r+0x10ec>
10006f5c:	d9002217 	ldw	r4,136(sp)
10006f60:	ddc00717 	ldw	r23,28(sp)
10006f64:	0108303a 	nor	r4,zero,r4
10006f68:	d9000515 	stw	r4,20(sp)
10006f6c:	8009883a 	mov	r4,r16
10006f70:	a80b883a 	mov	r5,r21
10006f74:	000973c0 	call	1000973c <_Bfree>
10006f78:	883f751e 	bne	r17,zero,10006d50 <__alt_data_end+0xf8006d50>
10006f7c:	003de406 	br	10006710 <__alt_data_end+0xf8006710>
10006f80:	e00b883a 	mov	r5,fp
10006f84:	8009883a 	mov	r4,r16
10006f88:	0009d880 	call	10009d88 <__pow5mult>
10006f8c:	1039883a 	mov	fp,r2
10006f90:	003ed306 	br	10006ae0 <__alt_data_end+0xf8006ae0>
10006f94:	903ee01e 	bne	r18,zero,10006b18 <__alt_data_end+0xf8006b18>
10006f98:	00800434 	movhi	r2,16
10006f9c:	10bfffc4 	addi	r2,r2,-1
10006fa0:	9884703a 	and	r2,r19,r2
10006fa4:	103f081e 	bne	r2,zero,10006bc8 <__alt_data_end+0xf8006bc8>
10006fa8:	9cdffc2c 	andhi	r19,r19,32752
10006fac:	983f0626 	beq	r19,zero,10006bc8 <__alt_data_end+0xf8006bc8>
10006fb0:	d8800817 	ldw	r2,32(sp)
10006fb4:	b5800044 	addi	r22,r22,1
10006fb8:	04c00044 	movi	r19,1
10006fbc:	10800044 	addi	r2,r2,1
10006fc0:	d8800815 	stw	r2,32(sp)
10006fc4:	003f0106 	br	10006bcc <__alt_data_end+0xf8006bcc>
10006fc8:	d9800f17 	ldw	r6,60(sp)
10006fcc:	30016826 	beq	r6,zero,10007570 <_dtoa_r+0x1518>
10006fd0:	10810cc4 	addi	r2,r2,1075
10006fd4:	dd400917 	ldw	r21,36(sp)
10006fd8:	dd000817 	ldw	r20,32(sp)
10006fdc:	003e9906 	br	10006a44 <__alt_data_end+0xf8006a44>
10006fe0:	9011883a 	mov	r8,r18
10006fe4:	4007883a 	mov	r3,r8
10006fe8:	e02d883a 	mov	r22,fp
10006fec:	0080100e 	bge	zero,r2,10007030 <_dtoa_r+0xfd8>
10006ff0:	01800044 	movi	r6,1
10006ff4:	8009883a 	mov	r4,r16
10006ff8:	e00b883a 	mov	r5,fp
10006ffc:	da001515 	stw	r8,84(sp)
10007000:	da001715 	stw	r8,92(sp)
10007004:	0009ec80 	call	10009ec8 <__lshift>
10007008:	1009883a 	mov	r4,r2
1000700c:	a80b883a 	mov	r5,r21
10007010:	102d883a 	mov	r22,r2
10007014:	000a0100 	call	1000a010 <__mcmp>
10007018:	d8c01517 	ldw	r3,84(sp)
1000701c:	da001717 	ldw	r8,92(sp)
10007020:	0081a50e 	bge	zero,r2,100076b8 <_dtoa_r+0x1660>
10007024:	00800e44 	movi	r2,57
10007028:	40817b26 	beq	r8,r2,10007618 <_dtoa_r+0x15c0>
1000702c:	40c00044 	addi	r3,r8,1
10007030:	8825883a 	mov	r18,r17
10007034:	9dc00044 	addi	r23,r19,1
10007038:	98c00005 	stb	r3,0(r19)
1000703c:	a023883a 	mov	r17,r20
10007040:	b039883a 	mov	fp,r22
10007044:	003f3906 	br	10006d2c <__alt_data_end+0xf8006d2c>
10007048:	00800e44 	movi	r2,57
1000704c:	9011883a 	mov	r8,r18
10007050:	90817226 	beq	r18,r2,1000761c <_dtoa_r+0x15c4>
10007054:	0580010e 	bge	zero,r22,1000705c <_dtoa_r+0x1004>
10007058:	ba000c44 	addi	r8,r23,49
1000705c:	8825883a 	mov	r18,r17
10007060:	9dc00044 	addi	r23,r19,1
10007064:	9a000005 	stb	r8,0(r19)
10007068:	a023883a 	mov	r17,r20
1000706c:	003f2f06 	br	10006d2c <__alt_data_end+0xf8006d2c>
10007070:	880b883a 	mov	r5,r17
10007074:	8009883a 	mov	r4,r16
10007078:	01800284 	movi	r6,10
1000707c:	000f883a 	mov	r7,zero
10007080:	00097640 	call	10009764 <__multadd>
10007084:	1023883a 	mov	r17,r2
10007088:	1029883a 	mov	r20,r2
1000708c:	003f9706 	br	10006eec <__alt_data_end+0xf8006eec>
10007090:	8009883a 	mov	r4,r16
10007094:	180b883a 	mov	r5,r3
10007098:	000973c0 	call	1000973c <_Bfree>
1000709c:	00800044 	movi	r2,1
100070a0:	003f7306 	br	10006e70 <__alt_data_end+0xf8006e70>
100070a4:	e009883a 	mov	r4,fp
100070a8:	a80b883a 	mov	r5,r21
100070ac:	000a0100 	call	1000a010 <__mcmp>
100070b0:	103ee60e 	bge	r2,zero,10006c4c <__alt_data_end+0xf8006c4c>
100070b4:	8009883a 	mov	r4,r16
100070b8:	e00b883a 	mov	r5,fp
100070bc:	01800284 	movi	r6,10
100070c0:	000f883a 	mov	r7,zero
100070c4:	00097640 	call	10009764 <__multadd>
100070c8:	d9000517 	ldw	r4,20(sp)
100070cc:	d9800b17 	ldw	r6,44(sp)
100070d0:	1039883a 	mov	fp,r2
100070d4:	213fffc4 	addi	r4,r4,-1
100070d8:	d9000515 	stw	r4,20(sp)
100070dc:	303f2d1e 	bne	r6,zero,10006d94 <__alt_data_end+0xf8006d94>
100070e0:	d9000d17 	ldw	r4,52(sp)
100070e4:	0101780e 	bge	zero,r4,100076c8 <_dtoa_r+0x1670>
100070e8:	d9000615 	stw	r4,24(sp)
100070ec:	003edb06 	br	10006c5c <__alt_data_end+0xf8006c5c>
100070f0:	00800084 	movi	r2,2
100070f4:	30818e1e 	bne	r6,r2,10007730 <_dtoa_r+0x16d8>
100070f8:	d8000b15 	stw	zero,44(sp)
100070fc:	003f8106 	br	10006f04 <__alt_data_end+0xf8006f04>
10007100:	d8800717 	ldw	r2,28(sp)
10007104:	003c0306 	br	10006114 <__alt_data_end+0xf8006114>
10007108:	d9000317 	ldw	r4,12(sp)
1000710c:	00800084 	movi	r2,2
10007110:	113ed00e 	bge	r2,r4,10006c54 <__alt_data_end+0xf8006c54>
10007114:	d8c00617 	ldw	r3,24(sp)
10007118:	183f901e 	bne	r3,zero,10006f5c <__alt_data_end+0xf8006f5c>
1000711c:	a80b883a 	mov	r5,r21
10007120:	8009883a 	mov	r4,r16
10007124:	01800144 	movi	r6,5
10007128:	000f883a 	mov	r7,zero
1000712c:	00097640 	call	10009764 <__multadd>
10007130:	e009883a 	mov	r4,fp
10007134:	100b883a 	mov	r5,r2
10007138:	102b883a 	mov	r21,r2
1000713c:	000a0100 	call	1000a010 <__mcmp>
10007140:	00bf860e 	bge	zero,r2,10006f5c <__alt_data_end+0xf8006f5c>
10007144:	d9800717 	ldw	r6,28(sp)
10007148:	00800c44 	movi	r2,49
1000714c:	30800005 	stb	r2,0(r6)
10007150:	d8800517 	ldw	r2,20(sp)
10007154:	35c00044 	addi	r23,r6,1
10007158:	10800044 	addi	r2,r2,1
1000715c:	d8800515 	stw	r2,20(sp)
10007160:	003f8206 	br	10006f6c <__alt_data_end+0xf8006f6c>
10007164:	903e981e 	bne	r18,zero,10006bc8 <__alt_data_end+0xf8006bc8>
10007168:	003f8b06 	br	10006f98 <__alt_data_end+0xf8006f98>
1000716c:	d9800517 	ldw	r6,20(sp)
10007170:	d8c00717 	ldw	r3,28(sp)
10007174:	00800c44 	movi	r2,49
10007178:	31800044 	addi	r6,r6,1
1000717c:	d9800515 	stw	r6,20(sp)
10007180:	18800005 	stb	r2,0(r3)
10007184:	003ee906 	br	10006d2c <__alt_data_end+0xf8006d2c>
10007188:	dc000317 	ldw	r16,12(sp)
1000718c:	003d6006 	br	10006710 <__alt_data_end+0xf8006710>
10007190:	8809883a 	mov	r4,r17
10007194:	001004c0 	call	1001004c <__floatsidf>
10007198:	a009883a 	mov	r4,r20
1000719c:	a80b883a 	mov	r5,r21
100071a0:	100d883a 	mov	r6,r2
100071a4:	180f883a 	mov	r7,r3
100071a8:	000ee880 	call	1000ee88 <__muldf3>
100071ac:	1009883a 	mov	r4,r2
100071b0:	180b883a 	mov	r5,r3
100071b4:	000d883a 	mov	r6,zero
100071b8:	01d00734 	movhi	r7,16412
100071bc:	000da280 	call	1000da28 <__adddf3>
100071c0:	1023883a 	mov	r17,r2
100071c4:	00bf3034 	movhi	r2,64704
100071c8:	1885883a 	add	r2,r3,r2
100071cc:	d8800e15 	stw	r2,56(sp)
100071d0:	a009883a 	mov	r4,r20
100071d4:	a80b883a 	mov	r5,r21
100071d8:	000d883a 	mov	r6,zero
100071dc:	01d00534 	movhi	r7,16404
100071e0:	000f6f40 	call	1000f6f4 <__subdf3>
100071e4:	d9c00e17 	ldw	r7,56(sp)
100071e8:	1009883a 	mov	r4,r2
100071ec:	180b883a 	mov	r5,r3
100071f0:	880d883a 	mov	r6,r17
100071f4:	102b883a 	mov	r21,r2
100071f8:	1829883a 	mov	r20,r3
100071fc:	000ecc80 	call	1000ecc8 <__gedf2>
10007200:	00807716 	blt	zero,r2,100073e0 <_dtoa_r+0x1388>
10007204:	d8800e17 	ldw	r2,56(sp)
10007208:	a809883a 	mov	r4,r21
1000720c:	a00b883a 	mov	r5,r20
10007210:	11e0003c 	xorhi	r7,r2,32768
10007214:	880d883a 	mov	r6,r17
10007218:	000eda80 	call	1000eda8 <__ledf2>
1000721c:	103d6b0e 	bge	r2,zero,100067cc <__alt_data_end+0xf80067cc>
10007220:	002b883a 	mov	r21,zero
10007224:	0023883a 	mov	r17,zero
10007228:	003f4c06 	br	10006f5c <__alt_data_end+0xf8006f5c>
1000722c:	d9800917 	ldw	r6,36(sp)
10007230:	e00b883a 	mov	r5,fp
10007234:	8009883a 	mov	r4,r16
10007238:	0009d880 	call	10009d88 <__pow5mult>
1000723c:	1039883a 	mov	fp,r2
10007240:	003e2706 	br	10006ae0 <__alt_data_end+0xf8006ae0>
10007244:	d8000b15 	stw	zero,44(sp)
10007248:	003c4906 	br	10006370 <__alt_data_end+0xf8006370>
1000724c:	d9000917 	ldw	r4,36(sp)
10007250:	d9800a17 	ldw	r6,40(sp)
10007254:	dd400915 	stw	r21,36(sp)
10007258:	a905c83a 	sub	r2,r21,r4
1000725c:	308d883a 	add	r6,r6,r2
10007260:	d9800a15 	stw	r6,40(sp)
10007264:	002b883a 	mov	r21,zero
10007268:	003df206 	br	10006a34 <__alt_data_end+0xf8006a34>
1000726c:	dc800e15 	stw	r18,56(sp)
10007270:	982b883a 	mov	r21,r19
10007274:	04400084 	movi	r17,2
10007278:	003c7406 	br	1000644c <__alt_data_end+0xf800644c>
1000727c:	04400044 	movi	r17,1
10007280:	dc400d15 	stw	r17,52(sp)
10007284:	dc400615 	stw	r17,24(sp)
10007288:	dc402215 	stw	r17,136(sp)
1000728c:	80001115 	stw	zero,68(r16)
10007290:	000b883a 	mov	r5,zero
10007294:	003c4a06 	br	100063c0 <__alt_data_end+0xf80063c0>
10007298:	3023883a 	mov	r17,r6
1000729c:	003ffb06 	br	1000728c <__alt_data_end+0xf800728c>
100072a0:	1000021e 	bne	r2,zero,100072ac <_dtoa_r+0x1254>
100072a4:	4200004c 	andi	r8,r8,1
100072a8:	403e8f1e 	bne	r8,zero,10006ce8 <__alt_data_end+0xf8006ce8>
100072ac:	01000c04 	movi	r4,48
100072b0:	00000106 	br	100072b8 <_dtoa_r+0x1260>
100072b4:	102f883a 	mov	r23,r2
100072b8:	b8bfffc4 	addi	r2,r23,-1
100072bc:	10c00007 	ldb	r3,0(r2)
100072c0:	193ffc26 	beq	r3,r4,100072b4 <__alt_data_end+0xf80072b4>
100072c4:	003e9906 	br	10006d2c <__alt_data_end+0xf8006d2c>
100072c8:	d9000517 	ldw	r4,20(sp)
100072cc:	012fc83a 	sub	r23,zero,r4
100072d0:	b800ad26 	beq	r23,zero,10007588 <_dtoa_r+0x1530>
100072d4:	b88003cc 	andi	r2,r23,15
100072d8:	100490fa 	slli	r2,r2,3
100072dc:	00c40074 	movhi	r3,4097
100072e0:	18ccae04 	addi	r3,r3,12984
100072e4:	1885883a 	add	r2,r3,r2
100072e8:	11800017 	ldw	r6,0(r2)
100072ec:	11c00117 	ldw	r7,4(r2)
100072f0:	b82fd13a 	srai	r23,r23,4
100072f4:	9009883a 	mov	r4,r18
100072f8:	980b883a 	mov	r5,r19
100072fc:	000ee880 	call	1000ee88 <__muldf3>
10007300:	1029883a 	mov	r20,r2
10007304:	182b883a 	mov	r21,r3
10007308:	b800f426 	beq	r23,zero,100076dc <_dtoa_r+0x1684>
1000730c:	02040074 	movhi	r8,4097
10007310:	420ca404 	addi	r8,r8,12944
10007314:	8029883a 	mov	r20,r16
10007318:	04400084 	movi	r17,2
1000731c:	4021883a 	mov	r16,r8
10007320:	b980004c 	andi	r6,r23,1
10007324:	1009883a 	mov	r4,r2
10007328:	b82fd07a 	srai	r23,r23,1
1000732c:	180b883a 	mov	r5,r3
10007330:	30000426 	beq	r6,zero,10007344 <_dtoa_r+0x12ec>
10007334:	81800017 	ldw	r6,0(r16)
10007338:	81c00117 	ldw	r7,4(r16)
1000733c:	8c400044 	addi	r17,r17,1
10007340:	000ee880 	call	1000ee88 <__muldf3>
10007344:	84000204 	addi	r16,r16,8
10007348:	b83ff51e 	bne	r23,zero,10007320 <__alt_data_end+0xf8007320>
1000734c:	a021883a 	mov	r16,r20
10007350:	182b883a 	mov	r21,r3
10007354:	1029883a 	mov	r20,r2
10007358:	003c5506 	br	100064b0 <__alt_data_end+0xf80064b0>
1000735c:	d9800517 	ldw	r6,20(sp)
10007360:	d9000717 	ldw	r4,28(sp)
10007364:	00c00c04 	movi	r3,48
10007368:	31800044 	addi	r6,r6,1
1000736c:	d9800515 	stw	r6,20(sp)
10007370:	20c00005 	stb	r3,0(r4)
10007374:	02000c44 	movi	r8,49
10007378:	003da206 	br	10006a04 <__alt_data_end+0xf8006a04>
1000737c:	89400117 	ldw	r5,4(r17)
10007380:	8009883a 	mov	r4,r16
10007384:	00096940 	call	10009694 <_Balloc>
10007388:	89800417 	ldw	r6,16(r17)
1000738c:	11000304 	addi	r4,r2,12
10007390:	89400304 	addi	r5,r17,12
10007394:	31800084 	addi	r6,r6,2
10007398:	318d883a 	add	r6,r6,r6
1000739c:	318d883a 	add	r6,r6,r6
100073a0:	1027883a 	mov	r19,r2
100073a4:	00092dc0 	call	100092dc <memcpy>
100073a8:	8009883a 	mov	r4,r16
100073ac:	980b883a 	mov	r5,r19
100073b0:	01800044 	movi	r6,1
100073b4:	0009ec80 	call	10009ec8 <__lshift>
100073b8:	1029883a 	mov	r20,r2
100073bc:	003e8606 	br	10006dd8 <__alt_data_end+0xf8006dd8>
100073c0:	00800e44 	movi	r2,57
100073c4:	90809526 	beq	r18,r2,1000761c <_dtoa_r+0x15c4>
100073c8:	92000044 	addi	r8,r18,1
100073cc:	003f2306 	br	1000705c <__alt_data_end+0xf800705c>
100073d0:	9011883a 	mov	r8,r18
100073d4:	8825883a 	mov	r18,r17
100073d8:	a023883a 	mov	r17,r20
100073dc:	003e3706 	br	10006cbc <__alt_data_end+0xf8006cbc>
100073e0:	002b883a 	mov	r21,zero
100073e4:	0023883a 	mov	r17,zero
100073e8:	003f5606 	br	10007144 <__alt_data_end+0xf8007144>
100073ec:	51bfffc4 	addi	r6,r10,-1
100073f0:	300490fa 	slli	r2,r6,3
100073f4:	00c40074 	movhi	r3,4097
100073f8:	18ccae04 	addi	r3,r3,12984
100073fc:	1885883a 	add	r2,r3,r2
10007400:	d9c00e17 	ldw	r7,56(sp)
10007404:	11000017 	ldw	r4,0(r2)
10007408:	11400117 	ldw	r5,4(r2)
1000740c:	d8800717 	ldw	r2,28(sp)
10007410:	d9801015 	stw	r6,64(sp)
10007414:	880d883a 	mov	r6,r17
10007418:	da801615 	stw	r10,88(sp)
1000741c:	15c00044 	addi	r23,r2,1
10007420:	000ee880 	call	1000ee88 <__muldf3>
10007424:	a80b883a 	mov	r5,r21
10007428:	a009883a 	mov	r4,r20
1000742c:	d8c01115 	stw	r3,68(sp)
10007430:	d8800e15 	stw	r2,56(sp)
10007434:	000ffc40 	call	1000ffc4 <__fixdfsi>
10007438:	1009883a 	mov	r4,r2
1000743c:	1023883a 	mov	r17,r2
10007440:	001004c0 	call	1001004c <__floatsidf>
10007444:	a009883a 	mov	r4,r20
10007448:	a80b883a 	mov	r5,r21
1000744c:	100d883a 	mov	r6,r2
10007450:	180f883a 	mov	r7,r3
10007454:	000f6f40 	call	1000f6f4 <__subdf3>
10007458:	1813883a 	mov	r9,r3
1000745c:	d8c00717 	ldw	r3,28(sp)
10007460:	8c400c04 	addi	r17,r17,48
10007464:	1011883a 	mov	r8,r2
10007468:	1c400005 	stb	r17,0(r3)
1000746c:	da801617 	ldw	r10,88(sp)
10007470:	00800044 	movi	r2,1
10007474:	50802326 	beq	r10,r2,10007504 <_dtoa_r+0x14ac>
10007478:	d8800717 	ldw	r2,28(sp)
1000747c:	b82b883a 	mov	r21,r23
10007480:	dc001315 	stw	r16,76(sp)
10007484:	12a9883a 	add	r20,r2,r10
10007488:	4807883a 	mov	r3,r9
1000748c:	4005883a 	mov	r2,r8
10007490:	dc801415 	stw	r18,80(sp)
10007494:	000d883a 	mov	r6,zero
10007498:	01d00934 	movhi	r7,16420
1000749c:	1009883a 	mov	r4,r2
100074a0:	180b883a 	mov	r5,r3
100074a4:	000ee880 	call	1000ee88 <__muldf3>
100074a8:	180b883a 	mov	r5,r3
100074ac:	1009883a 	mov	r4,r2
100074b0:	1821883a 	mov	r16,r3
100074b4:	1025883a 	mov	r18,r2
100074b8:	000ffc40 	call	1000ffc4 <__fixdfsi>
100074bc:	1009883a 	mov	r4,r2
100074c0:	1023883a 	mov	r17,r2
100074c4:	001004c0 	call	1001004c <__floatsidf>
100074c8:	9009883a 	mov	r4,r18
100074cc:	800b883a 	mov	r5,r16
100074d0:	100d883a 	mov	r6,r2
100074d4:	180f883a 	mov	r7,r3
100074d8:	8c400c04 	addi	r17,r17,48
100074dc:	000f6f40 	call	1000f6f4 <__subdf3>
100074e0:	ad400044 	addi	r21,r21,1
100074e4:	ac7fffc5 	stb	r17,-1(r21)
100074e8:	ad3fea1e 	bne	r21,r20,10007494 <__alt_data_end+0xf8007494>
100074ec:	1813883a 	mov	r9,r3
100074f0:	d8c01017 	ldw	r3,64(sp)
100074f4:	dc001317 	ldw	r16,76(sp)
100074f8:	dc801417 	ldw	r18,80(sp)
100074fc:	1011883a 	mov	r8,r2
10007500:	b8ef883a 	add	r23,r23,r3
10007504:	d9000e17 	ldw	r4,56(sp)
10007508:	d9401117 	ldw	r5,68(sp)
1000750c:	000d883a 	mov	r6,zero
10007510:	01cff834 	movhi	r7,16352
10007514:	da001715 	stw	r8,92(sp)
10007518:	da401515 	stw	r9,84(sp)
1000751c:	000da280 	call	1000da28 <__adddf3>
10007520:	da001717 	ldw	r8,92(sp)
10007524:	da401517 	ldw	r9,84(sp)
10007528:	1009883a 	mov	r4,r2
1000752c:	400d883a 	mov	r6,r8
10007530:	480f883a 	mov	r7,r9
10007534:	180b883a 	mov	r5,r3
10007538:	000eda80 	call	1000eda8 <__ledf2>
1000753c:	da001717 	ldw	r8,92(sp)
10007540:	da401517 	ldw	r9,84(sp)
10007544:	10003b0e 	bge	r2,zero,10007634 <_dtoa_r+0x15dc>
10007548:	d9001217 	ldw	r4,72(sp)
1000754c:	bd7fffc3 	ldbu	r21,-1(r23)
10007550:	d9000515 	stw	r4,20(sp)
10007554:	003d1c06 	br	100069c8 <__alt_data_end+0xf80069c8>
10007558:	d8c00817 	ldw	r3,32(sp)
1000755c:	18a9c83a 	sub	r20,r3,r2
10007560:	0005883a 	mov	r2,zero
10007564:	003d3706 	br	10006a44 <__alt_data_end+0xf8006a44>
10007568:	00800044 	movi	r2,1
1000756c:	003dd006 	br	10006cb0 <__alt_data_end+0xf8006cb0>
10007570:	d8c00217 	ldw	r3,8(sp)
10007574:	00800d84 	movi	r2,54
10007578:	dd400917 	ldw	r21,36(sp)
1000757c:	10c5c83a 	sub	r2,r2,r3
10007580:	dd000817 	ldw	r20,32(sp)
10007584:	003d2f06 	br	10006a44 <__alt_data_end+0xf8006a44>
10007588:	9029883a 	mov	r20,r18
1000758c:	982b883a 	mov	r21,r19
10007590:	04400084 	movi	r17,2
10007594:	003bc606 	br	100064b0 <__alt_data_end+0xf80064b0>
10007598:	d8800617 	ldw	r2,24(sp)
1000759c:	103efc26 	beq	r2,zero,10007190 <__alt_data_end+0xf8007190>
100075a0:	d8c00d17 	ldw	r3,52(sp)
100075a4:	00fc890e 	bge	zero,r3,100067cc <__alt_data_end+0xf80067cc>
100075a8:	a80b883a 	mov	r5,r21
100075ac:	a009883a 	mov	r4,r20
100075b0:	000d883a 	mov	r6,zero
100075b4:	01d00934 	movhi	r7,16420
100075b8:	000ee880 	call	1000ee88 <__muldf3>
100075bc:	89000044 	addi	r4,r17,1
100075c0:	1029883a 	mov	r20,r2
100075c4:	182b883a 	mov	r21,r3
100075c8:	001004c0 	call	1001004c <__floatsidf>
100075cc:	a009883a 	mov	r4,r20
100075d0:	a80b883a 	mov	r5,r21
100075d4:	100d883a 	mov	r6,r2
100075d8:	180f883a 	mov	r7,r3
100075dc:	000ee880 	call	1000ee88 <__muldf3>
100075e0:	1009883a 	mov	r4,r2
100075e4:	180b883a 	mov	r5,r3
100075e8:	000d883a 	mov	r6,zero
100075ec:	01d00734 	movhi	r7,16412
100075f0:	000da280 	call	1000da28 <__adddf3>
100075f4:	d9000517 	ldw	r4,20(sp)
100075f8:	1023883a 	mov	r17,r2
100075fc:	00bf3034 	movhi	r2,64704
10007600:	213fffc4 	addi	r4,r4,-1
10007604:	1885883a 	add	r2,r3,r2
10007608:	d9001215 	stw	r4,72(sp)
1000760c:	d8800e15 	stw	r2,56(sp)
10007610:	da800d17 	ldw	r10,52(sp)
10007614:	003bc306 	br	10006524 <__alt_data_end+0xf8006524>
10007618:	b039883a 	mov	fp,r22
1000761c:	01000e44 	movi	r4,57
10007620:	8825883a 	mov	r18,r17
10007624:	9dc00044 	addi	r23,r19,1
10007628:	99000005 	stb	r4,0(r19)
1000762c:	a023883a 	mov	r17,r20
10007630:	003dae06 	br	10006cec <__alt_data_end+0xf8006cec>
10007634:	d9800e17 	ldw	r6,56(sp)
10007638:	d9c01117 	ldw	r7,68(sp)
1000763c:	0009883a 	mov	r4,zero
10007640:	014ff834 	movhi	r5,16352
10007644:	da001715 	stw	r8,92(sp)
10007648:	da401515 	stw	r9,84(sp)
1000764c:	000f6f40 	call	1000f6f4 <__subdf3>
10007650:	da001717 	ldw	r8,92(sp)
10007654:	da401517 	ldw	r9,84(sp)
10007658:	1009883a 	mov	r4,r2
1000765c:	180b883a 	mov	r5,r3
10007660:	400d883a 	mov	r6,r8
10007664:	480f883a 	mov	r7,r9
10007668:	000ecc80 	call	1000ecc8 <__gedf2>
1000766c:	00bc570e 	bge	zero,r2,100067cc <__alt_data_end+0xf80067cc>
10007670:	01000c04 	movi	r4,48
10007674:	00000106 	br	1000767c <_dtoa_r+0x1624>
10007678:	102f883a 	mov	r23,r2
1000767c:	b8bfffc4 	addi	r2,r23,-1
10007680:	10c00007 	ldb	r3,0(r2)
10007684:	193ffc26 	beq	r3,r4,10007678 <__alt_data_end+0xf8007678>
10007688:	d9801217 	ldw	r6,72(sp)
1000768c:	d9800515 	stw	r6,20(sp)
10007690:	003c1f06 	br	10006710 <__alt_data_end+0xf8006710>
10007694:	d8801217 	ldw	r2,72(sp)
10007698:	dc001117 	ldw	r16,68(sp)
1000769c:	d8800515 	stw	r2,20(sp)
100076a0:	003cc906 	br	100069c8 <__alt_data_end+0xf80069c8>
100076a4:	dd801317 	ldw	r22,76(sp)
100076a8:	dc001117 	ldw	r16,68(sp)
100076ac:	dcc01417 	ldw	r19,80(sp)
100076b0:	dc801017 	ldw	r18,64(sp)
100076b4:	003c4506 	br	100067cc <__alt_data_end+0xf80067cc>
100076b8:	103e5d1e 	bne	r2,zero,10007030 <__alt_data_end+0xf8007030>
100076bc:	4080004c 	andi	r2,r8,1
100076c0:	103e5b26 	beq	r2,zero,10007030 <__alt_data_end+0xf8007030>
100076c4:	003e5706 	br	10007024 <__alt_data_end+0xf8007024>
100076c8:	d8c00317 	ldw	r3,12(sp)
100076cc:	00800084 	movi	r2,2
100076d0:	10c00a16 	blt	r2,r3,100076fc <_dtoa_r+0x16a4>
100076d4:	d9000d17 	ldw	r4,52(sp)
100076d8:	003e8306 	br	100070e8 <__alt_data_end+0xf80070e8>
100076dc:	04400084 	movi	r17,2
100076e0:	003b7306 	br	100064b0 <__alt_data_end+0xf80064b0>
100076e4:	d9801217 	ldw	r6,72(sp)
100076e8:	d9800515 	stw	r6,20(sp)
100076ec:	003cb606 	br	100069c8 <__alt_data_end+0xf80069c8>
100076f0:	d9001217 	ldw	r4,72(sp)
100076f4:	d9000515 	stw	r4,20(sp)
100076f8:	003c0506 	br	10006710 <__alt_data_end+0xf8006710>
100076fc:	d9800d17 	ldw	r6,52(sp)
10007700:	d9800615 	stw	r6,24(sp)
10007704:	003e8306 	br	10007114 <__alt_data_end+0xf8007114>
10007708:	d9800317 	ldw	r6,12(sp)
1000770c:	00800084 	movi	r2,2
10007710:	11800216 	blt	r2,r6,1000771c <_dtoa_r+0x16c4>
10007714:	d8800d17 	ldw	r2,52(sp)
10007718:	003da606 	br	10006db4 <__alt_data_end+0xf8006db4>
1000771c:	d8800d17 	ldw	r2,52(sp)
10007720:	d8800615 	stw	r2,24(sp)
10007724:	003e7b06 	br	10007114 <__alt_data_end+0xf8007114>
10007728:	05000044 	movi	r20,1
1000772c:	003b0506 	br	10006344 <__alt_data_end+0xf8006344>
10007730:	8009883a 	mov	r4,r16
10007734:	80001115 	stw	zero,68(r16)
10007738:	000b883a 	mov	r5,zero
1000773c:	00096940 	call	10009694 <_Balloc>
10007740:	d8800715 	stw	r2,28(sp)
10007744:	d8c00717 	ldw	r3,28(sp)
10007748:	00bfffc4 	movi	r2,-1
1000774c:	01000044 	movi	r4,1
10007750:	d8800615 	stw	r2,24(sp)
10007754:	80c01015 	stw	r3,64(r16)
10007758:	d9000b15 	stw	r4,44(sp)
1000775c:	d8002215 	stw	zero,136(sp)
10007760:	d8800d15 	stw	r2,52(sp)
10007764:	003c1906 	br	100067cc <__alt_data_end+0xf80067cc>
10007768:	193d2926 	beq	r3,r4,10006c10 <__alt_data_end+0xf8006c10>
1000776c:	00c00f04 	movi	r3,60
10007770:	1885c83a 	sub	r2,r3,r2
10007774:	003d7b06 	br	10006d64 <__alt_data_end+0xf8006d64>
10007778:	000b883a 	mov	r5,zero
1000777c:	003b1006 	br	100063c0 <__alt_data_end+0xf80063c0>

10007780 <_fflush_r>:
10007780:	defffb04 	addi	sp,sp,-20
10007784:	dcc00315 	stw	r19,12(sp)
10007788:	dc000015 	stw	r16,0(sp)
1000778c:	dfc00415 	stw	ra,16(sp)
10007790:	dc800215 	stw	r18,8(sp)
10007794:	dc400115 	stw	r17,4(sp)
10007798:	2027883a 	mov	r19,r4
1000779c:	2821883a 	mov	r16,r5
100077a0:	20000226 	beq	r4,zero,100077ac <_fflush_r+0x2c>
100077a4:	20800e17 	ldw	r2,56(r4)
100077a8:	10005326 	beq	r2,zero,100078f8 <_fflush_r+0x178>
100077ac:	8080030b 	ldhu	r2,12(r16)
100077b0:	10ffffcc 	andi	r3,r2,65535
100077b4:	18e0001c 	xori	r3,r3,32768
100077b8:	18e00004 	addi	r3,r3,-32768
100077bc:	18002c26 	beq	r3,zero,10007870 <_fflush_r+0xf0>
100077c0:	10c0020c 	andi	r3,r2,8
100077c4:	1800321e 	bne	r3,zero,10007890 <_fflush_r+0x110>
100077c8:	80c00117 	ldw	r3,4(r16)
100077cc:	10820014 	ori	r2,r2,2048
100077d0:	8080030d 	sth	r2,12(r16)
100077d4:	00c0570e 	bge	zero,r3,10007934 <_fflush_r+0x1b4>
100077d8:	82000a17 	ldw	r8,40(r16)
100077dc:	40002426 	beq	r8,zero,10007870 <_fflush_r+0xf0>
100077e0:	9c400017 	ldw	r17,0(r19)
100077e4:	10c4000c 	andi	r3,r2,4096
100077e8:	98000015 	stw	zero,0(r19)
100077ec:	18004626 	beq	r3,zero,10007908 <_fflush_r+0x188>
100077f0:	81801417 	ldw	r6,80(r16)
100077f4:	10c0010c 	andi	r3,r2,4
100077f8:	18000626 	beq	r3,zero,10007814 <_fflush_r+0x94>
100077fc:	80c00117 	ldw	r3,4(r16)
10007800:	80800c17 	ldw	r2,48(r16)
10007804:	30cdc83a 	sub	r6,r6,r3
10007808:	10000226 	beq	r2,zero,10007814 <_fflush_r+0x94>
1000780c:	80800f17 	ldw	r2,60(r16)
10007810:	308dc83a 	sub	r6,r6,r2
10007814:	81400717 	ldw	r5,28(r16)
10007818:	9809883a 	mov	r4,r19
1000781c:	000f883a 	mov	r7,zero
10007820:	403ee83a 	callr	r8
10007824:	00ffffc4 	movi	r3,-1
10007828:	10c04526 	beq	r2,r3,10007940 <_fflush_r+0x1c0>
1000782c:	80c0030b 	ldhu	r3,12(r16)
10007830:	81000417 	ldw	r4,16(r16)
10007834:	80000115 	stw	zero,4(r16)
10007838:	197dffcc 	andi	r5,r3,63487
1000783c:	8140030d 	sth	r5,12(r16)
10007840:	81000015 	stw	r4,0(r16)
10007844:	18c4000c 	andi	r3,r3,4096
10007848:	18000126 	beq	r3,zero,10007850 <_fflush_r+0xd0>
1000784c:	80801415 	stw	r2,80(r16)
10007850:	81400c17 	ldw	r5,48(r16)
10007854:	9c400015 	stw	r17,0(r19)
10007858:	28000526 	beq	r5,zero,10007870 <_fflush_r+0xf0>
1000785c:	80801004 	addi	r2,r16,64
10007860:	28800226 	beq	r5,r2,1000786c <_fflush_r+0xec>
10007864:	9809883a 	mov	r4,r19
10007868:	0007eb00 	call	10007eb0 <_free_r>
1000786c:	80000c15 	stw	zero,48(r16)
10007870:	0005883a 	mov	r2,zero
10007874:	dfc00417 	ldw	ra,16(sp)
10007878:	dcc00317 	ldw	r19,12(sp)
1000787c:	dc800217 	ldw	r18,8(sp)
10007880:	dc400117 	ldw	r17,4(sp)
10007884:	dc000017 	ldw	r16,0(sp)
10007888:	dec00504 	addi	sp,sp,20
1000788c:	f800283a 	ret
10007890:	84800417 	ldw	r18,16(r16)
10007894:	903ff626 	beq	r18,zero,10007870 <__alt_data_end+0xf8007870>
10007898:	84400017 	ldw	r17,0(r16)
1000789c:	108000cc 	andi	r2,r2,3
100078a0:	84800015 	stw	r18,0(r16)
100078a4:	8ca3c83a 	sub	r17,r17,r18
100078a8:	10001526 	beq	r2,zero,10007900 <_fflush_r+0x180>
100078ac:	0005883a 	mov	r2,zero
100078b0:	80800215 	stw	r2,8(r16)
100078b4:	04400316 	blt	zero,r17,100078c4 <_fflush_r+0x144>
100078b8:	003fed06 	br	10007870 <__alt_data_end+0xf8007870>
100078bc:	90a5883a 	add	r18,r18,r2
100078c0:	047feb0e 	bge	zero,r17,10007870 <__alt_data_end+0xf8007870>
100078c4:	80800917 	ldw	r2,36(r16)
100078c8:	81400717 	ldw	r5,28(r16)
100078cc:	880f883a 	mov	r7,r17
100078d0:	900d883a 	mov	r6,r18
100078d4:	9809883a 	mov	r4,r19
100078d8:	103ee83a 	callr	r2
100078dc:	88a3c83a 	sub	r17,r17,r2
100078e0:	00bff616 	blt	zero,r2,100078bc <__alt_data_end+0xf80078bc>
100078e4:	80c0030b 	ldhu	r3,12(r16)
100078e8:	00bfffc4 	movi	r2,-1
100078ec:	18c01014 	ori	r3,r3,64
100078f0:	80c0030d 	sth	r3,12(r16)
100078f4:	003fdf06 	br	10007874 <__alt_data_end+0xf8007874>
100078f8:	0007d3c0 	call	10007d3c <__sinit>
100078fc:	003fab06 	br	100077ac <__alt_data_end+0xf80077ac>
10007900:	80800517 	ldw	r2,20(r16)
10007904:	003fea06 	br	100078b0 <__alt_data_end+0xf80078b0>
10007908:	81400717 	ldw	r5,28(r16)
1000790c:	000d883a 	mov	r6,zero
10007910:	9809883a 	mov	r4,r19
10007914:	01c00044 	movi	r7,1
10007918:	403ee83a 	callr	r8
1000791c:	100d883a 	mov	r6,r2
10007920:	00bfffc4 	movi	r2,-1
10007924:	30801326 	beq	r6,r2,10007974 <_fflush_r+0x1f4>
10007928:	8080030b 	ldhu	r2,12(r16)
1000792c:	82000a17 	ldw	r8,40(r16)
10007930:	003fb006 	br	100077f4 <__alt_data_end+0xf80077f4>
10007934:	80c00f17 	ldw	r3,60(r16)
10007938:	00ffa716 	blt	zero,r3,100077d8 <__alt_data_end+0xf80077d8>
1000793c:	003fcc06 	br	10007870 <__alt_data_end+0xf8007870>
10007940:	98c00017 	ldw	r3,0(r19)
10007944:	183fb926 	beq	r3,zero,1000782c <__alt_data_end+0xf800782c>
10007948:	01000744 	movi	r4,29
1000794c:	19000226 	beq	r3,r4,10007958 <_fflush_r+0x1d8>
10007950:	01000584 	movi	r4,22
10007954:	1900101e 	bne	r3,r4,10007998 <_fflush_r+0x218>
10007958:	8080030b 	ldhu	r2,12(r16)
1000795c:	80c00417 	ldw	r3,16(r16)
10007960:	80000115 	stw	zero,4(r16)
10007964:	10bdffcc 	andi	r2,r2,63487
10007968:	8080030d 	sth	r2,12(r16)
1000796c:	80c00015 	stw	r3,0(r16)
10007970:	003fb706 	br	10007850 <__alt_data_end+0xf8007850>
10007974:	98800017 	ldw	r2,0(r19)
10007978:	103feb26 	beq	r2,zero,10007928 <__alt_data_end+0xf8007928>
1000797c:	00c00744 	movi	r3,29
10007980:	10c00226 	beq	r2,r3,1000798c <_fflush_r+0x20c>
10007984:	00c00584 	movi	r3,22
10007988:	10ffd61e 	bne	r2,r3,100078e4 <__alt_data_end+0xf80078e4>
1000798c:	9c400015 	stw	r17,0(r19)
10007990:	0005883a 	mov	r2,zero
10007994:	003fb706 	br	10007874 <__alt_data_end+0xf8007874>
10007998:	80c0030b 	ldhu	r3,12(r16)
1000799c:	18c01014 	ori	r3,r3,64
100079a0:	80c0030d 	sth	r3,12(r16)
100079a4:	003fb306 	br	10007874 <__alt_data_end+0xf8007874>

100079a8 <fflush>:
100079a8:	20000526 	beq	r4,zero,100079c0 <fflush+0x18>
100079ac:	00840074 	movhi	r2,4097
100079b0:	1093e104 	addi	r2,r2,20356
100079b4:	200b883a 	mov	r5,r4
100079b8:	11000017 	ldw	r4,0(r2)
100079bc:	00077801 	jmpi	10007780 <_fflush_r>
100079c0:	00840074 	movhi	r2,4097
100079c4:	1093e004 	addi	r2,r2,20352
100079c8:	11000017 	ldw	r4,0(r2)
100079cc:	01440034 	movhi	r5,4096
100079d0:	295de004 	addi	r5,r5,30592
100079d4:	00086fc1 	jmpi	100086fc <_fwalk_reent>

100079d8 <__fp_lock>:
100079d8:	0005883a 	mov	r2,zero
100079dc:	f800283a 	ret

100079e0 <__fp_unlock>:
100079e0:	0005883a 	mov	r2,zero
100079e4:	f800283a 	ret

100079e8 <_cleanup_r>:
100079e8:	01440074 	movhi	r5,4097
100079ec:	2971c204 	addi	r5,r5,-14584
100079f0:	00086441 	jmpi	10008644 <_fwalk>

100079f4 <__sinit.part.1>:
100079f4:	defff604 	addi	sp,sp,-40
100079f8:	00c40034 	movhi	r3,4096
100079fc:	dfc00915 	stw	ra,36(sp)
10007a00:	df000815 	stw	fp,32(sp)
10007a04:	ddc00715 	stw	r23,28(sp)
10007a08:	dd800615 	stw	r22,24(sp)
10007a0c:	dd400515 	stw	r21,20(sp)
10007a10:	dd000415 	stw	r20,16(sp)
10007a14:	dcc00315 	stw	r19,12(sp)
10007a18:	dc800215 	stw	r18,8(sp)
10007a1c:	dc400115 	stw	r17,4(sp)
10007a20:	dc000015 	stw	r16,0(sp)
10007a24:	18de7a04 	addi	r3,r3,31208
10007a28:	24000117 	ldw	r16,4(r4)
10007a2c:	20c00f15 	stw	r3,60(r4)
10007a30:	07000044 	movi	fp,1
10007a34:	00c000c4 	movi	r3,3
10007a38:	2080bb04 	addi	r2,r4,748
10007a3c:	20c0b915 	stw	r3,740(r4)
10007a40:	27000e15 	stw	fp,56(r4)
10007a44:	2080ba15 	stw	r2,744(r4)
10007a48:	2000b815 	stw	zero,736(r4)
10007a4c:	05c00204 	movi	r23,8
10007a50:	00800104 	movi	r2,4
10007a54:	2025883a 	mov	r18,r4
10007a58:	b80d883a 	mov	r6,r23
10007a5c:	81001704 	addi	r4,r16,92
10007a60:	000b883a 	mov	r5,zero
10007a64:	80000015 	stw	zero,0(r16)
10007a68:	80000115 	stw	zero,4(r16)
10007a6c:	80000215 	stw	zero,8(r16)
10007a70:	8080030d 	sth	r2,12(r16)
10007a74:	80001915 	stw	zero,100(r16)
10007a78:	8000038d 	sth	zero,14(r16)
10007a7c:	80000415 	stw	zero,16(r16)
10007a80:	80000515 	stw	zero,20(r16)
10007a84:	80000615 	stw	zero,24(r16)
10007a88:	00095700 	call	10009570 <memset>
10007a8c:	05840074 	movhi	r22,4097
10007a90:	94400217 	ldw	r17,8(r18)
10007a94:	05440074 	movhi	r21,4097
10007a98:	05040074 	movhi	r20,4097
10007a9c:	04c40074 	movhi	r19,4097
10007aa0:	b5ab5104 	addi	r22,r22,-21180
10007aa4:	ad6b6804 	addi	r21,r21,-21088
10007aa8:	a52b8704 	addi	r20,r20,-20964
10007aac:	9ceb9e04 	addi	r19,r19,-20872
10007ab0:	85800815 	stw	r22,32(r16)
10007ab4:	85400915 	stw	r21,36(r16)
10007ab8:	85000a15 	stw	r20,40(r16)
10007abc:	84c00b15 	stw	r19,44(r16)
10007ac0:	84000715 	stw	r16,28(r16)
10007ac4:	00800284 	movi	r2,10
10007ac8:	89001704 	addi	r4,r17,92
10007acc:	b80d883a 	mov	r6,r23
10007ad0:	000b883a 	mov	r5,zero
10007ad4:	88000015 	stw	zero,0(r17)
10007ad8:	88000115 	stw	zero,4(r17)
10007adc:	88000215 	stw	zero,8(r17)
10007ae0:	8880030d 	sth	r2,12(r17)
10007ae4:	88001915 	stw	zero,100(r17)
10007ae8:	8f00038d 	sth	fp,14(r17)
10007aec:	88000415 	stw	zero,16(r17)
10007af0:	88000515 	stw	zero,20(r17)
10007af4:	88000615 	stw	zero,24(r17)
10007af8:	00095700 	call	10009570 <memset>
10007afc:	94000317 	ldw	r16,12(r18)
10007b00:	00800484 	movi	r2,18
10007b04:	8c400715 	stw	r17,28(r17)
10007b08:	8d800815 	stw	r22,32(r17)
10007b0c:	8d400915 	stw	r21,36(r17)
10007b10:	8d000a15 	stw	r20,40(r17)
10007b14:	8cc00b15 	stw	r19,44(r17)
10007b18:	8080030d 	sth	r2,12(r16)
10007b1c:	00800084 	movi	r2,2
10007b20:	80000015 	stw	zero,0(r16)
10007b24:	80000115 	stw	zero,4(r16)
10007b28:	80000215 	stw	zero,8(r16)
10007b2c:	80001915 	stw	zero,100(r16)
10007b30:	8080038d 	sth	r2,14(r16)
10007b34:	80000415 	stw	zero,16(r16)
10007b38:	80000515 	stw	zero,20(r16)
10007b3c:	80000615 	stw	zero,24(r16)
10007b40:	81001704 	addi	r4,r16,92
10007b44:	000b883a 	mov	r5,zero
10007b48:	b80d883a 	mov	r6,r23
10007b4c:	00095700 	call	10009570 <memset>
10007b50:	84000715 	stw	r16,28(r16)
10007b54:	85800815 	stw	r22,32(r16)
10007b58:	85400915 	stw	r21,36(r16)
10007b5c:	85000a15 	stw	r20,40(r16)
10007b60:	84c00b15 	stw	r19,44(r16)
10007b64:	dfc00917 	ldw	ra,36(sp)
10007b68:	df000817 	ldw	fp,32(sp)
10007b6c:	ddc00717 	ldw	r23,28(sp)
10007b70:	dd800617 	ldw	r22,24(sp)
10007b74:	dd400517 	ldw	r21,20(sp)
10007b78:	dd000417 	ldw	r20,16(sp)
10007b7c:	dcc00317 	ldw	r19,12(sp)
10007b80:	dc800217 	ldw	r18,8(sp)
10007b84:	dc400117 	ldw	r17,4(sp)
10007b88:	dc000017 	ldw	r16,0(sp)
10007b8c:	dec00a04 	addi	sp,sp,40
10007b90:	f800283a 	ret

10007b94 <__sfmoreglue>:
10007b94:	defffc04 	addi	sp,sp,-16
10007b98:	dc800215 	stw	r18,8(sp)
10007b9c:	2825883a 	mov	r18,r5
10007ba0:	dc000015 	stw	r16,0(sp)
10007ba4:	01401a04 	movi	r5,104
10007ba8:	2021883a 	mov	r16,r4
10007bac:	9009883a 	mov	r4,r18
10007bb0:	dfc00315 	stw	ra,12(sp)
10007bb4:	dc400115 	stw	r17,4(sp)
10007bb8:	00039ec0 	call	100039ec <__mulsi3>
10007bbc:	8009883a 	mov	r4,r16
10007bc0:	11400304 	addi	r5,r2,12
10007bc4:	1023883a 	mov	r17,r2
10007bc8:	0008a4c0 	call	10008a4c <_malloc_r>
10007bcc:	1021883a 	mov	r16,r2
10007bd0:	10000726 	beq	r2,zero,10007bf0 <__sfmoreglue+0x5c>
10007bd4:	11000304 	addi	r4,r2,12
10007bd8:	10000015 	stw	zero,0(r2)
10007bdc:	14800115 	stw	r18,4(r2)
10007be0:	11000215 	stw	r4,8(r2)
10007be4:	000b883a 	mov	r5,zero
10007be8:	880d883a 	mov	r6,r17
10007bec:	00095700 	call	10009570 <memset>
10007bf0:	8005883a 	mov	r2,r16
10007bf4:	dfc00317 	ldw	ra,12(sp)
10007bf8:	dc800217 	ldw	r18,8(sp)
10007bfc:	dc400117 	ldw	r17,4(sp)
10007c00:	dc000017 	ldw	r16,0(sp)
10007c04:	dec00404 	addi	sp,sp,16
10007c08:	f800283a 	ret

10007c0c <__sfp>:
10007c0c:	00840074 	movhi	r2,4097
10007c10:	defffb04 	addi	sp,sp,-20
10007c14:	1093e004 	addi	r2,r2,20352
10007c18:	dc800215 	stw	r18,8(sp)
10007c1c:	14800017 	ldw	r18,0(r2)
10007c20:	dcc00315 	stw	r19,12(sp)
10007c24:	dfc00415 	stw	ra,16(sp)
10007c28:	90800e17 	ldw	r2,56(r18)
10007c2c:	dc400115 	stw	r17,4(sp)
10007c30:	dc000015 	stw	r16,0(sp)
10007c34:	2027883a 	mov	r19,r4
10007c38:	1000021e 	bne	r2,zero,10007c44 <__sfp+0x38>
10007c3c:	9009883a 	mov	r4,r18
10007c40:	00079f40 	call	100079f4 <__sinit.part.1>
10007c44:	9480b804 	addi	r18,r18,736
10007c48:	047fffc4 	movi	r17,-1
10007c4c:	91400117 	ldw	r5,4(r18)
10007c50:	94000217 	ldw	r16,8(r18)
10007c54:	297fffc4 	addi	r5,r5,-1
10007c58:	28000a16 	blt	r5,zero,10007c84 <__sfp+0x78>
10007c5c:	8080030f 	ldh	r2,12(r16)
10007c60:	10000c26 	beq	r2,zero,10007c94 <__sfp+0x88>
10007c64:	80c01d04 	addi	r3,r16,116
10007c68:	00000206 	br	10007c74 <__sfp+0x68>
10007c6c:	18bfe60f 	ldh	r2,-104(r3)
10007c70:	10000826 	beq	r2,zero,10007c94 <__sfp+0x88>
10007c74:	297fffc4 	addi	r5,r5,-1
10007c78:	1c3ffd04 	addi	r16,r3,-12
10007c7c:	18c01a04 	addi	r3,r3,104
10007c80:	2c7ffa1e 	bne	r5,r17,10007c6c <__alt_data_end+0xf8007c6c>
10007c84:	90800017 	ldw	r2,0(r18)
10007c88:	10001d26 	beq	r2,zero,10007d00 <__sfp+0xf4>
10007c8c:	1025883a 	mov	r18,r2
10007c90:	003fee06 	br	10007c4c <__alt_data_end+0xf8007c4c>
10007c94:	00bfffc4 	movi	r2,-1
10007c98:	8080038d 	sth	r2,14(r16)
10007c9c:	00800044 	movi	r2,1
10007ca0:	8080030d 	sth	r2,12(r16)
10007ca4:	80001915 	stw	zero,100(r16)
10007ca8:	80000015 	stw	zero,0(r16)
10007cac:	80000215 	stw	zero,8(r16)
10007cb0:	80000115 	stw	zero,4(r16)
10007cb4:	80000415 	stw	zero,16(r16)
10007cb8:	80000515 	stw	zero,20(r16)
10007cbc:	80000615 	stw	zero,24(r16)
10007cc0:	81001704 	addi	r4,r16,92
10007cc4:	000b883a 	mov	r5,zero
10007cc8:	01800204 	movi	r6,8
10007ccc:	00095700 	call	10009570 <memset>
10007cd0:	8005883a 	mov	r2,r16
10007cd4:	80000c15 	stw	zero,48(r16)
10007cd8:	80000d15 	stw	zero,52(r16)
10007cdc:	80001115 	stw	zero,68(r16)
10007ce0:	80001215 	stw	zero,72(r16)
10007ce4:	dfc00417 	ldw	ra,16(sp)
10007ce8:	dcc00317 	ldw	r19,12(sp)
10007cec:	dc800217 	ldw	r18,8(sp)
10007cf0:	dc400117 	ldw	r17,4(sp)
10007cf4:	dc000017 	ldw	r16,0(sp)
10007cf8:	dec00504 	addi	sp,sp,20
10007cfc:	f800283a 	ret
10007d00:	9809883a 	mov	r4,r19
10007d04:	01400104 	movi	r5,4
10007d08:	0007b940 	call	10007b94 <__sfmoreglue>
10007d0c:	90800015 	stw	r2,0(r18)
10007d10:	103fde1e 	bne	r2,zero,10007c8c <__alt_data_end+0xf8007c8c>
10007d14:	00800304 	movi	r2,12
10007d18:	98800015 	stw	r2,0(r19)
10007d1c:	0005883a 	mov	r2,zero
10007d20:	003ff006 	br	10007ce4 <__alt_data_end+0xf8007ce4>

10007d24 <_cleanup>:
10007d24:	00840074 	movhi	r2,4097
10007d28:	1093e004 	addi	r2,r2,20352
10007d2c:	11000017 	ldw	r4,0(r2)
10007d30:	01440074 	movhi	r5,4097
10007d34:	2971c204 	addi	r5,r5,-14584
10007d38:	00086441 	jmpi	10008644 <_fwalk>

10007d3c <__sinit>:
10007d3c:	20800e17 	ldw	r2,56(r4)
10007d40:	10000126 	beq	r2,zero,10007d48 <__sinit+0xc>
10007d44:	f800283a 	ret
10007d48:	00079f41 	jmpi	100079f4 <__sinit.part.1>

10007d4c <__sfp_lock_acquire>:
10007d4c:	f800283a 	ret

10007d50 <__sfp_lock_release>:
10007d50:	f800283a 	ret

10007d54 <__sinit_lock_acquire>:
10007d54:	f800283a 	ret

10007d58 <__sinit_lock_release>:
10007d58:	f800283a 	ret

10007d5c <__fp_lock_all>:
10007d5c:	00840074 	movhi	r2,4097
10007d60:	1093e104 	addi	r2,r2,20356
10007d64:	11000017 	ldw	r4,0(r2)
10007d68:	01440034 	movhi	r5,4096
10007d6c:	295e7604 	addi	r5,r5,31192
10007d70:	00086441 	jmpi	10008644 <_fwalk>

10007d74 <__fp_unlock_all>:
10007d74:	00840074 	movhi	r2,4097
10007d78:	1093e104 	addi	r2,r2,20356
10007d7c:	11000017 	ldw	r4,0(r2)
10007d80:	01440034 	movhi	r5,4096
10007d84:	295e7804 	addi	r5,r5,31200
10007d88:	00086441 	jmpi	10008644 <_fwalk>

10007d8c <_malloc_trim_r>:
10007d8c:	defffb04 	addi	sp,sp,-20
10007d90:	dcc00315 	stw	r19,12(sp)
10007d94:	04c40074 	movhi	r19,4097
10007d98:	dc800215 	stw	r18,8(sp)
10007d9c:	dc400115 	stw	r17,4(sp)
10007da0:	dc000015 	stw	r16,0(sp)
10007da4:	dfc00415 	stw	ra,16(sp)
10007da8:	2821883a 	mov	r16,r5
10007dac:	9cce5c04 	addi	r19,r19,14704
10007db0:	2025883a 	mov	r18,r4
10007db4:	00108040 	call	10010804 <__malloc_lock>
10007db8:	98800217 	ldw	r2,8(r19)
10007dbc:	14400117 	ldw	r17,4(r2)
10007dc0:	00bfff04 	movi	r2,-4
10007dc4:	88a2703a 	and	r17,r17,r2
10007dc8:	8c21c83a 	sub	r16,r17,r16
10007dcc:	8403fbc4 	addi	r16,r16,4079
10007dd0:	8020d33a 	srli	r16,r16,12
10007dd4:	0083ffc4 	movi	r2,4095
10007dd8:	843fffc4 	addi	r16,r16,-1
10007ddc:	8020933a 	slli	r16,r16,12
10007de0:	1400060e 	bge	r2,r16,10007dfc <_malloc_trim_r+0x70>
10007de4:	9009883a 	mov	r4,r18
10007de8:	000b883a 	mov	r5,zero
10007dec:	000acf00 	call	1000acf0 <_sbrk_r>
10007df0:	98c00217 	ldw	r3,8(r19)
10007df4:	1c47883a 	add	r3,r3,r17
10007df8:	10c00a26 	beq	r2,r3,10007e24 <_malloc_trim_r+0x98>
10007dfc:	9009883a 	mov	r4,r18
10007e00:	00108240 	call	10010824 <__malloc_unlock>
10007e04:	0005883a 	mov	r2,zero
10007e08:	dfc00417 	ldw	ra,16(sp)
10007e0c:	dcc00317 	ldw	r19,12(sp)
10007e10:	dc800217 	ldw	r18,8(sp)
10007e14:	dc400117 	ldw	r17,4(sp)
10007e18:	dc000017 	ldw	r16,0(sp)
10007e1c:	dec00504 	addi	sp,sp,20
10007e20:	f800283a 	ret
10007e24:	9009883a 	mov	r4,r18
10007e28:	040bc83a 	sub	r5,zero,r16
10007e2c:	000acf00 	call	1000acf0 <_sbrk_r>
10007e30:	00ffffc4 	movi	r3,-1
10007e34:	10c00d26 	beq	r2,r3,10007e6c <_malloc_trim_r+0xe0>
10007e38:	00c40074 	movhi	r3,4097
10007e3c:	18dac104 	addi	r3,r3,27396
10007e40:	18800017 	ldw	r2,0(r3)
10007e44:	99000217 	ldw	r4,8(r19)
10007e48:	8c23c83a 	sub	r17,r17,r16
10007e4c:	8c400054 	ori	r17,r17,1
10007e50:	1421c83a 	sub	r16,r2,r16
10007e54:	24400115 	stw	r17,4(r4)
10007e58:	9009883a 	mov	r4,r18
10007e5c:	1c000015 	stw	r16,0(r3)
10007e60:	00108240 	call	10010824 <__malloc_unlock>
10007e64:	00800044 	movi	r2,1
10007e68:	003fe706 	br	10007e08 <__alt_data_end+0xf8007e08>
10007e6c:	9009883a 	mov	r4,r18
10007e70:	000b883a 	mov	r5,zero
10007e74:	000acf00 	call	1000acf0 <_sbrk_r>
10007e78:	99000217 	ldw	r4,8(r19)
10007e7c:	014003c4 	movi	r5,15
10007e80:	1107c83a 	sub	r3,r2,r4
10007e84:	28ffdd0e 	bge	r5,r3,10007dfc <__alt_data_end+0xf8007dfc>
10007e88:	01440074 	movhi	r5,4097
10007e8c:	2953e304 	addi	r5,r5,20364
10007e90:	29400017 	ldw	r5,0(r5)
10007e94:	18c00054 	ori	r3,r3,1
10007e98:	20c00115 	stw	r3,4(r4)
10007e9c:	00c40074 	movhi	r3,4097
10007ea0:	1145c83a 	sub	r2,r2,r5
10007ea4:	18dac104 	addi	r3,r3,27396
10007ea8:	18800015 	stw	r2,0(r3)
10007eac:	003fd306 	br	10007dfc <__alt_data_end+0xf8007dfc>

10007eb0 <_free_r>:
10007eb0:	28004c26 	beq	r5,zero,10007fe4 <_free_r+0x134>
10007eb4:	defffd04 	addi	sp,sp,-12
10007eb8:	dc400115 	stw	r17,4(sp)
10007ebc:	dc000015 	stw	r16,0(sp)
10007ec0:	2023883a 	mov	r17,r4
10007ec4:	2821883a 	mov	r16,r5
10007ec8:	dfc00215 	stw	ra,8(sp)
10007ecc:	00108040 	call	10010804 <__malloc_lock>
10007ed0:	813fff17 	ldw	r4,-4(r16)
10007ed4:	00bfff84 	movi	r2,-2
10007ed8:	02440074 	movhi	r9,4097
10007edc:	81bffe04 	addi	r6,r16,-8
10007ee0:	2084703a 	and	r2,r4,r2
10007ee4:	4a4e5c04 	addi	r9,r9,14704
10007ee8:	308b883a 	add	r5,r6,r2
10007eec:	2a000117 	ldw	r8,4(r5)
10007ef0:	49c00217 	ldw	r7,8(r9)
10007ef4:	00ffff04 	movi	r3,-4
10007ef8:	40c6703a 	and	r3,r8,r3
10007efc:	39405326 	beq	r7,r5,1000804c <_free_r+0x19c>
10007f00:	28c00115 	stw	r3,4(r5)
10007f04:	2100004c 	andi	r4,r4,1
10007f08:	2000091e 	bne	r4,zero,10007f30 <_free_r+0x80>
10007f0c:	81fffe17 	ldw	r7,-8(r16)
10007f10:	4a000204 	addi	r8,r9,8
10007f14:	31cdc83a 	sub	r6,r6,r7
10007f18:	31000217 	ldw	r4,8(r6)
10007f1c:	11c5883a 	add	r2,r2,r7
10007f20:	22006126 	beq	r4,r8,100080a8 <_free_r+0x1f8>
10007f24:	31c00317 	ldw	r7,12(r6)
10007f28:	21c00315 	stw	r7,12(r4)
10007f2c:	39000215 	stw	r4,8(r7)
10007f30:	28c9883a 	add	r4,r5,r3
10007f34:	21c00117 	ldw	r7,4(r4)
10007f38:	39c0004c 	andi	r7,r7,1
10007f3c:	38000d1e 	bne	r7,zero,10007f74 <_free_r+0xc4>
10007f40:	29000217 	ldw	r4,8(r5)
10007f44:	10c5883a 	add	r2,r2,r3
10007f48:	00c40074 	movhi	r3,4097
10007f4c:	18ce5e04 	addi	r3,r3,14712
10007f50:	20c07526 	beq	r4,r3,10008128 <_free_r+0x278>
10007f54:	29c00317 	ldw	r7,12(r5)
10007f58:	11400054 	ori	r5,r2,1
10007f5c:	3087883a 	add	r3,r6,r2
10007f60:	21c00315 	stw	r7,12(r4)
10007f64:	39000215 	stw	r4,8(r7)
10007f68:	31400115 	stw	r5,4(r6)
10007f6c:	18800015 	stw	r2,0(r3)
10007f70:	00000406 	br	10007f84 <_free_r+0xd4>
10007f74:	10c00054 	ori	r3,r2,1
10007f78:	30c00115 	stw	r3,4(r6)
10007f7c:	3087883a 	add	r3,r6,r2
10007f80:	18800015 	stw	r2,0(r3)
10007f84:	00c07fc4 	movi	r3,511
10007f88:	18801736 	bltu	r3,r2,10007fe8 <_free_r+0x138>
10007f8c:	1004d0fa 	srli	r2,r2,3
10007f90:	01400044 	movi	r5,1
10007f94:	49000117 	ldw	r4,4(r9)
10007f98:	1087883a 	add	r3,r2,r2
10007f9c:	18c7883a 	add	r3,r3,r3
10007fa0:	1005d0ba 	srai	r2,r2,2
10007fa4:	18c7883a 	add	r3,r3,r3
10007fa8:	1a47883a 	add	r3,r3,r9
10007fac:	19c00217 	ldw	r7,8(r3)
10007fb0:	2884983a 	sll	r2,r5,r2
10007fb4:	30c00315 	stw	r3,12(r6)
10007fb8:	31c00215 	stw	r7,8(r6)
10007fbc:	1104b03a 	or	r2,r2,r4
10007fc0:	19800215 	stw	r6,8(r3)
10007fc4:	48800115 	stw	r2,4(r9)
10007fc8:	39800315 	stw	r6,12(r7)
10007fcc:	8809883a 	mov	r4,r17
10007fd0:	dfc00217 	ldw	ra,8(sp)
10007fd4:	dc400117 	ldw	r17,4(sp)
10007fd8:	dc000017 	ldw	r16,0(sp)
10007fdc:	dec00304 	addi	sp,sp,12
10007fe0:	00108241 	jmpi	10010824 <__malloc_unlock>
10007fe4:	f800283a 	ret
10007fe8:	1006d27a 	srli	r3,r2,9
10007fec:	01000104 	movi	r4,4
10007ff0:	20c04036 	bltu	r4,r3,100080f4 <_free_r+0x244>
10007ff4:	1006d1ba 	srli	r3,r2,6
10007ff8:	19400e04 	addi	r5,r3,56
10007ffc:	2947883a 	add	r3,r5,r5
10008000:	18c7883a 	add	r3,r3,r3
10008004:	18c7883a 	add	r3,r3,r3
10008008:	1a49883a 	add	r4,r3,r9
1000800c:	20c00217 	ldw	r3,8(r4)
10008010:	01c40074 	movhi	r7,4097
10008014:	39ce5c04 	addi	r7,r7,14704
10008018:	19003b26 	beq	r3,r4,10008108 <_free_r+0x258>
1000801c:	01ffff04 	movi	r7,-4
10008020:	19400117 	ldw	r5,4(r3)
10008024:	29ca703a 	and	r5,r5,r7
10008028:	1140022e 	bgeu	r2,r5,10008034 <_free_r+0x184>
1000802c:	18c00217 	ldw	r3,8(r3)
10008030:	20fffb1e 	bne	r4,r3,10008020 <__alt_data_end+0xf8008020>
10008034:	18800317 	ldw	r2,12(r3)
10008038:	30800315 	stw	r2,12(r6)
1000803c:	30c00215 	stw	r3,8(r6)
10008040:	11800215 	stw	r6,8(r2)
10008044:	19800315 	stw	r6,12(r3)
10008048:	003fe006 	br	10007fcc <__alt_data_end+0xf8007fcc>
1000804c:	2100004c 	andi	r4,r4,1
10008050:	1885883a 	add	r2,r3,r2
10008054:	2000071e 	bne	r4,zero,10008074 <_free_r+0x1c4>
10008058:	817ffe17 	ldw	r5,-8(r16)
1000805c:	314dc83a 	sub	r6,r6,r5
10008060:	30c00317 	ldw	r3,12(r6)
10008064:	31000217 	ldw	r4,8(r6)
10008068:	1145883a 	add	r2,r2,r5
1000806c:	20c00315 	stw	r3,12(r4)
10008070:	19000215 	stw	r4,8(r3)
10008074:	10c00054 	ori	r3,r2,1
10008078:	30c00115 	stw	r3,4(r6)
1000807c:	00c40074 	movhi	r3,4097
10008080:	18d3e404 	addi	r3,r3,20368
10008084:	18c00017 	ldw	r3,0(r3)
10008088:	49800215 	stw	r6,8(r9)
1000808c:	10ffcf36 	bltu	r2,r3,10007fcc <__alt_data_end+0xf8007fcc>
10008090:	00840074 	movhi	r2,4097
10008094:	109ab904 	addi	r2,r2,27364
10008098:	11400017 	ldw	r5,0(r2)
1000809c:	8809883a 	mov	r4,r17
100080a0:	0007d8c0 	call	10007d8c <_malloc_trim_r>
100080a4:	003fc906 	br	10007fcc <__alt_data_end+0xf8007fcc>
100080a8:	28c9883a 	add	r4,r5,r3
100080ac:	21000117 	ldw	r4,4(r4)
100080b0:	2100004c 	andi	r4,r4,1
100080b4:	20000a1e 	bne	r4,zero,100080e0 <_free_r+0x230>
100080b8:	29000317 	ldw	r4,12(r5)
100080bc:	29400217 	ldw	r5,8(r5)
100080c0:	10c5883a 	add	r2,r2,r3
100080c4:	10c00054 	ori	r3,r2,1
100080c8:	29000315 	stw	r4,12(r5)
100080cc:	21400215 	stw	r5,8(r4)
100080d0:	30c00115 	stw	r3,4(r6)
100080d4:	308d883a 	add	r6,r6,r2
100080d8:	30800015 	stw	r2,0(r6)
100080dc:	003fbb06 	br	10007fcc <__alt_data_end+0xf8007fcc>
100080e0:	10c00054 	ori	r3,r2,1
100080e4:	30c00115 	stw	r3,4(r6)
100080e8:	308d883a 	add	r6,r6,r2
100080ec:	30800015 	stw	r2,0(r6)
100080f0:	003fb606 	br	10007fcc <__alt_data_end+0xf8007fcc>
100080f4:	01000504 	movi	r4,20
100080f8:	20c01436 	bltu	r4,r3,1000814c <_free_r+0x29c>
100080fc:	194016c4 	addi	r5,r3,91
10008100:	2947883a 	add	r3,r5,r5
10008104:	003fbe06 	br	10008000 <__alt_data_end+0xf8008000>
10008108:	280bd0ba 	srai	r5,r5,2
1000810c:	00800044 	movi	r2,1
10008110:	39000117 	ldw	r4,4(r7)
10008114:	114a983a 	sll	r5,r2,r5
10008118:	1805883a 	mov	r2,r3
1000811c:	2908b03a 	or	r4,r5,r4
10008120:	39000115 	stw	r4,4(r7)
10008124:	003fc406 	br	10008038 <__alt_data_end+0xf8008038>
10008128:	49800515 	stw	r6,20(r9)
1000812c:	49800415 	stw	r6,16(r9)
10008130:	10c00054 	ori	r3,r2,1
10008134:	31000315 	stw	r4,12(r6)
10008138:	31000215 	stw	r4,8(r6)
1000813c:	30c00115 	stw	r3,4(r6)
10008140:	308d883a 	add	r6,r6,r2
10008144:	30800015 	stw	r2,0(r6)
10008148:	003fa006 	br	10007fcc <__alt_data_end+0xf8007fcc>
1000814c:	01001504 	movi	r4,84
10008150:	20c00436 	bltu	r4,r3,10008164 <_free_r+0x2b4>
10008154:	1006d33a 	srli	r3,r2,12
10008158:	19401b84 	addi	r5,r3,110
1000815c:	2947883a 	add	r3,r5,r5
10008160:	003fa706 	br	10008000 <__alt_data_end+0xf8008000>
10008164:	01005504 	movi	r4,340
10008168:	20c00436 	bltu	r4,r3,1000817c <_free_r+0x2cc>
1000816c:	1006d3fa 	srli	r3,r2,15
10008170:	19401dc4 	addi	r5,r3,119
10008174:	2947883a 	add	r3,r5,r5
10008178:	003fa106 	br	10008000 <__alt_data_end+0xf8008000>
1000817c:	01015504 	movi	r4,1364
10008180:	20c00436 	bltu	r4,r3,10008194 <_free_r+0x2e4>
10008184:	1006d4ba 	srli	r3,r2,18
10008188:	19401f04 	addi	r5,r3,124
1000818c:	2947883a 	add	r3,r5,r5
10008190:	003f9b06 	br	10008000 <__alt_data_end+0xf8008000>
10008194:	00c03f04 	movi	r3,252
10008198:	01401f84 	movi	r5,126
1000819c:	003f9806 	br	10008000 <__alt_data_end+0xf8008000>

100081a0 <__sfvwrite_r>:
100081a0:	30800217 	ldw	r2,8(r6)
100081a4:	10004526 	beq	r2,zero,100082bc <__sfvwrite_r+0x11c>
100081a8:	28c0030b 	ldhu	r3,12(r5)
100081ac:	defff404 	addi	sp,sp,-48
100081b0:	dd400715 	stw	r21,28(sp)
100081b4:	dcc00515 	stw	r19,20(sp)
100081b8:	dc000215 	stw	r16,8(sp)
100081bc:	dfc00b15 	stw	ra,44(sp)
100081c0:	df000a15 	stw	fp,40(sp)
100081c4:	ddc00915 	stw	r23,36(sp)
100081c8:	dd800815 	stw	r22,32(sp)
100081cc:	dd000615 	stw	r20,24(sp)
100081d0:	dc800415 	stw	r18,16(sp)
100081d4:	dc400315 	stw	r17,12(sp)
100081d8:	1880020c 	andi	r2,r3,8
100081dc:	2821883a 	mov	r16,r5
100081e0:	202b883a 	mov	r21,r4
100081e4:	3027883a 	mov	r19,r6
100081e8:	10002526 	beq	r2,zero,10008280 <__sfvwrite_r+0xe0>
100081ec:	28800417 	ldw	r2,16(r5)
100081f0:	10002326 	beq	r2,zero,10008280 <__sfvwrite_r+0xe0>
100081f4:	1880008c 	andi	r2,r3,2
100081f8:	9c400017 	ldw	r17,0(r19)
100081fc:	10003126 	beq	r2,zero,100082c4 <__sfvwrite_r+0x124>
10008200:	0029883a 	mov	r20,zero
10008204:	0025883a 	mov	r18,zero
10008208:	05810004 	movi	r22,1024
1000820c:	a00d883a 	mov	r6,r20
10008210:	a809883a 	mov	r4,r21
10008214:	90002526 	beq	r18,zero,100082ac <__sfvwrite_r+0x10c>
10008218:	900f883a 	mov	r7,r18
1000821c:	81400717 	ldw	r5,28(r16)
10008220:	b480012e 	bgeu	r22,r18,10008228 <__sfvwrite_r+0x88>
10008224:	01c10004 	movi	r7,1024
10008228:	80800917 	ldw	r2,36(r16)
1000822c:	103ee83a 	callr	r2
10008230:	0080510e 	bge	zero,r2,10008378 <__sfvwrite_r+0x1d8>
10008234:	98c00217 	ldw	r3,8(r19)
10008238:	a0a9883a 	add	r20,r20,r2
1000823c:	90a5c83a 	sub	r18,r18,r2
10008240:	1885c83a 	sub	r2,r3,r2
10008244:	98800215 	stw	r2,8(r19)
10008248:	103ff01e 	bne	r2,zero,1000820c <__alt_data_end+0xf800820c>
1000824c:	0005883a 	mov	r2,zero
10008250:	dfc00b17 	ldw	ra,44(sp)
10008254:	df000a17 	ldw	fp,40(sp)
10008258:	ddc00917 	ldw	r23,36(sp)
1000825c:	dd800817 	ldw	r22,32(sp)
10008260:	dd400717 	ldw	r21,28(sp)
10008264:	dd000617 	ldw	r20,24(sp)
10008268:	dcc00517 	ldw	r19,20(sp)
1000826c:	dc800417 	ldw	r18,16(sp)
10008270:	dc400317 	ldw	r17,12(sp)
10008274:	dc000217 	ldw	r16,8(sp)
10008278:	dec00c04 	addi	sp,sp,48
1000827c:	f800283a 	ret
10008280:	a809883a 	mov	r4,r21
10008284:	800b883a 	mov	r5,r16
10008288:	0005d000 	call	10005d00 <__swsetup_r>
1000828c:	80c0030b 	ldhu	r3,12(r16)
10008290:	103fd826 	beq	r2,zero,100081f4 <__alt_data_end+0xf80081f4>
10008294:	18c01014 	ori	r3,r3,64
10008298:	80c0030d 	sth	r3,12(r16)
1000829c:	00c00244 	movi	r3,9
100082a0:	00bfffc4 	movi	r2,-1
100082a4:	a8c00015 	stw	r3,0(r21)
100082a8:	003fe906 	br	10008250 <__alt_data_end+0xf8008250>
100082ac:	8d000017 	ldw	r20,0(r17)
100082b0:	8c800117 	ldw	r18,4(r17)
100082b4:	8c400204 	addi	r17,r17,8
100082b8:	003fd406 	br	1000820c <__alt_data_end+0xf800820c>
100082bc:	0005883a 	mov	r2,zero
100082c0:	f800283a 	ret
100082c4:	1880004c 	andi	r2,r3,1
100082c8:	1000301e 	bne	r2,zero,1000838c <__sfvwrite_r+0x1ec>
100082cc:	002f883a 	mov	r23,zero
100082d0:	0025883a 	mov	r18,zero
100082d4:	90001c26 	beq	r18,zero,10008348 <__sfvwrite_r+0x1a8>
100082d8:	1880800c 	andi	r2,r3,512
100082dc:	85000217 	ldw	r20,8(r16)
100082e0:	10006c26 	beq	r2,zero,10008494 <__sfvwrite_r+0x2f4>
100082e4:	a02d883a 	mov	r22,r20
100082e8:	95008536 	bltu	r18,r20,10008500 <__sfvwrite_r+0x360>
100082ec:	1881200c 	andi	r2,r3,1152
100082f0:	10009d1e 	bne	r2,zero,10008568 <__sfvwrite_r+0x3c8>
100082f4:	81000017 	ldw	r4,0(r16)
100082f8:	a039883a 	mov	fp,r20
100082fc:	9029883a 	mov	r20,r18
10008300:	b80b883a 	mov	r5,r23
10008304:	b00d883a 	mov	r6,r22
10008308:	00094140 	call	10009414 <memmove>
1000830c:	80c00217 	ldw	r3,8(r16)
10008310:	81000017 	ldw	r4,0(r16)
10008314:	9005883a 	mov	r2,r18
10008318:	1f39c83a 	sub	fp,r3,fp
1000831c:	258f883a 	add	r7,r4,r22
10008320:	87000215 	stw	fp,8(r16)
10008324:	81c00015 	stw	r7,0(r16)
10008328:	98c00217 	ldw	r3,8(r19)
1000832c:	b8af883a 	add	r23,r23,r2
10008330:	90a5c83a 	sub	r18,r18,r2
10008334:	1d05c83a 	sub	r2,r3,r20
10008338:	98800215 	stw	r2,8(r19)
1000833c:	103fc326 	beq	r2,zero,1000824c <__alt_data_end+0xf800824c>
10008340:	80c0030b 	ldhu	r3,12(r16)
10008344:	903fe41e 	bne	r18,zero,100082d8 <__alt_data_end+0xf80082d8>
10008348:	8dc00017 	ldw	r23,0(r17)
1000834c:	8c800117 	ldw	r18,4(r17)
10008350:	8c400204 	addi	r17,r17,8
10008354:	003fdf06 	br	100082d4 <__alt_data_end+0xf80082d4>
10008358:	000a6dc0 	call	1000a6dc <_realloc_r>
1000835c:	102d883a 	mov	r22,r2
10008360:	1000a01e 	bne	r2,zero,100085e4 <__sfvwrite_r+0x444>
10008364:	81400417 	ldw	r5,16(r16)
10008368:	a809883a 	mov	r4,r21
1000836c:	0007eb00 	call	10007eb0 <_free_r>
10008370:	00800304 	movi	r2,12
10008374:	a8800015 	stw	r2,0(r21)
10008378:	80c0030b 	ldhu	r3,12(r16)
1000837c:	00bfffc4 	movi	r2,-1
10008380:	18c01014 	ori	r3,r3,64
10008384:	80c0030d 	sth	r3,12(r16)
10008388:	003fb106 	br	10008250 <__alt_data_end+0xf8008250>
1000838c:	0029883a 	mov	r20,zero
10008390:	0011883a 	mov	r8,zero
10008394:	0039883a 	mov	fp,zero
10008398:	0025883a 	mov	r18,zero
1000839c:	90001f26 	beq	r18,zero,1000841c <__sfvwrite_r+0x27c>
100083a0:	40006826 	beq	r8,zero,10008544 <__sfvwrite_r+0x3a4>
100083a4:	a02f883a 	mov	r23,r20
100083a8:	9500012e 	bgeu	r18,r20,100083b0 <__sfvwrite_r+0x210>
100083ac:	902f883a 	mov	r23,r18
100083b0:	81000017 	ldw	r4,0(r16)
100083b4:	80800417 	ldw	r2,16(r16)
100083b8:	b82d883a 	mov	r22,r23
100083bc:	81800217 	ldw	r6,8(r16)
100083c0:	81c00517 	ldw	r7,20(r16)
100083c4:	1100022e 	bgeu	r2,r4,100083d0 <__sfvwrite_r+0x230>
100083c8:	31c7883a 	add	r3,r6,r7
100083cc:	1dc01816 	blt	r3,r23,10008430 <__sfvwrite_r+0x290>
100083d0:	b9c03f16 	blt	r23,r7,100084d0 <__sfvwrite_r+0x330>
100083d4:	80800917 	ldw	r2,36(r16)
100083d8:	81400717 	ldw	r5,28(r16)
100083dc:	a809883a 	mov	r4,r21
100083e0:	da000115 	stw	r8,4(sp)
100083e4:	e00d883a 	mov	r6,fp
100083e8:	103ee83a 	callr	r2
100083ec:	102d883a 	mov	r22,r2
100083f0:	da000117 	ldw	r8,4(sp)
100083f4:	00bfe00e 	bge	zero,r2,10008378 <__alt_data_end+0xf8008378>
100083f8:	a5a9c83a 	sub	r20,r20,r22
100083fc:	a0001f26 	beq	r20,zero,1000847c <__sfvwrite_r+0x2dc>
10008400:	98800217 	ldw	r2,8(r19)
10008404:	e5b9883a 	add	fp,fp,r22
10008408:	95a5c83a 	sub	r18,r18,r22
1000840c:	15adc83a 	sub	r22,r2,r22
10008410:	9d800215 	stw	r22,8(r19)
10008414:	b03f8d26 	beq	r22,zero,1000824c <__alt_data_end+0xf800824c>
10008418:	903fe11e 	bne	r18,zero,100083a0 <__alt_data_end+0xf80083a0>
1000841c:	8f000017 	ldw	fp,0(r17)
10008420:	8c800117 	ldw	r18,4(r17)
10008424:	0011883a 	mov	r8,zero
10008428:	8c400204 	addi	r17,r17,8
1000842c:	003fdb06 	br	1000839c <__alt_data_end+0xf800839c>
10008430:	180d883a 	mov	r6,r3
10008434:	e00b883a 	mov	r5,fp
10008438:	da000115 	stw	r8,4(sp)
1000843c:	d8c00015 	stw	r3,0(sp)
10008440:	00094140 	call	10009414 <memmove>
10008444:	d8c00017 	ldw	r3,0(sp)
10008448:	80800017 	ldw	r2,0(r16)
1000844c:	a809883a 	mov	r4,r21
10008450:	800b883a 	mov	r5,r16
10008454:	10c5883a 	add	r2,r2,r3
10008458:	80800015 	stw	r2,0(r16)
1000845c:	d8c00015 	stw	r3,0(sp)
10008460:	00077800 	call	10007780 <_fflush_r>
10008464:	d8c00017 	ldw	r3,0(sp)
10008468:	da000117 	ldw	r8,4(sp)
1000846c:	103fc21e 	bne	r2,zero,10008378 <__alt_data_end+0xf8008378>
10008470:	182d883a 	mov	r22,r3
10008474:	a5a9c83a 	sub	r20,r20,r22
10008478:	a03fe11e 	bne	r20,zero,10008400 <__alt_data_end+0xf8008400>
1000847c:	a809883a 	mov	r4,r21
10008480:	800b883a 	mov	r5,r16
10008484:	00077800 	call	10007780 <_fflush_r>
10008488:	103fbb1e 	bne	r2,zero,10008378 <__alt_data_end+0xf8008378>
1000848c:	0011883a 	mov	r8,zero
10008490:	003fdb06 	br	10008400 <__alt_data_end+0xf8008400>
10008494:	81000017 	ldw	r4,0(r16)
10008498:	80800417 	ldw	r2,16(r16)
1000849c:	1100012e 	bgeu	r2,r4,100084a4 <__sfvwrite_r+0x304>
100084a0:	a4805a36 	bltu	r20,r18,1000860c <__sfvwrite_r+0x46c>
100084a4:	81c00517 	ldw	r7,20(r16)
100084a8:	91c01a36 	bltu	r18,r7,10008514 <__sfvwrite_r+0x374>
100084ac:	80800917 	ldw	r2,36(r16)
100084b0:	81400717 	ldw	r5,28(r16)
100084b4:	a809883a 	mov	r4,r21
100084b8:	b80d883a 	mov	r6,r23
100084bc:	103ee83a 	callr	r2
100084c0:	1029883a 	mov	r20,r2
100084c4:	00bfac0e 	bge	zero,r2,10008378 <__alt_data_end+0xf8008378>
100084c8:	a005883a 	mov	r2,r20
100084cc:	003f9606 	br	10008328 <__alt_data_end+0xf8008328>
100084d0:	b80d883a 	mov	r6,r23
100084d4:	e00b883a 	mov	r5,fp
100084d8:	da000115 	stw	r8,4(sp)
100084dc:	00094140 	call	10009414 <memmove>
100084e0:	80800217 	ldw	r2,8(r16)
100084e4:	80c00017 	ldw	r3,0(r16)
100084e8:	da000117 	ldw	r8,4(sp)
100084ec:	15c5c83a 	sub	r2,r2,r23
100084f0:	1def883a 	add	r23,r3,r23
100084f4:	80800215 	stw	r2,8(r16)
100084f8:	85c00015 	stw	r23,0(r16)
100084fc:	003fbe06 	br	100083f8 <__alt_data_end+0xf80083f8>
10008500:	81000017 	ldw	r4,0(r16)
10008504:	9039883a 	mov	fp,r18
10008508:	9029883a 	mov	r20,r18
1000850c:	902d883a 	mov	r22,r18
10008510:	003f7b06 	br	10008300 <__alt_data_end+0xf8008300>
10008514:	b80b883a 	mov	r5,r23
10008518:	900d883a 	mov	r6,r18
1000851c:	00094140 	call	10009414 <memmove>
10008520:	80c00217 	ldw	r3,8(r16)
10008524:	80800017 	ldw	r2,0(r16)
10008528:	9029883a 	mov	r20,r18
1000852c:	1c87c83a 	sub	r3,r3,r18
10008530:	1485883a 	add	r2,r2,r18
10008534:	80800015 	stw	r2,0(r16)
10008538:	80c00215 	stw	r3,8(r16)
1000853c:	9005883a 	mov	r2,r18
10008540:	003f7906 	br	10008328 <__alt_data_end+0xf8008328>
10008544:	e009883a 	mov	r4,fp
10008548:	01400284 	movi	r5,10
1000854c:	900d883a 	mov	r6,r18
10008550:	00091f40 	call	100091f4 <memchr>
10008554:	10003826 	beq	r2,zero,10008638 <__sfvwrite_r+0x498>
10008558:	10800044 	addi	r2,r2,1
1000855c:	1729c83a 	sub	r20,r2,fp
10008560:	02000044 	movi	r8,1
10008564:	003f8f06 	br	100083a4 <__alt_data_end+0xf80083a4>
10008568:	80800517 	ldw	r2,20(r16)
1000856c:	81400417 	ldw	r5,16(r16)
10008570:	87000017 	ldw	fp,0(r16)
10008574:	10a9883a 	add	r20,r2,r2
10008578:	a085883a 	add	r2,r20,r2
1000857c:	1028d7fa 	srli	r20,r2,31
10008580:	e179c83a 	sub	fp,fp,r5
10008584:	e1000044 	addi	r4,fp,1
10008588:	a085883a 	add	r2,r20,r2
1000858c:	1029d07a 	srai	r20,r2,1
10008590:	2485883a 	add	r2,r4,r18
10008594:	a00d883a 	mov	r6,r20
10008598:	a080022e 	bgeu	r20,r2,100085a4 <__sfvwrite_r+0x404>
1000859c:	1029883a 	mov	r20,r2
100085a0:	100d883a 	mov	r6,r2
100085a4:	18c1000c 	andi	r3,r3,1024
100085a8:	a809883a 	mov	r4,r21
100085ac:	183f6a26 	beq	r3,zero,10008358 <__alt_data_end+0xf8008358>
100085b0:	300b883a 	mov	r5,r6
100085b4:	0008a4c0 	call	10008a4c <_malloc_r>
100085b8:	102d883a 	mov	r22,r2
100085bc:	103f6c26 	beq	r2,zero,10008370 <__alt_data_end+0xf8008370>
100085c0:	81400417 	ldw	r5,16(r16)
100085c4:	1009883a 	mov	r4,r2
100085c8:	e00d883a 	mov	r6,fp
100085cc:	00092dc0 	call	100092dc <memcpy>
100085d0:	8080030b 	ldhu	r2,12(r16)
100085d4:	00fedfc4 	movi	r3,-1153
100085d8:	10c4703a 	and	r2,r2,r3
100085dc:	10802014 	ori	r2,r2,128
100085e0:	8080030d 	sth	r2,12(r16)
100085e4:	b709883a 	add	r4,r22,fp
100085e8:	a707c83a 	sub	r3,r20,fp
100085ec:	85800415 	stw	r22,16(r16)
100085f0:	85000515 	stw	r20,20(r16)
100085f4:	81000015 	stw	r4,0(r16)
100085f8:	9039883a 	mov	fp,r18
100085fc:	80c00215 	stw	r3,8(r16)
10008600:	9029883a 	mov	r20,r18
10008604:	902d883a 	mov	r22,r18
10008608:	003f3d06 	br	10008300 <__alt_data_end+0xf8008300>
1000860c:	b80b883a 	mov	r5,r23
10008610:	a00d883a 	mov	r6,r20
10008614:	00094140 	call	10009414 <memmove>
10008618:	80800017 	ldw	r2,0(r16)
1000861c:	a809883a 	mov	r4,r21
10008620:	800b883a 	mov	r5,r16
10008624:	1505883a 	add	r2,r2,r20
10008628:	80800015 	stw	r2,0(r16)
1000862c:	00077800 	call	10007780 <_fflush_r>
10008630:	103fa526 	beq	r2,zero,100084c8 <__alt_data_end+0xf80084c8>
10008634:	003f5006 	br	10008378 <__alt_data_end+0xf8008378>
10008638:	95000044 	addi	r20,r18,1
1000863c:	02000044 	movi	r8,1
10008640:	003f5806 	br	100083a4 <__alt_data_end+0xf80083a4>

10008644 <_fwalk>:
10008644:	defff804 	addi	sp,sp,-32
10008648:	dd400515 	stw	r21,20(sp)
1000864c:	2540b804 	addi	r21,r4,736
10008650:	dd800615 	stw	r22,24(sp)
10008654:	dd000415 	stw	r20,16(sp)
10008658:	dfc00715 	stw	ra,28(sp)
1000865c:	dcc00315 	stw	r19,12(sp)
10008660:	dc800215 	stw	r18,8(sp)
10008664:	dc400115 	stw	r17,4(sp)
10008668:	dc000015 	stw	r16,0(sp)
1000866c:	2829883a 	mov	r20,r5
10008670:	002d883a 	mov	r22,zero
10008674:	0007d4c0 	call	10007d4c <__sfp_lock_acquire>
10008678:	a8001426 	beq	r21,zero,100086cc <_fwalk+0x88>
1000867c:	04ffffc4 	movi	r19,-1
10008680:	ac400117 	ldw	r17,4(r21)
10008684:	ac800217 	ldw	r18,8(r21)
10008688:	8c7fffc4 	addi	r17,r17,-1
1000868c:	88000d16 	blt	r17,zero,100086c4 <_fwalk+0x80>
10008690:	94000304 	addi	r16,r18,12
10008694:	94800384 	addi	r18,r18,14
10008698:	80c0000f 	ldh	r3,0(r16)
1000869c:	8c7fffc4 	addi	r17,r17,-1
100086a0:	813ffd04 	addi	r4,r16,-12
100086a4:	18000426 	beq	r3,zero,100086b8 <_fwalk+0x74>
100086a8:	90c0000f 	ldh	r3,0(r18)
100086ac:	1cc00226 	beq	r3,r19,100086b8 <_fwalk+0x74>
100086b0:	a03ee83a 	callr	r20
100086b4:	b0acb03a 	or	r22,r22,r2
100086b8:	84001a04 	addi	r16,r16,104
100086bc:	94801a04 	addi	r18,r18,104
100086c0:	8cfff51e 	bne	r17,r19,10008698 <__alt_data_end+0xf8008698>
100086c4:	ad400017 	ldw	r21,0(r21)
100086c8:	a83fed1e 	bne	r21,zero,10008680 <__alt_data_end+0xf8008680>
100086cc:	0007d500 	call	10007d50 <__sfp_lock_release>
100086d0:	b005883a 	mov	r2,r22
100086d4:	dfc00717 	ldw	ra,28(sp)
100086d8:	dd800617 	ldw	r22,24(sp)
100086dc:	dd400517 	ldw	r21,20(sp)
100086e0:	dd000417 	ldw	r20,16(sp)
100086e4:	dcc00317 	ldw	r19,12(sp)
100086e8:	dc800217 	ldw	r18,8(sp)
100086ec:	dc400117 	ldw	r17,4(sp)
100086f0:	dc000017 	ldw	r16,0(sp)
100086f4:	dec00804 	addi	sp,sp,32
100086f8:	f800283a 	ret

100086fc <_fwalk_reent>:
100086fc:	defff804 	addi	sp,sp,-32
10008700:	dd400515 	stw	r21,20(sp)
10008704:	2540b804 	addi	r21,r4,736
10008708:	dd800615 	stw	r22,24(sp)
1000870c:	dd000415 	stw	r20,16(sp)
10008710:	dcc00315 	stw	r19,12(sp)
10008714:	dfc00715 	stw	ra,28(sp)
10008718:	dc800215 	stw	r18,8(sp)
1000871c:	dc400115 	stw	r17,4(sp)
10008720:	dc000015 	stw	r16,0(sp)
10008724:	2027883a 	mov	r19,r4
10008728:	2829883a 	mov	r20,r5
1000872c:	002d883a 	mov	r22,zero
10008730:	0007d4c0 	call	10007d4c <__sfp_lock_acquire>
10008734:	a8001326 	beq	r21,zero,10008784 <_fwalk_reent+0x88>
10008738:	04bfffc4 	movi	r18,-1
1000873c:	ac400117 	ldw	r17,4(r21)
10008740:	ac000217 	ldw	r16,8(r21)
10008744:	8c7fffc4 	addi	r17,r17,-1
10008748:	88000c16 	blt	r17,zero,1000877c <_fwalk_reent+0x80>
1000874c:	84000304 	addi	r16,r16,12
10008750:	80c0000f 	ldh	r3,0(r16)
10008754:	8c7fffc4 	addi	r17,r17,-1
10008758:	817ffd04 	addi	r5,r16,-12
1000875c:	18000526 	beq	r3,zero,10008774 <_fwalk_reent+0x78>
10008760:	80c0008f 	ldh	r3,2(r16)
10008764:	9809883a 	mov	r4,r19
10008768:	1c800226 	beq	r3,r18,10008774 <_fwalk_reent+0x78>
1000876c:	a03ee83a 	callr	r20
10008770:	b0acb03a 	or	r22,r22,r2
10008774:	84001a04 	addi	r16,r16,104
10008778:	8cbff51e 	bne	r17,r18,10008750 <__alt_data_end+0xf8008750>
1000877c:	ad400017 	ldw	r21,0(r21)
10008780:	a83fee1e 	bne	r21,zero,1000873c <__alt_data_end+0xf800873c>
10008784:	0007d500 	call	10007d50 <__sfp_lock_release>
10008788:	b005883a 	mov	r2,r22
1000878c:	dfc00717 	ldw	ra,28(sp)
10008790:	dd800617 	ldw	r22,24(sp)
10008794:	dd400517 	ldw	r21,20(sp)
10008798:	dd000417 	ldw	r20,16(sp)
1000879c:	dcc00317 	ldw	r19,12(sp)
100087a0:	dc800217 	ldw	r18,8(sp)
100087a4:	dc400117 	ldw	r17,4(sp)
100087a8:	dc000017 	ldw	r16,0(sp)
100087ac:	dec00804 	addi	sp,sp,32
100087b0:	f800283a 	ret

100087b4 <_setlocale_r>:
100087b4:	30001b26 	beq	r6,zero,10008824 <_setlocale_r+0x70>
100087b8:	01440074 	movhi	r5,4097
100087bc:	defffe04 	addi	sp,sp,-8
100087c0:	294c9404 	addi	r5,r5,12880
100087c4:	3009883a 	mov	r4,r6
100087c8:	dc000015 	stw	r16,0(sp)
100087cc:	dfc00115 	stw	ra,4(sp)
100087d0:	3021883a 	mov	r16,r6
100087d4:	000ae800 	call	1000ae80 <strcmp>
100087d8:	1000061e 	bne	r2,zero,100087f4 <_setlocale_r+0x40>
100087dc:	00840074 	movhi	r2,4097
100087e0:	108c9304 	addi	r2,r2,12876
100087e4:	dfc00117 	ldw	ra,4(sp)
100087e8:	dc000017 	ldw	r16,0(sp)
100087ec:	dec00204 	addi	sp,sp,8
100087f0:	f800283a 	ret
100087f4:	01440074 	movhi	r5,4097
100087f8:	294c9304 	addi	r5,r5,12876
100087fc:	8009883a 	mov	r4,r16
10008800:	000ae800 	call	1000ae80 <strcmp>
10008804:	103ff526 	beq	r2,zero,100087dc <__alt_data_end+0xf80087dc>
10008808:	01440074 	movhi	r5,4097
1000880c:	294c7e04 	addi	r5,r5,12792
10008810:	8009883a 	mov	r4,r16
10008814:	000ae800 	call	1000ae80 <strcmp>
10008818:	103ff026 	beq	r2,zero,100087dc <__alt_data_end+0xf80087dc>
1000881c:	0005883a 	mov	r2,zero
10008820:	003ff006 	br	100087e4 <__alt_data_end+0xf80087e4>
10008824:	00840074 	movhi	r2,4097
10008828:	108c9304 	addi	r2,r2,12876
1000882c:	f800283a 	ret

10008830 <__locale_charset>:
10008830:	00840074 	movhi	r2,4097
10008834:	108e4604 	addi	r2,r2,14616
10008838:	f800283a 	ret

1000883c <__locale_mb_cur_max>:
1000883c:	00840074 	movhi	r2,4097
10008840:	1093e204 	addi	r2,r2,20360
10008844:	10800017 	ldw	r2,0(r2)
10008848:	f800283a 	ret

1000884c <__locale_msgcharset>:
1000884c:	00840074 	movhi	r2,4097
10008850:	108e3e04 	addi	r2,r2,14584
10008854:	f800283a 	ret

10008858 <__locale_cjk_lang>:
10008858:	0005883a 	mov	r2,zero
1000885c:	f800283a 	ret

10008860 <_localeconv_r>:
10008860:	00840074 	movhi	r2,4097
10008864:	108e4e04 	addi	r2,r2,14648
10008868:	f800283a 	ret

1000886c <setlocale>:
1000886c:	00c40074 	movhi	r3,4097
10008870:	18d3e104 	addi	r3,r3,20356
10008874:	2005883a 	mov	r2,r4
10008878:	19000017 	ldw	r4,0(r3)
1000887c:	280d883a 	mov	r6,r5
10008880:	100b883a 	mov	r5,r2
10008884:	00087b41 	jmpi	100087b4 <_setlocale_r>

10008888 <localeconv>:
10008888:	00840074 	movhi	r2,4097
1000888c:	108e4e04 	addi	r2,r2,14648
10008890:	f800283a 	ret

10008894 <__smakebuf_r>:
10008894:	2880030b 	ldhu	r2,12(r5)
10008898:	10c0008c 	andi	r3,r2,2
1000889c:	1800401e 	bne	r3,zero,100089a0 <__smakebuf_r+0x10c>
100088a0:	deffec04 	addi	sp,sp,-80
100088a4:	dc000f15 	stw	r16,60(sp)
100088a8:	2821883a 	mov	r16,r5
100088ac:	2940038f 	ldh	r5,14(r5)
100088b0:	dc401015 	stw	r17,64(sp)
100088b4:	dfc01315 	stw	ra,76(sp)
100088b8:	dcc01215 	stw	r19,72(sp)
100088bc:	dc801115 	stw	r18,68(sp)
100088c0:	2023883a 	mov	r17,r4
100088c4:	28001b16 	blt	r5,zero,10008934 <__smakebuf_r+0xa0>
100088c8:	d80d883a 	mov	r6,sp
100088cc:	000c8f80 	call	1000c8f8 <_fstat_r>
100088d0:	10001716 	blt	r2,zero,10008930 <__smakebuf_r+0x9c>
100088d4:	d8800117 	ldw	r2,4(sp)
100088d8:	00e00014 	movui	r3,32768
100088dc:	10bc000c 	andi	r2,r2,61440
100088e0:	10c03726 	beq	r2,r3,100089c0 <__smakebuf_r+0x12c>
100088e4:	80c0030b 	ldhu	r3,12(r16)
100088e8:	18c20014 	ori	r3,r3,2048
100088ec:	80c0030d 	sth	r3,12(r16)
100088f0:	00c80004 	movi	r3,8192
100088f4:	10c03c1e 	bne	r2,r3,100089e8 <__smakebuf_r+0x154>
100088f8:	8140038f 	ldh	r5,14(r16)
100088fc:	8809883a 	mov	r4,r17
10008900:	000c9500 	call	1000c950 <_isatty_r>
10008904:	10004e26 	beq	r2,zero,10008a40 <__smakebuf_r+0x1ac>
10008908:	8080030b 	ldhu	r2,12(r16)
1000890c:	04c00044 	movi	r19,1
10008910:	80c010c4 	addi	r3,r16,67
10008914:	14c4b03a 	or	r2,r2,r19
10008918:	8080030d 	sth	r2,12(r16)
1000891c:	80c00015 	stw	r3,0(r16)
10008920:	80c00415 	stw	r3,16(r16)
10008924:	84c00515 	stw	r19,20(r16)
10008928:	04810004 	movi	r18,1024
1000892c:	00000706 	br	1000894c <__smakebuf_r+0xb8>
10008930:	8080030b 	ldhu	r2,12(r16)
10008934:	10c0200c 	andi	r3,r2,128
10008938:	18001f1e 	bne	r3,zero,100089b8 <__smakebuf_r+0x124>
1000893c:	04810004 	movi	r18,1024
10008940:	10820014 	ori	r2,r2,2048
10008944:	8080030d 	sth	r2,12(r16)
10008948:	0027883a 	mov	r19,zero
1000894c:	8809883a 	mov	r4,r17
10008950:	900b883a 	mov	r5,r18
10008954:	0008a4c0 	call	10008a4c <_malloc_r>
10008958:	10002e26 	beq	r2,zero,10008a14 <__smakebuf_r+0x180>
1000895c:	80c0030b 	ldhu	r3,12(r16)
10008960:	01040034 	movhi	r4,4096
10008964:	211e7a04 	addi	r4,r4,31208
10008968:	89000f15 	stw	r4,60(r17)
1000896c:	18c02014 	ori	r3,r3,128
10008970:	80c0030d 	sth	r3,12(r16)
10008974:	80800015 	stw	r2,0(r16)
10008978:	80800415 	stw	r2,16(r16)
1000897c:	84800515 	stw	r18,20(r16)
10008980:	98001c1e 	bne	r19,zero,100089f4 <__smakebuf_r+0x160>
10008984:	dfc01317 	ldw	ra,76(sp)
10008988:	dcc01217 	ldw	r19,72(sp)
1000898c:	dc801117 	ldw	r18,68(sp)
10008990:	dc401017 	ldw	r17,64(sp)
10008994:	dc000f17 	ldw	r16,60(sp)
10008998:	dec01404 	addi	sp,sp,80
1000899c:	f800283a 	ret
100089a0:	288010c4 	addi	r2,r5,67
100089a4:	28800015 	stw	r2,0(r5)
100089a8:	28800415 	stw	r2,16(r5)
100089ac:	00800044 	movi	r2,1
100089b0:	28800515 	stw	r2,20(r5)
100089b4:	f800283a 	ret
100089b8:	04801004 	movi	r18,64
100089bc:	003fe006 	br	10008940 <__alt_data_end+0xf8008940>
100089c0:	81000a17 	ldw	r4,40(r16)
100089c4:	00c40074 	movhi	r3,4097
100089c8:	18eb8704 	addi	r3,r3,-20964
100089cc:	20ffc51e 	bne	r4,r3,100088e4 <__alt_data_end+0xf80088e4>
100089d0:	80c0030b 	ldhu	r3,12(r16)
100089d4:	01010004 	movi	r4,1024
100089d8:	81001315 	stw	r4,76(r16)
100089dc:	1906b03a 	or	r3,r3,r4
100089e0:	80c0030d 	sth	r3,12(r16)
100089e4:	003fc206 	br	100088f0 <__alt_data_end+0xf80088f0>
100089e8:	0027883a 	mov	r19,zero
100089ec:	04810004 	movi	r18,1024
100089f0:	003fd606 	br	1000894c <__alt_data_end+0xf800894c>
100089f4:	8140038f 	ldh	r5,14(r16)
100089f8:	8809883a 	mov	r4,r17
100089fc:	000c9500 	call	1000c950 <_isatty_r>
10008a00:	103fe026 	beq	r2,zero,10008984 <__alt_data_end+0xf8008984>
10008a04:	8080030b 	ldhu	r2,12(r16)
10008a08:	10800054 	ori	r2,r2,1
10008a0c:	8080030d 	sth	r2,12(r16)
10008a10:	003fdc06 	br	10008984 <__alt_data_end+0xf8008984>
10008a14:	8080030b 	ldhu	r2,12(r16)
10008a18:	10c0800c 	andi	r3,r2,512
10008a1c:	183fd91e 	bne	r3,zero,10008984 <__alt_data_end+0xf8008984>
10008a20:	10800094 	ori	r2,r2,2
10008a24:	80c010c4 	addi	r3,r16,67
10008a28:	8080030d 	sth	r2,12(r16)
10008a2c:	00800044 	movi	r2,1
10008a30:	80c00015 	stw	r3,0(r16)
10008a34:	80c00415 	stw	r3,16(r16)
10008a38:	80800515 	stw	r2,20(r16)
10008a3c:	003fd106 	br	10008984 <__alt_data_end+0xf8008984>
10008a40:	04c00044 	movi	r19,1
10008a44:	04810004 	movi	r18,1024
10008a48:	003fc006 	br	1000894c <__alt_data_end+0xf800894c>

10008a4c <_malloc_r>:
10008a4c:	defff504 	addi	sp,sp,-44
10008a50:	dc800315 	stw	r18,12(sp)
10008a54:	dfc00a15 	stw	ra,40(sp)
10008a58:	df000915 	stw	fp,36(sp)
10008a5c:	ddc00815 	stw	r23,32(sp)
10008a60:	dd800715 	stw	r22,28(sp)
10008a64:	dd400615 	stw	r21,24(sp)
10008a68:	dd000515 	stw	r20,20(sp)
10008a6c:	dcc00415 	stw	r19,16(sp)
10008a70:	dc400215 	stw	r17,8(sp)
10008a74:	dc000115 	stw	r16,4(sp)
10008a78:	288002c4 	addi	r2,r5,11
10008a7c:	00c00584 	movi	r3,22
10008a80:	2025883a 	mov	r18,r4
10008a84:	18802a2e 	bgeu	r3,r2,10008b30 <_malloc_r+0xe4>
10008a88:	047ffe04 	movi	r17,-8
10008a8c:	1462703a 	and	r17,r2,r17
10008a90:	88009e16 	blt	r17,zero,10008d0c <_malloc_r+0x2c0>
10008a94:	89409d36 	bltu	r17,r5,10008d0c <_malloc_r+0x2c0>
10008a98:	00108040 	call	10010804 <__malloc_lock>
10008a9c:	00807dc4 	movi	r2,503
10008aa0:	14402736 	bltu	r2,r17,10008b40 <_malloc_r+0xf4>
10008aa4:	8806d0fa 	srli	r3,r17,3
10008aa8:	04c40074 	movhi	r19,4097
10008aac:	9cce5c04 	addi	r19,r19,14704
10008ab0:	18c5883a 	add	r2,r3,r3
10008ab4:	1085883a 	add	r2,r2,r2
10008ab8:	1085883a 	add	r2,r2,r2
10008abc:	9885883a 	add	r2,r19,r2
10008ac0:	14000317 	ldw	r16,12(r2)
10008ac4:	80814a26 	beq	r16,r2,10008ff0 <_malloc_r+0x5a4>
10008ac8:	80c00117 	ldw	r3,4(r16)
10008acc:	81000317 	ldw	r4,12(r16)
10008ad0:	00bfff04 	movi	r2,-4
10008ad4:	1884703a 	and	r2,r3,r2
10008ad8:	81400217 	ldw	r5,8(r16)
10008adc:	8085883a 	add	r2,r16,r2
10008ae0:	10c00117 	ldw	r3,4(r2)
10008ae4:	29000315 	stw	r4,12(r5)
10008ae8:	21400215 	stw	r5,8(r4)
10008aec:	18c00054 	ori	r3,r3,1
10008af0:	10c00115 	stw	r3,4(r2)
10008af4:	9009883a 	mov	r4,r18
10008af8:	00108240 	call	10010824 <__malloc_unlock>
10008afc:	80800204 	addi	r2,r16,8
10008b00:	dfc00a17 	ldw	ra,40(sp)
10008b04:	df000917 	ldw	fp,36(sp)
10008b08:	ddc00817 	ldw	r23,32(sp)
10008b0c:	dd800717 	ldw	r22,28(sp)
10008b10:	dd400617 	ldw	r21,24(sp)
10008b14:	dd000517 	ldw	r20,20(sp)
10008b18:	dcc00417 	ldw	r19,16(sp)
10008b1c:	dc800317 	ldw	r18,12(sp)
10008b20:	dc400217 	ldw	r17,8(sp)
10008b24:	dc000117 	ldw	r16,4(sp)
10008b28:	dec00b04 	addi	sp,sp,44
10008b2c:	f800283a 	ret
10008b30:	04400404 	movi	r17,16
10008b34:	89407536 	bltu	r17,r5,10008d0c <_malloc_r+0x2c0>
10008b38:	00108040 	call	10010804 <__malloc_lock>
10008b3c:	003fd906 	br	10008aa4 <__alt_data_end+0xf8008aa4>
10008b40:	8806d27a 	srli	r3,r17,9
10008b44:	18007526 	beq	r3,zero,10008d1c <_malloc_r+0x2d0>
10008b48:	00800104 	movi	r2,4
10008b4c:	10c0ef36 	bltu	r2,r3,10008f0c <_malloc_r+0x4c0>
10008b50:	8806d1ba 	srli	r3,r17,6
10008b54:	19c00e04 	addi	r7,r3,56
10008b58:	39cb883a 	add	r5,r7,r7
10008b5c:	04c40074 	movhi	r19,4097
10008b60:	294b883a 	add	r5,r5,r5
10008b64:	9cce5c04 	addi	r19,r19,14704
10008b68:	294b883a 	add	r5,r5,r5
10008b6c:	994b883a 	add	r5,r19,r5
10008b70:	2c000317 	ldw	r16,12(r5)
10008b74:	2c000e26 	beq	r5,r16,10008bb0 <_malloc_r+0x164>
10008b78:	80800117 	ldw	r2,4(r16)
10008b7c:	01bfff04 	movi	r6,-4
10008b80:	010003c4 	movi	r4,15
10008b84:	1184703a 	and	r2,r2,r6
10008b88:	1447c83a 	sub	r3,r2,r17
10008b8c:	20c00716 	blt	r4,r3,10008bac <_malloc_r+0x160>
10008b90:	1800650e 	bge	r3,zero,10008d28 <_malloc_r+0x2dc>
10008b94:	84000317 	ldw	r16,12(r16)
10008b98:	2c000526 	beq	r5,r16,10008bb0 <_malloc_r+0x164>
10008b9c:	80800117 	ldw	r2,4(r16)
10008ba0:	1184703a 	and	r2,r2,r6
10008ba4:	1447c83a 	sub	r3,r2,r17
10008ba8:	20fff90e 	bge	r4,r3,10008b90 <__alt_data_end+0xf8008b90>
10008bac:	39ffffc4 	addi	r7,r7,-1
10008bb0:	38c00044 	addi	r3,r7,1
10008bb4:	01840074 	movhi	r6,4097
10008bb8:	9c000417 	ldw	r16,16(r19)
10008bbc:	318e5c04 	addi	r6,r6,14704
10008bc0:	32400204 	addi	r9,r6,8
10008bc4:	82410326 	beq	r16,r9,10008fd4 <_malloc_r+0x588>
10008bc8:	81000117 	ldw	r4,4(r16)
10008bcc:	00bfff04 	movi	r2,-4
10008bd0:	208e703a 	and	r7,r4,r2
10008bd4:	3c45c83a 	sub	r2,r7,r17
10008bd8:	010003c4 	movi	r4,15
10008bdc:	2080ee16 	blt	r4,r2,10008f98 <_malloc_r+0x54c>
10008be0:	32400515 	stw	r9,20(r6)
10008be4:	32400415 	stw	r9,16(r6)
10008be8:	1000510e 	bge	r2,zero,10008d30 <_malloc_r+0x2e4>
10008bec:	00807fc4 	movi	r2,511
10008bf0:	11c0ce36 	bltu	r2,r7,10008f2c <_malloc_r+0x4e0>
10008bf4:	3808d0fa 	srli	r4,r7,3
10008bf8:	01c00044 	movi	r7,1
10008bfc:	30800117 	ldw	r2,4(r6)
10008c00:	210b883a 	add	r5,r4,r4
10008c04:	294b883a 	add	r5,r5,r5
10008c08:	2009d0ba 	srai	r4,r4,2
10008c0c:	294b883a 	add	r5,r5,r5
10008c10:	298b883a 	add	r5,r5,r6
10008c14:	2a000217 	ldw	r8,8(r5)
10008c18:	3908983a 	sll	r4,r7,r4
10008c1c:	81400315 	stw	r5,12(r16)
10008c20:	82000215 	stw	r8,8(r16)
10008c24:	2088b03a 	or	r4,r4,r2
10008c28:	2c000215 	stw	r16,8(r5)
10008c2c:	31000115 	stw	r4,4(r6)
10008c30:	44000315 	stw	r16,12(r8)
10008c34:	1805d0ba 	srai	r2,r3,2
10008c38:	01400044 	movi	r5,1
10008c3c:	288a983a 	sll	r5,r5,r2
10008c40:	21404336 	bltu	r4,r5,10008d50 <_malloc_r+0x304>
10008c44:	2144703a 	and	r2,r4,r5
10008c48:	10000a1e 	bne	r2,zero,10008c74 <_malloc_r+0x228>
10008c4c:	00bfff04 	movi	r2,-4
10008c50:	294b883a 	add	r5,r5,r5
10008c54:	1886703a 	and	r3,r3,r2
10008c58:	2144703a 	and	r2,r4,r5
10008c5c:	18c00104 	addi	r3,r3,4
10008c60:	1000041e 	bne	r2,zero,10008c74 <_malloc_r+0x228>
10008c64:	294b883a 	add	r5,r5,r5
10008c68:	2144703a 	and	r2,r4,r5
10008c6c:	18c00104 	addi	r3,r3,4
10008c70:	103ffc26 	beq	r2,zero,10008c64 <__alt_data_end+0xf8008c64>
10008c74:	023fff04 	movi	r8,-4
10008c78:	01c003c4 	movi	r7,15
10008c7c:	18c5883a 	add	r2,r3,r3
10008c80:	1085883a 	add	r2,r2,r2
10008c84:	1085883a 	add	r2,r2,r2
10008c88:	9895883a 	add	r10,r19,r2
10008c8c:	52c00304 	addi	r11,r10,12
10008c90:	1819883a 	mov	r12,r3
10008c94:	5c000017 	ldw	r16,0(r11)
10008c98:	59bffd04 	addi	r6,r11,-12
10008c9c:	8180041e 	bne	r16,r6,10008cb0 <_malloc_r+0x264>
10008ca0:	0000ce06 	br	10008fdc <_malloc_r+0x590>
10008ca4:	2000d70e 	bge	r4,zero,10009004 <_malloc_r+0x5b8>
10008ca8:	84000317 	ldw	r16,12(r16)
10008cac:	8180cb26 	beq	r16,r6,10008fdc <_malloc_r+0x590>
10008cb0:	80800117 	ldw	r2,4(r16)
10008cb4:	1204703a 	and	r2,r2,r8
10008cb8:	1449c83a 	sub	r4,r2,r17
10008cbc:	393ff90e 	bge	r7,r4,10008ca4 <__alt_data_end+0xf8008ca4>
10008cc0:	80800317 	ldw	r2,12(r16)
10008cc4:	80c00217 	ldw	r3,8(r16)
10008cc8:	89400054 	ori	r5,r17,1
10008ccc:	81400115 	stw	r5,4(r16)
10008cd0:	18800315 	stw	r2,12(r3)
10008cd4:	10c00215 	stw	r3,8(r2)
10008cd8:	8463883a 	add	r17,r16,r17
10008cdc:	9c400515 	stw	r17,20(r19)
10008ce0:	9c400415 	stw	r17,16(r19)
10008ce4:	20800054 	ori	r2,r4,1
10008ce8:	88800115 	stw	r2,4(r17)
10008cec:	8a400315 	stw	r9,12(r17)
10008cf0:	8a400215 	stw	r9,8(r17)
10008cf4:	8923883a 	add	r17,r17,r4
10008cf8:	89000015 	stw	r4,0(r17)
10008cfc:	9009883a 	mov	r4,r18
10008d00:	00108240 	call	10010824 <__malloc_unlock>
10008d04:	80800204 	addi	r2,r16,8
10008d08:	003f7d06 	br	10008b00 <__alt_data_end+0xf8008b00>
10008d0c:	00800304 	movi	r2,12
10008d10:	90800015 	stw	r2,0(r18)
10008d14:	0005883a 	mov	r2,zero
10008d18:	003f7906 	br	10008b00 <__alt_data_end+0xf8008b00>
10008d1c:	01401f84 	movi	r5,126
10008d20:	01c00fc4 	movi	r7,63
10008d24:	003f8d06 	br	10008b5c <__alt_data_end+0xf8008b5c>
10008d28:	81000317 	ldw	r4,12(r16)
10008d2c:	003f6a06 	br	10008ad8 <__alt_data_end+0xf8008ad8>
10008d30:	81c5883a 	add	r2,r16,r7
10008d34:	10c00117 	ldw	r3,4(r2)
10008d38:	9009883a 	mov	r4,r18
10008d3c:	18c00054 	ori	r3,r3,1
10008d40:	10c00115 	stw	r3,4(r2)
10008d44:	00108240 	call	10010824 <__malloc_unlock>
10008d48:	80800204 	addi	r2,r16,8
10008d4c:	003f6c06 	br	10008b00 <__alt_data_end+0xf8008b00>
10008d50:	9c000217 	ldw	r16,8(r19)
10008d54:	00bfff04 	movi	r2,-4
10008d58:	85800117 	ldw	r22,4(r16)
10008d5c:	b0ac703a 	and	r22,r22,r2
10008d60:	b4400336 	bltu	r22,r17,10008d70 <_malloc_r+0x324>
10008d64:	b445c83a 	sub	r2,r22,r17
10008d68:	00c003c4 	movi	r3,15
10008d6c:	18805d16 	blt	r3,r2,10008ee4 <_malloc_r+0x498>
10008d70:	05c40074 	movhi	r23,4097
10008d74:	00840074 	movhi	r2,4097
10008d78:	bdd3e304 	addi	r23,r23,20364
10008d7c:	109ab904 	addi	r2,r2,27364
10008d80:	15400017 	ldw	r21,0(r2)
10008d84:	b9000017 	ldw	r4,0(r23)
10008d88:	00ffffc4 	movi	r3,-1
10008d8c:	858d883a 	add	r6,r16,r22
10008d90:	8d6b883a 	add	r21,r17,r21
10008d94:	20c0e426 	beq	r4,r3,10009128 <_malloc_r+0x6dc>
10008d98:	ad4403c4 	addi	r21,r21,4111
10008d9c:	00fc0004 	movi	r3,-4096
10008da0:	a8ea703a 	and	r21,r21,r3
10008da4:	9009883a 	mov	r4,r18
10008da8:	a80b883a 	mov	r5,r21
10008dac:	d9800015 	stw	r6,0(sp)
10008db0:	000acf00 	call	1000acf0 <_sbrk_r>
10008db4:	00ffffc4 	movi	r3,-1
10008db8:	1029883a 	mov	r20,r2
10008dbc:	d9800017 	ldw	r6,0(sp)
10008dc0:	10c0a426 	beq	r2,r3,10009054 <_malloc_r+0x608>
10008dc4:	1180a236 	bltu	r2,r6,10009050 <_malloc_r+0x604>
10008dc8:	07040074 	movhi	fp,4097
10008dcc:	e71ac104 	addi	fp,fp,27396
10008dd0:	e0c00017 	ldw	r3,0(fp)
10008dd4:	a8c7883a 	add	r3,r21,r3
10008dd8:	e0c00015 	stw	r3,0(fp)
10008ddc:	3500da26 	beq	r6,r20,10009148 <_malloc_r+0x6fc>
10008de0:	b9000017 	ldw	r4,0(r23)
10008de4:	00bfffc4 	movi	r2,-1
10008de8:	2080e426 	beq	r4,r2,1000917c <_malloc_r+0x730>
10008dec:	a185c83a 	sub	r2,r20,r6
10008df0:	1885883a 	add	r2,r3,r2
10008df4:	e0800015 	stw	r2,0(fp)
10008df8:	a0c001cc 	andi	r3,r20,7
10008dfc:	1800b526 	beq	r3,zero,100090d4 <_malloc_r+0x688>
10008e00:	a0e9c83a 	sub	r20,r20,r3
10008e04:	00840204 	movi	r2,4104
10008e08:	a5000204 	addi	r20,r20,8
10008e0c:	10c7c83a 	sub	r3,r2,r3
10008e10:	a545883a 	add	r2,r20,r21
10008e14:	1083ffcc 	andi	r2,r2,4095
10008e18:	18abc83a 	sub	r21,r3,r2
10008e1c:	9009883a 	mov	r4,r18
10008e20:	a80b883a 	mov	r5,r21
10008e24:	000acf00 	call	1000acf0 <_sbrk_r>
10008e28:	00ffffc4 	movi	r3,-1
10008e2c:	10c0d026 	beq	r2,r3,10009170 <_malloc_r+0x724>
10008e30:	1507c83a 	sub	r3,r2,r20
10008e34:	a8c7883a 	add	r3,r21,r3
10008e38:	18c00054 	ori	r3,r3,1
10008e3c:	e0800017 	ldw	r2,0(fp)
10008e40:	9d000215 	stw	r20,8(r19)
10008e44:	a0c00115 	stw	r3,4(r20)
10008e48:	a887883a 	add	r3,r21,r2
10008e4c:	e0c00015 	stw	r3,0(fp)
10008e50:	84c00e26 	beq	r16,r19,10008e8c <_malloc_r+0x440>
10008e54:	018003c4 	movi	r6,15
10008e58:	3580a02e 	bgeu	r6,r22,100090dc <_malloc_r+0x690>
10008e5c:	81400117 	ldw	r5,4(r16)
10008e60:	013ffe04 	movi	r4,-8
10008e64:	b0bffd04 	addi	r2,r22,-12
10008e68:	1104703a 	and	r2,r2,r4
10008e6c:	2900004c 	andi	r4,r5,1
10008e70:	1108b03a 	or	r4,r2,r4
10008e74:	81000115 	stw	r4,4(r16)
10008e78:	01400144 	movi	r5,5
10008e7c:	8089883a 	add	r4,r16,r2
10008e80:	21400115 	stw	r5,4(r4)
10008e84:	21400215 	stw	r5,8(r4)
10008e88:	3080c036 	bltu	r6,r2,1000918c <_malloc_r+0x740>
10008e8c:	00840074 	movhi	r2,4097
10008e90:	109ab804 	addi	r2,r2,27360
10008e94:	11000017 	ldw	r4,0(r2)
10008e98:	20c0012e 	bgeu	r4,r3,10008ea0 <_malloc_r+0x454>
10008e9c:	10c00015 	stw	r3,0(r2)
10008ea0:	00840074 	movhi	r2,4097
10008ea4:	109ab704 	addi	r2,r2,27356
10008ea8:	11000017 	ldw	r4,0(r2)
10008eac:	9c000217 	ldw	r16,8(r19)
10008eb0:	20c0012e 	bgeu	r4,r3,10008eb8 <_malloc_r+0x46c>
10008eb4:	10c00015 	stw	r3,0(r2)
10008eb8:	80c00117 	ldw	r3,4(r16)
10008ebc:	00bfff04 	movi	r2,-4
10008ec0:	1886703a 	and	r3,r3,r2
10008ec4:	1c45c83a 	sub	r2,r3,r17
10008ec8:	1c400236 	bltu	r3,r17,10008ed4 <_malloc_r+0x488>
10008ecc:	00c003c4 	movi	r3,15
10008ed0:	18800416 	blt	r3,r2,10008ee4 <_malloc_r+0x498>
10008ed4:	9009883a 	mov	r4,r18
10008ed8:	00108240 	call	10010824 <__malloc_unlock>
10008edc:	0005883a 	mov	r2,zero
10008ee0:	003f0706 	br	10008b00 <__alt_data_end+0xf8008b00>
10008ee4:	88c00054 	ori	r3,r17,1
10008ee8:	80c00115 	stw	r3,4(r16)
10008eec:	8463883a 	add	r17,r16,r17
10008ef0:	10800054 	ori	r2,r2,1
10008ef4:	9c400215 	stw	r17,8(r19)
10008ef8:	88800115 	stw	r2,4(r17)
10008efc:	9009883a 	mov	r4,r18
10008f00:	00108240 	call	10010824 <__malloc_unlock>
10008f04:	80800204 	addi	r2,r16,8
10008f08:	003efd06 	br	10008b00 <__alt_data_end+0xf8008b00>
10008f0c:	00800504 	movi	r2,20
10008f10:	10c0482e 	bgeu	r2,r3,10009034 <_malloc_r+0x5e8>
10008f14:	00801504 	movi	r2,84
10008f18:	10c06836 	bltu	r2,r3,100090bc <_malloc_r+0x670>
10008f1c:	8806d33a 	srli	r3,r17,12
10008f20:	19c01b84 	addi	r7,r3,110
10008f24:	39cb883a 	add	r5,r7,r7
10008f28:	003f0c06 	br	10008b5c <__alt_data_end+0xf8008b5c>
10008f2c:	3804d27a 	srli	r2,r7,9
10008f30:	01000104 	movi	r4,4
10008f34:	2080422e 	bgeu	r4,r2,10009040 <_malloc_r+0x5f4>
10008f38:	01000504 	movi	r4,20
10008f3c:	20807c36 	bltu	r4,r2,10009130 <_malloc_r+0x6e4>
10008f40:	110016c4 	addi	r4,r2,91
10008f44:	210b883a 	add	r5,r4,r4
10008f48:	294b883a 	add	r5,r5,r5
10008f4c:	294b883a 	add	r5,r5,r5
10008f50:	994b883a 	add	r5,r19,r5
10008f54:	28800217 	ldw	r2,8(r5)
10008f58:	02040074 	movhi	r8,4097
10008f5c:	420e5c04 	addi	r8,r8,14704
10008f60:	11406326 	beq	r2,r5,100090f0 <_malloc_r+0x6a4>
10008f64:	01bfff04 	movi	r6,-4
10008f68:	11000117 	ldw	r4,4(r2)
10008f6c:	2188703a 	and	r4,r4,r6
10008f70:	3900022e 	bgeu	r7,r4,10008f7c <_malloc_r+0x530>
10008f74:	10800217 	ldw	r2,8(r2)
10008f78:	28bffb1e 	bne	r5,r2,10008f68 <__alt_data_end+0xf8008f68>
10008f7c:	11800317 	ldw	r6,12(r2)
10008f80:	99000117 	ldw	r4,4(r19)
10008f84:	81800315 	stw	r6,12(r16)
10008f88:	80800215 	stw	r2,8(r16)
10008f8c:	34000215 	stw	r16,8(r6)
10008f90:	14000315 	stw	r16,12(r2)
10008f94:	003f2706 	br	10008c34 <__alt_data_end+0xf8008c34>
10008f98:	88c00054 	ori	r3,r17,1
10008f9c:	80c00115 	stw	r3,4(r16)
10008fa0:	8463883a 	add	r17,r16,r17
10008fa4:	34400515 	stw	r17,20(r6)
10008fa8:	34400415 	stw	r17,16(r6)
10008fac:	10c00054 	ori	r3,r2,1
10008fb0:	8a400315 	stw	r9,12(r17)
10008fb4:	8a400215 	stw	r9,8(r17)
10008fb8:	88c00115 	stw	r3,4(r17)
10008fbc:	88a3883a 	add	r17,r17,r2
10008fc0:	88800015 	stw	r2,0(r17)
10008fc4:	9009883a 	mov	r4,r18
10008fc8:	00108240 	call	10010824 <__malloc_unlock>
10008fcc:	80800204 	addi	r2,r16,8
10008fd0:	003ecb06 	br	10008b00 <__alt_data_end+0xf8008b00>
10008fd4:	31000117 	ldw	r4,4(r6)
10008fd8:	003f1606 	br	10008c34 <__alt_data_end+0xf8008c34>
10008fdc:	63000044 	addi	r12,r12,1
10008fe0:	608000cc 	andi	r2,r12,3
10008fe4:	5ac00204 	addi	r11,r11,8
10008fe8:	103f2a1e 	bne	r2,zero,10008c94 <__alt_data_end+0xf8008c94>
10008fec:	00002106 	br	10009074 <_malloc_r+0x628>
10008ff0:	80800204 	addi	r2,r16,8
10008ff4:	84000517 	ldw	r16,20(r16)
10008ff8:	143eb31e 	bne	r2,r16,10008ac8 <__alt_data_end+0xf8008ac8>
10008ffc:	18c00084 	addi	r3,r3,2
10009000:	003eec06 	br	10008bb4 <__alt_data_end+0xf8008bb4>
10009004:	8085883a 	add	r2,r16,r2
10009008:	10c00117 	ldw	r3,4(r2)
1000900c:	81000317 	ldw	r4,12(r16)
10009010:	81400217 	ldw	r5,8(r16)
10009014:	18c00054 	ori	r3,r3,1
10009018:	10c00115 	stw	r3,4(r2)
1000901c:	29000315 	stw	r4,12(r5)
10009020:	21400215 	stw	r5,8(r4)
10009024:	9009883a 	mov	r4,r18
10009028:	00108240 	call	10010824 <__malloc_unlock>
1000902c:	80800204 	addi	r2,r16,8
10009030:	003eb306 	br	10008b00 <__alt_data_end+0xf8008b00>
10009034:	19c016c4 	addi	r7,r3,91
10009038:	39cb883a 	add	r5,r7,r7
1000903c:	003ec706 	br	10008b5c <__alt_data_end+0xf8008b5c>
10009040:	3804d1ba 	srli	r2,r7,6
10009044:	11000e04 	addi	r4,r2,56
10009048:	210b883a 	add	r5,r4,r4
1000904c:	003fbe06 	br	10008f48 <__alt_data_end+0xf8008f48>
10009050:	84ff5d26 	beq	r16,r19,10008dc8 <__alt_data_end+0xf8008dc8>
10009054:	9c000217 	ldw	r16,8(r19)
10009058:	00bfff04 	movi	r2,-4
1000905c:	80c00117 	ldw	r3,4(r16)
10009060:	1886703a 	and	r3,r3,r2
10009064:	003f9706 	br	10008ec4 <__alt_data_end+0xf8008ec4>
10009068:	52800017 	ldw	r10,0(r10)
1000906c:	18ffffc4 	addi	r3,r3,-1
10009070:	50805c1e 	bne	r10,r2,100091e4 <_malloc_r+0x798>
10009074:	190000cc 	andi	r4,r3,3
10009078:	50bffe04 	addi	r2,r10,-8
1000907c:	203ffa1e 	bne	r4,zero,10009068 <__alt_data_end+0xf8009068>
10009080:	98800117 	ldw	r2,4(r19)
10009084:	0146303a 	nor	r3,zero,r5
10009088:	1884703a 	and	r2,r3,r2
1000908c:	98800115 	stw	r2,4(r19)
10009090:	294b883a 	add	r5,r5,r5
10009094:	117f2e36 	bltu	r2,r5,10008d50 <__alt_data_end+0xf8008d50>
10009098:	283f2d26 	beq	r5,zero,10008d50 <__alt_data_end+0xf8008d50>
1000909c:	1146703a 	and	r3,r2,r5
100090a0:	1800521e 	bne	r3,zero,100091ec <_malloc_r+0x7a0>
100090a4:	6007883a 	mov	r3,r12
100090a8:	294b883a 	add	r5,r5,r5
100090ac:	1148703a 	and	r4,r2,r5
100090b0:	18c00104 	addi	r3,r3,4
100090b4:	203ffc26 	beq	r4,zero,100090a8 <__alt_data_end+0xf80090a8>
100090b8:	003ef006 	br	10008c7c <__alt_data_end+0xf8008c7c>
100090bc:	00805504 	movi	r2,340
100090c0:	10c01336 	bltu	r2,r3,10009110 <_malloc_r+0x6c4>
100090c4:	8806d3fa 	srli	r3,r17,15
100090c8:	19c01dc4 	addi	r7,r3,119
100090cc:	39cb883a 	add	r5,r7,r7
100090d0:	003ea206 	br	10008b5c <__alt_data_end+0xf8008b5c>
100090d4:	00c40004 	movi	r3,4096
100090d8:	003f4d06 	br	10008e10 <__alt_data_end+0xf8008e10>
100090dc:	00800044 	movi	r2,1
100090e0:	a0800115 	stw	r2,4(r20)
100090e4:	a021883a 	mov	r16,r20
100090e8:	0007883a 	mov	r3,zero
100090ec:	003f7506 	br	10008ec4 <__alt_data_end+0xf8008ec4>
100090f0:	200bd0ba 	srai	r5,r4,2
100090f4:	01800044 	movi	r6,1
100090f8:	41000117 	ldw	r4,4(r8)
100090fc:	314a983a 	sll	r5,r6,r5
10009100:	100d883a 	mov	r6,r2
10009104:	2908b03a 	or	r4,r5,r4
10009108:	41000115 	stw	r4,4(r8)
1000910c:	003f9d06 	br	10008f84 <__alt_data_end+0xf8008f84>
10009110:	00815504 	movi	r2,1364
10009114:	10c01336 	bltu	r2,r3,10009164 <_malloc_r+0x718>
10009118:	8806d4ba 	srli	r3,r17,18
1000911c:	19c01f04 	addi	r7,r3,124
10009120:	39cb883a 	add	r5,r7,r7
10009124:	003e8d06 	br	10008b5c <__alt_data_end+0xf8008b5c>
10009128:	ad400404 	addi	r21,r21,16
1000912c:	003f1d06 	br	10008da4 <__alt_data_end+0xf8008da4>
10009130:	01001504 	movi	r4,84
10009134:	20801c36 	bltu	r4,r2,100091a8 <_malloc_r+0x75c>
10009138:	3804d33a 	srli	r2,r7,12
1000913c:	11001b84 	addi	r4,r2,110
10009140:	210b883a 	add	r5,r4,r4
10009144:	003f8006 	br	10008f48 <__alt_data_end+0xf8008f48>
10009148:	3083ffcc 	andi	r2,r6,4095
1000914c:	103f241e 	bne	r2,zero,10008de0 <__alt_data_end+0xf8008de0>
10009150:	99000217 	ldw	r4,8(r19)
10009154:	ad85883a 	add	r2,r21,r22
10009158:	10800054 	ori	r2,r2,1
1000915c:	20800115 	stw	r2,4(r4)
10009160:	003f4a06 	br	10008e8c <__alt_data_end+0xf8008e8c>
10009164:	01403f04 	movi	r5,252
10009168:	01c01f84 	movi	r7,126
1000916c:	003e7b06 	br	10008b5c <__alt_data_end+0xf8008b5c>
10009170:	00c00044 	movi	r3,1
10009174:	002b883a 	mov	r21,zero
10009178:	003f3006 	br	10008e3c <__alt_data_end+0xf8008e3c>
1000917c:	00840074 	movhi	r2,4097
10009180:	1093e304 	addi	r2,r2,20364
10009184:	15000015 	stw	r20,0(r2)
10009188:	003f1b06 	br	10008df8 <__alt_data_end+0xf8008df8>
1000918c:	9009883a 	mov	r4,r18
10009190:	81400204 	addi	r5,r16,8
10009194:	0007eb00 	call	10007eb0 <_free_r>
10009198:	00840074 	movhi	r2,4097
1000919c:	109ac104 	addi	r2,r2,27396
100091a0:	10c00017 	ldw	r3,0(r2)
100091a4:	003f3906 	br	10008e8c <__alt_data_end+0xf8008e8c>
100091a8:	01005504 	movi	r4,340
100091ac:	20800436 	bltu	r4,r2,100091c0 <_malloc_r+0x774>
100091b0:	3804d3fa 	srli	r2,r7,15
100091b4:	11001dc4 	addi	r4,r2,119
100091b8:	210b883a 	add	r5,r4,r4
100091bc:	003f6206 	br	10008f48 <__alt_data_end+0xf8008f48>
100091c0:	01015504 	movi	r4,1364
100091c4:	20800436 	bltu	r4,r2,100091d8 <_malloc_r+0x78c>
100091c8:	3804d4ba 	srli	r2,r7,18
100091cc:	11001f04 	addi	r4,r2,124
100091d0:	210b883a 	add	r5,r4,r4
100091d4:	003f5c06 	br	10008f48 <__alt_data_end+0xf8008f48>
100091d8:	01403f04 	movi	r5,252
100091dc:	01001f84 	movi	r4,126
100091e0:	003f5906 	br	10008f48 <__alt_data_end+0xf8008f48>
100091e4:	98800117 	ldw	r2,4(r19)
100091e8:	003fa906 	br	10009090 <__alt_data_end+0xf8009090>
100091ec:	6007883a 	mov	r3,r12
100091f0:	003ea206 	br	10008c7c <__alt_data_end+0xf8008c7c>

100091f4 <memchr>:
100091f4:	208000cc 	andi	r2,r4,3
100091f8:	280f883a 	mov	r7,r5
100091fc:	10003526 	beq	r2,zero,100092d4 <memchr+0xe0>
10009200:	30bfffc4 	addi	r2,r6,-1
10009204:	30001b26 	beq	r6,zero,10009274 <memchr+0x80>
10009208:	21800003 	ldbu	r6,0(r4)
1000920c:	28c03fcc 	andi	r3,r5,255
10009210:	30c01a26 	beq	r6,r3,1000927c <memchr+0x88>
10009214:	180d883a 	mov	r6,r3
10009218:	00000406 	br	1000922c <memchr+0x38>
1000921c:	10001526 	beq	r2,zero,10009274 <memchr+0x80>
10009220:	20c00003 	ldbu	r3,0(r4)
10009224:	10bfffc4 	addi	r2,r2,-1
10009228:	19801426 	beq	r3,r6,1000927c <memchr+0x88>
1000922c:	21000044 	addi	r4,r4,1
10009230:	20c000cc 	andi	r3,r4,3
10009234:	183ff91e 	bne	r3,zero,1000921c <__alt_data_end+0xf800921c>
10009238:	024000c4 	movi	r9,3
1000923c:	48801136 	bltu	r9,r2,10009284 <memchr+0x90>
10009240:	10000c26 	beq	r2,zero,10009274 <memchr+0x80>
10009244:	20c00003 	ldbu	r3,0(r4)
10009248:	29403fcc 	andi	r5,r5,255
1000924c:	19400b26 	beq	r3,r5,1000927c <memchr+0x88>
10009250:	20c00044 	addi	r3,r4,1
10009254:	2085883a 	add	r2,r4,r2
10009258:	39803fcc 	andi	r6,r7,255
1000925c:	00000306 	br	1000926c <memchr+0x78>
10009260:	18c00044 	addi	r3,r3,1
10009264:	197fffc3 	ldbu	r5,-1(r3)
10009268:	29800426 	beq	r5,r6,1000927c <memchr+0x88>
1000926c:	1809883a 	mov	r4,r3
10009270:	18bffb1e 	bne	r3,r2,10009260 <__alt_data_end+0xf8009260>
10009274:	0005883a 	mov	r2,zero
10009278:	f800283a 	ret
1000927c:	2005883a 	mov	r2,r4
10009280:	f800283a 	ret
10009284:	28c03fcc 	andi	r3,r5,255
10009288:	1810923a 	slli	r8,r3,8
1000928c:	02ffbff4 	movhi	r11,65279
10009290:	02a02074 	movhi	r10,32897
10009294:	40c6b03a 	or	r3,r8,r3
10009298:	1810943a 	slli	r8,r3,16
1000929c:	5affbfc4 	addi	r11,r11,-257
100092a0:	52a02004 	addi	r10,r10,-32640
100092a4:	40d0b03a 	or	r8,r8,r3
100092a8:	20c00017 	ldw	r3,0(r4)
100092ac:	40c6f03a 	xor	r3,r8,r3
100092b0:	1acd883a 	add	r6,r3,r11
100092b4:	00c6303a 	nor	r3,zero,r3
100092b8:	30c6703a 	and	r3,r6,r3
100092bc:	1a86703a 	and	r3,r3,r10
100092c0:	183fdf1e 	bne	r3,zero,10009240 <__alt_data_end+0xf8009240>
100092c4:	10bfff04 	addi	r2,r2,-4
100092c8:	21000104 	addi	r4,r4,4
100092cc:	48bff636 	bltu	r9,r2,100092a8 <__alt_data_end+0xf80092a8>
100092d0:	003fdb06 	br	10009240 <__alt_data_end+0xf8009240>
100092d4:	3005883a 	mov	r2,r6
100092d8:	003fd706 	br	10009238 <__alt_data_end+0xf8009238>

100092dc <memcpy>:
100092dc:	deffff04 	addi	sp,sp,-4
100092e0:	dc000015 	stw	r16,0(sp)
100092e4:	00c003c4 	movi	r3,15
100092e8:	2005883a 	mov	r2,r4
100092ec:	1980432e 	bgeu	r3,r6,100093fc <memcpy+0x120>
100092f0:	2146b03a 	or	r3,r4,r5
100092f4:	18c000cc 	andi	r3,r3,3
100092f8:	1800421e 	bne	r3,zero,10009404 <memcpy+0x128>
100092fc:	343ffc04 	addi	r16,r6,-16
10009300:	8020d13a 	srli	r16,r16,4
10009304:	28c00104 	addi	r3,r5,4
10009308:	23400104 	addi	r13,r4,4
1000930c:	801e913a 	slli	r15,r16,4
10009310:	2b000204 	addi	r12,r5,8
10009314:	22c00204 	addi	r11,r4,8
10009318:	7bc00504 	addi	r15,r15,20
1000931c:	2a800304 	addi	r10,r5,12
10009320:	22400304 	addi	r9,r4,12
10009324:	2bdf883a 	add	r15,r5,r15
10009328:	2811883a 	mov	r8,r5
1000932c:	200f883a 	mov	r7,r4
10009330:	41000017 	ldw	r4,0(r8)
10009334:	39c00404 	addi	r7,r7,16
10009338:	18c00404 	addi	r3,r3,16
1000933c:	393ffc15 	stw	r4,-16(r7)
10009340:	1bbffc17 	ldw	r14,-16(r3)
10009344:	6b400404 	addi	r13,r13,16
10009348:	5ac00404 	addi	r11,r11,16
1000934c:	6bbffc15 	stw	r14,-16(r13)
10009350:	63800017 	ldw	r14,0(r12)
10009354:	4a400404 	addi	r9,r9,16
10009358:	42000404 	addi	r8,r8,16
1000935c:	5bbffc15 	stw	r14,-16(r11)
10009360:	53800017 	ldw	r14,0(r10)
10009364:	63000404 	addi	r12,r12,16
10009368:	52800404 	addi	r10,r10,16
1000936c:	4bbffc15 	stw	r14,-16(r9)
10009370:	1bffef1e 	bne	r3,r15,10009330 <__alt_data_end+0xf8009330>
10009374:	81c00044 	addi	r7,r16,1
10009378:	380e913a 	slli	r7,r7,4
1000937c:	310003cc 	andi	r4,r6,15
10009380:	02c000c4 	movi	r11,3
10009384:	11c7883a 	add	r3,r2,r7
10009388:	29cb883a 	add	r5,r5,r7
1000938c:	59001f2e 	bgeu	r11,r4,1000940c <memcpy+0x130>
10009390:	1813883a 	mov	r9,r3
10009394:	2811883a 	mov	r8,r5
10009398:	200f883a 	mov	r7,r4
1000939c:	42800017 	ldw	r10,0(r8)
100093a0:	4a400104 	addi	r9,r9,4
100093a4:	39ffff04 	addi	r7,r7,-4
100093a8:	4abfff15 	stw	r10,-4(r9)
100093ac:	42000104 	addi	r8,r8,4
100093b0:	59fffa36 	bltu	r11,r7,1000939c <__alt_data_end+0xf800939c>
100093b4:	213fff04 	addi	r4,r4,-4
100093b8:	2008d0ba 	srli	r4,r4,2
100093bc:	318000cc 	andi	r6,r6,3
100093c0:	21000044 	addi	r4,r4,1
100093c4:	2109883a 	add	r4,r4,r4
100093c8:	2109883a 	add	r4,r4,r4
100093cc:	1907883a 	add	r3,r3,r4
100093d0:	290b883a 	add	r5,r5,r4
100093d4:	30000626 	beq	r6,zero,100093f0 <memcpy+0x114>
100093d8:	198d883a 	add	r6,r3,r6
100093dc:	29c00003 	ldbu	r7,0(r5)
100093e0:	18c00044 	addi	r3,r3,1
100093e4:	29400044 	addi	r5,r5,1
100093e8:	19ffffc5 	stb	r7,-1(r3)
100093ec:	19bffb1e 	bne	r3,r6,100093dc <__alt_data_end+0xf80093dc>
100093f0:	dc000017 	ldw	r16,0(sp)
100093f4:	dec00104 	addi	sp,sp,4
100093f8:	f800283a 	ret
100093fc:	2007883a 	mov	r3,r4
10009400:	003ff406 	br	100093d4 <__alt_data_end+0xf80093d4>
10009404:	2007883a 	mov	r3,r4
10009408:	003ff306 	br	100093d8 <__alt_data_end+0xf80093d8>
1000940c:	200d883a 	mov	r6,r4
10009410:	003ff006 	br	100093d4 <__alt_data_end+0xf80093d4>

10009414 <memmove>:
10009414:	2005883a 	mov	r2,r4
10009418:	29000b2e 	bgeu	r5,r4,10009448 <memmove+0x34>
1000941c:	298f883a 	add	r7,r5,r6
10009420:	21c0092e 	bgeu	r4,r7,10009448 <memmove+0x34>
10009424:	2187883a 	add	r3,r4,r6
10009428:	198bc83a 	sub	r5,r3,r6
1000942c:	30004b26 	beq	r6,zero,1000955c <memmove+0x148>
10009430:	39ffffc4 	addi	r7,r7,-1
10009434:	39000003 	ldbu	r4,0(r7)
10009438:	18ffffc4 	addi	r3,r3,-1
1000943c:	19000005 	stb	r4,0(r3)
10009440:	197ffb1e 	bne	r3,r5,10009430 <__alt_data_end+0xf8009430>
10009444:	f800283a 	ret
10009448:	00c003c4 	movi	r3,15
1000944c:	1980412e 	bgeu	r3,r6,10009554 <memmove+0x140>
10009450:	1146b03a 	or	r3,r2,r5
10009454:	18c000cc 	andi	r3,r3,3
10009458:	1800411e 	bne	r3,zero,10009560 <memmove+0x14c>
1000945c:	33fffc04 	addi	r15,r6,-16
10009460:	781ed13a 	srli	r15,r15,4
10009464:	28c00104 	addi	r3,r5,4
10009468:	13400104 	addi	r13,r2,4
1000946c:	781c913a 	slli	r14,r15,4
10009470:	2b000204 	addi	r12,r5,8
10009474:	12c00204 	addi	r11,r2,8
10009478:	73800504 	addi	r14,r14,20
1000947c:	2a800304 	addi	r10,r5,12
10009480:	12400304 	addi	r9,r2,12
10009484:	2b9d883a 	add	r14,r5,r14
10009488:	2811883a 	mov	r8,r5
1000948c:	100f883a 	mov	r7,r2
10009490:	41000017 	ldw	r4,0(r8)
10009494:	39c00404 	addi	r7,r7,16
10009498:	18c00404 	addi	r3,r3,16
1000949c:	393ffc15 	stw	r4,-16(r7)
100094a0:	193ffc17 	ldw	r4,-16(r3)
100094a4:	6b400404 	addi	r13,r13,16
100094a8:	5ac00404 	addi	r11,r11,16
100094ac:	693ffc15 	stw	r4,-16(r13)
100094b0:	61000017 	ldw	r4,0(r12)
100094b4:	4a400404 	addi	r9,r9,16
100094b8:	42000404 	addi	r8,r8,16
100094bc:	593ffc15 	stw	r4,-16(r11)
100094c0:	51000017 	ldw	r4,0(r10)
100094c4:	63000404 	addi	r12,r12,16
100094c8:	52800404 	addi	r10,r10,16
100094cc:	493ffc15 	stw	r4,-16(r9)
100094d0:	1bbfef1e 	bne	r3,r14,10009490 <__alt_data_end+0xf8009490>
100094d4:	79000044 	addi	r4,r15,1
100094d8:	2008913a 	slli	r4,r4,4
100094dc:	328003cc 	andi	r10,r6,15
100094e0:	02c000c4 	movi	r11,3
100094e4:	1107883a 	add	r3,r2,r4
100094e8:	290b883a 	add	r5,r5,r4
100094ec:	5a801e2e 	bgeu	r11,r10,10009568 <memmove+0x154>
100094f0:	1813883a 	mov	r9,r3
100094f4:	2811883a 	mov	r8,r5
100094f8:	500f883a 	mov	r7,r10
100094fc:	41000017 	ldw	r4,0(r8)
10009500:	4a400104 	addi	r9,r9,4
10009504:	39ffff04 	addi	r7,r7,-4
10009508:	493fff15 	stw	r4,-4(r9)
1000950c:	42000104 	addi	r8,r8,4
10009510:	59fffa36 	bltu	r11,r7,100094fc <__alt_data_end+0xf80094fc>
10009514:	513fff04 	addi	r4,r10,-4
10009518:	2008d0ba 	srli	r4,r4,2
1000951c:	318000cc 	andi	r6,r6,3
10009520:	21000044 	addi	r4,r4,1
10009524:	2109883a 	add	r4,r4,r4
10009528:	2109883a 	add	r4,r4,r4
1000952c:	1907883a 	add	r3,r3,r4
10009530:	290b883a 	add	r5,r5,r4
10009534:	30000926 	beq	r6,zero,1000955c <memmove+0x148>
10009538:	198d883a 	add	r6,r3,r6
1000953c:	29c00003 	ldbu	r7,0(r5)
10009540:	18c00044 	addi	r3,r3,1
10009544:	29400044 	addi	r5,r5,1
10009548:	19ffffc5 	stb	r7,-1(r3)
1000954c:	19bffb1e 	bne	r3,r6,1000953c <__alt_data_end+0xf800953c>
10009550:	f800283a 	ret
10009554:	1007883a 	mov	r3,r2
10009558:	003ff606 	br	10009534 <__alt_data_end+0xf8009534>
1000955c:	f800283a 	ret
10009560:	1007883a 	mov	r3,r2
10009564:	003ff406 	br	10009538 <__alt_data_end+0xf8009538>
10009568:	500d883a 	mov	r6,r10
1000956c:	003ff106 	br	10009534 <__alt_data_end+0xf8009534>

10009570 <memset>:
10009570:	20c000cc 	andi	r3,r4,3
10009574:	2005883a 	mov	r2,r4
10009578:	18004326 	beq	r3,zero,10009688 <memset+0x118>
1000957c:	31ffffc4 	addi	r7,r6,-1
10009580:	30004026 	beq	r6,zero,10009684 <memset+0x114>
10009584:	2813883a 	mov	r9,r5
10009588:	200d883a 	mov	r6,r4
1000958c:	2007883a 	mov	r3,r4
10009590:	00000406 	br	100095a4 <memset+0x34>
10009594:	3a3fffc4 	addi	r8,r7,-1
10009598:	31800044 	addi	r6,r6,1
1000959c:	38003926 	beq	r7,zero,10009684 <memset+0x114>
100095a0:	400f883a 	mov	r7,r8
100095a4:	18c00044 	addi	r3,r3,1
100095a8:	32400005 	stb	r9,0(r6)
100095ac:	1a0000cc 	andi	r8,r3,3
100095b0:	403ff81e 	bne	r8,zero,10009594 <__alt_data_end+0xf8009594>
100095b4:	010000c4 	movi	r4,3
100095b8:	21c02d2e 	bgeu	r4,r7,10009670 <memset+0x100>
100095bc:	29803fcc 	andi	r6,r5,255
100095c0:	3008923a 	slli	r4,r6,8
100095c4:	218cb03a 	or	r6,r4,r6
100095c8:	3008943a 	slli	r4,r6,16
100095cc:	218cb03a 	or	r6,r4,r6
100095d0:	010003c4 	movi	r4,15
100095d4:	21c0182e 	bgeu	r4,r7,10009638 <memset+0xc8>
100095d8:	3b3ffc04 	addi	r12,r7,-16
100095dc:	6018d13a 	srli	r12,r12,4
100095e0:	1a000104 	addi	r8,r3,4
100095e4:	1ac00204 	addi	r11,r3,8
100095e8:	6008913a 	slli	r4,r12,4
100095ec:	1a800304 	addi	r10,r3,12
100095f0:	1813883a 	mov	r9,r3
100095f4:	21000504 	addi	r4,r4,20
100095f8:	1909883a 	add	r4,r3,r4
100095fc:	49800015 	stw	r6,0(r9)
10009600:	41800015 	stw	r6,0(r8)
10009604:	59800015 	stw	r6,0(r11)
10009608:	51800015 	stw	r6,0(r10)
1000960c:	42000404 	addi	r8,r8,16
10009610:	4a400404 	addi	r9,r9,16
10009614:	5ac00404 	addi	r11,r11,16
10009618:	52800404 	addi	r10,r10,16
1000961c:	413ff71e 	bne	r8,r4,100095fc <__alt_data_end+0xf80095fc>
10009620:	63000044 	addi	r12,r12,1
10009624:	6018913a 	slli	r12,r12,4
10009628:	39c003cc 	andi	r7,r7,15
1000962c:	010000c4 	movi	r4,3
10009630:	1b07883a 	add	r3,r3,r12
10009634:	21c00e2e 	bgeu	r4,r7,10009670 <memset+0x100>
10009638:	1813883a 	mov	r9,r3
1000963c:	3811883a 	mov	r8,r7
10009640:	010000c4 	movi	r4,3
10009644:	49800015 	stw	r6,0(r9)
10009648:	423fff04 	addi	r8,r8,-4
1000964c:	4a400104 	addi	r9,r9,4
10009650:	223ffc36 	bltu	r4,r8,10009644 <__alt_data_end+0xf8009644>
10009654:	393fff04 	addi	r4,r7,-4
10009658:	2008d0ba 	srli	r4,r4,2
1000965c:	39c000cc 	andi	r7,r7,3
10009660:	21000044 	addi	r4,r4,1
10009664:	2109883a 	add	r4,r4,r4
10009668:	2109883a 	add	r4,r4,r4
1000966c:	1907883a 	add	r3,r3,r4
10009670:	38000426 	beq	r7,zero,10009684 <memset+0x114>
10009674:	19cf883a 	add	r7,r3,r7
10009678:	19400005 	stb	r5,0(r3)
1000967c:	18c00044 	addi	r3,r3,1
10009680:	19fffd1e 	bne	r3,r7,10009678 <__alt_data_end+0xf8009678>
10009684:	f800283a 	ret
10009688:	2007883a 	mov	r3,r4
1000968c:	300f883a 	mov	r7,r6
10009690:	003fc806 	br	100095b4 <__alt_data_end+0xf80095b4>

10009694 <_Balloc>:
10009694:	20801317 	ldw	r2,76(r4)
10009698:	defffc04 	addi	sp,sp,-16
1000969c:	dc400115 	stw	r17,4(sp)
100096a0:	dc000015 	stw	r16,0(sp)
100096a4:	dfc00315 	stw	ra,12(sp)
100096a8:	dc800215 	stw	r18,8(sp)
100096ac:	2023883a 	mov	r17,r4
100096b0:	2821883a 	mov	r16,r5
100096b4:	10000f26 	beq	r2,zero,100096f4 <_Balloc+0x60>
100096b8:	8407883a 	add	r3,r16,r16
100096bc:	18c7883a 	add	r3,r3,r3
100096c0:	10c7883a 	add	r3,r2,r3
100096c4:	18800017 	ldw	r2,0(r3)
100096c8:	10001126 	beq	r2,zero,10009710 <_Balloc+0x7c>
100096cc:	11000017 	ldw	r4,0(r2)
100096d0:	19000015 	stw	r4,0(r3)
100096d4:	10000415 	stw	zero,16(r2)
100096d8:	10000315 	stw	zero,12(r2)
100096dc:	dfc00317 	ldw	ra,12(sp)
100096e0:	dc800217 	ldw	r18,8(sp)
100096e4:	dc400117 	ldw	r17,4(sp)
100096e8:	dc000017 	ldw	r16,0(sp)
100096ec:	dec00404 	addi	sp,sp,16
100096f0:	f800283a 	ret
100096f4:	01400104 	movi	r5,4
100096f8:	01800844 	movi	r6,33
100096fc:	000c5300 	call	1000c530 <_calloc_r>
10009700:	88801315 	stw	r2,76(r17)
10009704:	103fec1e 	bne	r2,zero,100096b8 <__alt_data_end+0xf80096b8>
10009708:	0005883a 	mov	r2,zero
1000970c:	003ff306 	br	100096dc <__alt_data_end+0xf80096dc>
10009710:	01400044 	movi	r5,1
10009714:	2c24983a 	sll	r18,r5,r16
10009718:	8809883a 	mov	r4,r17
1000971c:	91800144 	addi	r6,r18,5
10009720:	318d883a 	add	r6,r6,r6
10009724:	318d883a 	add	r6,r6,r6
10009728:	000c5300 	call	1000c530 <_calloc_r>
1000972c:	103ff626 	beq	r2,zero,10009708 <__alt_data_end+0xf8009708>
10009730:	14000115 	stw	r16,4(r2)
10009734:	14800215 	stw	r18,8(r2)
10009738:	003fe606 	br	100096d4 <__alt_data_end+0xf80096d4>

1000973c <_Bfree>:
1000973c:	28000826 	beq	r5,zero,10009760 <_Bfree+0x24>
10009740:	28c00117 	ldw	r3,4(r5)
10009744:	20801317 	ldw	r2,76(r4)
10009748:	18c7883a 	add	r3,r3,r3
1000974c:	18c7883a 	add	r3,r3,r3
10009750:	10c5883a 	add	r2,r2,r3
10009754:	10c00017 	ldw	r3,0(r2)
10009758:	28c00015 	stw	r3,0(r5)
1000975c:	11400015 	stw	r5,0(r2)
10009760:	f800283a 	ret

10009764 <__multadd>:
10009764:	defff704 	addi	sp,sp,-36
10009768:	dc800215 	stw	r18,8(sp)
1000976c:	2c800417 	ldw	r18,16(r5)
10009770:	ddc00715 	stw	r23,28(sp)
10009774:	dd800615 	stw	r22,24(sp)
10009778:	dd000415 	stw	r20,16(sp)
1000977c:	dcc00315 	stw	r19,12(sp)
10009780:	dc400115 	stw	r17,4(sp)
10009784:	dc000015 	stw	r16,0(sp)
10009788:	dfc00815 	stw	ra,32(sp)
1000978c:	dd400515 	stw	r21,20(sp)
10009790:	2827883a 	mov	r19,r5
10009794:	2029883a 	mov	r20,r4
10009798:	3023883a 	mov	r17,r6
1000979c:	3821883a 	mov	r16,r7
100097a0:	2d800504 	addi	r22,r5,20
100097a4:	002f883a 	mov	r23,zero
100097a8:	b5400017 	ldw	r21,0(r22)
100097ac:	880b883a 	mov	r5,r17
100097b0:	bdc00044 	addi	r23,r23,1
100097b4:	a93fffcc 	andi	r4,r21,65535
100097b8:	00039ec0 	call	100039ec <__mulsi3>
100097bc:	1421883a 	add	r16,r2,r16
100097c0:	a808d43a 	srli	r4,r21,16
100097c4:	802ad43a 	srli	r21,r16,16
100097c8:	880b883a 	mov	r5,r17
100097cc:	00039ec0 	call	100039ec <__mulsi3>
100097d0:	a88f883a 	add	r7,r21,r2
100097d4:	3804943a 	slli	r2,r7,16
100097d8:	80ffffcc 	andi	r3,r16,65535
100097dc:	b5800104 	addi	r22,r22,4
100097e0:	10c7883a 	add	r3,r2,r3
100097e4:	b0ffff15 	stw	r3,-4(r22)
100097e8:	3820d43a 	srli	r16,r7,16
100097ec:	bcbfee16 	blt	r23,r18,100097a8 <__alt_data_end+0xf80097a8>
100097f0:	80000926 	beq	r16,zero,10009818 <__multadd+0xb4>
100097f4:	98800217 	ldw	r2,8(r19)
100097f8:	9080130e 	bge	r18,r2,10009848 <__multadd+0xe4>
100097fc:	90800144 	addi	r2,r18,5
10009800:	1085883a 	add	r2,r2,r2
10009804:	1085883a 	add	r2,r2,r2
10009808:	9885883a 	add	r2,r19,r2
1000980c:	14000015 	stw	r16,0(r2)
10009810:	94800044 	addi	r18,r18,1
10009814:	9c800415 	stw	r18,16(r19)
10009818:	9805883a 	mov	r2,r19
1000981c:	dfc00817 	ldw	ra,32(sp)
10009820:	ddc00717 	ldw	r23,28(sp)
10009824:	dd800617 	ldw	r22,24(sp)
10009828:	dd400517 	ldw	r21,20(sp)
1000982c:	dd000417 	ldw	r20,16(sp)
10009830:	dcc00317 	ldw	r19,12(sp)
10009834:	dc800217 	ldw	r18,8(sp)
10009838:	dc400117 	ldw	r17,4(sp)
1000983c:	dc000017 	ldw	r16,0(sp)
10009840:	dec00904 	addi	sp,sp,36
10009844:	f800283a 	ret
10009848:	99400117 	ldw	r5,4(r19)
1000984c:	a009883a 	mov	r4,r20
10009850:	29400044 	addi	r5,r5,1
10009854:	00096940 	call	10009694 <_Balloc>
10009858:	99800417 	ldw	r6,16(r19)
1000985c:	99400304 	addi	r5,r19,12
10009860:	11000304 	addi	r4,r2,12
10009864:	31800084 	addi	r6,r6,2
10009868:	318d883a 	add	r6,r6,r6
1000986c:	318d883a 	add	r6,r6,r6
10009870:	1023883a 	mov	r17,r2
10009874:	00092dc0 	call	100092dc <memcpy>
10009878:	99000117 	ldw	r4,4(r19)
1000987c:	a0c01317 	ldw	r3,76(r20)
10009880:	2109883a 	add	r4,r4,r4
10009884:	2109883a 	add	r4,r4,r4
10009888:	1907883a 	add	r3,r3,r4
1000988c:	18800017 	ldw	r2,0(r3)
10009890:	98800015 	stw	r2,0(r19)
10009894:	1cc00015 	stw	r19,0(r3)
10009898:	8827883a 	mov	r19,r17
1000989c:	003fd706 	br	100097fc <__alt_data_end+0xf80097fc>

100098a0 <__s2b>:
100098a0:	defff904 	addi	sp,sp,-28
100098a4:	dc400115 	stw	r17,4(sp)
100098a8:	dc000015 	stw	r16,0(sp)
100098ac:	2023883a 	mov	r17,r4
100098b0:	2821883a 	mov	r16,r5
100098b4:	39000204 	addi	r4,r7,8
100098b8:	01400244 	movi	r5,9
100098bc:	dcc00315 	stw	r19,12(sp)
100098c0:	dc800215 	stw	r18,8(sp)
100098c4:	dfc00615 	stw	ra,24(sp)
100098c8:	dd400515 	stw	r21,20(sp)
100098cc:	dd000415 	stw	r20,16(sp)
100098d0:	3825883a 	mov	r18,r7
100098d4:	3027883a 	mov	r19,r6
100098d8:	000392c0 	call	1000392c <__divsi3>
100098dc:	00c00044 	movi	r3,1
100098e0:	000b883a 	mov	r5,zero
100098e4:	1880030e 	bge	r3,r2,100098f4 <__s2b+0x54>
100098e8:	18c7883a 	add	r3,r3,r3
100098ec:	29400044 	addi	r5,r5,1
100098f0:	18bffd16 	blt	r3,r2,100098e8 <__alt_data_end+0xf80098e8>
100098f4:	8809883a 	mov	r4,r17
100098f8:	00096940 	call	10009694 <_Balloc>
100098fc:	d8c00717 	ldw	r3,28(sp)
10009900:	10c00515 	stw	r3,20(r2)
10009904:	00c00044 	movi	r3,1
10009908:	10c00415 	stw	r3,16(r2)
1000990c:	00c00244 	movi	r3,9
10009910:	1cc0210e 	bge	r3,r19,10009998 <__s2b+0xf8>
10009914:	80eb883a 	add	r21,r16,r3
10009918:	a829883a 	mov	r20,r21
1000991c:	84e1883a 	add	r16,r16,r19
10009920:	a1c00007 	ldb	r7,0(r20)
10009924:	8809883a 	mov	r4,r17
10009928:	a5000044 	addi	r20,r20,1
1000992c:	100b883a 	mov	r5,r2
10009930:	01800284 	movi	r6,10
10009934:	39fff404 	addi	r7,r7,-48
10009938:	00097640 	call	10009764 <__multadd>
1000993c:	a43ff81e 	bne	r20,r16,10009920 <__alt_data_end+0xf8009920>
10009940:	ace1883a 	add	r16,r21,r19
10009944:	843ffe04 	addi	r16,r16,-8
10009948:	9c800a0e 	bge	r19,r18,10009974 <__s2b+0xd4>
1000994c:	94e5c83a 	sub	r18,r18,r19
10009950:	84a5883a 	add	r18,r16,r18
10009954:	81c00007 	ldb	r7,0(r16)
10009958:	8809883a 	mov	r4,r17
1000995c:	84000044 	addi	r16,r16,1
10009960:	100b883a 	mov	r5,r2
10009964:	01800284 	movi	r6,10
10009968:	39fff404 	addi	r7,r7,-48
1000996c:	00097640 	call	10009764 <__multadd>
10009970:	84bff81e 	bne	r16,r18,10009954 <__alt_data_end+0xf8009954>
10009974:	dfc00617 	ldw	ra,24(sp)
10009978:	dd400517 	ldw	r21,20(sp)
1000997c:	dd000417 	ldw	r20,16(sp)
10009980:	dcc00317 	ldw	r19,12(sp)
10009984:	dc800217 	ldw	r18,8(sp)
10009988:	dc400117 	ldw	r17,4(sp)
1000998c:	dc000017 	ldw	r16,0(sp)
10009990:	dec00704 	addi	sp,sp,28
10009994:	f800283a 	ret
10009998:	84000284 	addi	r16,r16,10
1000999c:	1827883a 	mov	r19,r3
100099a0:	003fe906 	br	10009948 <__alt_data_end+0xf8009948>

100099a4 <__hi0bits>:
100099a4:	20bfffec 	andhi	r2,r4,65535
100099a8:	1000141e 	bne	r2,zero,100099fc <__hi0bits+0x58>
100099ac:	2008943a 	slli	r4,r4,16
100099b0:	00800404 	movi	r2,16
100099b4:	20ffc02c 	andhi	r3,r4,65280
100099b8:	1800021e 	bne	r3,zero,100099c4 <__hi0bits+0x20>
100099bc:	2008923a 	slli	r4,r4,8
100099c0:	10800204 	addi	r2,r2,8
100099c4:	20fc002c 	andhi	r3,r4,61440
100099c8:	1800021e 	bne	r3,zero,100099d4 <__hi0bits+0x30>
100099cc:	2008913a 	slli	r4,r4,4
100099d0:	10800104 	addi	r2,r2,4
100099d4:	20f0002c 	andhi	r3,r4,49152
100099d8:	1800031e 	bne	r3,zero,100099e8 <__hi0bits+0x44>
100099dc:	2109883a 	add	r4,r4,r4
100099e0:	10800084 	addi	r2,r2,2
100099e4:	2109883a 	add	r4,r4,r4
100099e8:	20000316 	blt	r4,zero,100099f8 <__hi0bits+0x54>
100099ec:	2110002c 	andhi	r4,r4,16384
100099f0:	2000041e 	bne	r4,zero,10009a04 <__hi0bits+0x60>
100099f4:	00800804 	movi	r2,32
100099f8:	f800283a 	ret
100099fc:	0005883a 	mov	r2,zero
10009a00:	003fec06 	br	100099b4 <__alt_data_end+0xf80099b4>
10009a04:	10800044 	addi	r2,r2,1
10009a08:	f800283a 	ret

10009a0c <__lo0bits>:
10009a0c:	20c00017 	ldw	r3,0(r4)
10009a10:	188001cc 	andi	r2,r3,7
10009a14:	10000826 	beq	r2,zero,10009a38 <__lo0bits+0x2c>
10009a18:	1880004c 	andi	r2,r3,1
10009a1c:	1000211e 	bne	r2,zero,10009aa4 <__lo0bits+0x98>
10009a20:	1880008c 	andi	r2,r3,2
10009a24:	1000211e 	bne	r2,zero,10009aac <__lo0bits+0xa0>
10009a28:	1806d0ba 	srli	r3,r3,2
10009a2c:	00800084 	movi	r2,2
10009a30:	20c00015 	stw	r3,0(r4)
10009a34:	f800283a 	ret
10009a38:	18bfffcc 	andi	r2,r3,65535
10009a3c:	10001326 	beq	r2,zero,10009a8c <__lo0bits+0x80>
10009a40:	0005883a 	mov	r2,zero
10009a44:	19403fcc 	andi	r5,r3,255
10009a48:	2800021e 	bne	r5,zero,10009a54 <__lo0bits+0x48>
10009a4c:	1806d23a 	srli	r3,r3,8
10009a50:	10800204 	addi	r2,r2,8
10009a54:	194003cc 	andi	r5,r3,15
10009a58:	2800021e 	bne	r5,zero,10009a64 <__lo0bits+0x58>
10009a5c:	1806d13a 	srli	r3,r3,4
10009a60:	10800104 	addi	r2,r2,4
10009a64:	194000cc 	andi	r5,r3,3
10009a68:	2800021e 	bne	r5,zero,10009a74 <__lo0bits+0x68>
10009a6c:	1806d0ba 	srli	r3,r3,2
10009a70:	10800084 	addi	r2,r2,2
10009a74:	1940004c 	andi	r5,r3,1
10009a78:	2800081e 	bne	r5,zero,10009a9c <__lo0bits+0x90>
10009a7c:	1806d07a 	srli	r3,r3,1
10009a80:	1800051e 	bne	r3,zero,10009a98 <__lo0bits+0x8c>
10009a84:	00800804 	movi	r2,32
10009a88:	f800283a 	ret
10009a8c:	1806d43a 	srli	r3,r3,16
10009a90:	00800404 	movi	r2,16
10009a94:	003feb06 	br	10009a44 <__alt_data_end+0xf8009a44>
10009a98:	10800044 	addi	r2,r2,1
10009a9c:	20c00015 	stw	r3,0(r4)
10009aa0:	f800283a 	ret
10009aa4:	0005883a 	mov	r2,zero
10009aa8:	f800283a 	ret
10009aac:	1806d07a 	srli	r3,r3,1
10009ab0:	00800044 	movi	r2,1
10009ab4:	20c00015 	stw	r3,0(r4)
10009ab8:	f800283a 	ret

10009abc <__i2b>:
10009abc:	defffd04 	addi	sp,sp,-12
10009ac0:	dc000015 	stw	r16,0(sp)
10009ac4:	04000044 	movi	r16,1
10009ac8:	dc400115 	stw	r17,4(sp)
10009acc:	2823883a 	mov	r17,r5
10009ad0:	800b883a 	mov	r5,r16
10009ad4:	dfc00215 	stw	ra,8(sp)
10009ad8:	00096940 	call	10009694 <_Balloc>
10009adc:	14400515 	stw	r17,20(r2)
10009ae0:	14000415 	stw	r16,16(r2)
10009ae4:	dfc00217 	ldw	ra,8(sp)
10009ae8:	dc400117 	ldw	r17,4(sp)
10009aec:	dc000017 	ldw	r16,0(sp)
10009af0:	dec00304 	addi	sp,sp,12
10009af4:	f800283a 	ret

10009af8 <__multiply>:
10009af8:	deffef04 	addi	sp,sp,-68
10009afc:	dc400815 	stw	r17,32(sp)
10009b00:	dc000715 	stw	r16,28(sp)
10009b04:	2c400417 	ldw	r17,16(r5)
10009b08:	34000417 	ldw	r16,16(r6)
10009b0c:	dd800d15 	stw	r22,52(sp)
10009b10:	dc800915 	stw	r18,36(sp)
10009b14:	dfc01015 	stw	ra,64(sp)
10009b18:	df000f15 	stw	fp,60(sp)
10009b1c:	ddc00e15 	stw	r23,56(sp)
10009b20:	dd400c15 	stw	r21,48(sp)
10009b24:	dd000b15 	stw	r20,44(sp)
10009b28:	dcc00a15 	stw	r19,40(sp)
10009b2c:	2825883a 	mov	r18,r5
10009b30:	302d883a 	mov	r22,r6
10009b34:	8c009116 	blt	r17,r16,10009d7c <__multiply+0x284>
10009b38:	8005883a 	mov	r2,r16
10009b3c:	8821883a 	mov	r16,r17
10009b40:	1023883a 	mov	r17,r2
10009b44:	90800217 	ldw	r2,8(r18)
10009b48:	8447883a 	add	r3,r16,r17
10009b4c:	d8c00215 	stw	r3,8(sp)
10009b50:	91400117 	ldw	r5,4(r18)
10009b54:	10c0010e 	bge	r2,r3,10009b5c <__multiply+0x64>
10009b58:	29400044 	addi	r5,r5,1
10009b5c:	00096940 	call	10009694 <_Balloc>
10009b60:	d8c00217 	ldw	r3,8(sp)
10009b64:	d8800615 	stw	r2,24(sp)
10009b68:	18eb883a 	add	r21,r3,r3
10009b6c:	ad6b883a 	add	r21,r21,r21
10009b70:	10c00504 	addi	r3,r2,20
10009b74:	1d6b883a 	add	r21,r3,r21
10009b78:	d8c00115 	stw	r3,4(sp)
10009b7c:	dd400315 	stw	r21,12(sp)
10009b80:	1805883a 	mov	r2,r3
10009b84:	1d40042e 	bgeu	r3,r21,10009b98 <__multiply+0xa0>
10009b88:	d8c00317 	ldw	r3,12(sp)
10009b8c:	10000015 	stw	zero,0(r2)
10009b90:	10800104 	addi	r2,r2,4
10009b94:	10fffc36 	bltu	r2,r3,10009b88 <__alt_data_end+0xf8009b88>
10009b98:	8c63883a 	add	r17,r17,r17
10009b9c:	b5800504 	addi	r22,r22,20
10009ba0:	8c63883a 	add	r17,r17,r17
10009ba4:	94800504 	addi	r18,r18,20
10009ba8:	8421883a 	add	r16,r16,r16
10009bac:	b463883a 	add	r17,r22,r17
10009bb0:	8421883a 	add	r16,r16,r16
10009bb4:	dd800015 	stw	r22,0(sp)
10009bb8:	dc800415 	stw	r18,16(sp)
10009bbc:	dc400515 	stw	r17,20(sp)
10009bc0:	9429883a 	add	r20,r18,r16
10009bc4:	b4404f2e 	bgeu	r22,r17,10009d04 <__multiply+0x20c>
10009bc8:	d8c00017 	ldw	r3,0(sp)
10009bcc:	1c800017 	ldw	r18,0(r3)
10009bd0:	943fffcc 	andi	r16,r18,65535
10009bd4:	80001e26 	beq	r16,zero,10009c50 <__multiply+0x158>
10009bd8:	dd800117 	ldw	r22,4(sp)
10009bdc:	dd400417 	ldw	r21,16(sp)
10009be0:	0025883a 	mov	r18,zero
10009be4:	adc00017 	ldw	r23,0(r21)
10009be8:	b4c00017 	ldw	r19,0(r22)
10009bec:	800b883a 	mov	r5,r16
10009bf0:	b93fffcc 	andi	r4,r23,65535
10009bf4:	00039ec0 	call	100039ec <__mulsi3>
10009bf8:	9c7fffcc 	andi	r17,r19,65535
10009bfc:	8885883a 	add	r2,r17,r2
10009c00:	b808d43a 	srli	r4,r23,16
10009c04:	14a3883a 	add	r17,r2,r18
10009c08:	9826d43a 	srli	r19,r19,16
10009c0c:	8824d43a 	srli	r18,r17,16
10009c10:	800b883a 	mov	r5,r16
10009c14:	00039ec0 	call	100039ec <__mulsi3>
10009c18:	9885883a 	add	r2,r19,r2
10009c1c:	14a7883a 	add	r19,r2,r18
10009c20:	88ffffcc 	andi	r3,r17,65535
10009c24:	9822943a 	slli	r17,r19,16
10009c28:	ad400104 	addi	r21,r21,4
10009c2c:	b005883a 	mov	r2,r22
10009c30:	88c6b03a 	or	r3,r17,r3
10009c34:	b0c00015 	stw	r3,0(r22)
10009c38:	9824d43a 	srli	r18,r19,16
10009c3c:	b5800104 	addi	r22,r22,4
10009c40:	ad3fe836 	bltu	r21,r20,10009be4 <__alt_data_end+0xf8009be4>
10009c44:	d8c00017 	ldw	r3,0(sp)
10009c48:	14800115 	stw	r18,4(r2)
10009c4c:	1c800017 	ldw	r18,0(r3)
10009c50:	9024d43a 	srli	r18,r18,16
10009c54:	90002226 	beq	r18,zero,10009ce0 <__multiply+0x1e8>
10009c58:	d8c00117 	ldw	r3,4(sp)
10009c5c:	dd800417 	ldw	r22,16(sp)
10009c60:	002f883a 	mov	r23,zero
10009c64:	1f000017 	ldw	fp,0(r3)
10009c68:	1823883a 	mov	r17,r3
10009c6c:	182b883a 	mov	r21,r3
10009c70:	e021883a 	mov	r16,fp
10009c74:	00000106 	br	10009c7c <__multiply+0x184>
10009c78:	982b883a 	mov	r21,r19
10009c7c:	b100000b 	ldhu	r4,0(r22)
10009c80:	8020d43a 	srli	r16,r16,16
10009c84:	900b883a 	mov	r5,r18
10009c88:	00039ec0 	call	100039ec <__mulsi3>
10009c8c:	1405883a 	add	r2,r2,r16
10009c90:	15ef883a 	add	r23,r2,r23
10009c94:	b804943a 	slli	r2,r23,16
10009c98:	e0ffffcc 	andi	r3,fp,65535
10009c9c:	8c400104 	addi	r17,r17,4
10009ca0:	10c6b03a 	or	r3,r2,r3
10009ca4:	88ffff15 	stw	r3,-4(r17)
10009ca8:	b5800104 	addi	r22,r22,4
10009cac:	b13fff17 	ldw	r4,-4(r22)
10009cb0:	acc00104 	addi	r19,r21,4
10009cb4:	900b883a 	mov	r5,r18
10009cb8:	2008d43a 	srli	r4,r4,16
10009cbc:	9c000017 	ldw	r16,0(r19)
10009cc0:	00039ec0 	call	100039ec <__mulsi3>
10009cc4:	b806d43a 	srli	r3,r23,16
10009cc8:	813fffcc 	andi	r4,r16,65535
10009ccc:	1105883a 	add	r2,r2,r4
10009cd0:	10f9883a 	add	fp,r2,r3
10009cd4:	e02ed43a 	srli	r23,fp,16
10009cd8:	b53fe736 	bltu	r22,r20,10009c78 <__alt_data_end+0xf8009c78>
10009cdc:	af000115 	stw	fp,4(r21)
10009ce0:	d8c00017 	ldw	r3,0(sp)
10009ce4:	d9000517 	ldw	r4,20(sp)
10009ce8:	18c00104 	addi	r3,r3,4
10009cec:	d8c00015 	stw	r3,0(sp)
10009cf0:	d8c00117 	ldw	r3,4(sp)
10009cf4:	18c00104 	addi	r3,r3,4
10009cf8:	d8c00115 	stw	r3,4(sp)
10009cfc:	d8c00017 	ldw	r3,0(sp)
10009d00:	193fb136 	bltu	r3,r4,10009bc8 <__alt_data_end+0xf8009bc8>
10009d04:	d8c00217 	ldw	r3,8(sp)
10009d08:	00c00c0e 	bge	zero,r3,10009d3c <__multiply+0x244>
10009d0c:	d8c00317 	ldw	r3,12(sp)
10009d10:	18bfff17 	ldw	r2,-4(r3)
10009d14:	1d7fff04 	addi	r21,r3,-4
10009d18:	10000326 	beq	r2,zero,10009d28 <__multiply+0x230>
10009d1c:	00000706 	br	10009d3c <__multiply+0x244>
10009d20:	a8800017 	ldw	r2,0(r21)
10009d24:	1000051e 	bne	r2,zero,10009d3c <__multiply+0x244>
10009d28:	d8c00217 	ldw	r3,8(sp)
10009d2c:	ad7fff04 	addi	r21,r21,-4
10009d30:	18ffffc4 	addi	r3,r3,-1
10009d34:	d8c00215 	stw	r3,8(sp)
10009d38:	183ff91e 	bne	r3,zero,10009d20 <__alt_data_end+0xf8009d20>
10009d3c:	d8c00617 	ldw	r3,24(sp)
10009d40:	d9000217 	ldw	r4,8(sp)
10009d44:	1805883a 	mov	r2,r3
10009d48:	19000415 	stw	r4,16(r3)
10009d4c:	dfc01017 	ldw	ra,64(sp)
10009d50:	df000f17 	ldw	fp,60(sp)
10009d54:	ddc00e17 	ldw	r23,56(sp)
10009d58:	dd800d17 	ldw	r22,52(sp)
10009d5c:	dd400c17 	ldw	r21,48(sp)
10009d60:	dd000b17 	ldw	r20,44(sp)
10009d64:	dcc00a17 	ldw	r19,40(sp)
10009d68:	dc800917 	ldw	r18,36(sp)
10009d6c:	dc400817 	ldw	r17,32(sp)
10009d70:	dc000717 	ldw	r16,28(sp)
10009d74:	dec01104 	addi	sp,sp,68
10009d78:	f800283a 	ret
10009d7c:	3025883a 	mov	r18,r6
10009d80:	282d883a 	mov	r22,r5
10009d84:	003f6f06 	br	10009b44 <__alt_data_end+0xf8009b44>

10009d88 <__pow5mult>:
10009d88:	defffa04 	addi	sp,sp,-24
10009d8c:	dcc00315 	stw	r19,12(sp)
10009d90:	dc800215 	stw	r18,8(sp)
10009d94:	dc000015 	stw	r16,0(sp)
10009d98:	dfc00515 	stw	ra,20(sp)
10009d9c:	dd000415 	stw	r20,16(sp)
10009da0:	dc400115 	stw	r17,4(sp)
10009da4:	308000cc 	andi	r2,r6,3
10009da8:	3021883a 	mov	r16,r6
10009dac:	2027883a 	mov	r19,r4
10009db0:	2825883a 	mov	r18,r5
10009db4:	10002e1e 	bne	r2,zero,10009e70 <__pow5mult+0xe8>
10009db8:	8021d0ba 	srai	r16,r16,2
10009dbc:	80001a26 	beq	r16,zero,10009e28 <__pow5mult+0xa0>
10009dc0:	9c401217 	ldw	r17,72(r19)
10009dc4:	8800061e 	bne	r17,zero,10009de0 <__pow5mult+0x58>
10009dc8:	00003406 	br	10009e9c <__pow5mult+0x114>
10009dcc:	8021d07a 	srai	r16,r16,1
10009dd0:	80001526 	beq	r16,zero,10009e28 <__pow5mult+0xa0>
10009dd4:	88800017 	ldw	r2,0(r17)
10009dd8:	10001c26 	beq	r2,zero,10009e4c <__pow5mult+0xc4>
10009ddc:	1023883a 	mov	r17,r2
10009de0:	80c0004c 	andi	r3,r16,1
10009de4:	183ff926 	beq	r3,zero,10009dcc <__alt_data_end+0xf8009dcc>
10009de8:	900b883a 	mov	r5,r18
10009dec:	880d883a 	mov	r6,r17
10009df0:	9809883a 	mov	r4,r19
10009df4:	0009af80 	call	10009af8 <__multiply>
10009df8:	90001b26 	beq	r18,zero,10009e68 <__pow5mult+0xe0>
10009dfc:	91c00117 	ldw	r7,4(r18)
10009e00:	98c01317 	ldw	r3,76(r19)
10009e04:	8021d07a 	srai	r16,r16,1
10009e08:	39cf883a 	add	r7,r7,r7
10009e0c:	39cf883a 	add	r7,r7,r7
10009e10:	19c7883a 	add	r3,r3,r7
10009e14:	19000017 	ldw	r4,0(r3)
10009e18:	91000015 	stw	r4,0(r18)
10009e1c:	1c800015 	stw	r18,0(r3)
10009e20:	1025883a 	mov	r18,r2
10009e24:	803feb1e 	bne	r16,zero,10009dd4 <__alt_data_end+0xf8009dd4>
10009e28:	9005883a 	mov	r2,r18
10009e2c:	dfc00517 	ldw	ra,20(sp)
10009e30:	dd000417 	ldw	r20,16(sp)
10009e34:	dcc00317 	ldw	r19,12(sp)
10009e38:	dc800217 	ldw	r18,8(sp)
10009e3c:	dc400117 	ldw	r17,4(sp)
10009e40:	dc000017 	ldw	r16,0(sp)
10009e44:	dec00604 	addi	sp,sp,24
10009e48:	f800283a 	ret
10009e4c:	9809883a 	mov	r4,r19
10009e50:	880b883a 	mov	r5,r17
10009e54:	880d883a 	mov	r6,r17
10009e58:	0009af80 	call	10009af8 <__multiply>
10009e5c:	88800015 	stw	r2,0(r17)
10009e60:	10000015 	stw	zero,0(r2)
10009e64:	003fdd06 	br	10009ddc <__alt_data_end+0xf8009ddc>
10009e68:	1025883a 	mov	r18,r2
10009e6c:	003fd706 	br	10009dcc <__alt_data_end+0xf8009dcc>
10009e70:	10bfffc4 	addi	r2,r2,-1
10009e74:	1085883a 	add	r2,r2,r2
10009e78:	00c40074 	movhi	r3,4097
10009e7c:	18cc9704 	addi	r3,r3,12892
10009e80:	1085883a 	add	r2,r2,r2
10009e84:	1885883a 	add	r2,r3,r2
10009e88:	11800017 	ldw	r6,0(r2)
10009e8c:	000f883a 	mov	r7,zero
10009e90:	00097640 	call	10009764 <__multadd>
10009e94:	1025883a 	mov	r18,r2
10009e98:	003fc706 	br	10009db8 <__alt_data_end+0xf8009db8>
10009e9c:	05000044 	movi	r20,1
10009ea0:	9809883a 	mov	r4,r19
10009ea4:	a00b883a 	mov	r5,r20
10009ea8:	00096940 	call	10009694 <_Balloc>
10009eac:	1023883a 	mov	r17,r2
10009eb0:	00809c44 	movi	r2,625
10009eb4:	88800515 	stw	r2,20(r17)
10009eb8:	8d000415 	stw	r20,16(r17)
10009ebc:	9c401215 	stw	r17,72(r19)
10009ec0:	88000015 	stw	zero,0(r17)
10009ec4:	003fc606 	br	10009de0 <__alt_data_end+0xf8009de0>

10009ec8 <__lshift>:
10009ec8:	defff904 	addi	sp,sp,-28
10009ecc:	dd000415 	stw	r20,16(sp)
10009ed0:	dcc00315 	stw	r19,12(sp)
10009ed4:	3029d17a 	srai	r20,r6,5
10009ed8:	2cc00417 	ldw	r19,16(r5)
10009edc:	28800217 	ldw	r2,8(r5)
10009ee0:	dd400515 	stw	r21,20(sp)
10009ee4:	a4e7883a 	add	r19,r20,r19
10009ee8:	dc800215 	stw	r18,8(sp)
10009eec:	dc400115 	stw	r17,4(sp)
10009ef0:	dc000015 	stw	r16,0(sp)
10009ef4:	dfc00615 	stw	ra,24(sp)
10009ef8:	9c000044 	addi	r16,r19,1
10009efc:	2823883a 	mov	r17,r5
10009f00:	302b883a 	mov	r21,r6
10009f04:	2025883a 	mov	r18,r4
10009f08:	29400117 	ldw	r5,4(r5)
10009f0c:	1400030e 	bge	r2,r16,10009f1c <__lshift+0x54>
10009f10:	1085883a 	add	r2,r2,r2
10009f14:	29400044 	addi	r5,r5,1
10009f18:	143ffd16 	blt	r2,r16,10009f10 <__alt_data_end+0xf8009f10>
10009f1c:	9009883a 	mov	r4,r18
10009f20:	00096940 	call	10009694 <_Balloc>
10009f24:	11c00504 	addi	r7,r2,20
10009f28:	0500090e 	bge	zero,r20,10009f50 <__lshift+0x88>
10009f2c:	3811883a 	mov	r8,r7
10009f30:	0007883a 	mov	r3,zero
10009f34:	40000015 	stw	zero,0(r8)
10009f38:	18c00044 	addi	r3,r3,1
10009f3c:	42000104 	addi	r8,r8,4
10009f40:	1d3ffc1e 	bne	r3,r20,10009f34 <__alt_data_end+0xf8009f34>
10009f44:	18c7883a 	add	r3,r3,r3
10009f48:	18c7883a 	add	r3,r3,r3
10009f4c:	38cf883a 	add	r7,r7,r3
10009f50:	89000417 	ldw	r4,16(r17)
10009f54:	88c00504 	addi	r3,r17,20
10009f58:	a98007cc 	andi	r6,r21,31
10009f5c:	2109883a 	add	r4,r4,r4
10009f60:	2109883a 	add	r4,r4,r4
10009f64:	1909883a 	add	r4,r3,r4
10009f68:	30002326 	beq	r6,zero,10009ff8 <__lshift+0x130>
10009f6c:	01400804 	movi	r5,32
10009f70:	298bc83a 	sub	r5,r5,r6
10009f74:	0013883a 	mov	r9,zero
10009f78:	1a000017 	ldw	r8,0(r3)
10009f7c:	3815883a 	mov	r10,r7
10009f80:	39c00104 	addi	r7,r7,4
10009f84:	4190983a 	sll	r8,r8,r6
10009f88:	18c00104 	addi	r3,r3,4
10009f8c:	4a10b03a 	or	r8,r9,r8
10009f90:	3a3fff15 	stw	r8,-4(r7)
10009f94:	1a3fff17 	ldw	r8,-4(r3)
10009f98:	4152d83a 	srl	r9,r8,r5
10009f9c:	193ff636 	bltu	r3,r4,10009f78 <__alt_data_end+0xf8009f78>
10009fa0:	52400115 	stw	r9,4(r10)
10009fa4:	48000126 	beq	r9,zero,10009fac <__lshift+0xe4>
10009fa8:	9c000084 	addi	r16,r19,2
10009fac:	89000117 	ldw	r4,4(r17)
10009fb0:	90c01317 	ldw	r3,76(r18)
10009fb4:	843fffc4 	addi	r16,r16,-1
10009fb8:	2109883a 	add	r4,r4,r4
10009fbc:	2109883a 	add	r4,r4,r4
10009fc0:	1907883a 	add	r3,r3,r4
10009fc4:	19000017 	ldw	r4,0(r3)
10009fc8:	14000415 	stw	r16,16(r2)
10009fcc:	89000015 	stw	r4,0(r17)
10009fd0:	1c400015 	stw	r17,0(r3)
10009fd4:	dfc00617 	ldw	ra,24(sp)
10009fd8:	dd400517 	ldw	r21,20(sp)
10009fdc:	dd000417 	ldw	r20,16(sp)
10009fe0:	dcc00317 	ldw	r19,12(sp)
10009fe4:	dc800217 	ldw	r18,8(sp)
10009fe8:	dc400117 	ldw	r17,4(sp)
10009fec:	dc000017 	ldw	r16,0(sp)
10009ff0:	dec00704 	addi	sp,sp,28
10009ff4:	f800283a 	ret
10009ff8:	19400017 	ldw	r5,0(r3)
10009ffc:	39c00104 	addi	r7,r7,4
1000a000:	18c00104 	addi	r3,r3,4
1000a004:	397fff15 	stw	r5,-4(r7)
1000a008:	193ffb36 	bltu	r3,r4,10009ff8 <__alt_data_end+0xf8009ff8>
1000a00c:	003fe706 	br	10009fac <__alt_data_end+0xf8009fac>

1000a010 <__mcmp>:
1000a010:	20800417 	ldw	r2,16(r4)
1000a014:	28c00417 	ldw	r3,16(r5)
1000a018:	10c5c83a 	sub	r2,r2,r3
1000a01c:	1000111e 	bne	r2,zero,1000a064 <__mcmp+0x54>
1000a020:	18c7883a 	add	r3,r3,r3
1000a024:	18c7883a 	add	r3,r3,r3
1000a028:	21000504 	addi	r4,r4,20
1000a02c:	29400504 	addi	r5,r5,20
1000a030:	20c5883a 	add	r2,r4,r3
1000a034:	28cb883a 	add	r5,r5,r3
1000a038:	00000106 	br	1000a040 <__mcmp+0x30>
1000a03c:	20800a2e 	bgeu	r4,r2,1000a068 <__mcmp+0x58>
1000a040:	10bfff04 	addi	r2,r2,-4
1000a044:	297fff04 	addi	r5,r5,-4
1000a048:	11800017 	ldw	r6,0(r2)
1000a04c:	28c00017 	ldw	r3,0(r5)
1000a050:	30fffa26 	beq	r6,r3,1000a03c <__alt_data_end+0xf800a03c>
1000a054:	30c00236 	bltu	r6,r3,1000a060 <__mcmp+0x50>
1000a058:	00800044 	movi	r2,1
1000a05c:	f800283a 	ret
1000a060:	00bfffc4 	movi	r2,-1
1000a064:	f800283a 	ret
1000a068:	0005883a 	mov	r2,zero
1000a06c:	f800283a 	ret

1000a070 <__mdiff>:
1000a070:	defffb04 	addi	sp,sp,-20
1000a074:	dc000015 	stw	r16,0(sp)
1000a078:	2821883a 	mov	r16,r5
1000a07c:	dcc00315 	stw	r19,12(sp)
1000a080:	300b883a 	mov	r5,r6
1000a084:	2027883a 	mov	r19,r4
1000a088:	8009883a 	mov	r4,r16
1000a08c:	dc800215 	stw	r18,8(sp)
1000a090:	dfc00415 	stw	ra,16(sp)
1000a094:	dc400115 	stw	r17,4(sp)
1000a098:	3025883a 	mov	r18,r6
1000a09c:	000a0100 	call	1000a010 <__mcmp>
1000a0a0:	10005226 	beq	r2,zero,1000a1ec <__mdiff+0x17c>
1000a0a4:	10004c16 	blt	r2,zero,1000a1d8 <__mdiff+0x168>
1000a0a8:	0023883a 	mov	r17,zero
1000a0ac:	81400117 	ldw	r5,4(r16)
1000a0b0:	9809883a 	mov	r4,r19
1000a0b4:	00096940 	call	10009694 <_Balloc>
1000a0b8:	83400417 	ldw	r13,16(r16)
1000a0bc:	93800417 	ldw	r14,16(r18)
1000a0c0:	81000504 	addi	r4,r16,20
1000a0c4:	6b59883a 	add	r12,r13,r13
1000a0c8:	739d883a 	add	r14,r14,r14
1000a0cc:	6319883a 	add	r12,r12,r12
1000a0d0:	91800504 	addi	r6,r18,20
1000a0d4:	739d883a 	add	r14,r14,r14
1000a0d8:	14400315 	stw	r17,12(r2)
1000a0dc:	2319883a 	add	r12,r4,r12
1000a0e0:	339d883a 	add	r14,r6,r14
1000a0e4:	12400504 	addi	r9,r2,20
1000a0e8:	0007883a 	mov	r3,zero
1000a0ec:	22000017 	ldw	r8,0(r4)
1000a0f0:	32800017 	ldw	r10,0(r6)
1000a0f4:	4ac00104 	addi	r11,r9,4
1000a0f8:	41ffffcc 	andi	r7,r8,65535
1000a0fc:	38c7883a 	add	r3,r7,r3
1000a100:	51ffffcc 	andi	r7,r10,65535
1000a104:	19cfc83a 	sub	r7,r3,r7
1000a108:	4010d43a 	srli	r8,r8,16
1000a10c:	5014d43a 	srli	r10,r10,16
1000a110:	3807d43a 	srai	r3,r7,16
1000a114:	39ffffcc 	andi	r7,r7,65535
1000a118:	4291c83a 	sub	r8,r8,r10
1000a11c:	40c7883a 	add	r3,r8,r3
1000a120:	1810943a 	slli	r8,r3,16
1000a124:	31800104 	addi	r6,r6,4
1000a128:	21000104 	addi	r4,r4,4
1000a12c:	41ceb03a 	or	r7,r8,r7
1000a130:	49c00015 	stw	r7,0(r9)
1000a134:	1807d43a 	srai	r3,r3,16
1000a138:	580b883a 	mov	r5,r11
1000a13c:	5813883a 	mov	r9,r11
1000a140:	33bfea36 	bltu	r6,r14,1000a0ec <__alt_data_end+0xf800a0ec>
1000a144:	2011883a 	mov	r8,r4
1000a148:	2300152e 	bgeu	r4,r12,1000a1a0 <__mdiff+0x130>
1000a14c:	21400017 	ldw	r5,0(r4)
1000a150:	4a400104 	addi	r9,r9,4
1000a154:	21000104 	addi	r4,r4,4
1000a158:	29ffffcc 	andi	r7,r5,65535
1000a15c:	38c7883a 	add	r3,r7,r3
1000a160:	280ad43a 	srli	r5,r5,16
1000a164:	180dd43a 	srai	r6,r3,16
1000a168:	19ffffcc 	andi	r7,r3,65535
1000a16c:	3147883a 	add	r3,r6,r5
1000a170:	180a943a 	slli	r5,r3,16
1000a174:	1807d43a 	srai	r3,r3,16
1000a178:	29ceb03a 	or	r7,r5,r7
1000a17c:	49ffff15 	stw	r7,-4(r9)
1000a180:	233ff236 	bltu	r4,r12,1000a14c <__alt_data_end+0xf800a14c>
1000a184:	0206303a 	nor	r3,zero,r8
1000a188:	1b07883a 	add	r3,r3,r12
1000a18c:	1806d0ba 	srli	r3,r3,2
1000a190:	18c00044 	addi	r3,r3,1
1000a194:	18c7883a 	add	r3,r3,r3
1000a198:	18c7883a 	add	r3,r3,r3
1000a19c:	58cb883a 	add	r5,r11,r3
1000a1a0:	28ffff04 	addi	r3,r5,-4
1000a1a4:	3800041e 	bne	r7,zero,1000a1b8 <__mdiff+0x148>
1000a1a8:	18ffff04 	addi	r3,r3,-4
1000a1ac:	19000017 	ldw	r4,0(r3)
1000a1b0:	6b7fffc4 	addi	r13,r13,-1
1000a1b4:	203ffc26 	beq	r4,zero,1000a1a8 <__alt_data_end+0xf800a1a8>
1000a1b8:	13400415 	stw	r13,16(r2)
1000a1bc:	dfc00417 	ldw	ra,16(sp)
1000a1c0:	dcc00317 	ldw	r19,12(sp)
1000a1c4:	dc800217 	ldw	r18,8(sp)
1000a1c8:	dc400117 	ldw	r17,4(sp)
1000a1cc:	dc000017 	ldw	r16,0(sp)
1000a1d0:	dec00504 	addi	sp,sp,20
1000a1d4:	f800283a 	ret
1000a1d8:	8005883a 	mov	r2,r16
1000a1dc:	04400044 	movi	r17,1
1000a1e0:	9021883a 	mov	r16,r18
1000a1e4:	1025883a 	mov	r18,r2
1000a1e8:	003fb006 	br	1000a0ac <__alt_data_end+0xf800a0ac>
1000a1ec:	9809883a 	mov	r4,r19
1000a1f0:	000b883a 	mov	r5,zero
1000a1f4:	00096940 	call	10009694 <_Balloc>
1000a1f8:	00c00044 	movi	r3,1
1000a1fc:	10c00415 	stw	r3,16(r2)
1000a200:	10000515 	stw	zero,20(r2)
1000a204:	003fed06 	br	1000a1bc <__alt_data_end+0xf800a1bc>

1000a208 <__ulp>:
1000a208:	295ffc2c 	andhi	r5,r5,32752
1000a20c:	00bf3034 	movhi	r2,64704
1000a210:	2887883a 	add	r3,r5,r2
1000a214:	00c0020e 	bge	zero,r3,1000a220 <__ulp+0x18>
1000a218:	0005883a 	mov	r2,zero
1000a21c:	f800283a 	ret
1000a220:	00c7c83a 	sub	r3,zero,r3
1000a224:	180bd53a 	srai	r5,r3,20
1000a228:	008004c4 	movi	r2,19
1000a22c:	11400a0e 	bge	r2,r5,1000a258 <__ulp+0x50>
1000a230:	00800c84 	movi	r2,50
1000a234:	0007883a 	mov	r3,zero
1000a238:	11400516 	blt	r2,r5,1000a250 <__ulp+0x48>
1000a23c:	00800cc4 	movi	r2,51
1000a240:	114bc83a 	sub	r5,r2,r5
1000a244:	00800044 	movi	r2,1
1000a248:	1144983a 	sll	r2,r2,r5
1000a24c:	f800283a 	ret
1000a250:	00800044 	movi	r2,1
1000a254:	f800283a 	ret
1000a258:	00800234 	movhi	r2,8
1000a25c:	1147d83a 	sra	r3,r2,r5
1000a260:	0005883a 	mov	r2,zero
1000a264:	f800283a 	ret

1000a268 <__b2d>:
1000a268:	defffa04 	addi	sp,sp,-24
1000a26c:	dc000015 	stw	r16,0(sp)
1000a270:	24000417 	ldw	r16,16(r4)
1000a274:	dc400115 	stw	r17,4(sp)
1000a278:	24400504 	addi	r17,r4,20
1000a27c:	8421883a 	add	r16,r16,r16
1000a280:	8421883a 	add	r16,r16,r16
1000a284:	8c21883a 	add	r16,r17,r16
1000a288:	dc800215 	stw	r18,8(sp)
1000a28c:	84bfff17 	ldw	r18,-4(r16)
1000a290:	dd000415 	stw	r20,16(sp)
1000a294:	dcc00315 	stw	r19,12(sp)
1000a298:	9009883a 	mov	r4,r18
1000a29c:	2829883a 	mov	r20,r5
1000a2a0:	dfc00515 	stw	ra,20(sp)
1000a2a4:	00099a40 	call	100099a4 <__hi0bits>
1000a2a8:	00c00804 	movi	r3,32
1000a2ac:	1887c83a 	sub	r3,r3,r2
1000a2b0:	a0c00015 	stw	r3,0(r20)
1000a2b4:	00c00284 	movi	r3,10
1000a2b8:	84ffff04 	addi	r19,r16,-4
1000a2bc:	18801216 	blt	r3,r2,1000a308 <__b2d+0xa0>
1000a2c0:	014002c4 	movi	r5,11
1000a2c4:	2889c83a 	sub	r4,r5,r2
1000a2c8:	9106d83a 	srl	r3,r18,r4
1000a2cc:	18cffc34 	orhi	r3,r3,16368
1000a2d0:	8cc0282e 	bgeu	r17,r19,1000a374 <__b2d+0x10c>
1000a2d4:	817ffe17 	ldw	r5,-8(r16)
1000a2d8:	290ad83a 	srl	r5,r5,r4
1000a2dc:	10800544 	addi	r2,r2,21
1000a2e0:	9084983a 	sll	r2,r18,r2
1000a2e4:	2884b03a 	or	r2,r5,r2
1000a2e8:	dfc00517 	ldw	ra,20(sp)
1000a2ec:	dd000417 	ldw	r20,16(sp)
1000a2f0:	dcc00317 	ldw	r19,12(sp)
1000a2f4:	dc800217 	ldw	r18,8(sp)
1000a2f8:	dc400117 	ldw	r17,4(sp)
1000a2fc:	dc000017 	ldw	r16,0(sp)
1000a300:	dec00604 	addi	sp,sp,24
1000a304:	f800283a 	ret
1000a308:	113ffd44 	addi	r4,r2,-11
1000a30c:	8cc00f2e 	bgeu	r17,r19,1000a34c <__b2d+0xe4>
1000a310:	81bffe04 	addi	r6,r16,-8
1000a314:	817ffe17 	ldw	r5,-8(r16)
1000a318:	20001326 	beq	r4,zero,1000a368 <__b2d+0x100>
1000a31c:	00c00ac4 	movi	r3,43
1000a320:	1885c83a 	sub	r2,r3,r2
1000a324:	2886d83a 	srl	r3,r5,r2
1000a328:	9124983a 	sll	r18,r18,r4
1000a32c:	90e4b03a 	or	r18,r18,r3
1000a330:	90cffc34 	orhi	r3,r18,16368
1000a334:	8980112e 	bgeu	r17,r6,1000a37c <__b2d+0x114>
1000a338:	81bffd17 	ldw	r6,-12(r16)
1000a33c:	308cd83a 	srl	r6,r6,r2
1000a340:	2904983a 	sll	r2,r5,r4
1000a344:	1184b03a 	or	r2,r2,r6
1000a348:	003fe706 	br	1000a2e8 <__alt_data_end+0xf800a2e8>
1000a34c:	20000526 	beq	r4,zero,1000a364 <__b2d+0xfc>
1000a350:	9124983a 	sll	r18,r18,r4
1000a354:	000d883a 	mov	r6,zero
1000a358:	000b883a 	mov	r5,zero
1000a35c:	90cffc34 	orhi	r3,r18,16368
1000a360:	003ff706 	br	1000a340 <__alt_data_end+0xf800a340>
1000a364:	000b883a 	mov	r5,zero
1000a368:	90cffc34 	orhi	r3,r18,16368
1000a36c:	2805883a 	mov	r2,r5
1000a370:	003fdd06 	br	1000a2e8 <__alt_data_end+0xf800a2e8>
1000a374:	000b883a 	mov	r5,zero
1000a378:	003fd806 	br	1000a2dc <__alt_data_end+0xf800a2dc>
1000a37c:	000d883a 	mov	r6,zero
1000a380:	003fef06 	br	1000a340 <__alt_data_end+0xf800a340>

1000a384 <__d2b>:
1000a384:	defff704 	addi	sp,sp,-36
1000a388:	dc000215 	stw	r16,8(sp)
1000a38c:	3021883a 	mov	r16,r6
1000a390:	dc400315 	stw	r17,12(sp)
1000a394:	8022907a 	slli	r17,r16,1
1000a398:	dd400715 	stw	r21,28(sp)
1000a39c:	282b883a 	mov	r21,r5
1000a3a0:	01400044 	movi	r5,1
1000a3a4:	dd000615 	stw	r20,24(sp)
1000a3a8:	dcc00515 	stw	r19,20(sp)
1000a3ac:	dc800415 	stw	r18,16(sp)
1000a3b0:	dfc00815 	stw	ra,32(sp)
1000a3b4:	3829883a 	mov	r20,r7
1000a3b8:	dc800917 	ldw	r18,36(sp)
1000a3bc:	8822d57a 	srli	r17,r17,21
1000a3c0:	00096940 	call	10009694 <_Balloc>
1000a3c4:	1027883a 	mov	r19,r2
1000a3c8:	00800434 	movhi	r2,16
1000a3cc:	10bfffc4 	addi	r2,r2,-1
1000a3d0:	808c703a 	and	r6,r16,r2
1000a3d4:	88000126 	beq	r17,zero,1000a3dc <__d2b+0x58>
1000a3d8:	31800434 	orhi	r6,r6,16
1000a3dc:	d9800015 	stw	r6,0(sp)
1000a3e0:	a8001f26 	beq	r21,zero,1000a460 <__d2b+0xdc>
1000a3e4:	d9000104 	addi	r4,sp,4
1000a3e8:	dd400115 	stw	r21,4(sp)
1000a3ec:	0009a0c0 	call	10009a0c <__lo0bits>
1000a3f0:	d8c00017 	ldw	r3,0(sp)
1000a3f4:	1000291e 	bne	r2,zero,1000a49c <__d2b+0x118>
1000a3f8:	d9000117 	ldw	r4,4(sp)
1000a3fc:	99000515 	stw	r4,20(r19)
1000a400:	1820c03a 	cmpne	r16,r3,zero
1000a404:	84000044 	addi	r16,r16,1
1000a408:	98c00615 	stw	r3,24(r19)
1000a40c:	9c000415 	stw	r16,16(r19)
1000a410:	88001b1e 	bne	r17,zero,1000a480 <__d2b+0xfc>
1000a414:	800690ba 	slli	r3,r16,2
1000a418:	10bef384 	addi	r2,r2,-1074
1000a41c:	a0800015 	stw	r2,0(r20)
1000a420:	98c5883a 	add	r2,r19,r3
1000a424:	11000417 	ldw	r4,16(r2)
1000a428:	8020917a 	slli	r16,r16,5
1000a42c:	00099a40 	call	100099a4 <__hi0bits>
1000a430:	8085c83a 	sub	r2,r16,r2
1000a434:	90800015 	stw	r2,0(r18)
1000a438:	9805883a 	mov	r2,r19
1000a43c:	dfc00817 	ldw	ra,32(sp)
1000a440:	dd400717 	ldw	r21,28(sp)
1000a444:	dd000617 	ldw	r20,24(sp)
1000a448:	dcc00517 	ldw	r19,20(sp)
1000a44c:	dc800417 	ldw	r18,16(sp)
1000a450:	dc400317 	ldw	r17,12(sp)
1000a454:	dc000217 	ldw	r16,8(sp)
1000a458:	dec00904 	addi	sp,sp,36
1000a45c:	f800283a 	ret
1000a460:	d809883a 	mov	r4,sp
1000a464:	0009a0c0 	call	10009a0c <__lo0bits>
1000a468:	d8c00017 	ldw	r3,0(sp)
1000a46c:	04000044 	movi	r16,1
1000a470:	9c000415 	stw	r16,16(r19)
1000a474:	98c00515 	stw	r3,20(r19)
1000a478:	10800804 	addi	r2,r2,32
1000a47c:	883fe526 	beq	r17,zero,1000a414 <__alt_data_end+0xf800a414>
1000a480:	8c7ef344 	addi	r17,r17,-1075
1000a484:	88a3883a 	add	r17,r17,r2
1000a488:	00c00d44 	movi	r3,53
1000a48c:	a4400015 	stw	r17,0(r20)
1000a490:	1885c83a 	sub	r2,r3,r2
1000a494:	90800015 	stw	r2,0(r18)
1000a498:	003fe706 	br	1000a438 <__alt_data_end+0xf800a438>
1000a49c:	01000804 	movi	r4,32
1000a4a0:	2089c83a 	sub	r4,r4,r2
1000a4a4:	1908983a 	sll	r4,r3,r4
1000a4a8:	d9400117 	ldw	r5,4(sp)
1000a4ac:	1886d83a 	srl	r3,r3,r2
1000a4b0:	2148b03a 	or	r4,r4,r5
1000a4b4:	99000515 	stw	r4,20(r19)
1000a4b8:	d8c00015 	stw	r3,0(sp)
1000a4bc:	003fd006 	br	1000a400 <__alt_data_end+0xf800a400>

1000a4c0 <__ratio>:
1000a4c0:	defff904 	addi	sp,sp,-28
1000a4c4:	dc400315 	stw	r17,12(sp)
1000a4c8:	2823883a 	mov	r17,r5
1000a4cc:	d9400104 	addi	r5,sp,4
1000a4d0:	dfc00615 	stw	ra,24(sp)
1000a4d4:	dcc00515 	stw	r19,20(sp)
1000a4d8:	dc800415 	stw	r18,16(sp)
1000a4dc:	2027883a 	mov	r19,r4
1000a4e0:	dc000215 	stw	r16,8(sp)
1000a4e4:	000a2680 	call	1000a268 <__b2d>
1000a4e8:	8809883a 	mov	r4,r17
1000a4ec:	d80b883a 	mov	r5,sp
1000a4f0:	1025883a 	mov	r18,r2
1000a4f4:	1821883a 	mov	r16,r3
1000a4f8:	000a2680 	call	1000a268 <__b2d>
1000a4fc:	8a400417 	ldw	r9,16(r17)
1000a500:	9a000417 	ldw	r8,16(r19)
1000a504:	100d883a 	mov	r6,r2
1000a508:	d8800017 	ldw	r2,0(sp)
1000a50c:	4251c83a 	sub	r8,r8,r9
1000a510:	4012917a 	slli	r9,r8,5
1000a514:	da000117 	ldw	r8,4(sp)
1000a518:	4091c83a 	sub	r8,r8,r2
1000a51c:	4251883a 	add	r8,r8,r9
1000a520:	02000d0e 	bge	zero,r8,1000a558 <__ratio+0x98>
1000a524:	4010953a 	slli	r8,r8,20
1000a528:	4421883a 	add	r16,r8,r16
1000a52c:	9009883a 	mov	r4,r18
1000a530:	800b883a 	mov	r5,r16
1000a534:	180f883a 	mov	r7,r3
1000a538:	000e2c40 	call	1000e2c4 <__divdf3>
1000a53c:	dfc00617 	ldw	ra,24(sp)
1000a540:	dcc00517 	ldw	r19,20(sp)
1000a544:	dc800417 	ldw	r18,16(sp)
1000a548:	dc400317 	ldw	r17,12(sp)
1000a54c:	dc000217 	ldw	r16,8(sp)
1000a550:	dec00704 	addi	sp,sp,28
1000a554:	f800283a 	ret
1000a558:	4010953a 	slli	r8,r8,20
1000a55c:	1a07c83a 	sub	r3,r3,r8
1000a560:	003ff206 	br	1000a52c <__alt_data_end+0xf800a52c>

1000a564 <_mprec_log10>:
1000a564:	defffe04 	addi	sp,sp,-8
1000a568:	dc000015 	stw	r16,0(sp)
1000a56c:	dfc00115 	stw	ra,4(sp)
1000a570:	008005c4 	movi	r2,23
1000a574:	2021883a 	mov	r16,r4
1000a578:	11000d0e 	bge	r2,r4,1000a5b0 <_mprec_log10+0x4c>
1000a57c:	0005883a 	mov	r2,zero
1000a580:	00cffc34 	movhi	r3,16368
1000a584:	843fffc4 	addi	r16,r16,-1
1000a588:	1009883a 	mov	r4,r2
1000a58c:	180b883a 	mov	r5,r3
1000a590:	000d883a 	mov	r6,zero
1000a594:	01d00934 	movhi	r7,16420
1000a598:	000ee880 	call	1000ee88 <__muldf3>
1000a59c:	803ff91e 	bne	r16,zero,1000a584 <__alt_data_end+0xf800a584>
1000a5a0:	dfc00117 	ldw	ra,4(sp)
1000a5a4:	dc000017 	ldw	r16,0(sp)
1000a5a8:	dec00204 	addi	sp,sp,8
1000a5ac:	f800283a 	ret
1000a5b0:	202090fa 	slli	r16,r4,3
1000a5b4:	00840074 	movhi	r2,4097
1000a5b8:	108cae04 	addi	r2,r2,12984
1000a5bc:	1421883a 	add	r16,r2,r16
1000a5c0:	80800017 	ldw	r2,0(r16)
1000a5c4:	80c00117 	ldw	r3,4(r16)
1000a5c8:	dfc00117 	ldw	ra,4(sp)
1000a5cc:	dc000017 	ldw	r16,0(sp)
1000a5d0:	dec00204 	addi	sp,sp,8
1000a5d4:	f800283a 	ret

1000a5d8 <__copybits>:
1000a5d8:	297fffc4 	addi	r5,r5,-1
1000a5dc:	280fd17a 	srai	r7,r5,5
1000a5e0:	30c00417 	ldw	r3,16(r6)
1000a5e4:	30800504 	addi	r2,r6,20
1000a5e8:	39c00044 	addi	r7,r7,1
1000a5ec:	18c7883a 	add	r3,r3,r3
1000a5f0:	39cf883a 	add	r7,r7,r7
1000a5f4:	18c7883a 	add	r3,r3,r3
1000a5f8:	39cf883a 	add	r7,r7,r7
1000a5fc:	10c7883a 	add	r3,r2,r3
1000a600:	21cf883a 	add	r7,r4,r7
1000a604:	10c00d2e 	bgeu	r2,r3,1000a63c <__copybits+0x64>
1000a608:	200b883a 	mov	r5,r4
1000a60c:	12000017 	ldw	r8,0(r2)
1000a610:	29400104 	addi	r5,r5,4
1000a614:	10800104 	addi	r2,r2,4
1000a618:	2a3fff15 	stw	r8,-4(r5)
1000a61c:	10fffb36 	bltu	r2,r3,1000a60c <__alt_data_end+0xf800a60c>
1000a620:	1985c83a 	sub	r2,r3,r6
1000a624:	10bffac4 	addi	r2,r2,-21
1000a628:	1004d0ba 	srli	r2,r2,2
1000a62c:	10800044 	addi	r2,r2,1
1000a630:	1085883a 	add	r2,r2,r2
1000a634:	1085883a 	add	r2,r2,r2
1000a638:	2089883a 	add	r4,r4,r2
1000a63c:	21c0032e 	bgeu	r4,r7,1000a64c <__copybits+0x74>
1000a640:	20000015 	stw	zero,0(r4)
1000a644:	21000104 	addi	r4,r4,4
1000a648:	21fffd36 	bltu	r4,r7,1000a640 <__alt_data_end+0xf800a640>
1000a64c:	f800283a 	ret

1000a650 <__any_on>:
1000a650:	20c00417 	ldw	r3,16(r4)
1000a654:	2805d17a 	srai	r2,r5,5
1000a658:	21000504 	addi	r4,r4,20
1000a65c:	18800d0e 	bge	r3,r2,1000a694 <__any_on+0x44>
1000a660:	18c7883a 	add	r3,r3,r3
1000a664:	18c7883a 	add	r3,r3,r3
1000a668:	20c7883a 	add	r3,r4,r3
1000a66c:	20c0192e 	bgeu	r4,r3,1000a6d4 <__any_on+0x84>
1000a670:	18bfff17 	ldw	r2,-4(r3)
1000a674:	18ffff04 	addi	r3,r3,-4
1000a678:	1000041e 	bne	r2,zero,1000a68c <__any_on+0x3c>
1000a67c:	20c0142e 	bgeu	r4,r3,1000a6d0 <__any_on+0x80>
1000a680:	18ffff04 	addi	r3,r3,-4
1000a684:	19400017 	ldw	r5,0(r3)
1000a688:	283ffc26 	beq	r5,zero,1000a67c <__alt_data_end+0xf800a67c>
1000a68c:	00800044 	movi	r2,1
1000a690:	f800283a 	ret
1000a694:	10c00a0e 	bge	r2,r3,1000a6c0 <__any_on+0x70>
1000a698:	1085883a 	add	r2,r2,r2
1000a69c:	1085883a 	add	r2,r2,r2
1000a6a0:	294007cc 	andi	r5,r5,31
1000a6a4:	2087883a 	add	r3,r4,r2
1000a6a8:	283ff026 	beq	r5,zero,1000a66c <__alt_data_end+0xf800a66c>
1000a6ac:	19800017 	ldw	r6,0(r3)
1000a6b0:	3144d83a 	srl	r2,r6,r5
1000a6b4:	114a983a 	sll	r5,r2,r5
1000a6b8:	29bff41e 	bne	r5,r6,1000a68c <__alt_data_end+0xf800a68c>
1000a6bc:	003feb06 	br	1000a66c <__alt_data_end+0xf800a66c>
1000a6c0:	1085883a 	add	r2,r2,r2
1000a6c4:	1085883a 	add	r2,r2,r2
1000a6c8:	2087883a 	add	r3,r4,r2
1000a6cc:	003fe706 	br	1000a66c <__alt_data_end+0xf800a66c>
1000a6d0:	f800283a 	ret
1000a6d4:	0005883a 	mov	r2,zero
1000a6d8:	f800283a 	ret

1000a6dc <_realloc_r>:
1000a6dc:	defff604 	addi	sp,sp,-40
1000a6e0:	dcc00315 	stw	r19,12(sp)
1000a6e4:	dc400115 	stw	r17,4(sp)
1000a6e8:	dfc00915 	stw	ra,36(sp)
1000a6ec:	df000815 	stw	fp,32(sp)
1000a6f0:	ddc00715 	stw	r23,28(sp)
1000a6f4:	dd800615 	stw	r22,24(sp)
1000a6f8:	dd400515 	stw	r21,20(sp)
1000a6fc:	dd000415 	stw	r20,16(sp)
1000a700:	dc800215 	stw	r18,8(sp)
1000a704:	dc000015 	stw	r16,0(sp)
1000a708:	2827883a 	mov	r19,r5
1000a70c:	3023883a 	mov	r17,r6
1000a710:	2800bf26 	beq	r5,zero,1000aa10 <_realloc_r+0x334>
1000a714:	2025883a 	mov	r18,r4
1000a718:	00108040 	call	10010804 <__malloc_lock>
1000a71c:	98ffff17 	ldw	r3,-4(r19)
1000a720:	01bfff04 	movi	r6,-4
1000a724:	890002c4 	addi	r4,r17,11
1000a728:	01c00584 	movi	r7,22
1000a72c:	9d7ffe04 	addi	r21,r19,-8
1000a730:	19a0703a 	and	r16,r3,r6
1000a734:	39003f2e 	bgeu	r7,r4,1000a834 <_realloc_r+0x158>
1000a738:	053ffe04 	movi	r20,-8
1000a73c:	2528703a 	and	r20,r4,r20
1000a740:	a00f883a 	mov	r7,r20
1000a744:	a0008216 	blt	r20,zero,1000a950 <_realloc_r+0x274>
1000a748:	a4408136 	bltu	r20,r17,1000a950 <_realloc_r+0x274>
1000a74c:	81c03c0e 	bge	r16,r7,1000a840 <_realloc_r+0x164>
1000a750:	07040074 	movhi	fp,4097
1000a754:	e70e5c04 	addi	fp,fp,14704
1000a758:	e1000217 	ldw	r4,8(fp)
1000a75c:	ac05883a 	add	r2,r21,r16
1000a760:	2080bf26 	beq	r4,r2,1000aa60 <_realloc_r+0x384>
1000a764:	11000117 	ldw	r4,4(r2)
1000a768:	023fff84 	movi	r8,-2
1000a76c:	2210703a 	and	r8,r4,r8
1000a770:	1211883a 	add	r8,r2,r8
1000a774:	41400117 	ldw	r5,4(r8)
1000a778:	2940004c 	andi	r5,r5,1
1000a77c:	28004a1e 	bne	r5,zero,1000a8a8 <_realloc_r+0x1cc>
1000a780:	017fff04 	movi	r5,-4
1000a784:	2148703a 	and	r4,r4,r5
1000a788:	2409883a 	add	r4,r4,r16
1000a78c:	21c0ad0e 	bge	r4,r7,1000aa44 <_realloc_r+0x368>
1000a790:	18c0004c 	andi	r3,r3,1
1000a794:	18007f1e 	bne	r3,zero,1000a994 <_realloc_r+0x2b8>
1000a798:	9dfffe17 	ldw	r23,-8(r19)
1000a79c:	adefc83a 	sub	r23,r21,r23
1000a7a0:	bd800117 	ldw	r22,4(r23)
1000a7a4:	b14a703a 	and	r5,r22,r5
1000a7a8:	216d883a 	add	r22,r4,r5
1000a7ac:	b1c04516 	blt	r22,r7,1000a8c4 <_realloc_r+0x1e8>
1000a7b0:	10c00317 	ldw	r3,12(r2)
1000a7b4:	10800217 	ldw	r2,8(r2)
1000a7b8:	81bfff04 	addi	r6,r16,-4
1000a7bc:	bc400204 	addi	r17,r23,8
1000a7c0:	10c00315 	stw	r3,12(r2)
1000a7c4:	18800215 	stw	r2,8(r3)
1000a7c8:	b9400217 	ldw	r5,8(r23)
1000a7cc:	b8c00317 	ldw	r3,12(r23)
1000a7d0:	00800904 	movi	r2,36
1000a7d4:	28c00315 	stw	r3,12(r5)
1000a7d8:	19400215 	stw	r5,8(r3)
1000a7dc:	1180ef36 	bltu	r2,r6,1000ab9c <_realloc_r+0x4c0>
1000a7e0:	008004c4 	movi	r2,19
1000a7e4:	1180da2e 	bgeu	r2,r6,1000ab50 <_realloc_r+0x474>
1000a7e8:	98800017 	ldw	r2,0(r19)
1000a7ec:	b8800215 	stw	r2,8(r23)
1000a7f0:	98800117 	ldw	r2,4(r19)
1000a7f4:	b8800315 	stw	r2,12(r23)
1000a7f8:	008006c4 	movi	r2,27
1000a7fc:	1180fc2e 	bgeu	r2,r6,1000abf0 <_realloc_r+0x514>
1000a800:	98800217 	ldw	r2,8(r19)
1000a804:	b8800415 	stw	r2,16(r23)
1000a808:	98800317 	ldw	r2,12(r19)
1000a80c:	b8800515 	stw	r2,20(r23)
1000a810:	00800904 	movi	r2,36
1000a814:	3080421e 	bne	r6,r2,1000a920 <_realloc_r+0x244>
1000a818:	98800417 	ldw	r2,16(r19)
1000a81c:	9cc00604 	addi	r19,r19,24
1000a820:	b8c00804 	addi	r3,r23,32
1000a824:	b8800615 	stw	r2,24(r23)
1000a828:	98bfff17 	ldw	r2,-4(r19)
1000a82c:	b8800715 	stw	r2,28(r23)
1000a830:	00003d06 	br	1000a928 <_realloc_r+0x24c>
1000a834:	01c00404 	movi	r7,16
1000a838:	3829883a 	mov	r20,r7
1000a83c:	003fc206 	br	1000a748 <__alt_data_end+0xf800a748>
1000a840:	9823883a 	mov	r17,r19
1000a844:	850fc83a 	sub	r7,r16,r20
1000a848:	008003c4 	movi	r2,15
1000a84c:	18c0004c 	andi	r3,r3,1
1000a850:	11c04336 	bltu	r2,r7,1000a960 <_realloc_r+0x284>
1000a854:	1c06b03a 	or	r3,r3,r16
1000a858:	a8c00115 	stw	r3,4(r21)
1000a85c:	ac21883a 	add	r16,r21,r16
1000a860:	80c00117 	ldw	r3,4(r16)
1000a864:	18c00054 	ori	r3,r3,1
1000a868:	80c00115 	stw	r3,4(r16)
1000a86c:	9009883a 	mov	r4,r18
1000a870:	00108240 	call	10010824 <__malloc_unlock>
1000a874:	8805883a 	mov	r2,r17
1000a878:	dfc00917 	ldw	ra,36(sp)
1000a87c:	df000817 	ldw	fp,32(sp)
1000a880:	ddc00717 	ldw	r23,28(sp)
1000a884:	dd800617 	ldw	r22,24(sp)
1000a888:	dd400517 	ldw	r21,20(sp)
1000a88c:	dd000417 	ldw	r20,16(sp)
1000a890:	dcc00317 	ldw	r19,12(sp)
1000a894:	dc800217 	ldw	r18,8(sp)
1000a898:	dc400117 	ldw	r17,4(sp)
1000a89c:	dc000017 	ldw	r16,0(sp)
1000a8a0:	dec00a04 	addi	sp,sp,40
1000a8a4:	f800283a 	ret
1000a8a8:	18c0004c 	andi	r3,r3,1
1000a8ac:	1800391e 	bne	r3,zero,1000a994 <_realloc_r+0x2b8>
1000a8b0:	9dfffe17 	ldw	r23,-8(r19)
1000a8b4:	00bfff04 	movi	r2,-4
1000a8b8:	adefc83a 	sub	r23,r21,r23
1000a8bc:	b9400117 	ldw	r5,4(r23)
1000a8c0:	288a703a 	and	r5,r5,r2
1000a8c4:	2c2d883a 	add	r22,r5,r16
1000a8c8:	b1c03216 	blt	r22,r7,1000a994 <_realloc_r+0x2b8>
1000a8cc:	b8800317 	ldw	r2,12(r23)
1000a8d0:	b8c00217 	ldw	r3,8(r23)
1000a8d4:	81bfff04 	addi	r6,r16,-4
1000a8d8:	01000904 	movi	r4,36
1000a8dc:	18800315 	stw	r2,12(r3)
1000a8e0:	10c00215 	stw	r3,8(r2)
1000a8e4:	bc400204 	addi	r17,r23,8
1000a8e8:	2180ac36 	bltu	r4,r6,1000ab9c <_realloc_r+0x4c0>
1000a8ec:	008004c4 	movi	r2,19
1000a8f0:	1180972e 	bgeu	r2,r6,1000ab50 <_realloc_r+0x474>
1000a8f4:	98800017 	ldw	r2,0(r19)
1000a8f8:	b8800215 	stw	r2,8(r23)
1000a8fc:	98800117 	ldw	r2,4(r19)
1000a900:	b8800315 	stw	r2,12(r23)
1000a904:	008006c4 	movi	r2,27
1000a908:	1180b92e 	bgeu	r2,r6,1000abf0 <_realloc_r+0x514>
1000a90c:	98800217 	ldw	r2,8(r19)
1000a910:	b8800415 	stw	r2,16(r23)
1000a914:	98800317 	ldw	r2,12(r19)
1000a918:	b8800515 	stw	r2,20(r23)
1000a91c:	313fbe26 	beq	r6,r4,1000a818 <__alt_data_end+0xf800a818>
1000a920:	b8c00604 	addi	r3,r23,24
1000a924:	9cc00404 	addi	r19,r19,16
1000a928:	98800017 	ldw	r2,0(r19)
1000a92c:	b021883a 	mov	r16,r22
1000a930:	b82b883a 	mov	r21,r23
1000a934:	18800015 	stw	r2,0(r3)
1000a938:	98800117 	ldw	r2,4(r19)
1000a93c:	18800115 	stw	r2,4(r3)
1000a940:	98800217 	ldw	r2,8(r19)
1000a944:	18800215 	stw	r2,8(r3)
1000a948:	b8c00117 	ldw	r3,4(r23)
1000a94c:	003fbd06 	br	1000a844 <__alt_data_end+0xf800a844>
1000a950:	00800304 	movi	r2,12
1000a954:	90800015 	stw	r2,0(r18)
1000a958:	0005883a 	mov	r2,zero
1000a95c:	003fc606 	br	1000a878 <__alt_data_end+0xf800a878>
1000a960:	1d06b03a 	or	r3,r3,r20
1000a964:	ad0b883a 	add	r5,r21,r20
1000a968:	a8c00115 	stw	r3,4(r21)
1000a96c:	38800054 	ori	r2,r7,1
1000a970:	28800115 	stw	r2,4(r5)
1000a974:	29cf883a 	add	r7,r5,r7
1000a978:	38800117 	ldw	r2,4(r7)
1000a97c:	9009883a 	mov	r4,r18
1000a980:	29400204 	addi	r5,r5,8
1000a984:	10800054 	ori	r2,r2,1
1000a988:	38800115 	stw	r2,4(r7)
1000a98c:	0007eb00 	call	10007eb0 <_free_r>
1000a990:	003fb606 	br	1000a86c <__alt_data_end+0xf800a86c>
1000a994:	880b883a 	mov	r5,r17
1000a998:	9009883a 	mov	r4,r18
1000a99c:	0008a4c0 	call	10008a4c <_malloc_r>
1000a9a0:	1023883a 	mov	r17,r2
1000a9a4:	1000aa26 	beq	r2,zero,1000ac50 <_realloc_r+0x574>
1000a9a8:	98ffff17 	ldw	r3,-4(r19)
1000a9ac:	113ffe04 	addi	r4,r2,-8
1000a9b0:	00bfff84 	movi	r2,-2
1000a9b4:	1884703a 	and	r2,r3,r2
1000a9b8:	a885883a 	add	r2,r21,r2
1000a9bc:	20808626 	beq	r4,r2,1000abd8 <_realloc_r+0x4fc>
1000a9c0:	81bfff04 	addi	r6,r16,-4
1000a9c4:	00800904 	movi	r2,36
1000a9c8:	11807036 	bltu	r2,r6,1000ab8c <_realloc_r+0x4b0>
1000a9cc:	00c004c4 	movi	r3,19
1000a9d0:	19805636 	bltu	r3,r6,1000ab2c <_realloc_r+0x450>
1000a9d4:	8805883a 	mov	r2,r17
1000a9d8:	9807883a 	mov	r3,r19
1000a9dc:	19000017 	ldw	r4,0(r3)
1000a9e0:	11000015 	stw	r4,0(r2)
1000a9e4:	19000117 	ldw	r4,4(r3)
1000a9e8:	11000115 	stw	r4,4(r2)
1000a9ec:	18c00217 	ldw	r3,8(r3)
1000a9f0:	10c00215 	stw	r3,8(r2)
1000a9f4:	980b883a 	mov	r5,r19
1000a9f8:	9009883a 	mov	r4,r18
1000a9fc:	0007eb00 	call	10007eb0 <_free_r>
1000aa00:	9009883a 	mov	r4,r18
1000aa04:	00108240 	call	10010824 <__malloc_unlock>
1000aa08:	8805883a 	mov	r2,r17
1000aa0c:	003f9a06 	br	1000a878 <__alt_data_end+0xf800a878>
1000aa10:	300b883a 	mov	r5,r6
1000aa14:	dfc00917 	ldw	ra,36(sp)
1000aa18:	df000817 	ldw	fp,32(sp)
1000aa1c:	ddc00717 	ldw	r23,28(sp)
1000aa20:	dd800617 	ldw	r22,24(sp)
1000aa24:	dd400517 	ldw	r21,20(sp)
1000aa28:	dd000417 	ldw	r20,16(sp)
1000aa2c:	dcc00317 	ldw	r19,12(sp)
1000aa30:	dc800217 	ldw	r18,8(sp)
1000aa34:	dc400117 	ldw	r17,4(sp)
1000aa38:	dc000017 	ldw	r16,0(sp)
1000aa3c:	dec00a04 	addi	sp,sp,40
1000aa40:	0008a4c1 	jmpi	10008a4c <_malloc_r>
1000aa44:	11400317 	ldw	r5,12(r2)
1000aa48:	10800217 	ldw	r2,8(r2)
1000aa4c:	9823883a 	mov	r17,r19
1000aa50:	2021883a 	mov	r16,r4
1000aa54:	11400315 	stw	r5,12(r2)
1000aa58:	28800215 	stw	r2,8(r5)
1000aa5c:	003f7906 	br	1000a844 <__alt_data_end+0xf800a844>
1000aa60:	21000117 	ldw	r4,4(r4)
1000aa64:	00bfff04 	movi	r2,-4
1000aa68:	a1800404 	addi	r6,r20,16
1000aa6c:	2088703a 	and	r4,r4,r2
1000aa70:	2409883a 	add	r4,r4,r16
1000aa74:	2180380e 	bge	r4,r6,1000ab58 <_realloc_r+0x47c>
1000aa78:	18c0004c 	andi	r3,r3,1
1000aa7c:	183fc51e 	bne	r3,zero,1000a994 <__alt_data_end+0xf800a994>
1000aa80:	9dfffe17 	ldw	r23,-8(r19)
1000aa84:	adefc83a 	sub	r23,r21,r23
1000aa88:	b9400117 	ldw	r5,4(r23)
1000aa8c:	288a703a 	and	r5,r5,r2
1000aa90:	216d883a 	add	r22,r4,r5
1000aa94:	b1bf8b16 	blt	r22,r6,1000a8c4 <__alt_data_end+0xf800a8c4>
1000aa98:	b8800317 	ldw	r2,12(r23)
1000aa9c:	b8c00217 	ldw	r3,8(r23)
1000aaa0:	81bfff04 	addi	r6,r16,-4
1000aaa4:	01000904 	movi	r4,36
1000aaa8:	18800315 	stw	r2,12(r3)
1000aaac:	10c00215 	stw	r3,8(r2)
1000aab0:	bc400204 	addi	r17,r23,8
1000aab4:	21805a36 	bltu	r4,r6,1000ac20 <_realloc_r+0x544>
1000aab8:	008004c4 	movi	r2,19
1000aabc:	1180562e 	bgeu	r2,r6,1000ac18 <_realloc_r+0x53c>
1000aac0:	98800017 	ldw	r2,0(r19)
1000aac4:	b8800215 	stw	r2,8(r23)
1000aac8:	98800117 	ldw	r2,4(r19)
1000aacc:	b8800315 	stw	r2,12(r23)
1000aad0:	008006c4 	movi	r2,27
1000aad4:	11805636 	bltu	r2,r6,1000ac30 <_realloc_r+0x554>
1000aad8:	b8800404 	addi	r2,r23,16
1000aadc:	9cc00204 	addi	r19,r19,8
1000aae0:	98c00017 	ldw	r3,0(r19)
1000aae4:	10c00015 	stw	r3,0(r2)
1000aae8:	98c00117 	ldw	r3,4(r19)
1000aaec:	10c00115 	stw	r3,4(r2)
1000aaf0:	98c00217 	ldw	r3,8(r19)
1000aaf4:	10c00215 	stw	r3,8(r2)
1000aaf8:	bd07883a 	add	r3,r23,r20
1000aafc:	b505c83a 	sub	r2,r22,r20
1000ab00:	e0c00215 	stw	r3,8(fp)
1000ab04:	10800054 	ori	r2,r2,1
1000ab08:	18800115 	stw	r2,4(r3)
1000ab0c:	b8800117 	ldw	r2,4(r23)
1000ab10:	9009883a 	mov	r4,r18
1000ab14:	1080004c 	andi	r2,r2,1
1000ab18:	a0a8b03a 	or	r20,r20,r2
1000ab1c:	bd000115 	stw	r20,4(r23)
1000ab20:	00108240 	call	10010824 <__malloc_unlock>
1000ab24:	8805883a 	mov	r2,r17
1000ab28:	003f5306 	br	1000a878 <__alt_data_end+0xf800a878>
1000ab2c:	98c00017 	ldw	r3,0(r19)
1000ab30:	88c00015 	stw	r3,0(r17)
1000ab34:	98c00117 	ldw	r3,4(r19)
1000ab38:	88c00115 	stw	r3,4(r17)
1000ab3c:	00c006c4 	movi	r3,27
1000ab40:	19801d36 	bltu	r3,r6,1000abb8 <_realloc_r+0x4dc>
1000ab44:	88800204 	addi	r2,r17,8
1000ab48:	98c00204 	addi	r3,r19,8
1000ab4c:	003fa306 	br	1000a9dc <__alt_data_end+0xf800a9dc>
1000ab50:	8807883a 	mov	r3,r17
1000ab54:	003f7406 	br	1000a928 <__alt_data_end+0xf800a928>
1000ab58:	ad2b883a 	add	r21,r21,r20
1000ab5c:	2505c83a 	sub	r2,r4,r20
1000ab60:	e5400215 	stw	r21,8(fp)
1000ab64:	10800054 	ori	r2,r2,1
1000ab68:	a8800115 	stw	r2,4(r21)
1000ab6c:	98bfff17 	ldw	r2,-4(r19)
1000ab70:	9009883a 	mov	r4,r18
1000ab74:	1080004c 	andi	r2,r2,1
1000ab78:	a0a8b03a 	or	r20,r20,r2
1000ab7c:	9d3fff15 	stw	r20,-4(r19)
1000ab80:	00108240 	call	10010824 <__malloc_unlock>
1000ab84:	9805883a 	mov	r2,r19
1000ab88:	003f3b06 	br	1000a878 <__alt_data_end+0xf800a878>
1000ab8c:	8809883a 	mov	r4,r17
1000ab90:	980b883a 	mov	r5,r19
1000ab94:	00094140 	call	10009414 <memmove>
1000ab98:	003f9606 	br	1000a9f4 <__alt_data_end+0xf800a9f4>
1000ab9c:	8809883a 	mov	r4,r17
1000aba0:	980b883a 	mov	r5,r19
1000aba4:	00094140 	call	10009414 <memmove>
1000aba8:	b8c00117 	ldw	r3,4(r23)
1000abac:	b021883a 	mov	r16,r22
1000abb0:	b82b883a 	mov	r21,r23
1000abb4:	003f2306 	br	1000a844 <__alt_data_end+0xf800a844>
1000abb8:	98c00217 	ldw	r3,8(r19)
1000abbc:	88c00215 	stw	r3,8(r17)
1000abc0:	98c00317 	ldw	r3,12(r19)
1000abc4:	88c00315 	stw	r3,12(r17)
1000abc8:	30800c26 	beq	r6,r2,1000abfc <_realloc_r+0x520>
1000abcc:	88800404 	addi	r2,r17,16
1000abd0:	98c00404 	addi	r3,r19,16
1000abd4:	003f8106 	br	1000a9dc <__alt_data_end+0xf800a9dc>
1000abd8:	893fff17 	ldw	r4,-4(r17)
1000abdc:	00bfff04 	movi	r2,-4
1000abe0:	9823883a 	mov	r17,r19
1000abe4:	2084703a 	and	r2,r4,r2
1000abe8:	80a1883a 	add	r16,r16,r2
1000abec:	003f1506 	br	1000a844 <__alt_data_end+0xf800a844>
1000abf0:	b8c00404 	addi	r3,r23,16
1000abf4:	9cc00204 	addi	r19,r19,8
1000abf8:	003f4b06 	br	1000a928 <__alt_data_end+0xf800a928>
1000abfc:	99000417 	ldw	r4,16(r19)
1000ac00:	88800604 	addi	r2,r17,24
1000ac04:	98c00604 	addi	r3,r19,24
1000ac08:	89000415 	stw	r4,16(r17)
1000ac0c:	99000517 	ldw	r4,20(r19)
1000ac10:	89000515 	stw	r4,20(r17)
1000ac14:	003f7106 	br	1000a9dc <__alt_data_end+0xf800a9dc>
1000ac18:	8805883a 	mov	r2,r17
1000ac1c:	003fb006 	br	1000aae0 <__alt_data_end+0xf800aae0>
1000ac20:	8809883a 	mov	r4,r17
1000ac24:	980b883a 	mov	r5,r19
1000ac28:	00094140 	call	10009414 <memmove>
1000ac2c:	003fb206 	br	1000aaf8 <__alt_data_end+0xf800aaf8>
1000ac30:	98800217 	ldw	r2,8(r19)
1000ac34:	b8800415 	stw	r2,16(r23)
1000ac38:	98800317 	ldw	r2,12(r19)
1000ac3c:	b8800515 	stw	r2,20(r23)
1000ac40:	31000726 	beq	r6,r4,1000ac60 <_realloc_r+0x584>
1000ac44:	b8800604 	addi	r2,r23,24
1000ac48:	9cc00404 	addi	r19,r19,16
1000ac4c:	003fa406 	br	1000aae0 <__alt_data_end+0xf800aae0>
1000ac50:	9009883a 	mov	r4,r18
1000ac54:	00108240 	call	10010824 <__malloc_unlock>
1000ac58:	0005883a 	mov	r2,zero
1000ac5c:	003f0606 	br	1000a878 <__alt_data_end+0xf800a878>
1000ac60:	98c00417 	ldw	r3,16(r19)
1000ac64:	9cc00604 	addi	r19,r19,24
1000ac68:	b8800804 	addi	r2,r23,32
1000ac6c:	b8c00615 	stw	r3,24(r23)
1000ac70:	98ffff17 	ldw	r3,-4(r19)
1000ac74:	b8c00715 	stw	r3,28(r23)
1000ac78:	003f9906 	br	1000aae0 <__alt_data_end+0xf800aae0>

1000ac7c <__fpclassifyd>:
1000ac7c:	00a00034 	movhi	r2,32768
1000ac80:	10bfffc4 	addi	r2,r2,-1
1000ac84:	2884703a 	and	r2,r5,r2
1000ac88:	10000726 	beq	r2,zero,1000aca8 <__fpclassifyd+0x2c>
1000ac8c:	00fffc34 	movhi	r3,65520
1000ac90:	019ff834 	movhi	r6,32736
1000ac94:	28c7883a 	add	r3,r5,r3
1000ac98:	31bfffc4 	addi	r6,r6,-1
1000ac9c:	30c00536 	bltu	r6,r3,1000acb4 <__fpclassifyd+0x38>
1000aca0:	00800104 	movi	r2,4
1000aca4:	f800283a 	ret
1000aca8:	2000021e 	bne	r4,zero,1000acb4 <__fpclassifyd+0x38>
1000acac:	00800084 	movi	r2,2
1000acb0:	f800283a 	ret
1000acb4:	00dffc34 	movhi	r3,32752
1000acb8:	019ff834 	movhi	r6,32736
1000acbc:	28cb883a 	add	r5,r5,r3
1000acc0:	31bfffc4 	addi	r6,r6,-1
1000acc4:	317ff62e 	bgeu	r6,r5,1000aca0 <__alt_data_end+0xf800aca0>
1000acc8:	01400434 	movhi	r5,16
1000accc:	297fffc4 	addi	r5,r5,-1
1000acd0:	28800236 	bltu	r5,r2,1000acdc <__fpclassifyd+0x60>
1000acd4:	008000c4 	movi	r2,3
1000acd8:	f800283a 	ret
1000acdc:	10c00226 	beq	r2,r3,1000ace8 <__fpclassifyd+0x6c>
1000ace0:	0005883a 	mov	r2,zero
1000ace4:	f800283a 	ret
1000ace8:	2005003a 	cmpeq	r2,r4,zero
1000acec:	f800283a 	ret

1000acf0 <_sbrk_r>:
1000acf0:	defffd04 	addi	sp,sp,-12
1000acf4:	dc000015 	stw	r16,0(sp)
1000acf8:	04040074 	movhi	r16,4097
1000acfc:	dc400115 	stw	r17,4(sp)
1000ad00:	841aba04 	addi	r16,r16,27368
1000ad04:	2023883a 	mov	r17,r4
1000ad08:	2809883a 	mov	r4,r5
1000ad0c:	dfc00215 	stw	ra,8(sp)
1000ad10:	80000015 	stw	zero,0(r16)
1000ad14:	0010a180 	call	10010a18 <sbrk>
1000ad18:	00ffffc4 	movi	r3,-1
1000ad1c:	10c00526 	beq	r2,r3,1000ad34 <_sbrk_r+0x44>
1000ad20:	dfc00217 	ldw	ra,8(sp)
1000ad24:	dc400117 	ldw	r17,4(sp)
1000ad28:	dc000017 	ldw	r16,0(sp)
1000ad2c:	dec00304 	addi	sp,sp,12
1000ad30:	f800283a 	ret
1000ad34:	80c00017 	ldw	r3,0(r16)
1000ad38:	183ff926 	beq	r3,zero,1000ad20 <__alt_data_end+0xf800ad20>
1000ad3c:	88c00015 	stw	r3,0(r17)
1000ad40:	003ff706 	br	1000ad20 <__alt_data_end+0xf800ad20>

1000ad44 <__sread>:
1000ad44:	defffe04 	addi	sp,sp,-8
1000ad48:	dc000015 	stw	r16,0(sp)
1000ad4c:	2821883a 	mov	r16,r5
1000ad50:	2940038f 	ldh	r5,14(r5)
1000ad54:	dfc00115 	stw	ra,4(sp)
1000ad58:	000ca000 	call	1000ca00 <_read_r>
1000ad5c:	10000716 	blt	r2,zero,1000ad7c <__sread+0x38>
1000ad60:	80c01417 	ldw	r3,80(r16)
1000ad64:	1887883a 	add	r3,r3,r2
1000ad68:	80c01415 	stw	r3,80(r16)
1000ad6c:	dfc00117 	ldw	ra,4(sp)
1000ad70:	dc000017 	ldw	r16,0(sp)
1000ad74:	dec00204 	addi	sp,sp,8
1000ad78:	f800283a 	ret
1000ad7c:	80c0030b 	ldhu	r3,12(r16)
1000ad80:	18fbffcc 	andi	r3,r3,61439
1000ad84:	80c0030d 	sth	r3,12(r16)
1000ad88:	dfc00117 	ldw	ra,4(sp)
1000ad8c:	dc000017 	ldw	r16,0(sp)
1000ad90:	dec00204 	addi	sp,sp,8
1000ad94:	f800283a 	ret

1000ad98 <__seofread>:
1000ad98:	0005883a 	mov	r2,zero
1000ad9c:	f800283a 	ret

1000ada0 <__swrite>:
1000ada0:	2880030b 	ldhu	r2,12(r5)
1000ada4:	defffb04 	addi	sp,sp,-20
1000ada8:	dcc00315 	stw	r19,12(sp)
1000adac:	dc800215 	stw	r18,8(sp)
1000adb0:	dc400115 	stw	r17,4(sp)
1000adb4:	dc000015 	stw	r16,0(sp)
1000adb8:	dfc00415 	stw	ra,16(sp)
1000adbc:	10c0400c 	andi	r3,r2,256
1000adc0:	2821883a 	mov	r16,r5
1000adc4:	2027883a 	mov	r19,r4
1000adc8:	3025883a 	mov	r18,r6
1000adcc:	3823883a 	mov	r17,r7
1000add0:	18000526 	beq	r3,zero,1000ade8 <__swrite+0x48>
1000add4:	2940038f 	ldh	r5,14(r5)
1000add8:	000d883a 	mov	r6,zero
1000addc:	01c00084 	movi	r7,2
1000ade0:	000c9a40 	call	1000c9a4 <_lseek_r>
1000ade4:	8080030b 	ldhu	r2,12(r16)
1000ade8:	8140038f 	ldh	r5,14(r16)
1000adec:	10bbffcc 	andi	r2,r2,61439
1000adf0:	9809883a 	mov	r4,r19
1000adf4:	900d883a 	mov	r6,r18
1000adf8:	880f883a 	mov	r7,r17
1000adfc:	8080030d 	sth	r2,12(r16)
1000ae00:	dfc00417 	ldw	ra,16(sp)
1000ae04:	dcc00317 	ldw	r19,12(sp)
1000ae08:	dc800217 	ldw	r18,8(sp)
1000ae0c:	dc400117 	ldw	r17,4(sp)
1000ae10:	dc000017 	ldw	r16,0(sp)
1000ae14:	dec00504 	addi	sp,sp,20
1000ae18:	000c4801 	jmpi	1000c480 <_write_r>

1000ae1c <__sseek>:
1000ae1c:	defffe04 	addi	sp,sp,-8
1000ae20:	dc000015 	stw	r16,0(sp)
1000ae24:	2821883a 	mov	r16,r5
1000ae28:	2940038f 	ldh	r5,14(r5)
1000ae2c:	dfc00115 	stw	ra,4(sp)
1000ae30:	000c9a40 	call	1000c9a4 <_lseek_r>
1000ae34:	00ffffc4 	movi	r3,-1
1000ae38:	10c00826 	beq	r2,r3,1000ae5c <__sseek+0x40>
1000ae3c:	80c0030b 	ldhu	r3,12(r16)
1000ae40:	80801415 	stw	r2,80(r16)
1000ae44:	18c40014 	ori	r3,r3,4096
1000ae48:	80c0030d 	sth	r3,12(r16)
1000ae4c:	dfc00117 	ldw	ra,4(sp)
1000ae50:	dc000017 	ldw	r16,0(sp)
1000ae54:	dec00204 	addi	sp,sp,8
1000ae58:	f800283a 	ret
1000ae5c:	80c0030b 	ldhu	r3,12(r16)
1000ae60:	18fbffcc 	andi	r3,r3,61439
1000ae64:	80c0030d 	sth	r3,12(r16)
1000ae68:	dfc00117 	ldw	ra,4(sp)
1000ae6c:	dc000017 	ldw	r16,0(sp)
1000ae70:	dec00204 	addi	sp,sp,8
1000ae74:	f800283a 	ret

1000ae78 <__sclose>:
1000ae78:	2940038f 	ldh	r5,14(r5)
1000ae7c:	000c4dc1 	jmpi	1000c4dc <_close_r>

1000ae80 <strcmp>:
1000ae80:	2144b03a 	or	r2,r4,r5
1000ae84:	108000cc 	andi	r2,r2,3
1000ae88:	1000171e 	bne	r2,zero,1000aee8 <strcmp+0x68>
1000ae8c:	20800017 	ldw	r2,0(r4)
1000ae90:	28c00017 	ldw	r3,0(r5)
1000ae94:	10c0141e 	bne	r2,r3,1000aee8 <strcmp+0x68>
1000ae98:	027fbff4 	movhi	r9,65279
1000ae9c:	4a7fbfc4 	addi	r9,r9,-257
1000aea0:	0086303a 	nor	r3,zero,r2
1000aea4:	02202074 	movhi	r8,32897
1000aea8:	1245883a 	add	r2,r2,r9
1000aeac:	42202004 	addi	r8,r8,-32640
1000aeb0:	10c4703a 	and	r2,r2,r3
1000aeb4:	1204703a 	and	r2,r2,r8
1000aeb8:	10000226 	beq	r2,zero,1000aec4 <strcmp+0x44>
1000aebc:	00001706 	br	1000af1c <strcmp+0x9c>
1000aec0:	1000161e 	bne	r2,zero,1000af1c <strcmp+0x9c>
1000aec4:	21000104 	addi	r4,r4,4
1000aec8:	20c00017 	ldw	r3,0(r4)
1000aecc:	29400104 	addi	r5,r5,4
1000aed0:	29800017 	ldw	r6,0(r5)
1000aed4:	1a4f883a 	add	r7,r3,r9
1000aed8:	00c4303a 	nor	r2,zero,r3
1000aedc:	3884703a 	and	r2,r7,r2
1000aee0:	1204703a 	and	r2,r2,r8
1000aee4:	19bff626 	beq	r3,r6,1000aec0 <__alt_data_end+0xf800aec0>
1000aee8:	20800007 	ldb	r2,0(r4)
1000aeec:	1000051e 	bne	r2,zero,1000af04 <strcmp+0x84>
1000aef0:	00000606 	br	1000af0c <strcmp+0x8c>
1000aef4:	21000044 	addi	r4,r4,1
1000aef8:	20800007 	ldb	r2,0(r4)
1000aefc:	29400044 	addi	r5,r5,1
1000af00:	10000226 	beq	r2,zero,1000af0c <strcmp+0x8c>
1000af04:	28c00007 	ldb	r3,0(r5)
1000af08:	10fffa26 	beq	r2,r3,1000aef4 <__alt_data_end+0xf800aef4>
1000af0c:	20800003 	ldbu	r2,0(r4)
1000af10:	28c00003 	ldbu	r3,0(r5)
1000af14:	10c5c83a 	sub	r2,r2,r3
1000af18:	f800283a 	ret
1000af1c:	0005883a 	mov	r2,zero
1000af20:	f800283a 	ret

1000af24 <__sprint_r.part.0>:
1000af24:	28801917 	ldw	r2,100(r5)
1000af28:	defff604 	addi	sp,sp,-40
1000af2c:	dd400515 	stw	r21,20(sp)
1000af30:	dcc00315 	stw	r19,12(sp)
1000af34:	dfc00915 	stw	ra,36(sp)
1000af38:	df000815 	stw	fp,32(sp)
1000af3c:	ddc00715 	stw	r23,28(sp)
1000af40:	dd800615 	stw	r22,24(sp)
1000af44:	dd000415 	stw	r20,16(sp)
1000af48:	dc800215 	stw	r18,8(sp)
1000af4c:	dc400115 	stw	r17,4(sp)
1000af50:	dc000015 	stw	r16,0(sp)
1000af54:	1088000c 	andi	r2,r2,8192
1000af58:	2827883a 	mov	r19,r5
1000af5c:	302b883a 	mov	r21,r6
1000af60:	10002d26 	beq	r2,zero,1000b018 <__sprint_r.part.0+0xf4>
1000af64:	30800217 	ldw	r2,8(r6)
1000af68:	35800017 	ldw	r22,0(r6)
1000af6c:	10002826 	beq	r2,zero,1000b010 <__sprint_r.part.0+0xec>
1000af70:	2029883a 	mov	r20,r4
1000af74:	b5c00104 	addi	r23,r22,4
1000af78:	04bfffc4 	movi	r18,-1
1000af7c:	bc400017 	ldw	r17,0(r23)
1000af80:	b4000017 	ldw	r16,0(r22)
1000af84:	0039883a 	mov	fp,zero
1000af88:	8822d0ba 	srli	r17,r17,2
1000af8c:	04400316 	blt	zero,r17,1000af9c <__sprint_r.part.0+0x78>
1000af90:	00001706 	br	1000aff0 <__sprint_r.part.0+0xcc>
1000af94:	84000104 	addi	r16,r16,4
1000af98:	8f001526 	beq	r17,fp,1000aff0 <__sprint_r.part.0+0xcc>
1000af9c:	81400017 	ldw	r5,0(r16)
1000afa0:	a009883a 	mov	r4,r20
1000afa4:	980d883a 	mov	r6,r19
1000afa8:	000c71c0 	call	1000c71c <_fputwc_r>
1000afac:	e7000044 	addi	fp,fp,1
1000afb0:	14bff81e 	bne	r2,r18,1000af94 <__alt_data_end+0xf800af94>
1000afb4:	9005883a 	mov	r2,r18
1000afb8:	a8000215 	stw	zero,8(r21)
1000afbc:	a8000115 	stw	zero,4(r21)
1000afc0:	dfc00917 	ldw	ra,36(sp)
1000afc4:	df000817 	ldw	fp,32(sp)
1000afc8:	ddc00717 	ldw	r23,28(sp)
1000afcc:	dd800617 	ldw	r22,24(sp)
1000afd0:	dd400517 	ldw	r21,20(sp)
1000afd4:	dd000417 	ldw	r20,16(sp)
1000afd8:	dcc00317 	ldw	r19,12(sp)
1000afdc:	dc800217 	ldw	r18,8(sp)
1000afe0:	dc400117 	ldw	r17,4(sp)
1000afe4:	dc000017 	ldw	r16,0(sp)
1000afe8:	dec00a04 	addi	sp,sp,40
1000afec:	f800283a 	ret
1000aff0:	a8c00217 	ldw	r3,8(r21)
1000aff4:	8c63883a 	add	r17,r17,r17
1000aff8:	8c63883a 	add	r17,r17,r17
1000affc:	1c45c83a 	sub	r2,r3,r17
1000b000:	a8800215 	stw	r2,8(r21)
1000b004:	b5800204 	addi	r22,r22,8
1000b008:	bdc00204 	addi	r23,r23,8
1000b00c:	103fdb1e 	bne	r2,zero,1000af7c <__alt_data_end+0xf800af7c>
1000b010:	0005883a 	mov	r2,zero
1000b014:	003fe806 	br	1000afb8 <__alt_data_end+0xf800afb8>
1000b018:	00081a00 	call	100081a0 <__sfvwrite_r>
1000b01c:	003fe606 	br	1000afb8 <__alt_data_end+0xf800afb8>

1000b020 <__sprint_r>:
1000b020:	30c00217 	ldw	r3,8(r6)
1000b024:	18000126 	beq	r3,zero,1000b02c <__sprint_r+0xc>
1000b028:	000af241 	jmpi	1000af24 <__sprint_r.part.0>
1000b02c:	30000115 	stw	zero,4(r6)
1000b030:	0005883a 	mov	r2,zero
1000b034:	f800283a 	ret

1000b038 <___vfiprintf_internal_r>:
1000b038:	defeca04 	addi	sp,sp,-1240
1000b03c:	dcc12f15 	stw	r19,1212(sp)
1000b040:	dfc13515 	stw	ra,1236(sp)
1000b044:	df013415 	stw	fp,1232(sp)
1000b048:	ddc13315 	stw	r23,1228(sp)
1000b04c:	dd813215 	stw	r22,1224(sp)
1000b050:	dd413115 	stw	r21,1220(sp)
1000b054:	dd013015 	stw	r20,1216(sp)
1000b058:	dc812e15 	stw	r18,1208(sp)
1000b05c:	dc412d15 	stw	r17,1204(sp)
1000b060:	dc012c15 	stw	r16,1200(sp)
1000b064:	d9012115 	stw	r4,1156(sp)
1000b068:	d9412015 	stw	r5,1152(sp)
1000b06c:	d9c12315 	stw	r7,1164(sp)
1000b070:	3027883a 	mov	r19,r6
1000b074:	20000226 	beq	r4,zero,1000b080 <___vfiprintf_internal_r+0x48>
1000b078:	20800e17 	ldw	r2,56(r4)
1000b07c:	1000f726 	beq	r2,zero,1000b45c <___vfiprintf_internal_r+0x424>
1000b080:	d8812017 	ldw	r2,1152(sp)
1000b084:	10c0030b 	ldhu	r3,12(r2)
1000b088:	1908000c 	andi	r4,r3,8192
1000b08c:	1805883a 	mov	r2,r3
1000b090:	2000081e 	bne	r4,zero,1000b0b4 <___vfiprintf_internal_r+0x7c>
1000b094:	d9412017 	ldw	r5,1152(sp)
1000b098:	18880014 	ori	r2,r3,8192
1000b09c:	00f7ffc4 	movi	r3,-8193
1000b0a0:	29001917 	ldw	r4,100(r5)
1000b0a4:	2880030d 	sth	r2,12(r5)
1000b0a8:	20c8703a 	and	r4,r4,r3
1000b0ac:	29001915 	stw	r4,100(r5)
1000b0b0:	1007883a 	mov	r3,r2
1000b0b4:	1100020c 	andi	r4,r2,8
1000b0b8:	2000a726 	beq	r4,zero,1000b358 <___vfiprintf_internal_r+0x320>
1000b0bc:	d9412017 	ldw	r5,1152(sp)
1000b0c0:	29000417 	ldw	r4,16(r5)
1000b0c4:	2000a426 	beq	r4,zero,1000b358 <___vfiprintf_internal_r+0x320>
1000b0c8:	1080068c 	andi	r2,r2,26
1000b0cc:	01000284 	movi	r4,10
1000b0d0:	1100ab26 	beq	r2,r4,1000b380 <___vfiprintf_internal_r+0x348>
1000b0d4:	d9010a04 	addi	r4,sp,1064
1000b0d8:	d94109c4 	addi	r5,sp,1063
1000b0dc:	07040074 	movhi	fp,4097
1000b0e0:	04440074 	movhi	r17,4097
1000b0e4:	2145c83a 	sub	r2,r4,r5
1000b0e8:	e70ce404 	addi	fp,fp,13200
1000b0ec:	8c4ce004 	addi	r17,r17,13184
1000b0f0:	d9011e15 	stw	r4,1144(sp)
1000b0f4:	d9411f15 	stw	r5,1148(sp)
1000b0f8:	dec11a15 	stw	sp,1128(sp)
1000b0fc:	d8011c15 	stw	zero,1136(sp)
1000b100:	d8011b15 	stw	zero,1132(sp)
1000b104:	d8012715 	stw	zero,1180(sp)
1000b108:	d8012515 	stw	zero,1172(sp)
1000b10c:	d811883a 	mov	r8,sp
1000b110:	d8812815 	stw	r2,1184(sp)
1000b114:	982f883a 	mov	r23,r19
1000b118:	b8800007 	ldb	r2,0(r23)
1000b11c:	1003b026 	beq	r2,zero,1000bfe0 <___vfiprintf_internal_r+0xfa8>
1000b120:	01000944 	movi	r4,37
1000b124:	1103ae26 	beq	r2,r4,1000bfe0 <___vfiprintf_internal_r+0xfa8>
1000b128:	b805883a 	mov	r2,r23
1000b12c:	00000106 	br	1000b134 <___vfiprintf_internal_r+0xfc>
1000b130:	19000326 	beq	r3,r4,1000b140 <___vfiprintf_internal_r+0x108>
1000b134:	10800044 	addi	r2,r2,1
1000b138:	10c00007 	ldb	r3,0(r2)
1000b13c:	183ffc1e 	bne	r3,zero,1000b130 <__alt_data_end+0xf800b130>
1000b140:	15e1c83a 	sub	r16,r2,r23
1000b144:	1029883a 	mov	r20,r2
1000b148:	80001026 	beq	r16,zero,1000b18c <___vfiprintf_internal_r+0x154>
1000b14c:	d8c11c17 	ldw	r3,1136(sp)
1000b150:	d8811b17 	ldw	r2,1132(sp)
1000b154:	45c00015 	stw	r23,0(r8)
1000b158:	80c7883a 	add	r3,r16,r3
1000b15c:	10800044 	addi	r2,r2,1
1000b160:	44000115 	stw	r16,4(r8)
1000b164:	d8c11c15 	stw	r3,1136(sp)
1000b168:	d8811b15 	stw	r2,1132(sp)
1000b16c:	010001c4 	movi	r4,7
1000b170:	2080740e 	bge	r4,r2,1000b344 <___vfiprintf_internal_r+0x30c>
1000b174:	1803a71e 	bne	r3,zero,1000c014 <___vfiprintf_internal_r+0xfdc>
1000b178:	d8c12517 	ldw	r3,1172(sp)
1000b17c:	d8011b15 	stw	zero,1132(sp)
1000b180:	d811883a 	mov	r8,sp
1000b184:	1c07883a 	add	r3,r3,r16
1000b188:	d8c12515 	stw	r3,1172(sp)
1000b18c:	a0800007 	ldb	r2,0(r20)
1000b190:	1002bf26 	beq	r2,zero,1000bc90 <___vfiprintf_internal_r+0xc58>
1000b194:	a5c00044 	addi	r23,r20,1
1000b198:	a1800047 	ldb	r6,1(r20)
1000b19c:	d8011d85 	stb	zero,1142(sp)
1000b1a0:	d8012205 	stb	zero,1160(sp)
1000b1a4:	043fffc4 	movi	r16,-1
1000b1a8:	d8012415 	stw	zero,1168(sp)
1000b1ac:	0025883a 	mov	r18,zero
1000b1b0:	05001604 	movi	r20,88
1000b1b4:	05400244 	movi	r21,9
1000b1b8:	4027883a 	mov	r19,r8
1000b1bc:	bdc00044 	addi	r23,r23,1
1000b1c0:	30bff804 	addi	r2,r6,-32
1000b1c4:	a0825636 	bltu	r20,r2,1000bb20 <___vfiprintf_internal_r+0xae8>
1000b1c8:	100490ba 	slli	r2,r2,2
1000b1cc:	01040074 	movhi	r4,4097
1000b1d0:	212c7804 	addi	r4,r4,-20000
1000b1d4:	1105883a 	add	r2,r2,r4
1000b1d8:	10800017 	ldw	r2,0(r2)
1000b1dc:	1000683a 	jmp	r2
1000b1e0:	1000bab0 	cmpltui	zero,r2,746
1000b1e4:	1000bb20 	cmpeqi	zero,r2,748
1000b1e8:	1000bb20 	cmpeqi	zero,r2,748
1000b1ec:	1000bb14 	ori	zero,r2,748
1000b1f0:	1000bb20 	cmpeqi	zero,r2,748
1000b1f4:	1000bb20 	cmpeqi	zero,r2,748
1000b1f8:	1000bb20 	cmpeqi	zero,r2,748
1000b1fc:	1000bb20 	cmpeqi	zero,r2,748
1000b200:	1000bb20 	cmpeqi	zero,r2,748
1000b204:	1000bb20 	cmpeqi	zero,r2,748
1000b208:	1000b8a0 	cmpeqi	zero,r2,738
1000b20c:	1000bac8 	cmpgei	zero,r2,747
1000b210:	1000bb20 	cmpeqi	zero,r2,748
1000b214:	1000b474 	orhi	zero,r2,721
1000b218:	1000b8c4 	addi	zero,r2,739
1000b21c:	1000bb20 	cmpeqi	zero,r2,748
1000b220:	1000b480 	call	11000b48 <_gp+0xfe3bc8>
1000b224:	1000b48c 	andi	zero,r2,722
1000b228:	1000b48c 	andi	zero,r2,722
1000b22c:	1000b48c 	andi	zero,r2,722
1000b230:	1000b48c 	andi	zero,r2,722
1000b234:	1000b48c 	andi	zero,r2,722
1000b238:	1000b48c 	andi	zero,r2,722
1000b23c:	1000b48c 	andi	zero,r2,722
1000b240:	1000b48c 	andi	zero,r2,722
1000b244:	1000b48c 	andi	zero,r2,722
1000b248:	1000bb20 	cmpeqi	zero,r2,748
1000b24c:	1000bb20 	cmpeqi	zero,r2,748
1000b250:	1000bb20 	cmpeqi	zero,r2,748
1000b254:	1000bb20 	cmpeqi	zero,r2,748
1000b258:	1000bb20 	cmpeqi	zero,r2,748
1000b25c:	1000bb20 	cmpeqi	zero,r2,748
1000b260:	1000bb20 	cmpeqi	zero,r2,748
1000b264:	1000bb20 	cmpeqi	zero,r2,748
1000b268:	1000bb20 	cmpeqi	zero,r2,748
1000b26c:	1000bb20 	cmpeqi	zero,r2,748
1000b270:	1000b4cc 	andi	zero,r2,723
1000b274:	1000bb20 	cmpeqi	zero,r2,748
1000b278:	1000bb20 	cmpeqi	zero,r2,748
1000b27c:	1000bb20 	cmpeqi	zero,r2,748
1000b280:	1000bb20 	cmpeqi	zero,r2,748
1000b284:	1000bb20 	cmpeqi	zero,r2,748
1000b288:	1000bb20 	cmpeqi	zero,r2,748
1000b28c:	1000bb20 	cmpeqi	zero,r2,748
1000b290:	1000bb20 	cmpeqi	zero,r2,748
1000b294:	1000bb20 	cmpeqi	zero,r2,748
1000b298:	1000bb20 	cmpeqi	zero,r2,748
1000b29c:	1000b7bc 	xorhi	zero,r2,734
1000b2a0:	1000bb20 	cmpeqi	zero,r2,748
1000b2a4:	1000bb20 	cmpeqi	zero,r2,748
1000b2a8:	1000bb20 	cmpeqi	zero,r2,748
1000b2ac:	1000bb20 	cmpeqi	zero,r2,748
1000b2b0:	1000bb20 	cmpeqi	zero,r2,748
1000b2b4:	1000b7fc 	xorhi	zero,r2,735
1000b2b8:	1000bb20 	cmpeqi	zero,r2,748
1000b2bc:	1000bb20 	cmpeqi	zero,r2,748
1000b2c0:	1000b840 	call	11000b84 <_gp+0xfe3c04>
1000b2c4:	1000bb20 	cmpeqi	zero,r2,748
1000b2c8:	1000bb20 	cmpeqi	zero,r2,748
1000b2cc:	1000bb20 	cmpeqi	zero,r2,748
1000b2d0:	1000bb20 	cmpeqi	zero,r2,748
1000b2d4:	1000bb20 	cmpeqi	zero,r2,748
1000b2d8:	1000bb20 	cmpeqi	zero,r2,748
1000b2dc:	1000bb20 	cmpeqi	zero,r2,748
1000b2e0:	1000bb20 	cmpeqi	zero,r2,748
1000b2e4:	1000bb20 	cmpeqi	zero,r2,748
1000b2e8:	1000bb20 	cmpeqi	zero,r2,748
1000b2ec:	1000b788 	cmpgei	zero,r2,734
1000b2f0:	1000bad8 	cmpnei	zero,r2,747
1000b2f4:	1000bb20 	cmpeqi	zero,r2,748
1000b2f8:	1000bb20 	cmpeqi	zero,r2,748
1000b2fc:	1000bb20 	cmpeqi	zero,r2,748
1000b300:	1000b914 	ori	zero,r2,740
1000b304:	1000bad8 	cmpnei	zero,r2,747
1000b308:	1000bb20 	cmpeqi	zero,r2,748
1000b30c:	1000bb20 	cmpeqi	zero,r2,748
1000b310:	1000b82c 	andhi	zero,r2,736
1000b314:	1000bb20 	cmpeqi	zero,r2,748
1000b318:	1000ba78 	rdprs	zero,r2,745
1000b31c:	1000ba00 	call	11000ba0 <_gp+0xfe3c20>
1000b320:	1000ba34 	orhi	zero,r2,744
1000b324:	1000b920 	cmpeqi	zero,r2,740
1000b328:	1000bb20 	cmpeqi	zero,r2,748
1000b32c:	1000b92c 	andhi	zero,r2,740
1000b330:	1000bb20 	cmpeqi	zero,r2,748
1000b334:	1000b988 	cmpgei	zero,r2,742
1000b338:	1000bb20 	cmpeqi	zero,r2,748
1000b33c:	1000bb20 	cmpeqi	zero,r2,748
1000b340:	1000b9bc 	xorhi	zero,r2,742
1000b344:	42000204 	addi	r8,r8,8
1000b348:	d8c12517 	ldw	r3,1172(sp)
1000b34c:	1c07883a 	add	r3,r3,r16
1000b350:	d8c12515 	stw	r3,1172(sp)
1000b354:	003f8d06 	br	1000b18c <__alt_data_end+0xf800b18c>
1000b358:	d9012117 	ldw	r4,1156(sp)
1000b35c:	d9412017 	ldw	r5,1152(sp)
1000b360:	0005d000 	call	10005d00 <__swsetup_r>
1000b364:	1000301e 	bne	r2,zero,1000b428 <___vfiprintf_internal_r+0x3f0>
1000b368:	d8812017 	ldw	r2,1152(sp)
1000b36c:	01000284 	movi	r4,10
1000b370:	10c0030b 	ldhu	r3,12(r2)
1000b374:	1805883a 	mov	r2,r3
1000b378:	1080068c 	andi	r2,r2,26
1000b37c:	113f551e 	bne	r2,r4,1000b0d4 <__alt_data_end+0xf800b0d4>
1000b380:	d9012017 	ldw	r4,1152(sp)
1000b384:	2080038b 	ldhu	r2,14(r4)
1000b388:	113fffcc 	andi	r4,r2,65535
1000b38c:	2120001c 	xori	r4,r4,32768
1000b390:	21200004 	addi	r4,r4,-32768
1000b394:	203f4f16 	blt	r4,zero,1000b0d4 <__alt_data_end+0xf800b0d4>
1000b398:	d9412017 	ldw	r5,1152(sp)
1000b39c:	d9012117 	ldw	r4,1156(sp)
1000b3a0:	d9c12317 	ldw	r7,1164(sp)
1000b3a4:	2b001917 	ldw	r12,100(r5)
1000b3a8:	2ac00717 	ldw	r11,28(r5)
1000b3ac:	2a800917 	ldw	r10,36(r5)
1000b3b0:	02010004 	movi	r8,1024
1000b3b4:	18ffff4c 	andi	r3,r3,65533
1000b3b8:	da0b883a 	add	r5,sp,r8
1000b3bc:	980d883a 	mov	r6,r19
1000b3c0:	d8c1030d 	sth	r3,1036(sp)
1000b3c4:	db011915 	stw	r12,1124(sp)
1000b3c8:	d881038d 	sth	r2,1038(sp)
1000b3cc:	dac10715 	stw	r11,1052(sp)
1000b3d0:	da810915 	stw	r10,1060(sp)
1000b3d4:	dec10015 	stw	sp,1024(sp)
1000b3d8:	dec10415 	stw	sp,1040(sp)
1000b3dc:	da010215 	stw	r8,1032(sp)
1000b3e0:	da010515 	stw	r8,1044(sp)
1000b3e4:	d8010615 	stw	zero,1048(sp)
1000b3e8:	000b0380 	call	1000b038 <___vfiprintf_internal_r>
1000b3ec:	1021883a 	mov	r16,r2
1000b3f0:	10000416 	blt	r2,zero,1000b404 <___vfiprintf_internal_r+0x3cc>
1000b3f4:	d9012117 	ldw	r4,1156(sp)
1000b3f8:	d9410004 	addi	r5,sp,1024
1000b3fc:	00077800 	call	10007780 <_fflush_r>
1000b400:	10040f1e 	bne	r2,zero,1000c440 <___vfiprintf_internal_r+0x1408>
1000b404:	d881030b 	ldhu	r2,1036(sp)
1000b408:	1080100c 	andi	r2,r2,64
1000b40c:	10000426 	beq	r2,zero,1000b420 <___vfiprintf_internal_r+0x3e8>
1000b410:	d8c12017 	ldw	r3,1152(sp)
1000b414:	1880030b 	ldhu	r2,12(r3)
1000b418:	10801014 	ori	r2,r2,64
1000b41c:	1880030d 	sth	r2,12(r3)
1000b420:	8005883a 	mov	r2,r16
1000b424:	00000106 	br	1000b42c <___vfiprintf_internal_r+0x3f4>
1000b428:	00bfffc4 	movi	r2,-1
1000b42c:	dfc13517 	ldw	ra,1236(sp)
1000b430:	df013417 	ldw	fp,1232(sp)
1000b434:	ddc13317 	ldw	r23,1228(sp)
1000b438:	dd813217 	ldw	r22,1224(sp)
1000b43c:	dd413117 	ldw	r21,1220(sp)
1000b440:	dd013017 	ldw	r20,1216(sp)
1000b444:	dcc12f17 	ldw	r19,1212(sp)
1000b448:	dc812e17 	ldw	r18,1208(sp)
1000b44c:	dc412d17 	ldw	r17,1204(sp)
1000b450:	dc012c17 	ldw	r16,1200(sp)
1000b454:	dec13604 	addi	sp,sp,1240
1000b458:	f800283a 	ret
1000b45c:	0007d3c0 	call	10007d3c <__sinit>
1000b460:	003f0706 	br	1000b080 <__alt_data_end+0xf800b080>
1000b464:	d8c12417 	ldw	r3,1168(sp)
1000b468:	d8812315 	stw	r2,1164(sp)
1000b46c:	00c7c83a 	sub	r3,zero,r3
1000b470:	d8c12415 	stw	r3,1168(sp)
1000b474:	94800114 	ori	r18,r18,4
1000b478:	b9800007 	ldb	r6,0(r23)
1000b47c:	003f4f06 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000b480:	94802014 	ori	r18,r18,128
1000b484:	b9800007 	ldb	r6,0(r23)
1000b488:	003f4c06 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000b48c:	dc012615 	stw	r16,1176(sp)
1000b490:	d8012415 	stw	zero,1168(sp)
1000b494:	35bff404 	addi	r22,r6,-48
1000b498:	0009883a 	mov	r4,zero
1000b49c:	b821883a 	mov	r16,r23
1000b4a0:	01400284 	movi	r5,10
1000b4a4:	00039ec0 	call	100039ec <__mulsi3>
1000b4a8:	81800007 	ldb	r6,0(r16)
1000b4ac:	1589883a 	add	r4,r2,r22
1000b4b0:	bdc00044 	addi	r23,r23,1
1000b4b4:	35bff404 	addi	r22,r6,-48
1000b4b8:	b821883a 	mov	r16,r23
1000b4bc:	adbff82e 	bgeu	r21,r22,1000b4a0 <__alt_data_end+0xf800b4a0>
1000b4c0:	d9012415 	stw	r4,1168(sp)
1000b4c4:	dc012617 	ldw	r16,1176(sp)
1000b4c8:	003f3d06 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b4cc:	d8c12203 	ldbu	r3,1160(sp)
1000b4d0:	94800414 	ori	r18,r18,16
1000b4d4:	9080080c 	andi	r2,r18,32
1000b4d8:	d8c11d85 	stb	r3,1142(sp)
1000b4dc:	9811883a 	mov	r8,r19
1000b4e0:	d8c12317 	ldw	r3,1164(sp)
1000b4e4:	10018226 	beq	r2,zero,1000baf0 <___vfiprintf_internal_r+0xab8>
1000b4e8:	d9012317 	ldw	r4,1164(sp)
1000b4ec:	18800117 	ldw	r2,4(r3)
1000b4f0:	1cc00017 	ldw	r19,0(r3)
1000b4f4:	21000204 	addi	r4,r4,8
1000b4f8:	d9012315 	stw	r4,1164(sp)
1000b4fc:	102b883a 	mov	r21,r2
1000b500:	10030016 	blt	r2,zero,1000c104 <___vfiprintf_internal_r+0x10cc>
1000b504:	dd811d83 	ldbu	r22,1142(sp)
1000b508:	8029883a 	mov	r20,r16
1000b50c:	00800044 	movi	r2,1
1000b510:	9d46b03a 	or	r3,r19,r21
1000b514:	80000216 	blt	r16,zero,1000b520 <___vfiprintf_internal_r+0x4e8>
1000b518:	013fdfc4 	movi	r4,-129
1000b51c:	9124703a 	and	r18,r18,r4
1000b520:	1801b41e 	bne	r3,zero,1000bbf4 <___vfiprintf_internal_r+0xbbc>
1000b524:	80028126 	beq	r16,zero,1000bf2c <___vfiprintf_internal_r+0xef4>
1000b528:	10803fcc 	andi	r2,r2,255
1000b52c:	00c00044 	movi	r3,1
1000b530:	10c1d126 	beq	r2,r3,1000bc78 <___vfiprintf_internal_r+0xc40>
1000b534:	00c00084 	movi	r3,2
1000b538:	10c28626 	beq	r2,r3,1000bf54 <___vfiprintf_internal_r+0xf1c>
1000b53c:	d8c10a04 	addi	r3,sp,1064
1000b540:	9808d0fa 	srli	r4,r19,3
1000b544:	a80a977a 	slli	r5,r21,29
1000b548:	a82ad0fa 	srli	r21,r21,3
1000b54c:	9cc001cc 	andi	r19,r19,7
1000b550:	98800c04 	addi	r2,r19,48
1000b554:	18ffffc4 	addi	r3,r3,-1
1000b558:	2926b03a 	or	r19,r5,r4
1000b55c:	18800005 	stb	r2,0(r3)
1000b560:	9d48b03a 	or	r4,r19,r21
1000b564:	203ff61e 	bne	r4,zero,1000b540 <__alt_data_end+0xf800b540>
1000b568:	9100004c 	andi	r4,r18,1
1000b56c:	d8c12215 	stw	r3,1160(sp)
1000b570:	2002b31e 	bne	r4,zero,1000c040 <___vfiprintf_internal_r+0x1008>
1000b574:	d9411e17 	ldw	r5,1144(sp)
1000b578:	28e9c83a 	sub	r20,r5,r3
1000b57c:	a02b883a 	mov	r21,r20
1000b580:	a400010e 	bge	r20,r16,1000b588 <___vfiprintf_internal_r+0x550>
1000b584:	802b883a 	mov	r21,r16
1000b588:	b5803fcc 	andi	r22,r22,255
1000b58c:	b580201c 	xori	r22,r22,128
1000b590:	b5bfe004 	addi	r22,r22,-128
1000b594:	b0000126 	beq	r22,zero,1000b59c <___vfiprintf_internal_r+0x564>
1000b598:	ad400044 	addi	r21,r21,1
1000b59c:	9280008c 	andi	r10,r18,2
1000b5a0:	50000126 	beq	r10,zero,1000b5a8 <___vfiprintf_internal_r+0x570>
1000b5a4:	ad400084 	addi	r21,r21,2
1000b5a8:	9580210c 	andi	r22,r18,132
1000b5ac:	b001751e 	bne	r22,zero,1000bb84 <___vfiprintf_internal_r+0xb4c>
1000b5b0:	d9012417 	ldw	r4,1168(sp)
1000b5b4:	2567c83a 	sub	r19,r4,r21
1000b5b8:	04c1720e 	bge	zero,r19,1000bb84 <___vfiprintf_internal_r+0xb4c>
1000b5bc:	01c00404 	movi	r7,16
1000b5c0:	d8c11c17 	ldw	r3,1136(sp)
1000b5c4:	3cc36b0e 	bge	r7,r19,1000c374 <___vfiprintf_internal_r+0x133c>
1000b5c8:	00840074 	movhi	r2,4097
1000b5cc:	108ce404 	addi	r2,r2,13200
1000b5d0:	dc012915 	stw	r16,1188(sp)
1000b5d4:	d9011b17 	ldw	r4,1132(sp)
1000b5d8:	9821883a 	mov	r16,r19
1000b5dc:	d8812615 	stw	r2,1176(sp)
1000b5e0:	030001c4 	movi	r12,7
1000b5e4:	5027883a 	mov	r19,r10
1000b5e8:	00000506 	br	1000b600 <___vfiprintf_internal_r+0x5c8>
1000b5ec:	21400084 	addi	r5,r4,2
1000b5f0:	42000204 	addi	r8,r8,8
1000b5f4:	1009883a 	mov	r4,r2
1000b5f8:	843ffc04 	addi	r16,r16,-16
1000b5fc:	3c000d0e 	bge	r7,r16,1000b634 <___vfiprintf_internal_r+0x5fc>
1000b600:	18c00404 	addi	r3,r3,16
1000b604:	20800044 	addi	r2,r4,1
1000b608:	47000015 	stw	fp,0(r8)
1000b60c:	41c00115 	stw	r7,4(r8)
1000b610:	d8c11c15 	stw	r3,1136(sp)
1000b614:	d8811b15 	stw	r2,1132(sp)
1000b618:	60bff40e 	bge	r12,r2,1000b5ec <__alt_data_end+0xf800b5ec>
1000b61c:	18014b1e 	bne	r3,zero,1000bb4c <___vfiprintf_internal_r+0xb14>
1000b620:	843ffc04 	addi	r16,r16,-16
1000b624:	0009883a 	mov	r4,zero
1000b628:	01400044 	movi	r5,1
1000b62c:	d811883a 	mov	r8,sp
1000b630:	3c3ff316 	blt	r7,r16,1000b600 <__alt_data_end+0xf800b600>
1000b634:	9815883a 	mov	r10,r19
1000b638:	8027883a 	mov	r19,r16
1000b63c:	dc012917 	ldw	r16,1188(sp)
1000b640:	d9012617 	ldw	r4,1176(sp)
1000b644:	98c7883a 	add	r3,r19,r3
1000b648:	44c00115 	stw	r19,4(r8)
1000b64c:	41000015 	stw	r4,0(r8)
1000b650:	d8c11c15 	stw	r3,1136(sp)
1000b654:	d9411b15 	stw	r5,1132(sp)
1000b658:	008001c4 	movi	r2,7
1000b65c:	11425116 	blt	r2,r5,1000bfa4 <___vfiprintf_internal_r+0xf6c>
1000b660:	d9011d87 	ldb	r4,1142(sp)
1000b664:	42000204 	addi	r8,r8,8
1000b668:	28800044 	addi	r2,r5,1
1000b66c:	20014a1e 	bne	r4,zero,1000bb98 <___vfiprintf_internal_r+0xb60>
1000b670:	50000c26 	beq	r10,zero,1000b6a4 <___vfiprintf_internal_r+0x66c>
1000b674:	d9011d04 	addi	r4,sp,1140
1000b678:	18c00084 	addi	r3,r3,2
1000b67c:	41000015 	stw	r4,0(r8)
1000b680:	01000084 	movi	r4,2
1000b684:	41000115 	stw	r4,4(r8)
1000b688:	d8c11c15 	stw	r3,1136(sp)
1000b68c:	d8811b15 	stw	r2,1132(sp)
1000b690:	010001c4 	movi	r4,7
1000b694:	20822016 	blt	r4,r2,1000bf18 <___vfiprintf_internal_r+0xee0>
1000b698:	100b883a 	mov	r5,r2
1000b69c:	42000204 	addi	r8,r8,8
1000b6a0:	10800044 	addi	r2,r2,1
1000b6a4:	01002004 	movi	r4,128
1000b6a8:	b101de26 	beq	r22,r4,1000be24 <___vfiprintf_internal_r+0xdec>
1000b6ac:	8521c83a 	sub	r16,r16,r20
1000b6b0:	0400230e 	bge	zero,r16,1000b740 <___vfiprintf_internal_r+0x708>
1000b6b4:	04c00404 	movi	r19,16
1000b6b8:	9c030d0e 	bge	r19,r16,1000c2f0 <___vfiprintf_internal_r+0x12b8>
1000b6bc:	00840074 	movhi	r2,4097
1000b6c0:	108ce004 	addi	r2,r2,13184
1000b6c4:	d8812615 	stw	r2,1176(sp)
1000b6c8:	058001c4 	movi	r22,7
1000b6cc:	00000506 	br	1000b6e4 <___vfiprintf_internal_r+0x6ac>
1000b6d0:	28800084 	addi	r2,r5,2
1000b6d4:	42000204 	addi	r8,r8,8
1000b6d8:	200b883a 	mov	r5,r4
1000b6dc:	843ffc04 	addi	r16,r16,-16
1000b6e0:	9c000d0e 	bge	r19,r16,1000b718 <___vfiprintf_internal_r+0x6e0>
1000b6e4:	18c00404 	addi	r3,r3,16
1000b6e8:	29000044 	addi	r4,r5,1
1000b6ec:	44400015 	stw	r17,0(r8)
1000b6f0:	44c00115 	stw	r19,4(r8)
1000b6f4:	d8c11c15 	stw	r3,1136(sp)
1000b6f8:	d9011b15 	stw	r4,1132(sp)
1000b6fc:	b13ff40e 	bge	r22,r4,1000b6d0 <__alt_data_end+0xf800b6d0>
1000b700:	1801321e 	bne	r3,zero,1000bbcc <___vfiprintf_internal_r+0xb94>
1000b704:	843ffc04 	addi	r16,r16,-16
1000b708:	000b883a 	mov	r5,zero
1000b70c:	00800044 	movi	r2,1
1000b710:	d811883a 	mov	r8,sp
1000b714:	9c3ff316 	blt	r19,r16,1000b6e4 <__alt_data_end+0xf800b6e4>
1000b718:	d9012617 	ldw	r4,1176(sp)
1000b71c:	1c07883a 	add	r3,r3,r16
1000b720:	44000115 	stw	r16,4(r8)
1000b724:	41000015 	stw	r4,0(r8)
1000b728:	d8c11c15 	stw	r3,1136(sp)
1000b72c:	d8811b15 	stw	r2,1132(sp)
1000b730:	010001c4 	movi	r4,7
1000b734:	20816216 	blt	r4,r2,1000bcc0 <___vfiprintf_internal_r+0xc88>
1000b738:	42000204 	addi	r8,r8,8
1000b73c:	10800044 	addi	r2,r2,1
1000b740:	d9012217 	ldw	r4,1160(sp)
1000b744:	1d07883a 	add	r3,r3,r20
1000b748:	45000115 	stw	r20,4(r8)
1000b74c:	41000015 	stw	r4,0(r8)
1000b750:	d8c11c15 	stw	r3,1136(sp)
1000b754:	d8811b15 	stw	r2,1132(sp)
1000b758:	010001c4 	movi	r4,7
1000b75c:	2081610e 	bge	r4,r2,1000bce4 <___vfiprintf_internal_r+0xcac>
1000b760:	1802211e 	bne	r3,zero,1000bfe8 <___vfiprintf_internal_r+0xfb0>
1000b764:	d8011b15 	stw	zero,1132(sp)
1000b768:	9480010c 	andi	r18,r18,4
1000b76c:	9002171e 	bne	r18,zero,1000bfcc <___vfiprintf_internal_r+0xf94>
1000b770:	d9412417 	ldw	r5,1168(sp)
1000b774:	a9433716 	blt	r21,r5,1000c454 <___vfiprintf_internal_r+0x141c>
1000b778:	d8812517 	ldw	r2,1172(sp)
1000b77c:	1545883a 	add	r2,r2,r21
1000b780:	d8812515 	stw	r2,1172(sp)
1000b784:	00019a06 	br	1000bdf0 <___vfiprintf_internal_r+0xdb8>
1000b788:	d8c12317 	ldw	r3,1164(sp)
1000b78c:	05400044 	movi	r21,1
1000b790:	9811883a 	mov	r8,r19
1000b794:	18800017 	ldw	r2,0(r3)
1000b798:	18c00104 	addi	r3,r3,4
1000b79c:	d8c12315 	stw	r3,1164(sp)
1000b7a0:	d8c10004 	addi	r3,sp,1024
1000b7a4:	d8011d85 	stb	zero,1142(sp)
1000b7a8:	d8810005 	stb	r2,1024(sp)
1000b7ac:	a829883a 	mov	r20,r21
1000b7b0:	d8c12215 	stw	r3,1160(sp)
1000b7b4:	0021883a 	mov	r16,zero
1000b7b8:	003f7806 	br	1000b59c <__alt_data_end+0xf800b59c>
1000b7bc:	94800414 	ori	r18,r18,16
1000b7c0:	9080080c 	andi	r2,r18,32
1000b7c4:	9811883a 	mov	r8,r19
1000b7c8:	10009026 	beq	r2,zero,1000ba0c <___vfiprintf_internal_r+0x9d4>
1000b7cc:	d8812317 	ldw	r2,1164(sp)
1000b7d0:	d8c12317 	ldw	r3,1164(sp)
1000b7d4:	14c00017 	ldw	r19,0(r2)
1000b7d8:	15400117 	ldw	r21,4(r2)
1000b7dc:	18c00204 	addi	r3,r3,8
1000b7e0:	d8c12315 	stw	r3,1164(sp)
1000b7e4:	0005883a 	mov	r2,zero
1000b7e8:	9d46b03a 	or	r3,r19,r21
1000b7ec:	d8011d85 	stb	zero,1142(sp)
1000b7f0:	8029883a 	mov	r20,r16
1000b7f4:	002d883a 	mov	r22,zero
1000b7f8:	003f4606 	br	1000b514 <__alt_data_end+0xf800b514>
1000b7fc:	94800414 	ori	r18,r18,16
1000b800:	9080080c 	andi	r2,r18,32
1000b804:	9811883a 	mov	r8,r19
1000b808:	10006226 	beq	r2,zero,1000b994 <___vfiprintf_internal_r+0x95c>
1000b80c:	d9012317 	ldw	r4,1164(sp)
1000b810:	00800044 	movi	r2,1
1000b814:	24c00017 	ldw	r19,0(r4)
1000b818:	25400117 	ldw	r21,4(r4)
1000b81c:	21000204 	addi	r4,r4,8
1000b820:	d9012315 	stw	r4,1164(sp)
1000b824:	9d46b03a 	or	r3,r19,r21
1000b828:	003ff006 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000b82c:	b9800007 	ldb	r6,0(r23)
1000b830:	00801b04 	movi	r2,108
1000b834:	3082b226 	beq	r6,r2,1000c300 <___vfiprintf_internal_r+0x12c8>
1000b838:	94800414 	ori	r18,r18,16
1000b83c:	003e5f06 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000b840:	d8c12203 	ldbu	r3,1160(sp)
1000b844:	01040074 	movhi	r4,4097
1000b848:	210c7a04 	addi	r4,r4,12776
1000b84c:	d8c11d85 	stb	r3,1142(sp)
1000b850:	d9012715 	stw	r4,1180(sp)
1000b854:	90c0080c 	andi	r3,r18,32
1000b858:	9811883a 	mov	r8,r19
1000b85c:	d8812317 	ldw	r2,1164(sp)
1000b860:	18005f26 	beq	r3,zero,1000b9e0 <___vfiprintf_internal_r+0x9a8>
1000b864:	d9012317 	ldw	r4,1164(sp)
1000b868:	14c00017 	ldw	r19,0(r2)
1000b86c:	15400117 	ldw	r21,4(r2)
1000b870:	21000204 	addi	r4,r4,8
1000b874:	d9012315 	stw	r4,1164(sp)
1000b878:	9080004c 	andi	r2,r18,1
1000b87c:	1001e226 	beq	r2,zero,1000c008 <___vfiprintf_internal_r+0xfd0>
1000b880:	9d46b03a 	or	r3,r19,r21
1000b884:	18024e26 	beq	r3,zero,1000c1c0 <___vfiprintf_internal_r+0x1188>
1000b888:	00800c04 	movi	r2,48
1000b88c:	d8811d05 	stb	r2,1140(sp)
1000b890:	d9811d45 	stb	r6,1141(sp)
1000b894:	94800094 	ori	r18,r18,2
1000b898:	00800084 	movi	r2,2
1000b89c:	003fd306 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000b8a0:	d9012317 	ldw	r4,1164(sp)
1000b8a4:	d9412317 	ldw	r5,1164(sp)
1000b8a8:	21000017 	ldw	r4,0(r4)
1000b8ac:	28800104 	addi	r2,r5,4
1000b8b0:	d9012415 	stw	r4,1168(sp)
1000b8b4:	203eeb16 	blt	r4,zero,1000b464 <__alt_data_end+0xf800b464>
1000b8b8:	d8812315 	stw	r2,1164(sp)
1000b8bc:	b9800007 	ldb	r6,0(r23)
1000b8c0:	003e3e06 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000b8c4:	b9800007 	ldb	r6,0(r23)
1000b8c8:	01000a84 	movi	r4,42
1000b8cc:	b8800044 	addi	r2,r23,1
1000b8d0:	3102d226 	beq	r6,r4,1000c41c <___vfiprintf_internal_r+0x13e4>
1000b8d4:	35bff404 	addi	r22,r6,-48
1000b8d8:	102f883a 	mov	r23,r2
1000b8dc:	0021883a 	mov	r16,zero
1000b8e0:	adbe3736 	bltu	r21,r22,1000b1c0 <__alt_data_end+0xf800b1c0>
1000b8e4:	0009883a 	mov	r4,zero
1000b8e8:	01400284 	movi	r5,10
1000b8ec:	00039ec0 	call	100039ec <__mulsi3>
1000b8f0:	b9800007 	ldb	r6,0(r23)
1000b8f4:	b089883a 	add	r4,r22,r2
1000b8f8:	bdc00044 	addi	r23,r23,1
1000b8fc:	35bff404 	addi	r22,r6,-48
1000b900:	adbff92e 	bgeu	r21,r22,1000b8e8 <__alt_data_end+0xf800b8e8>
1000b904:	2021883a 	mov	r16,r4
1000b908:	203e2d0e 	bge	r4,zero,1000b1c0 <__alt_data_end+0xf800b1c0>
1000b90c:	043fffc4 	movi	r16,-1
1000b910:	003e2b06 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b914:	94801014 	ori	r18,r18,64
1000b918:	b9800007 	ldb	r6,0(r23)
1000b91c:	003e2706 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000b920:	94800814 	ori	r18,r18,32
1000b924:	b9800007 	ldb	r6,0(r23)
1000b928:	003e2406 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000b92c:	d9412317 	ldw	r5,1164(sp)
1000b930:	d8812317 	ldw	r2,1164(sp)
1000b934:	d8011d85 	stb	zero,1142(sp)
1000b938:	29400017 	ldw	r5,0(r5)
1000b93c:	9811883a 	mov	r8,r19
1000b940:	14c00104 	addi	r19,r2,4
1000b944:	d9412215 	stw	r5,1160(sp)
1000b948:	28029026 	beq	r5,zero,1000c38c <___vfiprintf_internal_r+0x1354>
1000b94c:	d9012217 	ldw	r4,1160(sp)
1000b950:	80027616 	blt	r16,zero,1000c32c <___vfiprintf_internal_r+0x12f4>
1000b954:	000b883a 	mov	r5,zero
1000b958:	800d883a 	mov	r6,r16
1000b95c:	da012a15 	stw	r8,1192(sp)
1000b960:	00091f40 	call	100091f4 <memchr>
1000b964:	da012a17 	ldw	r8,1192(sp)
1000b968:	1002a026 	beq	r2,zero,1000c3ec <___vfiprintf_internal_r+0x13b4>
1000b96c:	d8c12217 	ldw	r3,1160(sp)
1000b970:	10e9c83a 	sub	r20,r2,r3
1000b974:	85023816 	blt	r16,r20,1000c258 <___vfiprintf_internal_r+0x1220>
1000b978:	dd811d83 	ldbu	r22,1142(sp)
1000b97c:	dcc12315 	stw	r19,1164(sp)
1000b980:	0021883a 	mov	r16,zero
1000b984:	003efd06 	br	1000b57c <__alt_data_end+0xf800b57c>
1000b988:	9080080c 	andi	r2,r18,32
1000b98c:	9811883a 	mov	r8,r19
1000b990:	103f9e1e 	bne	r2,zero,1000b80c <__alt_data_end+0xf800b80c>
1000b994:	9080040c 	andi	r2,r18,16
1000b998:	10021726 	beq	r2,zero,1000c1f8 <___vfiprintf_internal_r+0x11c0>
1000b99c:	d9412317 	ldw	r5,1164(sp)
1000b9a0:	002b883a 	mov	r21,zero
1000b9a4:	00800044 	movi	r2,1
1000b9a8:	2cc00017 	ldw	r19,0(r5)
1000b9ac:	29400104 	addi	r5,r5,4
1000b9b0:	d9412315 	stw	r5,1164(sp)
1000b9b4:	9807883a 	mov	r3,r19
1000b9b8:	003f8c06 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000b9bc:	d8c12203 	ldbu	r3,1160(sp)
1000b9c0:	01040074 	movhi	r4,4097
1000b9c4:	210c7f04 	addi	r4,r4,12796
1000b9c8:	d8c11d85 	stb	r3,1142(sp)
1000b9cc:	d9012715 	stw	r4,1180(sp)
1000b9d0:	90c0080c 	andi	r3,r18,32
1000b9d4:	9811883a 	mov	r8,r19
1000b9d8:	d8812317 	ldw	r2,1164(sp)
1000b9dc:	183fa11e 	bne	r3,zero,1000b864 <__alt_data_end+0xf800b864>
1000b9e0:	90c0040c 	andi	r3,r18,16
1000b9e4:	1801e526 	beq	r3,zero,1000c17c <___vfiprintf_internal_r+0x1144>
1000b9e8:	d9412317 	ldw	r5,1164(sp)
1000b9ec:	14c00017 	ldw	r19,0(r2)
1000b9f0:	002b883a 	mov	r21,zero
1000b9f4:	29400104 	addi	r5,r5,4
1000b9f8:	d9412315 	stw	r5,1164(sp)
1000b9fc:	003f9e06 	br	1000b878 <__alt_data_end+0xf800b878>
1000ba00:	9080080c 	andi	r2,r18,32
1000ba04:	9811883a 	mov	r8,r19
1000ba08:	103f701e 	bne	r2,zero,1000b7cc <__alt_data_end+0xf800b7cc>
1000ba0c:	9080040c 	andi	r2,r18,16
1000ba10:	1001ef26 	beq	r2,zero,1000c1d0 <___vfiprintf_internal_r+0x1198>
1000ba14:	d9012317 	ldw	r4,1164(sp)
1000ba18:	002b883a 	mov	r21,zero
1000ba1c:	0005883a 	mov	r2,zero
1000ba20:	24c00017 	ldw	r19,0(r4)
1000ba24:	21000104 	addi	r4,r4,4
1000ba28:	d9012315 	stw	r4,1164(sp)
1000ba2c:	9807883a 	mov	r3,r19
1000ba30:	003f6e06 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000ba34:	d8c12317 	ldw	r3,1164(sp)
1000ba38:	9811883a 	mov	r8,r19
1000ba3c:	00800c04 	movi	r2,48
1000ba40:	1cc00017 	ldw	r19,0(r3)
1000ba44:	01040074 	movhi	r4,4097
1000ba48:	18c00104 	addi	r3,r3,4
1000ba4c:	d8811d05 	stb	r2,1140(sp)
1000ba50:	210c7f04 	addi	r4,r4,12796
1000ba54:	00801e04 	movi	r2,120
1000ba58:	d8811d45 	stb	r2,1141(sp)
1000ba5c:	d8c12315 	stw	r3,1164(sp)
1000ba60:	002b883a 	mov	r21,zero
1000ba64:	94800094 	ori	r18,r18,2
1000ba68:	d9012715 	stw	r4,1180(sp)
1000ba6c:	00800084 	movi	r2,2
1000ba70:	9807883a 	mov	r3,r19
1000ba74:	003f5d06 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000ba78:	d8c12203 	ldbu	r3,1160(sp)
1000ba7c:	9080080c 	andi	r2,r18,32
1000ba80:	9811883a 	mov	r8,r19
1000ba84:	d8c11d85 	stb	r3,1142(sp)
1000ba88:	1001b126 	beq	r2,zero,1000c150 <___vfiprintf_internal_r+0x1118>
1000ba8c:	d9012317 	ldw	r4,1164(sp)
1000ba90:	d9412517 	ldw	r5,1172(sp)
1000ba94:	20800017 	ldw	r2,0(r4)
1000ba98:	2807d7fa 	srai	r3,r5,31
1000ba9c:	21000104 	addi	r4,r4,4
1000baa0:	d9012315 	stw	r4,1164(sp)
1000baa4:	11400015 	stw	r5,0(r2)
1000baa8:	10c00115 	stw	r3,4(r2)
1000baac:	003d9a06 	br	1000b118 <__alt_data_end+0xf800b118>
1000bab0:	d8812207 	ldb	r2,1160(sp)
1000bab4:	1001c41e 	bne	r2,zero,1000c1c8 <___vfiprintf_internal_r+0x1190>
1000bab8:	00c00804 	movi	r3,32
1000babc:	d8c12205 	stb	r3,1160(sp)
1000bac0:	b9800007 	ldb	r6,0(r23)
1000bac4:	003dbd06 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000bac8:	00c00ac4 	movi	r3,43
1000bacc:	d8c12205 	stb	r3,1160(sp)
1000bad0:	b9800007 	ldb	r6,0(r23)
1000bad4:	003db906 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000bad8:	d8c12203 	ldbu	r3,1160(sp)
1000badc:	9080080c 	andi	r2,r18,32
1000bae0:	9811883a 	mov	r8,r19
1000bae4:	d8c11d85 	stb	r3,1142(sp)
1000bae8:	d8c12317 	ldw	r3,1164(sp)
1000baec:	103e7e1e 	bne	r2,zero,1000b4e8 <__alt_data_end+0xf800b4e8>
1000baf0:	9080040c 	andi	r2,r18,16
1000baf4:	1001a926 	beq	r2,zero,1000c19c <___vfiprintf_internal_r+0x1164>
1000baf8:	1cc00017 	ldw	r19,0(r3)
1000bafc:	d9412317 	ldw	r5,1164(sp)
1000bb00:	982bd7fa 	srai	r21,r19,31
1000bb04:	29400104 	addi	r5,r5,4
1000bb08:	d9412315 	stw	r5,1164(sp)
1000bb0c:	a805883a 	mov	r2,r21
1000bb10:	003e7b06 	br	1000b500 <__alt_data_end+0xf800b500>
1000bb14:	94800054 	ori	r18,r18,1
1000bb18:	b9800007 	ldb	r6,0(r23)
1000bb1c:	003da706 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000bb20:	d8c12203 	ldbu	r3,1160(sp)
1000bb24:	9811883a 	mov	r8,r19
1000bb28:	d8c11d85 	stb	r3,1142(sp)
1000bb2c:	30005826 	beq	r6,zero,1000bc90 <___vfiprintf_internal_r+0xc58>
1000bb30:	05400044 	movi	r21,1
1000bb34:	d8c10004 	addi	r3,sp,1024
1000bb38:	d9810005 	stb	r6,1024(sp)
1000bb3c:	d8011d85 	stb	zero,1142(sp)
1000bb40:	a829883a 	mov	r20,r21
1000bb44:	d8c12215 	stw	r3,1160(sp)
1000bb48:	003f1a06 	br	1000b7b4 <__alt_data_end+0xf800b7b4>
1000bb4c:	d9012117 	ldw	r4,1156(sp)
1000bb50:	d9412017 	ldw	r5,1152(sp)
1000bb54:	d9811a04 	addi	r6,sp,1128
1000bb58:	d9c12a15 	stw	r7,1192(sp)
1000bb5c:	db012b15 	stw	r12,1196(sp)
1000bb60:	000af240 	call	1000af24 <__sprint_r.part.0>
1000bb64:	d9c12a17 	ldw	r7,1192(sp)
1000bb68:	db012b17 	ldw	r12,1196(sp)
1000bb6c:	10004e1e 	bne	r2,zero,1000bca8 <___vfiprintf_internal_r+0xc70>
1000bb70:	d9011b17 	ldw	r4,1132(sp)
1000bb74:	d8c11c17 	ldw	r3,1136(sp)
1000bb78:	d811883a 	mov	r8,sp
1000bb7c:	21400044 	addi	r5,r4,1
1000bb80:	003e9d06 	br	1000b5f8 <__alt_data_end+0xf800b5f8>
1000bb84:	d9411b17 	ldw	r5,1132(sp)
1000bb88:	d8c11c17 	ldw	r3,1136(sp)
1000bb8c:	28800044 	addi	r2,r5,1
1000bb90:	d9011d87 	ldb	r4,1142(sp)
1000bb94:	203eb626 	beq	r4,zero,1000b670 <__alt_data_end+0xf800b670>
1000bb98:	01000044 	movi	r4,1
1000bb9c:	d9411d84 	addi	r5,sp,1142
1000bba0:	1907883a 	add	r3,r3,r4
1000bba4:	41400015 	stw	r5,0(r8)
1000bba8:	41000115 	stw	r4,4(r8)
1000bbac:	d8c11c15 	stw	r3,1136(sp)
1000bbb0:	d8811b15 	stw	r2,1132(sp)
1000bbb4:	014001c4 	movi	r5,7
1000bbb8:	2880ce16 	blt	r5,r2,1000bef4 <___vfiprintf_internal_r+0xebc>
1000bbbc:	100b883a 	mov	r5,r2
1000bbc0:	42000204 	addi	r8,r8,8
1000bbc4:	10800044 	addi	r2,r2,1
1000bbc8:	003ea906 	br	1000b670 <__alt_data_end+0xf800b670>
1000bbcc:	d9012117 	ldw	r4,1156(sp)
1000bbd0:	d9412017 	ldw	r5,1152(sp)
1000bbd4:	d9811a04 	addi	r6,sp,1128
1000bbd8:	000af240 	call	1000af24 <__sprint_r.part.0>
1000bbdc:	1000321e 	bne	r2,zero,1000bca8 <___vfiprintf_internal_r+0xc70>
1000bbe0:	d9411b17 	ldw	r5,1132(sp)
1000bbe4:	d8c11c17 	ldw	r3,1136(sp)
1000bbe8:	d811883a 	mov	r8,sp
1000bbec:	28800044 	addi	r2,r5,1
1000bbf0:	003eba06 	br	1000b6dc <__alt_data_end+0xf800b6dc>
1000bbf4:	10803fcc 	andi	r2,r2,255
1000bbf8:	00c00044 	movi	r3,1
1000bbfc:	10fe4d1e 	bne	r2,r3,1000b534 <__alt_data_end+0xf800b534>
1000bc00:	a800021e 	bne	r21,zero,1000bc0c <___vfiprintf_internal_r+0xbd4>
1000bc04:	00800244 	movi	r2,9
1000bc08:	14c01b2e 	bgeu	r2,r19,1000bc78 <___vfiprintf_internal_r+0xc40>
1000bc0c:	dc012215 	stw	r16,1160(sp)
1000bc10:	dd010a04 	addi	r20,sp,1064
1000bc14:	a821883a 	mov	r16,r21
1000bc18:	402b883a 	mov	r21,r8
1000bc1c:	9809883a 	mov	r4,r19
1000bc20:	800b883a 	mov	r5,r16
1000bc24:	01800284 	movi	r6,10
1000bc28:	000f883a 	mov	r7,zero
1000bc2c:	000d40c0 	call	1000d40c <__umoddi3>
1000bc30:	10800c04 	addi	r2,r2,48
1000bc34:	a53fffc4 	addi	r20,r20,-1
1000bc38:	9809883a 	mov	r4,r19
1000bc3c:	800b883a 	mov	r5,r16
1000bc40:	01800284 	movi	r6,10
1000bc44:	000f883a 	mov	r7,zero
1000bc48:	a0800005 	stb	r2,0(r20)
1000bc4c:	000cdcc0 	call	1000cdcc <__udivdi3>
1000bc50:	1027883a 	mov	r19,r2
1000bc54:	10c4b03a 	or	r2,r2,r3
1000bc58:	1821883a 	mov	r16,r3
1000bc5c:	103fef1e 	bne	r2,zero,1000bc1c <__alt_data_end+0xf800bc1c>
1000bc60:	d9011e17 	ldw	r4,1144(sp)
1000bc64:	dc012217 	ldw	r16,1160(sp)
1000bc68:	a811883a 	mov	r8,r21
1000bc6c:	dd012215 	stw	r20,1160(sp)
1000bc70:	2529c83a 	sub	r20,r4,r20
1000bc74:	003e4106 	br	1000b57c <__alt_data_end+0xf800b57c>
1000bc78:	9cc00c04 	addi	r19,r19,48
1000bc7c:	d8c109c4 	addi	r3,sp,1063
1000bc80:	dcc109c5 	stb	r19,1063(sp)
1000bc84:	dd012817 	ldw	r20,1184(sp)
1000bc88:	d8c12215 	stw	r3,1160(sp)
1000bc8c:	003e3b06 	br	1000b57c <__alt_data_end+0xf800b57c>
1000bc90:	d8811c17 	ldw	r2,1136(sp)
1000bc94:	10000426 	beq	r2,zero,1000bca8 <___vfiprintf_internal_r+0xc70>
1000bc98:	d9012117 	ldw	r4,1156(sp)
1000bc9c:	d9412017 	ldw	r5,1152(sp)
1000bca0:	d9811a04 	addi	r6,sp,1128
1000bca4:	000af240 	call	1000af24 <__sprint_r.part.0>
1000bca8:	d9412017 	ldw	r5,1152(sp)
1000bcac:	2880030b 	ldhu	r2,12(r5)
1000bcb0:	1080100c 	andi	r2,r2,64
1000bcb4:	103ddc1e 	bne	r2,zero,1000b428 <__alt_data_end+0xf800b428>
1000bcb8:	d8812517 	ldw	r2,1172(sp)
1000bcbc:	003ddb06 	br	1000b42c <__alt_data_end+0xf800b42c>
1000bcc0:	1801061e 	bne	r3,zero,1000c0dc <___vfiprintf_internal_r+0x10a4>
1000bcc4:	d8c12217 	ldw	r3,1160(sp)
1000bcc8:	00800044 	movi	r2,1
1000bccc:	dd000115 	stw	r20,4(sp)
1000bcd0:	d8c00015 	stw	r3,0(sp)
1000bcd4:	dd011c15 	stw	r20,1136(sp)
1000bcd8:	d8811b15 	stw	r2,1132(sp)
1000bcdc:	a007883a 	mov	r3,r20
1000bce0:	d811883a 	mov	r8,sp
1000bce4:	42000204 	addi	r8,r8,8
1000bce8:	9480010c 	andi	r18,r18,4
1000bcec:	90003426 	beq	r18,zero,1000bdc0 <___vfiprintf_internal_r+0xd88>
1000bcf0:	d9412417 	ldw	r5,1168(sp)
1000bcf4:	2d65c83a 	sub	r18,r5,r21
1000bcf8:	0480310e 	bge	zero,r18,1000bdc0 <___vfiprintf_internal_r+0xd88>
1000bcfc:	04000404 	movi	r16,16
1000bd00:	8481ad0e 	bge	r16,r18,1000c3b8 <___vfiprintf_internal_r+0x1380>
1000bd04:	01440074 	movhi	r5,4097
1000bd08:	294ce404 	addi	r5,r5,13200
1000bd0c:	d9011b17 	ldw	r4,1132(sp)
1000bd10:	d9412615 	stw	r5,1176(sp)
1000bd14:	04c001c4 	movi	r19,7
1000bd18:	dd012117 	ldw	r20,1156(sp)
1000bd1c:	dd812017 	ldw	r22,1152(sp)
1000bd20:	00000506 	br	1000bd38 <___vfiprintf_internal_r+0xd00>
1000bd24:	21400084 	addi	r5,r4,2
1000bd28:	42000204 	addi	r8,r8,8
1000bd2c:	1009883a 	mov	r4,r2
1000bd30:	94bffc04 	addi	r18,r18,-16
1000bd34:	84800d0e 	bge	r16,r18,1000bd6c <___vfiprintf_internal_r+0xd34>
1000bd38:	18c00404 	addi	r3,r3,16
1000bd3c:	20800044 	addi	r2,r4,1
1000bd40:	47000015 	stw	fp,0(r8)
1000bd44:	44000115 	stw	r16,4(r8)
1000bd48:	d8c11c15 	stw	r3,1136(sp)
1000bd4c:	d8811b15 	stw	r2,1132(sp)
1000bd50:	98bff40e 	bge	r19,r2,1000bd24 <__alt_data_end+0xf800bd24>
1000bd54:	1800291e 	bne	r3,zero,1000bdfc <___vfiprintf_internal_r+0xdc4>
1000bd58:	94bffc04 	addi	r18,r18,-16
1000bd5c:	0009883a 	mov	r4,zero
1000bd60:	01400044 	movi	r5,1
1000bd64:	d811883a 	mov	r8,sp
1000bd68:	84bff316 	blt	r16,r18,1000bd38 <__alt_data_end+0xf800bd38>
1000bd6c:	d8812617 	ldw	r2,1176(sp)
1000bd70:	1c87883a 	add	r3,r3,r18
1000bd74:	44800115 	stw	r18,4(r8)
1000bd78:	40800015 	stw	r2,0(r8)
1000bd7c:	d8c11c15 	stw	r3,1136(sp)
1000bd80:	d9411b15 	stw	r5,1132(sp)
1000bd84:	008001c4 	movi	r2,7
1000bd88:	11400d0e 	bge	r2,r5,1000bdc0 <___vfiprintf_internal_r+0xd88>
1000bd8c:	1800061e 	bne	r3,zero,1000bda8 <___vfiprintf_internal_r+0xd70>
1000bd90:	d8c12417 	ldw	r3,1168(sp)
1000bd94:	a8c12e16 	blt	r21,r3,1000c250 <___vfiprintf_internal_r+0x1218>
1000bd98:	d9012517 	ldw	r4,1172(sp)
1000bd9c:	2549883a 	add	r4,r4,r21
1000bda0:	d9012515 	stw	r4,1172(sp)
1000bda4:	00001206 	br	1000bdf0 <___vfiprintf_internal_r+0xdb8>
1000bda8:	d9012117 	ldw	r4,1156(sp)
1000bdac:	d9412017 	ldw	r5,1152(sp)
1000bdb0:	d9811a04 	addi	r6,sp,1128
1000bdb4:	000af240 	call	1000af24 <__sprint_r.part.0>
1000bdb8:	103fbb1e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000bdbc:	d8c11c17 	ldw	r3,1136(sp)
1000bdc0:	d8812417 	ldw	r2,1168(sp)
1000bdc4:	a880010e 	bge	r21,r2,1000bdcc <___vfiprintf_internal_r+0xd94>
1000bdc8:	102b883a 	mov	r21,r2
1000bdcc:	d9012517 	ldw	r4,1172(sp)
1000bdd0:	2549883a 	add	r4,r4,r21
1000bdd4:	d9012515 	stw	r4,1172(sp)
1000bdd8:	18000526 	beq	r3,zero,1000bdf0 <___vfiprintf_internal_r+0xdb8>
1000bddc:	d9012117 	ldw	r4,1156(sp)
1000bde0:	d9412017 	ldw	r5,1152(sp)
1000bde4:	d9811a04 	addi	r6,sp,1128
1000bde8:	000af240 	call	1000af24 <__sprint_r.part.0>
1000bdec:	103fae1e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000bdf0:	d8011b15 	stw	zero,1132(sp)
1000bdf4:	d811883a 	mov	r8,sp
1000bdf8:	003cc706 	br	1000b118 <__alt_data_end+0xf800b118>
1000bdfc:	a009883a 	mov	r4,r20
1000be00:	b00b883a 	mov	r5,r22
1000be04:	d9811a04 	addi	r6,sp,1128
1000be08:	000af240 	call	1000af24 <__sprint_r.part.0>
1000be0c:	103fa61e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000be10:	d9011b17 	ldw	r4,1132(sp)
1000be14:	d8c11c17 	ldw	r3,1136(sp)
1000be18:	d811883a 	mov	r8,sp
1000be1c:	21400044 	addi	r5,r4,1
1000be20:	003fc306 	br	1000bd30 <__alt_data_end+0xf800bd30>
1000be24:	d9012417 	ldw	r4,1168(sp)
1000be28:	256dc83a 	sub	r22,r4,r21
1000be2c:	05be1f0e 	bge	zero,r22,1000b6ac <__alt_data_end+0xf800b6ac>
1000be30:	04c00404 	movi	r19,16
1000be34:	9d81720e 	bge	r19,r22,1000c400 <___vfiprintf_internal_r+0x13c8>
1000be38:	00840074 	movhi	r2,4097
1000be3c:	108ce004 	addi	r2,r2,13184
1000be40:	d8812615 	stw	r2,1176(sp)
1000be44:	028001c4 	movi	r10,7
1000be48:	00000506 	br	1000be60 <___vfiprintf_internal_r+0xe28>
1000be4c:	29000084 	addi	r4,r5,2
1000be50:	42000204 	addi	r8,r8,8
1000be54:	100b883a 	mov	r5,r2
1000be58:	b5bffc04 	addi	r22,r22,-16
1000be5c:	9d800d0e 	bge	r19,r22,1000be94 <___vfiprintf_internal_r+0xe5c>
1000be60:	18c00404 	addi	r3,r3,16
1000be64:	28800044 	addi	r2,r5,1
1000be68:	44400015 	stw	r17,0(r8)
1000be6c:	44c00115 	stw	r19,4(r8)
1000be70:	d8c11c15 	stw	r3,1136(sp)
1000be74:	d8811b15 	stw	r2,1132(sp)
1000be78:	50bff40e 	bge	r10,r2,1000be4c <__alt_data_end+0xf800be4c>
1000be7c:	1800111e 	bne	r3,zero,1000bec4 <___vfiprintf_internal_r+0xe8c>
1000be80:	b5bffc04 	addi	r22,r22,-16
1000be84:	000b883a 	mov	r5,zero
1000be88:	01000044 	movi	r4,1
1000be8c:	d811883a 	mov	r8,sp
1000be90:	9dbff316 	blt	r19,r22,1000be60 <__alt_data_end+0xf800be60>
1000be94:	d9412617 	ldw	r5,1176(sp)
1000be98:	1d87883a 	add	r3,r3,r22
1000be9c:	45800115 	stw	r22,4(r8)
1000bea0:	41400015 	stw	r5,0(r8)
1000bea4:	d8c11c15 	stw	r3,1136(sp)
1000bea8:	d9011b15 	stw	r4,1132(sp)
1000beac:	008001c4 	movi	r2,7
1000beb0:	11008516 	blt	r2,r4,1000c0c8 <___vfiprintf_internal_r+0x1090>
1000beb4:	42000204 	addi	r8,r8,8
1000beb8:	20800044 	addi	r2,r4,1
1000bebc:	200b883a 	mov	r5,r4
1000bec0:	003dfa06 	br	1000b6ac <__alt_data_end+0xf800b6ac>
1000bec4:	d9012117 	ldw	r4,1156(sp)
1000bec8:	d9412017 	ldw	r5,1152(sp)
1000becc:	d9811a04 	addi	r6,sp,1128
1000bed0:	da812a15 	stw	r10,1192(sp)
1000bed4:	000af240 	call	1000af24 <__sprint_r.part.0>
1000bed8:	da812a17 	ldw	r10,1192(sp)
1000bedc:	103f721e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000bee0:	d9411b17 	ldw	r5,1132(sp)
1000bee4:	d8c11c17 	ldw	r3,1136(sp)
1000bee8:	d811883a 	mov	r8,sp
1000beec:	29000044 	addi	r4,r5,1
1000bef0:	003fd906 	br	1000be58 <__alt_data_end+0xf800be58>
1000bef4:	1800681e 	bne	r3,zero,1000c098 <___vfiprintf_internal_r+0x1060>
1000bef8:	50004d26 	beq	r10,zero,1000c030 <___vfiprintf_internal_r+0xff8>
1000befc:	d8811d04 	addi	r2,sp,1140
1000bf00:	00c00084 	movi	r3,2
1000bf04:	d8800015 	stw	r2,0(sp)
1000bf08:	d8c00115 	stw	r3,4(sp)
1000bf0c:	2005883a 	mov	r2,r4
1000bf10:	d811883a 	mov	r8,sp
1000bf14:	003de006 	br	1000b698 <__alt_data_end+0xf800b698>
1000bf18:	1800551e 	bne	r3,zero,1000c070 <___vfiprintf_internal_r+0x1038>
1000bf1c:	000b883a 	mov	r5,zero
1000bf20:	00800044 	movi	r2,1
1000bf24:	d811883a 	mov	r8,sp
1000bf28:	003dde06 	br	1000b6a4 <__alt_data_end+0xf800b6a4>
1000bf2c:	10803fcc 	andi	r2,r2,255
1000bf30:	1000191e 	bne	r2,zero,1000bf98 <___vfiprintf_internal_r+0xf60>
1000bf34:	9080004c 	andi	r2,r18,1
1000bf38:	10001726 	beq	r2,zero,1000bf98 <___vfiprintf_internal_r+0xf60>
1000bf3c:	00800c04 	movi	r2,48
1000bf40:	d8c109c4 	addi	r3,sp,1063
1000bf44:	d88109c5 	stb	r2,1063(sp)
1000bf48:	dd012817 	ldw	r20,1184(sp)
1000bf4c:	d8c12215 	stw	r3,1160(sp)
1000bf50:	003d8a06 	br	1000b57c <__alt_data_end+0xf800b57c>
1000bf54:	d9012717 	ldw	r4,1180(sp)
1000bf58:	dd010a04 	addi	r20,sp,1064
1000bf5c:	988003cc 	andi	r2,r19,15
1000bf60:	a806973a 	slli	r3,r21,28
1000bf64:	2085883a 	add	r2,r4,r2
1000bf68:	9826d13a 	srli	r19,r19,4
1000bf6c:	10800003 	ldbu	r2,0(r2)
1000bf70:	a82ad13a 	srli	r21,r21,4
1000bf74:	a53fffc4 	addi	r20,r20,-1
1000bf78:	1ce6b03a 	or	r19,r3,r19
1000bf7c:	a0800005 	stb	r2,0(r20)
1000bf80:	9d44b03a 	or	r2,r19,r21
1000bf84:	103ff51e 	bne	r2,zero,1000bf5c <__alt_data_end+0xf800bf5c>
1000bf88:	d9411e17 	ldw	r5,1144(sp)
1000bf8c:	dd012215 	stw	r20,1160(sp)
1000bf90:	2d29c83a 	sub	r20,r5,r20
1000bf94:	003d7906 	br	1000b57c <__alt_data_end+0xf800b57c>
1000bf98:	d8c10a04 	addi	r3,sp,1064
1000bf9c:	d8c12215 	stw	r3,1160(sp)
1000bfa0:	003d7606 	br	1000b57c <__alt_data_end+0xf800b57c>
1000bfa4:	18009e1e 	bne	r3,zero,1000c220 <___vfiprintf_internal_r+0x11e8>
1000bfa8:	d8811d87 	ldb	r2,1142(sp)
1000bfac:	10005f26 	beq	r2,zero,1000c12c <___vfiprintf_internal_r+0x10f4>
1000bfb0:	00c00044 	movi	r3,1
1000bfb4:	d9011d84 	addi	r4,sp,1142
1000bfb8:	1805883a 	mov	r2,r3
1000bfbc:	d9000015 	stw	r4,0(sp)
1000bfc0:	d8c00115 	stw	r3,4(sp)
1000bfc4:	d811883a 	mov	r8,sp
1000bfc8:	003efc06 	br	1000bbbc <__alt_data_end+0xf800bbbc>
1000bfcc:	d9412417 	ldw	r5,1168(sp)
1000bfd0:	d811883a 	mov	r8,sp
1000bfd4:	2d65c83a 	sub	r18,r5,r21
1000bfd8:	04bf4816 	blt	zero,r18,1000bcfc <__alt_data_end+0xf800bcfc>
1000bfdc:	003f6c06 	br	1000bd90 <__alt_data_end+0xf800bd90>
1000bfe0:	b829883a 	mov	r20,r23
1000bfe4:	003c6906 	br	1000b18c <__alt_data_end+0xf800b18c>
1000bfe8:	d9012117 	ldw	r4,1156(sp)
1000bfec:	d9412017 	ldw	r5,1152(sp)
1000bff0:	d9811a04 	addi	r6,sp,1128
1000bff4:	000af240 	call	1000af24 <__sprint_r.part.0>
1000bff8:	103f2b1e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000bffc:	d8c11c17 	ldw	r3,1136(sp)
1000c000:	d811883a 	mov	r8,sp
1000c004:	003f3806 	br	1000bce8 <__alt_data_end+0xf800bce8>
1000c008:	00800084 	movi	r2,2
1000c00c:	9d46b03a 	or	r3,r19,r21
1000c010:	003df606 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000c014:	d9012117 	ldw	r4,1156(sp)
1000c018:	d9412017 	ldw	r5,1152(sp)
1000c01c:	d9811a04 	addi	r6,sp,1128
1000c020:	000af240 	call	1000af24 <__sprint_r.part.0>
1000c024:	103f201e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000c028:	d811883a 	mov	r8,sp
1000c02c:	003cc606 	br	1000b348 <__alt_data_end+0xf800b348>
1000c030:	000b883a 	mov	r5,zero
1000c034:	2005883a 	mov	r2,r4
1000c038:	d811883a 	mov	r8,sp
1000c03c:	003d9906 	br	1000b6a4 <__alt_data_end+0xf800b6a4>
1000c040:	10803fcc 	andi	r2,r2,255
1000c044:	1080201c 	xori	r2,r2,128
1000c048:	10bfe004 	addi	r2,r2,-128
1000c04c:	01000c04 	movi	r4,48
1000c050:	1100b226 	beq	r2,r4,1000c31c <___vfiprintf_internal_r+0x12e4>
1000c054:	d9412217 	ldw	r5,1160(sp)
1000c058:	d8811e17 	ldw	r2,1144(sp)
1000c05c:	193fffc5 	stb	r4,-1(r3)
1000c060:	297fffc4 	addi	r5,r5,-1
1000c064:	d9412215 	stw	r5,1160(sp)
1000c068:	1169c83a 	sub	r20,r2,r5
1000c06c:	003d4306 	br	1000b57c <__alt_data_end+0xf800b57c>
1000c070:	d9012117 	ldw	r4,1156(sp)
1000c074:	d9412017 	ldw	r5,1152(sp)
1000c078:	d9811a04 	addi	r6,sp,1128
1000c07c:	000af240 	call	1000af24 <__sprint_r.part.0>
1000c080:	103f091e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000c084:	d9411b17 	ldw	r5,1132(sp)
1000c088:	d8c11c17 	ldw	r3,1136(sp)
1000c08c:	d811883a 	mov	r8,sp
1000c090:	28800044 	addi	r2,r5,1
1000c094:	003d8306 	br	1000b6a4 <__alt_data_end+0xf800b6a4>
1000c098:	d9012117 	ldw	r4,1156(sp)
1000c09c:	d9412017 	ldw	r5,1152(sp)
1000c0a0:	d9811a04 	addi	r6,sp,1128
1000c0a4:	da812a15 	stw	r10,1192(sp)
1000c0a8:	000af240 	call	1000af24 <__sprint_r.part.0>
1000c0ac:	da812a17 	ldw	r10,1192(sp)
1000c0b0:	103efd1e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000c0b4:	d9411b17 	ldw	r5,1132(sp)
1000c0b8:	d8c11c17 	ldw	r3,1136(sp)
1000c0bc:	d811883a 	mov	r8,sp
1000c0c0:	28800044 	addi	r2,r5,1
1000c0c4:	003d6a06 	br	1000b670 <__alt_data_end+0xf800b670>
1000c0c8:	1800a01e 	bne	r3,zero,1000c34c <___vfiprintf_internal_r+0x1314>
1000c0cc:	000b883a 	mov	r5,zero
1000c0d0:	00800044 	movi	r2,1
1000c0d4:	d811883a 	mov	r8,sp
1000c0d8:	003d7406 	br	1000b6ac <__alt_data_end+0xf800b6ac>
1000c0dc:	d9012117 	ldw	r4,1156(sp)
1000c0e0:	d9412017 	ldw	r5,1152(sp)
1000c0e4:	d9811a04 	addi	r6,sp,1128
1000c0e8:	000af240 	call	1000af24 <__sprint_r.part.0>
1000c0ec:	103eee1e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000c0f0:	d8811b17 	ldw	r2,1132(sp)
1000c0f4:	d8c11c17 	ldw	r3,1136(sp)
1000c0f8:	d811883a 	mov	r8,sp
1000c0fc:	10800044 	addi	r2,r2,1
1000c100:	003d8f06 	br	1000b740 <__alt_data_end+0xf800b740>
1000c104:	04e7c83a 	sub	r19,zero,r19
1000c108:	9804c03a 	cmpne	r2,r19,zero
1000c10c:	056bc83a 	sub	r21,zero,r21
1000c110:	a8abc83a 	sub	r21,r21,r2
1000c114:	05800b44 	movi	r22,45
1000c118:	dd811d85 	stb	r22,1142(sp)
1000c11c:	8029883a 	mov	r20,r16
1000c120:	00800044 	movi	r2,1
1000c124:	9d46b03a 	or	r3,r19,r21
1000c128:	003cfa06 	br	1000b514 <__alt_data_end+0xf800b514>
1000c12c:	000b883a 	mov	r5,zero
1000c130:	00800044 	movi	r2,1
1000c134:	d811883a 	mov	r8,sp
1000c138:	503d5a26 	beq	r10,zero,1000b6a4 <__alt_data_end+0xf800b6a4>
1000c13c:	00c00084 	movi	r3,2
1000c140:	d9011d04 	addi	r4,sp,1140
1000c144:	d9000015 	stw	r4,0(sp)
1000c148:	d8c00115 	stw	r3,4(sp)
1000c14c:	003d5206 	br	1000b698 <__alt_data_end+0xf800b698>
1000c150:	9080040c 	andi	r2,r18,16
1000c154:	1000421e 	bne	r2,zero,1000c260 <___vfiprintf_internal_r+0x1228>
1000c158:	9480100c 	andi	r18,r18,64
1000c15c:	90009c26 	beq	r18,zero,1000c3d0 <___vfiprintf_internal_r+0x1398>
1000c160:	d9412317 	ldw	r5,1164(sp)
1000c164:	d8c12517 	ldw	r3,1172(sp)
1000c168:	28800017 	ldw	r2,0(r5)
1000c16c:	29400104 	addi	r5,r5,4
1000c170:	d9412315 	stw	r5,1164(sp)
1000c174:	10c0000d 	sth	r3,0(r2)
1000c178:	003be706 	br	1000b118 <__alt_data_end+0xf800b118>
1000c17c:	90c0100c 	andi	r3,r18,64
1000c180:	18003e26 	beq	r3,zero,1000c27c <___vfiprintf_internal_r+0x1244>
1000c184:	d8c12317 	ldw	r3,1164(sp)
1000c188:	14c0000b 	ldhu	r19,0(r2)
1000c18c:	002b883a 	mov	r21,zero
1000c190:	18c00104 	addi	r3,r3,4
1000c194:	d8c12315 	stw	r3,1164(sp)
1000c198:	003db706 	br	1000b878 <__alt_data_end+0xf800b878>
1000c19c:	9080100c 	andi	r2,r18,64
1000c1a0:	10004c26 	beq	r2,zero,1000c2d4 <___vfiprintf_internal_r+0x129c>
1000c1a4:	1cc0000f 	ldh	r19,0(r3)
1000c1a8:	d8812317 	ldw	r2,1164(sp)
1000c1ac:	982bd7fa 	srai	r21,r19,31
1000c1b0:	10800104 	addi	r2,r2,4
1000c1b4:	d8812315 	stw	r2,1164(sp)
1000c1b8:	a805883a 	mov	r2,r21
1000c1bc:	003cd006 	br	1000b500 <__alt_data_end+0xf800b500>
1000c1c0:	00800084 	movi	r2,2
1000c1c4:	003d8906 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000c1c8:	b9800007 	ldb	r6,0(r23)
1000c1cc:	003bfb06 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000c1d0:	9080100c 	andi	r2,r18,64
1000c1d4:	10003726 	beq	r2,zero,1000c2b4 <___vfiprintf_internal_r+0x127c>
1000c1d8:	d9412317 	ldw	r5,1164(sp)
1000c1dc:	002b883a 	mov	r21,zero
1000c1e0:	0005883a 	mov	r2,zero
1000c1e4:	2cc0000b 	ldhu	r19,0(r5)
1000c1e8:	29400104 	addi	r5,r5,4
1000c1ec:	d9412315 	stw	r5,1164(sp)
1000c1f0:	9807883a 	mov	r3,r19
1000c1f4:	003d7d06 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000c1f8:	9080100c 	andi	r2,r18,64
1000c1fc:	10002526 	beq	r2,zero,1000c294 <___vfiprintf_internal_r+0x125c>
1000c200:	d8812317 	ldw	r2,1164(sp)
1000c204:	002b883a 	mov	r21,zero
1000c208:	14c0000b 	ldhu	r19,0(r2)
1000c20c:	10800104 	addi	r2,r2,4
1000c210:	d8812315 	stw	r2,1164(sp)
1000c214:	9807883a 	mov	r3,r19
1000c218:	00800044 	movi	r2,1
1000c21c:	003d7306 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000c220:	d9012117 	ldw	r4,1156(sp)
1000c224:	d9412017 	ldw	r5,1152(sp)
1000c228:	d9811a04 	addi	r6,sp,1128
1000c22c:	da812a15 	stw	r10,1192(sp)
1000c230:	000af240 	call	1000af24 <__sprint_r.part.0>
1000c234:	da812a17 	ldw	r10,1192(sp)
1000c238:	103e9b1e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000c23c:	d9411b17 	ldw	r5,1132(sp)
1000c240:	d8c11c17 	ldw	r3,1136(sp)
1000c244:	d811883a 	mov	r8,sp
1000c248:	28800044 	addi	r2,r5,1
1000c24c:	003e5006 	br	1000bb90 <__alt_data_end+0xf800bb90>
1000c250:	182b883a 	mov	r21,r3
1000c254:	003ed006 	br	1000bd98 <__alt_data_end+0xf800bd98>
1000c258:	8029883a 	mov	r20,r16
1000c25c:	003dc606 	br	1000b978 <__alt_data_end+0xf800b978>
1000c260:	d8c12317 	ldw	r3,1164(sp)
1000c264:	d9012517 	ldw	r4,1172(sp)
1000c268:	18800017 	ldw	r2,0(r3)
1000c26c:	18c00104 	addi	r3,r3,4
1000c270:	d8c12315 	stw	r3,1164(sp)
1000c274:	11000015 	stw	r4,0(r2)
1000c278:	003ba706 	br	1000b118 <__alt_data_end+0xf800b118>
1000c27c:	d9012317 	ldw	r4,1164(sp)
1000c280:	14c00017 	ldw	r19,0(r2)
1000c284:	002b883a 	mov	r21,zero
1000c288:	21000104 	addi	r4,r4,4
1000c28c:	d9012315 	stw	r4,1164(sp)
1000c290:	003d7906 	br	1000b878 <__alt_data_end+0xf800b878>
1000c294:	d8c12317 	ldw	r3,1164(sp)
1000c298:	002b883a 	mov	r21,zero
1000c29c:	00800044 	movi	r2,1
1000c2a0:	1cc00017 	ldw	r19,0(r3)
1000c2a4:	18c00104 	addi	r3,r3,4
1000c2a8:	d8c12315 	stw	r3,1164(sp)
1000c2ac:	9807883a 	mov	r3,r19
1000c2b0:	003d4e06 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000c2b4:	d8812317 	ldw	r2,1164(sp)
1000c2b8:	002b883a 	mov	r21,zero
1000c2bc:	14c00017 	ldw	r19,0(r2)
1000c2c0:	10800104 	addi	r2,r2,4
1000c2c4:	d8812315 	stw	r2,1164(sp)
1000c2c8:	9807883a 	mov	r3,r19
1000c2cc:	0005883a 	mov	r2,zero
1000c2d0:	003d4606 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000c2d4:	1cc00017 	ldw	r19,0(r3)
1000c2d8:	d8c12317 	ldw	r3,1164(sp)
1000c2dc:	982bd7fa 	srai	r21,r19,31
1000c2e0:	18c00104 	addi	r3,r3,4
1000c2e4:	d8c12315 	stw	r3,1164(sp)
1000c2e8:	a805883a 	mov	r2,r21
1000c2ec:	003c8406 	br	1000b500 <__alt_data_end+0xf800b500>
1000c2f0:	01040074 	movhi	r4,4097
1000c2f4:	210ce004 	addi	r4,r4,13184
1000c2f8:	d9012615 	stw	r4,1176(sp)
1000c2fc:	003d0606 	br	1000b718 <__alt_data_end+0xf800b718>
1000c300:	b9800043 	ldbu	r6,1(r23)
1000c304:	94800814 	ori	r18,r18,32
1000c308:	bdc00044 	addi	r23,r23,1
1000c30c:	31803fcc 	andi	r6,r6,255
1000c310:	3180201c 	xori	r6,r6,128
1000c314:	31bfe004 	addi	r6,r6,-128
1000c318:	003ba806 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000c31c:	d8811e17 	ldw	r2,1144(sp)
1000c320:	d8c12217 	ldw	r3,1160(sp)
1000c324:	10e9c83a 	sub	r20,r2,r3
1000c328:	003c9406 	br	1000b57c <__alt_data_end+0xf800b57c>
1000c32c:	da012a15 	stw	r8,1192(sp)
1000c330:	0003b480 	call	10003b48 <strlen>
1000c334:	1029883a 	mov	r20,r2
1000c338:	dd811d83 	ldbu	r22,1142(sp)
1000c33c:	dcc12315 	stw	r19,1164(sp)
1000c340:	0021883a 	mov	r16,zero
1000c344:	da012a17 	ldw	r8,1192(sp)
1000c348:	003c8c06 	br	1000b57c <__alt_data_end+0xf800b57c>
1000c34c:	d9012117 	ldw	r4,1156(sp)
1000c350:	d9412017 	ldw	r5,1152(sp)
1000c354:	d9811a04 	addi	r6,sp,1128
1000c358:	000af240 	call	1000af24 <__sprint_r.part.0>
1000c35c:	103e521e 	bne	r2,zero,1000bca8 <__alt_data_end+0xf800bca8>
1000c360:	d9411b17 	ldw	r5,1132(sp)
1000c364:	d8c11c17 	ldw	r3,1136(sp)
1000c368:	d811883a 	mov	r8,sp
1000c36c:	28800044 	addi	r2,r5,1
1000c370:	003cce06 	br	1000b6ac <__alt_data_end+0xf800b6ac>
1000c374:	01440074 	movhi	r5,4097
1000c378:	294ce404 	addi	r5,r5,13200
1000c37c:	d9412615 	stw	r5,1176(sp)
1000c380:	d9411b17 	ldw	r5,1132(sp)
1000c384:	29400044 	addi	r5,r5,1
1000c388:	003cad06 	br	1000b640 <__alt_data_end+0xf800b640>
1000c38c:	00800184 	movi	r2,6
1000c390:	1400012e 	bgeu	r2,r16,1000c398 <___vfiprintf_internal_r+0x1360>
1000c394:	1021883a 	mov	r16,r2
1000c398:	8029883a 	mov	r20,r16
1000c39c:	802b883a 	mov	r21,r16
1000c3a0:	80001c16 	blt	r16,zero,1000c414 <___vfiprintf_internal_r+0x13dc>
1000c3a4:	00c40074 	movhi	r3,4097
1000c3a8:	18cc8404 	addi	r3,r3,12816
1000c3ac:	dcc12315 	stw	r19,1164(sp)
1000c3b0:	d8c12215 	stw	r3,1160(sp)
1000c3b4:	003cff06 	br	1000b7b4 <__alt_data_end+0xf800b7b4>
1000c3b8:	d9411b17 	ldw	r5,1132(sp)
1000c3bc:	00840074 	movhi	r2,4097
1000c3c0:	108ce404 	addi	r2,r2,13200
1000c3c4:	d8812615 	stw	r2,1176(sp)
1000c3c8:	29400044 	addi	r5,r5,1
1000c3cc:	003e6706 	br	1000bd6c <__alt_data_end+0xf800bd6c>
1000c3d0:	d9012317 	ldw	r4,1164(sp)
1000c3d4:	d9412517 	ldw	r5,1172(sp)
1000c3d8:	20800017 	ldw	r2,0(r4)
1000c3dc:	21000104 	addi	r4,r4,4
1000c3e0:	d9012315 	stw	r4,1164(sp)
1000c3e4:	11400015 	stw	r5,0(r2)
1000c3e8:	003b4b06 	br	1000b118 <__alt_data_end+0xf800b118>
1000c3ec:	8029883a 	mov	r20,r16
1000c3f0:	dd811d83 	ldbu	r22,1142(sp)
1000c3f4:	dcc12315 	stw	r19,1164(sp)
1000c3f8:	0021883a 	mov	r16,zero
1000c3fc:	003c5f06 	br	1000b57c <__alt_data_end+0xf800b57c>
1000c400:	01040074 	movhi	r4,4097
1000c404:	210ce004 	addi	r4,r4,13184
1000c408:	d9012615 	stw	r4,1176(sp)
1000c40c:	1009883a 	mov	r4,r2
1000c410:	003ea006 	br	1000be94 <__alt_data_end+0xf800be94>
1000c414:	002b883a 	mov	r21,zero
1000c418:	003fe206 	br	1000c3a4 <__alt_data_end+0xf800c3a4>
1000c41c:	d9412317 	ldw	r5,1164(sp)
1000c420:	b807883a 	mov	r3,r23
1000c424:	102f883a 	mov	r23,r2
1000c428:	2c000017 	ldw	r16,0(r5)
1000c42c:	29000104 	addi	r4,r5,4
1000c430:	d9012315 	stw	r4,1164(sp)
1000c434:	80000416 	blt	r16,zero,1000c448 <___vfiprintf_internal_r+0x1410>
1000c438:	19800047 	ldb	r6,1(r3)
1000c43c:	003b5f06 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000c440:	043fffc4 	movi	r16,-1
1000c444:	003bef06 	br	1000b404 <__alt_data_end+0xf800b404>
1000c448:	043fffc4 	movi	r16,-1
1000c44c:	19800047 	ldb	r6,1(r3)
1000c450:	003b5a06 	br	1000b1bc <__alt_data_end+0xf800b1bc>
1000c454:	282b883a 	mov	r21,r5
1000c458:	003cc706 	br	1000b778 <__alt_data_end+0xf800b778>

1000c45c <__vfiprintf_internal>:
1000c45c:	2007883a 	mov	r3,r4
1000c460:	01040074 	movhi	r4,4097
1000c464:	2113e104 	addi	r4,r4,20356
1000c468:	21000017 	ldw	r4,0(r4)
1000c46c:	2805883a 	mov	r2,r5
1000c470:	300f883a 	mov	r7,r6
1000c474:	180b883a 	mov	r5,r3
1000c478:	100d883a 	mov	r6,r2
1000c47c:	000b0381 	jmpi	1000b038 <___vfiprintf_internal_r>

1000c480 <_write_r>:
1000c480:	defffd04 	addi	sp,sp,-12
1000c484:	dc000015 	stw	r16,0(sp)
1000c488:	04040074 	movhi	r16,4097
1000c48c:	dc400115 	stw	r17,4(sp)
1000c490:	841aba04 	addi	r16,r16,27368
1000c494:	2023883a 	mov	r17,r4
1000c498:	2809883a 	mov	r4,r5
1000c49c:	300b883a 	mov	r5,r6
1000c4a0:	380d883a 	mov	r6,r7
1000c4a4:	dfc00215 	stw	ra,8(sp)
1000c4a8:	80000015 	stw	zero,0(r16)
1000c4ac:	0010b480 	call	10010b48 <write>
1000c4b0:	00ffffc4 	movi	r3,-1
1000c4b4:	10c00526 	beq	r2,r3,1000c4cc <_write_r+0x4c>
1000c4b8:	dfc00217 	ldw	ra,8(sp)
1000c4bc:	dc400117 	ldw	r17,4(sp)
1000c4c0:	dc000017 	ldw	r16,0(sp)
1000c4c4:	dec00304 	addi	sp,sp,12
1000c4c8:	f800283a 	ret
1000c4cc:	80c00017 	ldw	r3,0(r16)
1000c4d0:	183ff926 	beq	r3,zero,1000c4b8 <__alt_data_end+0xf800c4b8>
1000c4d4:	88c00015 	stw	r3,0(r17)
1000c4d8:	003ff706 	br	1000c4b8 <__alt_data_end+0xf800c4b8>

1000c4dc <_close_r>:
1000c4dc:	defffd04 	addi	sp,sp,-12
1000c4e0:	dc000015 	stw	r16,0(sp)
1000c4e4:	04040074 	movhi	r16,4097
1000c4e8:	dc400115 	stw	r17,4(sp)
1000c4ec:	841aba04 	addi	r16,r16,27368
1000c4f0:	2023883a 	mov	r17,r4
1000c4f4:	2809883a 	mov	r4,r5
1000c4f8:	dfc00215 	stw	ra,8(sp)
1000c4fc:	80000015 	stw	zero,0(r16)
1000c500:	00102740 	call	10010274 <close>
1000c504:	00ffffc4 	movi	r3,-1
1000c508:	10c00526 	beq	r2,r3,1000c520 <_close_r+0x44>
1000c50c:	dfc00217 	ldw	ra,8(sp)
1000c510:	dc400117 	ldw	r17,4(sp)
1000c514:	dc000017 	ldw	r16,0(sp)
1000c518:	dec00304 	addi	sp,sp,12
1000c51c:	f800283a 	ret
1000c520:	80c00017 	ldw	r3,0(r16)
1000c524:	183ff926 	beq	r3,zero,1000c50c <__alt_data_end+0xf800c50c>
1000c528:	88c00015 	stw	r3,0(r17)
1000c52c:	003ff706 	br	1000c50c <__alt_data_end+0xf800c50c>

1000c530 <_calloc_r>:
1000c530:	defffe04 	addi	sp,sp,-8
1000c534:	dc000015 	stw	r16,0(sp)
1000c538:	2021883a 	mov	r16,r4
1000c53c:	2809883a 	mov	r4,r5
1000c540:	300b883a 	mov	r5,r6
1000c544:	dfc00115 	stw	ra,4(sp)
1000c548:	00039ec0 	call	100039ec <__mulsi3>
1000c54c:	8009883a 	mov	r4,r16
1000c550:	100b883a 	mov	r5,r2
1000c554:	0008a4c0 	call	10008a4c <_malloc_r>
1000c558:	1021883a 	mov	r16,r2
1000c55c:	10002826 	beq	r2,zero,1000c600 <_calloc_r+0xd0>
1000c560:	11bfff17 	ldw	r6,-4(r2)
1000c564:	00bfff04 	movi	r2,-4
1000c568:	00c00904 	movi	r3,36
1000c56c:	308c703a 	and	r6,r6,r2
1000c570:	308d883a 	add	r6,r6,r2
1000c574:	19801436 	bltu	r3,r6,1000c5c8 <_calloc_r+0x98>
1000c578:	008004c4 	movi	r2,19
1000c57c:	11800936 	bltu	r2,r6,1000c5a4 <_calloc_r+0x74>
1000c580:	8005883a 	mov	r2,r16
1000c584:	10000015 	stw	zero,0(r2)
1000c588:	10000115 	stw	zero,4(r2)
1000c58c:	10000215 	stw	zero,8(r2)
1000c590:	8005883a 	mov	r2,r16
1000c594:	dfc00117 	ldw	ra,4(sp)
1000c598:	dc000017 	ldw	r16,0(sp)
1000c59c:	dec00204 	addi	sp,sp,8
1000c5a0:	f800283a 	ret
1000c5a4:	80000015 	stw	zero,0(r16)
1000c5a8:	80000115 	stw	zero,4(r16)
1000c5ac:	008006c4 	movi	r2,27
1000c5b0:	11800d2e 	bgeu	r2,r6,1000c5e8 <_calloc_r+0xb8>
1000c5b4:	80000215 	stw	zero,8(r16)
1000c5b8:	80000315 	stw	zero,12(r16)
1000c5bc:	30c00c26 	beq	r6,r3,1000c5f0 <_calloc_r+0xc0>
1000c5c0:	80800404 	addi	r2,r16,16
1000c5c4:	003fef06 	br	1000c584 <__alt_data_end+0xf800c584>
1000c5c8:	8009883a 	mov	r4,r16
1000c5cc:	000b883a 	mov	r5,zero
1000c5d0:	00095700 	call	10009570 <memset>
1000c5d4:	8005883a 	mov	r2,r16
1000c5d8:	dfc00117 	ldw	ra,4(sp)
1000c5dc:	dc000017 	ldw	r16,0(sp)
1000c5e0:	dec00204 	addi	sp,sp,8
1000c5e4:	f800283a 	ret
1000c5e8:	80800204 	addi	r2,r16,8
1000c5ec:	003fe506 	br	1000c584 <__alt_data_end+0xf800c584>
1000c5f0:	80000415 	stw	zero,16(r16)
1000c5f4:	80800604 	addi	r2,r16,24
1000c5f8:	80000515 	stw	zero,20(r16)
1000c5fc:	003fe106 	br	1000c584 <__alt_data_end+0xf800c584>
1000c600:	0005883a 	mov	r2,zero
1000c604:	003fe306 	br	1000c594 <__alt_data_end+0xf800c594>

1000c608 <_fclose_r>:
1000c608:	28003226 	beq	r5,zero,1000c6d4 <_fclose_r+0xcc>
1000c60c:	defffc04 	addi	sp,sp,-16
1000c610:	dc400115 	stw	r17,4(sp)
1000c614:	2023883a 	mov	r17,r4
1000c618:	dc000015 	stw	r16,0(sp)
1000c61c:	dfc00315 	stw	ra,12(sp)
1000c620:	dc800215 	stw	r18,8(sp)
1000c624:	2821883a 	mov	r16,r5
1000c628:	0007d4c0 	call	10007d4c <__sfp_lock_acquire>
1000c62c:	88000226 	beq	r17,zero,1000c638 <_fclose_r+0x30>
1000c630:	88800e17 	ldw	r2,56(r17)
1000c634:	10002926 	beq	r2,zero,1000c6dc <_fclose_r+0xd4>
1000c638:	8080030f 	ldh	r2,12(r16)
1000c63c:	10002226 	beq	r2,zero,1000c6c8 <_fclose_r+0xc0>
1000c640:	8809883a 	mov	r4,r17
1000c644:	800b883a 	mov	r5,r16
1000c648:	00077800 	call	10007780 <_fflush_r>
1000c64c:	1025883a 	mov	r18,r2
1000c650:	80800b17 	ldw	r2,44(r16)
1000c654:	10000426 	beq	r2,zero,1000c668 <_fclose_r+0x60>
1000c658:	81400717 	ldw	r5,28(r16)
1000c65c:	8809883a 	mov	r4,r17
1000c660:	103ee83a 	callr	r2
1000c664:	10002616 	blt	r2,zero,1000c700 <_fclose_r+0xf8>
1000c668:	8080030b 	ldhu	r2,12(r16)
1000c66c:	1080200c 	andi	r2,r2,128
1000c670:	10001f1e 	bne	r2,zero,1000c6f0 <_fclose_r+0xe8>
1000c674:	81400c17 	ldw	r5,48(r16)
1000c678:	28000526 	beq	r5,zero,1000c690 <_fclose_r+0x88>
1000c67c:	80801004 	addi	r2,r16,64
1000c680:	28800226 	beq	r5,r2,1000c68c <_fclose_r+0x84>
1000c684:	8809883a 	mov	r4,r17
1000c688:	0007eb00 	call	10007eb0 <_free_r>
1000c68c:	80000c15 	stw	zero,48(r16)
1000c690:	81401117 	ldw	r5,68(r16)
1000c694:	28000326 	beq	r5,zero,1000c6a4 <_fclose_r+0x9c>
1000c698:	8809883a 	mov	r4,r17
1000c69c:	0007eb00 	call	10007eb0 <_free_r>
1000c6a0:	80001115 	stw	zero,68(r16)
1000c6a4:	8000030d 	sth	zero,12(r16)
1000c6a8:	0007d500 	call	10007d50 <__sfp_lock_release>
1000c6ac:	9005883a 	mov	r2,r18
1000c6b0:	dfc00317 	ldw	ra,12(sp)
1000c6b4:	dc800217 	ldw	r18,8(sp)
1000c6b8:	dc400117 	ldw	r17,4(sp)
1000c6bc:	dc000017 	ldw	r16,0(sp)
1000c6c0:	dec00404 	addi	sp,sp,16
1000c6c4:	f800283a 	ret
1000c6c8:	0007d500 	call	10007d50 <__sfp_lock_release>
1000c6cc:	0005883a 	mov	r2,zero
1000c6d0:	003ff706 	br	1000c6b0 <__alt_data_end+0xf800c6b0>
1000c6d4:	0005883a 	mov	r2,zero
1000c6d8:	f800283a 	ret
1000c6dc:	8809883a 	mov	r4,r17
1000c6e0:	0007d3c0 	call	10007d3c <__sinit>
1000c6e4:	8080030f 	ldh	r2,12(r16)
1000c6e8:	103fd51e 	bne	r2,zero,1000c640 <__alt_data_end+0xf800c640>
1000c6ec:	003ff606 	br	1000c6c8 <__alt_data_end+0xf800c6c8>
1000c6f0:	81400417 	ldw	r5,16(r16)
1000c6f4:	8809883a 	mov	r4,r17
1000c6f8:	0007eb00 	call	10007eb0 <_free_r>
1000c6fc:	003fdd06 	br	1000c674 <__alt_data_end+0xf800c674>
1000c700:	04bfffc4 	movi	r18,-1
1000c704:	003fd806 	br	1000c668 <__alt_data_end+0xf800c668>

1000c708 <fclose>:
1000c708:	00840074 	movhi	r2,4097
1000c70c:	1093e104 	addi	r2,r2,20356
1000c710:	200b883a 	mov	r5,r4
1000c714:	11000017 	ldw	r4,0(r2)
1000c718:	000c6081 	jmpi	1000c608 <_fclose_r>

1000c71c <_fputwc_r>:
1000c71c:	3080030b 	ldhu	r2,12(r6)
1000c720:	defff804 	addi	sp,sp,-32
1000c724:	dcc00415 	stw	r19,16(sp)
1000c728:	dc800315 	stw	r18,12(sp)
1000c72c:	dc000115 	stw	r16,4(sp)
1000c730:	dfc00715 	stw	ra,28(sp)
1000c734:	dd400615 	stw	r21,24(sp)
1000c738:	dd000515 	stw	r20,20(sp)
1000c73c:	dc400215 	stw	r17,8(sp)
1000c740:	10c8000c 	andi	r3,r2,8192
1000c744:	3021883a 	mov	r16,r6
1000c748:	2027883a 	mov	r19,r4
1000c74c:	2825883a 	mov	r18,r5
1000c750:	1800051e 	bne	r3,zero,1000c768 <_fputwc_r+0x4c>
1000c754:	30c01917 	ldw	r3,100(r6)
1000c758:	10880014 	ori	r2,r2,8192
1000c75c:	3080030d 	sth	r2,12(r6)
1000c760:	18880014 	ori	r2,r3,8192
1000c764:	30801915 	stw	r2,100(r6)
1000c768:	000883c0 	call	1000883c <__locale_mb_cur_max>
1000c76c:	00c00044 	movi	r3,1
1000c770:	10c03e26 	beq	r2,r3,1000c86c <_fputwc_r+0x150>
1000c774:	9809883a 	mov	r4,r19
1000c778:	d80b883a 	mov	r5,sp
1000c77c:	900d883a 	mov	r6,r18
1000c780:	81c01704 	addi	r7,r16,92
1000c784:	000cbcc0 	call	1000cbcc <_wcrtomb_r>
1000c788:	1029883a 	mov	r20,r2
1000c78c:	00bfffc4 	movi	r2,-1
1000c790:	a0802026 	beq	r20,r2,1000c814 <_fputwc_r+0xf8>
1000c794:	d9400003 	ldbu	r5,0(sp)
1000c798:	a0001c26 	beq	r20,zero,1000c80c <_fputwc_r+0xf0>
1000c79c:	0023883a 	mov	r17,zero
1000c7a0:	05400284 	movi	r21,10
1000c7a4:	00000906 	br	1000c7cc <_fputwc_r+0xb0>
1000c7a8:	80800017 	ldw	r2,0(r16)
1000c7ac:	11400005 	stb	r5,0(r2)
1000c7b0:	80c00017 	ldw	r3,0(r16)
1000c7b4:	18c00044 	addi	r3,r3,1
1000c7b8:	80c00015 	stw	r3,0(r16)
1000c7bc:	8c400044 	addi	r17,r17,1
1000c7c0:	dc45883a 	add	r2,sp,r17
1000c7c4:	8d00112e 	bgeu	r17,r20,1000c80c <_fputwc_r+0xf0>
1000c7c8:	11400003 	ldbu	r5,0(r2)
1000c7cc:	80c00217 	ldw	r3,8(r16)
1000c7d0:	18ffffc4 	addi	r3,r3,-1
1000c7d4:	80c00215 	stw	r3,8(r16)
1000c7d8:	183ff30e 	bge	r3,zero,1000c7a8 <__alt_data_end+0xf800c7a8>
1000c7dc:	80800617 	ldw	r2,24(r16)
1000c7e0:	18801916 	blt	r3,r2,1000c848 <_fputwc_r+0x12c>
1000c7e4:	80800017 	ldw	r2,0(r16)
1000c7e8:	11400005 	stb	r5,0(r2)
1000c7ec:	80800017 	ldw	r2,0(r16)
1000c7f0:	10c00003 	ldbu	r3,0(r2)
1000c7f4:	10800044 	addi	r2,r2,1
1000c7f8:	1d402326 	beq	r3,r21,1000c888 <_fputwc_r+0x16c>
1000c7fc:	80800015 	stw	r2,0(r16)
1000c800:	8c400044 	addi	r17,r17,1
1000c804:	dc45883a 	add	r2,sp,r17
1000c808:	8d3fef36 	bltu	r17,r20,1000c7c8 <__alt_data_end+0xf800c7c8>
1000c80c:	9005883a 	mov	r2,r18
1000c810:	00000406 	br	1000c824 <_fputwc_r+0x108>
1000c814:	80c0030b 	ldhu	r3,12(r16)
1000c818:	a005883a 	mov	r2,r20
1000c81c:	18c01014 	ori	r3,r3,64
1000c820:	80c0030d 	sth	r3,12(r16)
1000c824:	dfc00717 	ldw	ra,28(sp)
1000c828:	dd400617 	ldw	r21,24(sp)
1000c82c:	dd000517 	ldw	r20,20(sp)
1000c830:	dcc00417 	ldw	r19,16(sp)
1000c834:	dc800317 	ldw	r18,12(sp)
1000c838:	dc400217 	ldw	r17,8(sp)
1000c83c:	dc000117 	ldw	r16,4(sp)
1000c840:	dec00804 	addi	sp,sp,32
1000c844:	f800283a 	ret
1000c848:	9809883a 	mov	r4,r19
1000c84c:	29403fcc 	andi	r5,r5,255
1000c850:	800d883a 	mov	r6,r16
1000c854:	000ca5c0 	call	1000ca5c <__swbuf_r>
1000c858:	10bfffe0 	cmpeqi	r2,r2,-1
1000c85c:	10803fcc 	andi	r2,r2,255
1000c860:	103fd626 	beq	r2,zero,1000c7bc <__alt_data_end+0xf800c7bc>
1000c864:	00bfffc4 	movi	r2,-1
1000c868:	003fee06 	br	1000c824 <__alt_data_end+0xf800c824>
1000c86c:	90ffffc4 	addi	r3,r18,-1
1000c870:	01003f84 	movi	r4,254
1000c874:	20ffbf36 	bltu	r4,r3,1000c774 <__alt_data_end+0xf800c774>
1000c878:	900b883a 	mov	r5,r18
1000c87c:	dc800005 	stb	r18,0(sp)
1000c880:	1029883a 	mov	r20,r2
1000c884:	003fc506 	br	1000c79c <__alt_data_end+0xf800c79c>
1000c888:	9809883a 	mov	r4,r19
1000c88c:	a80b883a 	mov	r5,r21
1000c890:	800d883a 	mov	r6,r16
1000c894:	000ca5c0 	call	1000ca5c <__swbuf_r>
1000c898:	10bfffe0 	cmpeqi	r2,r2,-1
1000c89c:	003fef06 	br	1000c85c <__alt_data_end+0xf800c85c>

1000c8a0 <fputwc>:
1000c8a0:	defffc04 	addi	sp,sp,-16
1000c8a4:	dc000115 	stw	r16,4(sp)
1000c8a8:	04040074 	movhi	r16,4097
1000c8ac:	8413e104 	addi	r16,r16,20356
1000c8b0:	dc400215 	stw	r17,8(sp)
1000c8b4:	2023883a 	mov	r17,r4
1000c8b8:	81000017 	ldw	r4,0(r16)
1000c8bc:	dfc00315 	stw	ra,12(sp)
1000c8c0:	280d883a 	mov	r6,r5
1000c8c4:	20000626 	beq	r4,zero,1000c8e0 <fputwc+0x40>
1000c8c8:	20800e17 	ldw	r2,56(r4)
1000c8cc:	1000041e 	bne	r2,zero,1000c8e0 <fputwc+0x40>
1000c8d0:	d9400015 	stw	r5,0(sp)
1000c8d4:	0007d3c0 	call	10007d3c <__sinit>
1000c8d8:	81000017 	ldw	r4,0(r16)
1000c8dc:	d9800017 	ldw	r6,0(sp)
1000c8e0:	880b883a 	mov	r5,r17
1000c8e4:	dfc00317 	ldw	ra,12(sp)
1000c8e8:	dc400217 	ldw	r17,8(sp)
1000c8ec:	dc000117 	ldw	r16,4(sp)
1000c8f0:	dec00404 	addi	sp,sp,16
1000c8f4:	000c71c1 	jmpi	1000c71c <_fputwc_r>

1000c8f8 <_fstat_r>:
1000c8f8:	defffd04 	addi	sp,sp,-12
1000c8fc:	dc000015 	stw	r16,0(sp)
1000c900:	04040074 	movhi	r16,4097
1000c904:	dc400115 	stw	r17,4(sp)
1000c908:	841aba04 	addi	r16,r16,27368
1000c90c:	2023883a 	mov	r17,r4
1000c910:	2809883a 	mov	r4,r5
1000c914:	300b883a 	mov	r5,r6
1000c918:	dfc00215 	stw	ra,8(sp)
1000c91c:	80000015 	stw	zero,0(r16)
1000c920:	00103c80 	call	100103c8 <fstat>
1000c924:	00ffffc4 	movi	r3,-1
1000c928:	10c00526 	beq	r2,r3,1000c940 <_fstat_r+0x48>
1000c92c:	dfc00217 	ldw	ra,8(sp)
1000c930:	dc400117 	ldw	r17,4(sp)
1000c934:	dc000017 	ldw	r16,0(sp)
1000c938:	dec00304 	addi	sp,sp,12
1000c93c:	f800283a 	ret
1000c940:	80c00017 	ldw	r3,0(r16)
1000c944:	183ff926 	beq	r3,zero,1000c92c <__alt_data_end+0xf800c92c>
1000c948:	88c00015 	stw	r3,0(r17)
1000c94c:	003ff706 	br	1000c92c <__alt_data_end+0xf800c92c>

1000c950 <_isatty_r>:
1000c950:	defffd04 	addi	sp,sp,-12
1000c954:	dc000015 	stw	r16,0(sp)
1000c958:	04040074 	movhi	r16,4097
1000c95c:	dc400115 	stw	r17,4(sp)
1000c960:	841aba04 	addi	r16,r16,27368
1000c964:	2023883a 	mov	r17,r4
1000c968:	2809883a 	mov	r4,r5
1000c96c:	dfc00215 	stw	ra,8(sp)
1000c970:	80000015 	stw	zero,0(r16)
1000c974:	00104d00 	call	100104d0 <isatty>
1000c978:	00ffffc4 	movi	r3,-1
1000c97c:	10c00526 	beq	r2,r3,1000c994 <_isatty_r+0x44>
1000c980:	dfc00217 	ldw	ra,8(sp)
1000c984:	dc400117 	ldw	r17,4(sp)
1000c988:	dc000017 	ldw	r16,0(sp)
1000c98c:	dec00304 	addi	sp,sp,12
1000c990:	f800283a 	ret
1000c994:	80c00017 	ldw	r3,0(r16)
1000c998:	183ff926 	beq	r3,zero,1000c980 <__alt_data_end+0xf800c980>
1000c99c:	88c00015 	stw	r3,0(r17)
1000c9a0:	003ff706 	br	1000c980 <__alt_data_end+0xf800c980>

1000c9a4 <_lseek_r>:
1000c9a4:	defffd04 	addi	sp,sp,-12
1000c9a8:	dc000015 	stw	r16,0(sp)
1000c9ac:	04040074 	movhi	r16,4097
1000c9b0:	dc400115 	stw	r17,4(sp)
1000c9b4:	841aba04 	addi	r16,r16,27368
1000c9b8:	2023883a 	mov	r17,r4
1000c9bc:	2809883a 	mov	r4,r5
1000c9c0:	300b883a 	mov	r5,r6
1000c9c4:	380d883a 	mov	r6,r7
1000c9c8:	dfc00215 	stw	ra,8(sp)
1000c9cc:	80000015 	stw	zero,0(r16)
1000c9d0:	00106b00 	call	100106b0 <lseek>
1000c9d4:	00ffffc4 	movi	r3,-1
1000c9d8:	10c00526 	beq	r2,r3,1000c9f0 <_lseek_r+0x4c>
1000c9dc:	dfc00217 	ldw	ra,8(sp)
1000c9e0:	dc400117 	ldw	r17,4(sp)
1000c9e4:	dc000017 	ldw	r16,0(sp)
1000c9e8:	dec00304 	addi	sp,sp,12
1000c9ec:	f800283a 	ret
1000c9f0:	80c00017 	ldw	r3,0(r16)
1000c9f4:	183ff926 	beq	r3,zero,1000c9dc <__alt_data_end+0xf800c9dc>
1000c9f8:	88c00015 	stw	r3,0(r17)
1000c9fc:	003ff706 	br	1000c9dc <__alt_data_end+0xf800c9dc>

1000ca00 <_read_r>:
1000ca00:	defffd04 	addi	sp,sp,-12
1000ca04:	dc000015 	stw	r16,0(sp)
1000ca08:	04040074 	movhi	r16,4097
1000ca0c:	dc400115 	stw	r17,4(sp)
1000ca10:	841aba04 	addi	r16,r16,27368
1000ca14:	2023883a 	mov	r17,r4
1000ca18:	2809883a 	mov	r4,r5
1000ca1c:	300b883a 	mov	r5,r6
1000ca20:	380d883a 	mov	r6,r7
1000ca24:	dfc00215 	stw	ra,8(sp)
1000ca28:	80000015 	stw	zero,0(r16)
1000ca2c:	00108940 	call	10010894 <read>
1000ca30:	00ffffc4 	movi	r3,-1
1000ca34:	10c00526 	beq	r2,r3,1000ca4c <_read_r+0x4c>
1000ca38:	dfc00217 	ldw	ra,8(sp)
1000ca3c:	dc400117 	ldw	r17,4(sp)
1000ca40:	dc000017 	ldw	r16,0(sp)
1000ca44:	dec00304 	addi	sp,sp,12
1000ca48:	f800283a 	ret
1000ca4c:	80c00017 	ldw	r3,0(r16)
1000ca50:	183ff926 	beq	r3,zero,1000ca38 <__alt_data_end+0xf800ca38>
1000ca54:	88c00015 	stw	r3,0(r17)
1000ca58:	003ff706 	br	1000ca38 <__alt_data_end+0xf800ca38>

1000ca5c <__swbuf_r>:
1000ca5c:	defffc04 	addi	sp,sp,-16
1000ca60:	dc800215 	stw	r18,8(sp)
1000ca64:	dc400115 	stw	r17,4(sp)
1000ca68:	dc000015 	stw	r16,0(sp)
1000ca6c:	dfc00315 	stw	ra,12(sp)
1000ca70:	2025883a 	mov	r18,r4
1000ca74:	2823883a 	mov	r17,r5
1000ca78:	3021883a 	mov	r16,r6
1000ca7c:	20000226 	beq	r4,zero,1000ca88 <__swbuf_r+0x2c>
1000ca80:	20800e17 	ldw	r2,56(r4)
1000ca84:	10004126 	beq	r2,zero,1000cb8c <__swbuf_r+0x130>
1000ca88:	80c00617 	ldw	r3,24(r16)
1000ca8c:	8180030b 	ldhu	r6,12(r16)
1000ca90:	80c00215 	stw	r3,8(r16)
1000ca94:	30c0020c 	andi	r3,r6,8
1000ca98:	18003526 	beq	r3,zero,1000cb70 <__swbuf_r+0x114>
1000ca9c:	80c00417 	ldw	r3,16(r16)
1000caa0:	18003326 	beq	r3,zero,1000cb70 <__swbuf_r+0x114>
1000caa4:	3088000c 	andi	r2,r6,8192
1000caa8:	8c403fcc 	andi	r17,r17,255
1000caac:	10001726 	beq	r2,zero,1000cb0c <__swbuf_r+0xb0>
1000cab0:	80800017 	ldw	r2,0(r16)
1000cab4:	81000517 	ldw	r4,20(r16)
1000cab8:	10c7c83a 	sub	r3,r2,r3
1000cabc:	19001d0e 	bge	r3,r4,1000cb34 <__swbuf_r+0xd8>
1000cac0:	18c00044 	addi	r3,r3,1
1000cac4:	81400217 	ldw	r5,8(r16)
1000cac8:	11000044 	addi	r4,r2,1
1000cacc:	81000015 	stw	r4,0(r16)
1000cad0:	297fffc4 	addi	r5,r5,-1
1000cad4:	81400215 	stw	r5,8(r16)
1000cad8:	14400005 	stb	r17,0(r2)
1000cadc:	80800517 	ldw	r2,20(r16)
1000cae0:	10c01d26 	beq	r2,r3,1000cb58 <__swbuf_r+0xfc>
1000cae4:	8080030b 	ldhu	r2,12(r16)
1000cae8:	1080004c 	andi	r2,r2,1
1000caec:	1000181e 	bne	r2,zero,1000cb50 <__swbuf_r+0xf4>
1000caf0:	8805883a 	mov	r2,r17
1000caf4:	dfc00317 	ldw	ra,12(sp)
1000caf8:	dc800217 	ldw	r18,8(sp)
1000cafc:	dc400117 	ldw	r17,4(sp)
1000cb00:	dc000017 	ldw	r16,0(sp)
1000cb04:	dec00404 	addi	sp,sp,16
1000cb08:	f800283a 	ret
1000cb0c:	81001917 	ldw	r4,100(r16)
1000cb10:	00b7ffc4 	movi	r2,-8193
1000cb14:	31880014 	ori	r6,r6,8192
1000cb18:	2084703a 	and	r2,r4,r2
1000cb1c:	80801915 	stw	r2,100(r16)
1000cb20:	80800017 	ldw	r2,0(r16)
1000cb24:	81000517 	ldw	r4,20(r16)
1000cb28:	8180030d 	sth	r6,12(r16)
1000cb2c:	10c7c83a 	sub	r3,r2,r3
1000cb30:	193fe316 	blt	r3,r4,1000cac0 <__alt_data_end+0xf800cac0>
1000cb34:	9009883a 	mov	r4,r18
1000cb38:	800b883a 	mov	r5,r16
1000cb3c:	00077800 	call	10007780 <_fflush_r>
1000cb40:	1000091e 	bne	r2,zero,1000cb68 <__swbuf_r+0x10c>
1000cb44:	80800017 	ldw	r2,0(r16)
1000cb48:	00c00044 	movi	r3,1
1000cb4c:	003fdd06 	br	1000cac4 <__alt_data_end+0xf800cac4>
1000cb50:	00800284 	movi	r2,10
1000cb54:	88bfe61e 	bne	r17,r2,1000caf0 <__alt_data_end+0xf800caf0>
1000cb58:	9009883a 	mov	r4,r18
1000cb5c:	800b883a 	mov	r5,r16
1000cb60:	00077800 	call	10007780 <_fflush_r>
1000cb64:	103fe226 	beq	r2,zero,1000caf0 <__alt_data_end+0xf800caf0>
1000cb68:	00bfffc4 	movi	r2,-1
1000cb6c:	003fe106 	br	1000caf4 <__alt_data_end+0xf800caf4>
1000cb70:	9009883a 	mov	r4,r18
1000cb74:	800b883a 	mov	r5,r16
1000cb78:	0005d000 	call	10005d00 <__swsetup_r>
1000cb7c:	1000051e 	bne	r2,zero,1000cb94 <__swbuf_r+0x138>
1000cb80:	8180030b 	ldhu	r6,12(r16)
1000cb84:	80c00417 	ldw	r3,16(r16)
1000cb88:	003fc606 	br	1000caa4 <__alt_data_end+0xf800caa4>
1000cb8c:	0007d3c0 	call	10007d3c <__sinit>
1000cb90:	003fbd06 	br	1000ca88 <__alt_data_end+0xf800ca88>
1000cb94:	80c0030b 	ldhu	r3,12(r16)
1000cb98:	00bfffc4 	movi	r2,-1
1000cb9c:	18c01014 	ori	r3,r3,64
1000cba0:	80c0030d 	sth	r3,12(r16)
1000cba4:	00c00244 	movi	r3,9
1000cba8:	90c00015 	stw	r3,0(r18)
1000cbac:	003fd106 	br	1000caf4 <__alt_data_end+0xf800caf4>

1000cbb0 <__swbuf>:
1000cbb0:	00c40074 	movhi	r3,4097
1000cbb4:	18d3e104 	addi	r3,r3,20356
1000cbb8:	2005883a 	mov	r2,r4
1000cbbc:	19000017 	ldw	r4,0(r3)
1000cbc0:	280d883a 	mov	r6,r5
1000cbc4:	100b883a 	mov	r5,r2
1000cbc8:	000ca5c1 	jmpi	1000ca5c <__swbuf_r>

1000cbcc <_wcrtomb_r>:
1000cbcc:	defff604 	addi	sp,sp,-40
1000cbd0:	00840074 	movhi	r2,4097
1000cbd4:	dc800815 	stw	r18,32(sp)
1000cbd8:	dc400715 	stw	r17,28(sp)
1000cbdc:	dc000615 	stw	r16,24(sp)
1000cbe0:	1093e504 	addi	r2,r2,20372
1000cbe4:	dfc00915 	stw	ra,36(sp)
1000cbe8:	2021883a 	mov	r16,r4
1000cbec:	3823883a 	mov	r17,r7
1000cbf0:	14800017 	ldw	r18,0(r2)
1000cbf4:	28001426 	beq	r5,zero,1000cc48 <_wcrtomb_r+0x7c>
1000cbf8:	d9400415 	stw	r5,16(sp)
1000cbfc:	d9800515 	stw	r6,20(sp)
1000cc00:	00088300 	call	10008830 <__locale_charset>
1000cc04:	d9400417 	ldw	r5,16(sp)
1000cc08:	d9800517 	ldw	r6,20(sp)
1000cc0c:	8009883a 	mov	r4,r16
1000cc10:	dc400015 	stw	r17,0(sp)
1000cc14:	100f883a 	mov	r7,r2
1000cc18:	903ee83a 	callr	r18
1000cc1c:	00ffffc4 	movi	r3,-1
1000cc20:	10c0031e 	bne	r2,r3,1000cc30 <_wcrtomb_r+0x64>
1000cc24:	88000015 	stw	zero,0(r17)
1000cc28:	00c02284 	movi	r3,138
1000cc2c:	80c00015 	stw	r3,0(r16)
1000cc30:	dfc00917 	ldw	ra,36(sp)
1000cc34:	dc800817 	ldw	r18,32(sp)
1000cc38:	dc400717 	ldw	r17,28(sp)
1000cc3c:	dc000617 	ldw	r16,24(sp)
1000cc40:	dec00a04 	addi	sp,sp,40
1000cc44:	f800283a 	ret
1000cc48:	00088300 	call	10008830 <__locale_charset>
1000cc4c:	8009883a 	mov	r4,r16
1000cc50:	dc400015 	stw	r17,0(sp)
1000cc54:	d9400104 	addi	r5,sp,4
1000cc58:	000d883a 	mov	r6,zero
1000cc5c:	100f883a 	mov	r7,r2
1000cc60:	903ee83a 	callr	r18
1000cc64:	003fed06 	br	1000cc1c <__alt_data_end+0xf800cc1c>

1000cc68 <wcrtomb>:
1000cc68:	defff504 	addi	sp,sp,-44
1000cc6c:	dc400515 	stw	r17,20(sp)
1000cc70:	dc000415 	stw	r16,16(sp)
1000cc74:	dfc00a15 	stw	ra,40(sp)
1000cc78:	dd400915 	stw	r21,36(sp)
1000cc7c:	dd000815 	stw	r20,32(sp)
1000cc80:	dcc00715 	stw	r19,28(sp)
1000cc84:	dc800615 	stw	r18,24(sp)
1000cc88:	2021883a 	mov	r16,r4
1000cc8c:	3023883a 	mov	r17,r6
1000cc90:	20001d26 	beq	r4,zero,1000cd08 <wcrtomb+0xa0>
1000cc94:	04840074 	movhi	r18,4097
1000cc98:	9493e104 	addi	r18,r18,20356
1000cc9c:	00840074 	movhi	r2,4097
1000cca0:	95400017 	ldw	r21,0(r18)
1000cca4:	1093e504 	addi	r2,r2,20372
1000cca8:	15000017 	ldw	r20,0(r2)
1000ccac:	2827883a 	mov	r19,r5
1000ccb0:	00088300 	call	10008830 <__locale_charset>
1000ccb4:	a809883a 	mov	r4,r21
1000ccb8:	dc400015 	stw	r17,0(sp)
1000ccbc:	800b883a 	mov	r5,r16
1000ccc0:	980d883a 	mov	r6,r19
1000ccc4:	100f883a 	mov	r7,r2
1000ccc8:	a03ee83a 	callr	r20
1000cccc:	00ffffc4 	movi	r3,-1
1000ccd0:	10c0041e 	bne	r2,r3,1000cce4 <wcrtomb+0x7c>
1000ccd4:	90c00017 	ldw	r3,0(r18)
1000ccd8:	01002284 	movi	r4,138
1000ccdc:	88000015 	stw	zero,0(r17)
1000cce0:	19000015 	stw	r4,0(r3)
1000cce4:	dfc00a17 	ldw	ra,40(sp)
1000cce8:	dd400917 	ldw	r21,36(sp)
1000ccec:	dd000817 	ldw	r20,32(sp)
1000ccf0:	dcc00717 	ldw	r19,28(sp)
1000ccf4:	dc800617 	ldw	r18,24(sp)
1000ccf8:	dc400517 	ldw	r17,20(sp)
1000ccfc:	dc000417 	ldw	r16,16(sp)
1000cd00:	dec00b04 	addi	sp,sp,44
1000cd04:	f800283a 	ret
1000cd08:	04840074 	movhi	r18,4097
1000cd0c:	9493e104 	addi	r18,r18,20356
1000cd10:	00840074 	movhi	r2,4097
1000cd14:	94c00017 	ldw	r19,0(r18)
1000cd18:	1093e504 	addi	r2,r2,20372
1000cd1c:	14000017 	ldw	r16,0(r2)
1000cd20:	00088300 	call	10008830 <__locale_charset>
1000cd24:	9809883a 	mov	r4,r19
1000cd28:	dc400015 	stw	r17,0(sp)
1000cd2c:	d9400104 	addi	r5,sp,4
1000cd30:	000d883a 	mov	r6,zero
1000cd34:	100f883a 	mov	r7,r2
1000cd38:	803ee83a 	callr	r16
1000cd3c:	003fe306 	br	1000cccc <__alt_data_end+0xf800cccc>

1000cd40 <__ascii_wctomb>:
1000cd40:	28000526 	beq	r5,zero,1000cd58 <__ascii_wctomb+0x18>
1000cd44:	00803fc4 	movi	r2,255
1000cd48:	11800536 	bltu	r2,r6,1000cd60 <__ascii_wctomb+0x20>
1000cd4c:	29800005 	stb	r6,0(r5)
1000cd50:	00800044 	movi	r2,1
1000cd54:	f800283a 	ret
1000cd58:	0005883a 	mov	r2,zero
1000cd5c:	f800283a 	ret
1000cd60:	00802284 	movi	r2,138
1000cd64:	20800015 	stw	r2,0(r4)
1000cd68:	00bfffc4 	movi	r2,-1
1000cd6c:	f800283a 	ret

1000cd70 <_wctomb_r>:
1000cd70:	00840074 	movhi	r2,4097
1000cd74:	defff904 	addi	sp,sp,-28
1000cd78:	1093e504 	addi	r2,r2,20372
1000cd7c:	dfc00615 	stw	ra,24(sp)
1000cd80:	dc400515 	stw	r17,20(sp)
1000cd84:	dc000415 	stw	r16,16(sp)
1000cd88:	3823883a 	mov	r17,r7
1000cd8c:	14000017 	ldw	r16,0(r2)
1000cd90:	d9000115 	stw	r4,4(sp)
1000cd94:	d9400215 	stw	r5,8(sp)
1000cd98:	d9800315 	stw	r6,12(sp)
1000cd9c:	00088300 	call	10008830 <__locale_charset>
1000cda0:	d9000117 	ldw	r4,4(sp)
1000cda4:	d9400217 	ldw	r5,8(sp)
1000cda8:	d9800317 	ldw	r6,12(sp)
1000cdac:	dc400015 	stw	r17,0(sp)
1000cdb0:	100f883a 	mov	r7,r2
1000cdb4:	803ee83a 	callr	r16
1000cdb8:	dfc00617 	ldw	ra,24(sp)
1000cdbc:	dc400517 	ldw	r17,20(sp)
1000cdc0:	dc000417 	ldw	r16,16(sp)
1000cdc4:	dec00704 	addi	sp,sp,28
1000cdc8:	f800283a 	ret

1000cdcc <__udivdi3>:
1000cdcc:	defff504 	addi	sp,sp,-44
1000cdd0:	dcc00415 	stw	r19,16(sp)
1000cdd4:	dc000115 	stw	r16,4(sp)
1000cdd8:	dfc00a15 	stw	ra,40(sp)
1000cddc:	df000915 	stw	fp,36(sp)
1000cde0:	ddc00815 	stw	r23,32(sp)
1000cde4:	dd800715 	stw	r22,28(sp)
1000cde8:	dd400615 	stw	r21,24(sp)
1000cdec:	dd000515 	stw	r20,20(sp)
1000cdf0:	dc800315 	stw	r18,12(sp)
1000cdf4:	dc400215 	stw	r17,8(sp)
1000cdf8:	2027883a 	mov	r19,r4
1000cdfc:	2821883a 	mov	r16,r5
1000ce00:	3800471e 	bne	r7,zero,1000cf20 <__udivdi3+0x154>
1000ce04:	3025883a 	mov	r18,r6
1000ce08:	2023883a 	mov	r17,r4
1000ce0c:	2980592e 	bgeu	r5,r6,1000cf74 <__udivdi3+0x1a8>
1000ce10:	00bfffd4 	movui	r2,65535
1000ce14:	2829883a 	mov	r20,r5
1000ce18:	1180b236 	bltu	r2,r6,1000d0e4 <__udivdi3+0x318>
1000ce1c:	00803fc4 	movi	r2,255
1000ce20:	1181622e 	bgeu	r2,r6,1000d3ac <__udivdi3+0x5e0>
1000ce24:	00800204 	movi	r2,8
1000ce28:	1007883a 	mov	r3,r2
1000ce2c:	3084d83a 	srl	r2,r6,r2
1000ce30:	01040074 	movhi	r4,4097
1000ce34:	210ce804 	addi	r4,r4,13216
1000ce38:	2085883a 	add	r2,r4,r2
1000ce3c:	11000003 	ldbu	r4,0(r2)
1000ce40:	20c9883a 	add	r4,r4,r3
1000ce44:	00c00804 	movi	r3,32
1000ce48:	1907c83a 	sub	r3,r3,r4
1000ce4c:	18000526 	beq	r3,zero,1000ce64 <__udivdi3+0x98>
1000ce50:	80e0983a 	sll	r16,r16,r3
1000ce54:	9908d83a 	srl	r4,r19,r4
1000ce58:	30e4983a 	sll	r18,r6,r3
1000ce5c:	98e2983a 	sll	r17,r19,r3
1000ce60:	8128b03a 	or	r20,r16,r4
1000ce64:	902ad43a 	srli	r21,r18,16
1000ce68:	a009883a 	mov	r4,r20
1000ce6c:	95bfffcc 	andi	r22,r18,65535
1000ce70:	a80b883a 	mov	r5,r21
1000ce74:	00039e40 	call	100039e4 <__umodsi3>
1000ce78:	a009883a 	mov	r4,r20
1000ce7c:	a80b883a 	mov	r5,r21
1000ce80:	102f883a 	mov	r23,r2
1000ce84:	00039dc0 	call	100039dc <__udivsi3>
1000ce88:	1009883a 	mov	r4,r2
1000ce8c:	b00b883a 	mov	r5,r22
1000ce90:	1021883a 	mov	r16,r2
1000ce94:	00039ec0 	call	100039ec <__mulsi3>
1000ce98:	b82e943a 	slli	r23,r23,16
1000ce9c:	8808d43a 	srli	r4,r17,16
1000cea0:	b906b03a 	or	r3,r23,r4
1000cea4:	1880052e 	bgeu	r3,r2,1000cebc <__udivdi3+0xf0>
1000cea8:	1c87883a 	add	r3,r3,r18
1000ceac:	813fffc4 	addi	r4,r16,-1
1000ceb0:	1c800136 	bltu	r3,r18,1000ceb8 <__udivdi3+0xec>
1000ceb4:	18815236 	bltu	r3,r2,1000d400 <__udivdi3+0x634>
1000ceb8:	2021883a 	mov	r16,r4
1000cebc:	18a7c83a 	sub	r19,r3,r2
1000cec0:	9809883a 	mov	r4,r19
1000cec4:	a80b883a 	mov	r5,r21
1000cec8:	00039e40 	call	100039e4 <__umodsi3>
1000cecc:	1029883a 	mov	r20,r2
1000ced0:	9809883a 	mov	r4,r19
1000ced4:	a80b883a 	mov	r5,r21
1000ced8:	a028943a 	slli	r20,r20,16
1000cedc:	00039dc0 	call	100039dc <__udivsi3>
1000cee0:	1009883a 	mov	r4,r2
1000cee4:	b00b883a 	mov	r5,r22
1000cee8:	8c7fffcc 	andi	r17,r17,65535
1000ceec:	1027883a 	mov	r19,r2
1000cef0:	a462b03a 	or	r17,r20,r17
1000cef4:	00039ec0 	call	100039ec <__mulsi3>
1000cef8:	8880052e 	bgeu	r17,r2,1000cf10 <__udivdi3+0x144>
1000cefc:	8ca3883a 	add	r17,r17,r18
1000cf00:	98ffffc4 	addi	r3,r19,-1
1000cf04:	8c811036 	bltu	r17,r18,1000d348 <__udivdi3+0x57c>
1000cf08:	88810f2e 	bgeu	r17,r2,1000d348 <__udivdi3+0x57c>
1000cf0c:	9cffff84 	addi	r19,r19,-2
1000cf10:	8020943a 	slli	r16,r16,16
1000cf14:	0007883a 	mov	r3,zero
1000cf18:	9c04b03a 	or	r2,r19,r16
1000cf1c:	00006006 	br	1000d0a0 <__udivdi3+0x2d4>
1000cf20:	29c05d36 	bltu	r5,r7,1000d098 <__udivdi3+0x2cc>
1000cf24:	00bfffd4 	movui	r2,65535
1000cf28:	11c0692e 	bgeu	r2,r7,1000d0d0 <__udivdi3+0x304>
1000cf2c:	00804034 	movhi	r2,256
1000cf30:	10bfffc4 	addi	r2,r2,-1
1000cf34:	11c10e2e 	bgeu	r2,r7,1000d370 <__udivdi3+0x5a4>
1000cf38:	01400604 	movi	r5,24
1000cf3c:	2811883a 	mov	r8,r5
1000cf40:	394ad83a 	srl	r5,r7,r5
1000cf44:	00840074 	movhi	r2,4097
1000cf48:	108ce804 	addi	r2,r2,13216
1000cf4c:	114b883a 	add	r5,r2,r5
1000cf50:	29400003 	ldbu	r5,0(r5)
1000cf54:	00c00804 	movi	r3,32
1000cf58:	2a0b883a 	add	r5,r5,r8
1000cf5c:	196fc83a 	sub	r23,r3,r5
1000cf60:	b8006b1e 	bne	r23,zero,1000d110 <__udivdi3+0x344>
1000cf64:	3c011436 	bltu	r7,r16,1000d3b8 <__udivdi3+0x5ec>
1000cf68:	9985403a 	cmpgeu	r2,r19,r6
1000cf6c:	0007883a 	mov	r3,zero
1000cf70:	00004b06 	br	1000d0a0 <__udivdi3+0x2d4>
1000cf74:	3000041e 	bne	r6,zero,1000cf88 <__udivdi3+0x1bc>
1000cf78:	01000044 	movi	r4,1
1000cf7c:	000b883a 	mov	r5,zero
1000cf80:	00039dc0 	call	100039dc <__udivsi3>
1000cf84:	1025883a 	mov	r18,r2
1000cf88:	00bfffd4 	movui	r2,65535
1000cf8c:	14805b2e 	bgeu	r2,r18,1000d0fc <__udivdi3+0x330>
1000cf90:	00804034 	movhi	r2,256
1000cf94:	10bfffc4 	addi	r2,r2,-1
1000cf98:	1480fe2e 	bgeu	r2,r18,1000d394 <__udivdi3+0x5c8>
1000cf9c:	00800604 	movi	r2,24
1000cfa0:	1007883a 	mov	r3,r2
1000cfa4:	9084d83a 	srl	r2,r18,r2
1000cfa8:	01040074 	movhi	r4,4097
1000cfac:	210ce804 	addi	r4,r4,13216
1000cfb0:	2085883a 	add	r2,r4,r2
1000cfb4:	11800003 	ldbu	r6,0(r2)
1000cfb8:	01c00804 	movi	r7,32
1000cfbc:	30c7883a 	add	r3,r6,r3
1000cfc0:	38cfc83a 	sub	r7,r7,r3
1000cfc4:	3800a71e 	bne	r7,zero,1000d264 <__udivdi3+0x498>
1000cfc8:	9028d43a 	srli	r20,r18,16
1000cfcc:	84a1c83a 	sub	r16,r16,r18
1000cfd0:	957fffcc 	andi	r21,r18,65535
1000cfd4:	00c00044 	movi	r3,1
1000cfd8:	8009883a 	mov	r4,r16
1000cfdc:	a00b883a 	mov	r5,r20
1000cfe0:	d8c00015 	stw	r3,0(sp)
1000cfe4:	00039e40 	call	100039e4 <__umodsi3>
1000cfe8:	8009883a 	mov	r4,r16
1000cfec:	a00b883a 	mov	r5,r20
1000cff0:	102d883a 	mov	r22,r2
1000cff4:	00039dc0 	call	100039dc <__udivsi3>
1000cff8:	1009883a 	mov	r4,r2
1000cffc:	a80b883a 	mov	r5,r21
1000d000:	1021883a 	mov	r16,r2
1000d004:	00039ec0 	call	100039ec <__mulsi3>
1000d008:	b02c943a 	slli	r22,r22,16
1000d00c:	880ed43a 	srli	r7,r17,16
1000d010:	d8c00017 	ldw	r3,0(sp)
1000d014:	b1ccb03a 	or	r6,r22,r7
1000d018:	3080052e 	bgeu	r6,r2,1000d030 <__udivdi3+0x264>
1000d01c:	348d883a 	add	r6,r6,r18
1000d020:	813fffc4 	addi	r4,r16,-1
1000d024:	34800136 	bltu	r6,r18,1000d02c <__udivdi3+0x260>
1000d028:	3080f236 	bltu	r6,r2,1000d3f4 <__udivdi3+0x628>
1000d02c:	2021883a 	mov	r16,r4
1000d030:	30a7c83a 	sub	r19,r6,r2
1000d034:	9809883a 	mov	r4,r19
1000d038:	a00b883a 	mov	r5,r20
1000d03c:	d8c00015 	stw	r3,0(sp)
1000d040:	00039e40 	call	100039e4 <__umodsi3>
1000d044:	102d883a 	mov	r22,r2
1000d048:	9809883a 	mov	r4,r19
1000d04c:	a00b883a 	mov	r5,r20
1000d050:	b02c943a 	slli	r22,r22,16
1000d054:	00039dc0 	call	100039dc <__udivsi3>
1000d058:	1009883a 	mov	r4,r2
1000d05c:	a80b883a 	mov	r5,r21
1000d060:	8c7fffcc 	andi	r17,r17,65535
1000d064:	1027883a 	mov	r19,r2
1000d068:	b462b03a 	or	r17,r22,r17
1000d06c:	00039ec0 	call	100039ec <__mulsi3>
1000d070:	d8c00017 	ldw	r3,0(sp)
1000d074:	8880052e 	bgeu	r17,r2,1000d08c <__udivdi3+0x2c0>
1000d078:	8ca3883a 	add	r17,r17,r18
1000d07c:	993fffc4 	addi	r4,r19,-1
1000d080:	8c80af36 	bltu	r17,r18,1000d340 <__udivdi3+0x574>
1000d084:	8880ae2e 	bgeu	r17,r2,1000d340 <__udivdi3+0x574>
1000d088:	9cffff84 	addi	r19,r19,-2
1000d08c:	8020943a 	slli	r16,r16,16
1000d090:	9c04b03a 	or	r2,r19,r16
1000d094:	00000206 	br	1000d0a0 <__udivdi3+0x2d4>
1000d098:	0007883a 	mov	r3,zero
1000d09c:	0005883a 	mov	r2,zero
1000d0a0:	dfc00a17 	ldw	ra,40(sp)
1000d0a4:	df000917 	ldw	fp,36(sp)
1000d0a8:	ddc00817 	ldw	r23,32(sp)
1000d0ac:	dd800717 	ldw	r22,28(sp)
1000d0b0:	dd400617 	ldw	r21,24(sp)
1000d0b4:	dd000517 	ldw	r20,20(sp)
1000d0b8:	dcc00417 	ldw	r19,16(sp)
1000d0bc:	dc800317 	ldw	r18,12(sp)
1000d0c0:	dc400217 	ldw	r17,8(sp)
1000d0c4:	dc000117 	ldw	r16,4(sp)
1000d0c8:	dec00b04 	addi	sp,sp,44
1000d0cc:	f800283a 	ret
1000d0d0:	00803fc4 	movi	r2,255
1000d0d4:	11c0a92e 	bgeu	r2,r7,1000d37c <__udivdi3+0x5b0>
1000d0d8:	01400204 	movi	r5,8
1000d0dc:	2811883a 	mov	r8,r5
1000d0e0:	003f9706 	br	1000cf40 <__alt_data_end+0xf800cf40>
1000d0e4:	00804034 	movhi	r2,256
1000d0e8:	10bfffc4 	addi	r2,r2,-1
1000d0ec:	1180a62e 	bgeu	r2,r6,1000d388 <__udivdi3+0x5bc>
1000d0f0:	00800604 	movi	r2,24
1000d0f4:	1007883a 	mov	r3,r2
1000d0f8:	003f4c06 	br	1000ce2c <__alt_data_end+0xf800ce2c>
1000d0fc:	00803fc4 	movi	r2,255
1000d100:	1480a72e 	bgeu	r2,r18,1000d3a0 <__udivdi3+0x5d4>
1000d104:	00800204 	movi	r2,8
1000d108:	1007883a 	mov	r3,r2
1000d10c:	003fa506 	br	1000cfa4 <__alt_data_end+0xf800cfa4>
1000d110:	3178d83a 	srl	fp,r6,r5
1000d114:	3dce983a 	sll	r7,r7,r23
1000d118:	8168d83a 	srl	r20,r16,r5
1000d11c:	9950d83a 	srl	r8,r19,r5
1000d120:	3f38b03a 	or	fp,r7,fp
1000d124:	e024d43a 	srli	r18,fp,16
1000d128:	85e0983a 	sll	r16,r16,r23
1000d12c:	a009883a 	mov	r4,r20
1000d130:	900b883a 	mov	r5,r18
1000d134:	8220b03a 	or	r16,r16,r8
1000d138:	35ea983a 	sll	r21,r6,r23
1000d13c:	00039e40 	call	100039e4 <__umodsi3>
1000d140:	a009883a 	mov	r4,r20
1000d144:	900b883a 	mov	r5,r18
1000d148:	1023883a 	mov	r17,r2
1000d14c:	e5bfffcc 	andi	r22,fp,65535
1000d150:	00039dc0 	call	100039dc <__udivsi3>
1000d154:	1009883a 	mov	r4,r2
1000d158:	b00b883a 	mov	r5,r22
1000d15c:	1029883a 	mov	r20,r2
1000d160:	00039ec0 	call	100039ec <__mulsi3>
1000d164:	8806943a 	slli	r3,r17,16
1000d168:	8014d43a 	srli	r10,r16,16
1000d16c:	1a92b03a 	or	r9,r3,r10
1000d170:	4880042e 	bgeu	r9,r2,1000d184 <__udivdi3+0x3b8>
1000d174:	4f13883a 	add	r9,r9,fp
1000d178:	a0ffffc4 	addi	r3,r20,-1
1000d17c:	4f00952e 	bgeu	r9,fp,1000d3d4 <__udivdi3+0x608>
1000d180:	1829883a 	mov	r20,r3
1000d184:	48a3c83a 	sub	r17,r9,r2
1000d188:	8809883a 	mov	r4,r17
1000d18c:	900b883a 	mov	r5,r18
1000d190:	00039e40 	call	100039e4 <__umodsi3>
1000d194:	8809883a 	mov	r4,r17
1000d198:	900b883a 	mov	r5,r18
1000d19c:	d8800015 	stw	r2,0(sp)
1000d1a0:	00039dc0 	call	100039dc <__udivsi3>
1000d1a4:	1009883a 	mov	r4,r2
1000d1a8:	b00b883a 	mov	r5,r22
1000d1ac:	1023883a 	mov	r17,r2
1000d1b0:	00039ec0 	call	100039ec <__mulsi3>
1000d1b4:	d8c00017 	ldw	r3,0(sp)
1000d1b8:	823fffcc 	andi	r8,r16,65535
1000d1bc:	1806943a 	slli	r3,r3,16
1000d1c0:	1a20b03a 	or	r16,r3,r8
1000d1c4:	8080042e 	bgeu	r16,r2,1000d1d8 <__udivdi3+0x40c>
1000d1c8:	8721883a 	add	r16,r16,fp
1000d1cc:	88ffffc4 	addi	r3,r17,-1
1000d1d0:	87007c2e 	bgeu	r16,fp,1000d3c4 <__udivdi3+0x5f8>
1000d1d4:	1823883a 	mov	r17,r3
1000d1d8:	a028943a 	slli	r20,r20,16
1000d1dc:	acbfffcc 	andi	r18,r21,65535
1000d1e0:	900b883a 	mov	r5,r18
1000d1e4:	8d28b03a 	or	r20,r17,r20
1000d1e8:	a022d43a 	srli	r17,r20,16
1000d1ec:	a5bfffcc 	andi	r22,r20,65535
1000d1f0:	b009883a 	mov	r4,r22
1000d1f4:	a82ad43a 	srli	r21,r21,16
1000d1f8:	80a1c83a 	sub	r16,r16,r2
1000d1fc:	00039ec0 	call	100039ec <__mulsi3>
1000d200:	8809883a 	mov	r4,r17
1000d204:	900b883a 	mov	r5,r18
1000d208:	1039883a 	mov	fp,r2
1000d20c:	00039ec0 	call	100039ec <__mulsi3>
1000d210:	8809883a 	mov	r4,r17
1000d214:	a80b883a 	mov	r5,r21
1000d218:	1025883a 	mov	r18,r2
1000d21c:	00039ec0 	call	100039ec <__mulsi3>
1000d220:	b009883a 	mov	r4,r22
1000d224:	a80b883a 	mov	r5,r21
1000d228:	1023883a 	mov	r17,r2
1000d22c:	00039ec0 	call	100039ec <__mulsi3>
1000d230:	e006d43a 	srli	r3,fp,16
1000d234:	9085883a 	add	r2,r18,r2
1000d238:	10c7883a 	add	r3,r2,r3
1000d23c:	1c80022e 	bgeu	r3,r18,1000d248 <__udivdi3+0x47c>
1000d240:	00800074 	movhi	r2,1
1000d244:	88a3883a 	add	r17,r17,r2
1000d248:	1808d43a 	srli	r4,r3,16
1000d24c:	8909883a 	add	r4,r17,r4
1000d250:	81004436 	bltu	r16,r4,1000d364 <__udivdi3+0x598>
1000d254:	81003e26 	beq	r16,r4,1000d350 <__udivdi3+0x584>
1000d258:	a005883a 	mov	r2,r20
1000d25c:	0007883a 	mov	r3,zero
1000d260:	003f8f06 	br	1000d0a0 <__alt_data_end+0xf800d0a0>
1000d264:	91e4983a 	sll	r18,r18,r7
1000d268:	80eed83a 	srl	r23,r16,r3
1000d26c:	81cc983a 	sll	r6,r16,r7
1000d270:	9028d43a 	srli	r20,r18,16
1000d274:	98c6d83a 	srl	r3,r19,r3
1000d278:	b809883a 	mov	r4,r23
1000d27c:	a00b883a 	mov	r5,r20
1000d280:	30ecb03a 	or	r22,r6,r3
1000d284:	99e2983a 	sll	r17,r19,r7
1000d288:	00039e40 	call	100039e4 <__umodsi3>
1000d28c:	b809883a 	mov	r4,r23
1000d290:	a00b883a 	mov	r5,r20
1000d294:	1021883a 	mov	r16,r2
1000d298:	957fffcc 	andi	r21,r18,65535
1000d29c:	00039dc0 	call	100039dc <__udivsi3>
1000d2a0:	a80b883a 	mov	r5,r21
1000d2a4:	1009883a 	mov	r4,r2
1000d2a8:	102f883a 	mov	r23,r2
1000d2ac:	00039ec0 	call	100039ec <__mulsi3>
1000d2b0:	8020943a 	slli	r16,r16,16
1000d2b4:	b00ad43a 	srli	r5,r22,16
1000d2b8:	814cb03a 	or	r6,r16,r5
1000d2bc:	3080062e 	bgeu	r6,r2,1000d2d8 <__udivdi3+0x50c>
1000d2c0:	348d883a 	add	r6,r6,r18
1000d2c4:	b8ffffc4 	addi	r3,r23,-1
1000d2c8:	34804836 	bltu	r6,r18,1000d3ec <__udivdi3+0x620>
1000d2cc:	3080472e 	bgeu	r6,r2,1000d3ec <__udivdi3+0x620>
1000d2d0:	bdffff84 	addi	r23,r23,-2
1000d2d4:	348d883a 	add	r6,r6,r18
1000d2d8:	30a7c83a 	sub	r19,r6,r2
1000d2dc:	9809883a 	mov	r4,r19
1000d2e0:	a00b883a 	mov	r5,r20
1000d2e4:	00039e40 	call	100039e4 <__umodsi3>
1000d2e8:	9809883a 	mov	r4,r19
1000d2ec:	a00b883a 	mov	r5,r20
1000d2f0:	1039883a 	mov	fp,r2
1000d2f4:	00039dc0 	call	100039dc <__udivsi3>
1000d2f8:	1009883a 	mov	r4,r2
1000d2fc:	a80b883a 	mov	r5,r21
1000d300:	e038943a 	slli	fp,fp,16
1000d304:	1027883a 	mov	r19,r2
1000d308:	00039ec0 	call	100039ec <__mulsi3>
1000d30c:	b1bfffcc 	andi	r6,r22,65535
1000d310:	e18cb03a 	or	r6,fp,r6
1000d314:	3080062e 	bgeu	r6,r2,1000d330 <__udivdi3+0x564>
1000d318:	348d883a 	add	r6,r6,r18
1000d31c:	98ffffc4 	addi	r3,r19,-1
1000d320:	34803036 	bltu	r6,r18,1000d3e4 <__udivdi3+0x618>
1000d324:	30802f2e 	bgeu	r6,r2,1000d3e4 <__udivdi3+0x618>
1000d328:	9cffff84 	addi	r19,r19,-2
1000d32c:	348d883a 	add	r6,r6,r18
1000d330:	b82e943a 	slli	r23,r23,16
1000d334:	30a1c83a 	sub	r16,r6,r2
1000d338:	9dc6b03a 	or	r3,r19,r23
1000d33c:	003f2606 	br	1000cfd8 <__alt_data_end+0xf800cfd8>
1000d340:	2027883a 	mov	r19,r4
1000d344:	003f5106 	br	1000d08c <__alt_data_end+0xf800d08c>
1000d348:	1827883a 	mov	r19,r3
1000d34c:	003ef006 	br	1000cf10 <__alt_data_end+0xf800cf10>
1000d350:	1808943a 	slli	r4,r3,16
1000d354:	9dc6983a 	sll	r3,r19,r23
1000d358:	e73fffcc 	andi	fp,fp,65535
1000d35c:	2709883a 	add	r4,r4,fp
1000d360:	193fbd2e 	bgeu	r3,r4,1000d258 <__alt_data_end+0xf800d258>
1000d364:	a0bfffc4 	addi	r2,r20,-1
1000d368:	0007883a 	mov	r3,zero
1000d36c:	003f4c06 	br	1000d0a0 <__alt_data_end+0xf800d0a0>
1000d370:	01400404 	movi	r5,16
1000d374:	2811883a 	mov	r8,r5
1000d378:	003ef106 	br	1000cf40 <__alt_data_end+0xf800cf40>
1000d37c:	000b883a 	mov	r5,zero
1000d380:	0011883a 	mov	r8,zero
1000d384:	003eee06 	br	1000cf40 <__alt_data_end+0xf800cf40>
1000d388:	00800404 	movi	r2,16
1000d38c:	1007883a 	mov	r3,r2
1000d390:	003ea606 	br	1000ce2c <__alt_data_end+0xf800ce2c>
1000d394:	00800404 	movi	r2,16
1000d398:	1007883a 	mov	r3,r2
1000d39c:	003f0106 	br	1000cfa4 <__alt_data_end+0xf800cfa4>
1000d3a0:	0005883a 	mov	r2,zero
1000d3a4:	0007883a 	mov	r3,zero
1000d3a8:	003efe06 	br	1000cfa4 <__alt_data_end+0xf800cfa4>
1000d3ac:	0005883a 	mov	r2,zero
1000d3b0:	0007883a 	mov	r3,zero
1000d3b4:	003e9d06 	br	1000ce2c <__alt_data_end+0xf800ce2c>
1000d3b8:	0007883a 	mov	r3,zero
1000d3bc:	00800044 	movi	r2,1
1000d3c0:	003f3706 	br	1000d0a0 <__alt_data_end+0xf800d0a0>
1000d3c4:	80bf832e 	bgeu	r16,r2,1000d1d4 <__alt_data_end+0xf800d1d4>
1000d3c8:	8c7fff84 	addi	r17,r17,-2
1000d3cc:	8721883a 	add	r16,r16,fp
1000d3d0:	003f8106 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000d3d4:	48bf6a2e 	bgeu	r9,r2,1000d180 <__alt_data_end+0xf800d180>
1000d3d8:	a53fff84 	addi	r20,r20,-2
1000d3dc:	4f13883a 	add	r9,r9,fp
1000d3e0:	003f6806 	br	1000d184 <__alt_data_end+0xf800d184>
1000d3e4:	1827883a 	mov	r19,r3
1000d3e8:	003fd106 	br	1000d330 <__alt_data_end+0xf800d330>
1000d3ec:	182f883a 	mov	r23,r3
1000d3f0:	003fb906 	br	1000d2d8 <__alt_data_end+0xf800d2d8>
1000d3f4:	843fff84 	addi	r16,r16,-2
1000d3f8:	348d883a 	add	r6,r6,r18
1000d3fc:	003f0c06 	br	1000d030 <__alt_data_end+0xf800d030>
1000d400:	843fff84 	addi	r16,r16,-2
1000d404:	1c87883a 	add	r3,r3,r18
1000d408:	003eac06 	br	1000cebc <__alt_data_end+0xf800cebc>

1000d40c <__umoddi3>:
1000d40c:	defff404 	addi	sp,sp,-48
1000d410:	dd800815 	stw	r22,32(sp)
1000d414:	dc400315 	stw	r17,12(sp)
1000d418:	dc000215 	stw	r16,8(sp)
1000d41c:	dfc00b15 	stw	ra,44(sp)
1000d420:	df000a15 	stw	fp,40(sp)
1000d424:	ddc00915 	stw	r23,36(sp)
1000d428:	dd400715 	stw	r21,28(sp)
1000d42c:	dd000615 	stw	r20,24(sp)
1000d430:	dcc00515 	stw	r19,20(sp)
1000d434:	dc800415 	stw	r18,16(sp)
1000d438:	2021883a 	mov	r16,r4
1000d43c:	2823883a 	mov	r17,r5
1000d440:	282d883a 	mov	r22,r5
1000d444:	38003c1e 	bne	r7,zero,1000d538 <__umoddi3+0x12c>
1000d448:	3027883a 	mov	r19,r6
1000d44c:	2029883a 	mov	r20,r4
1000d450:	2980522e 	bgeu	r5,r6,1000d59c <__umoddi3+0x190>
1000d454:	00bfffd4 	movui	r2,65535
1000d458:	1180a436 	bltu	r2,r6,1000d6ec <__umoddi3+0x2e0>
1000d45c:	00803fc4 	movi	r2,255
1000d460:	11815e2e 	bgeu	r2,r6,1000d9dc <__umoddi3+0x5d0>
1000d464:	01400204 	movi	r5,8
1000d468:	2805883a 	mov	r2,r5
1000d46c:	314ad83a 	srl	r5,r6,r5
1000d470:	00c40074 	movhi	r3,4097
1000d474:	18cce804 	addi	r3,r3,13216
1000d478:	194b883a 	add	r5,r3,r5
1000d47c:	29000003 	ldbu	r4,0(r5)
1000d480:	2089883a 	add	r4,r4,r2
1000d484:	00800804 	movi	r2,32
1000d488:	1105c83a 	sub	r2,r2,r4
1000d48c:	10010c26 	beq	r2,zero,1000d8c0 <__umoddi3+0x4b4>
1000d490:	88a2983a 	sll	r17,r17,r2
1000d494:	8108d83a 	srl	r4,r16,r4
1000d498:	30a6983a 	sll	r19,r6,r2
1000d49c:	80a8983a 	sll	r20,r16,r2
1000d4a0:	1025883a 	mov	r18,r2
1000d4a4:	892cb03a 	or	r22,r17,r4
1000d4a8:	9822d43a 	srli	r17,r19,16
1000d4ac:	b009883a 	mov	r4,r22
1000d4b0:	9d7fffcc 	andi	r21,r19,65535
1000d4b4:	880b883a 	mov	r5,r17
1000d4b8:	00039e40 	call	100039e4 <__umodsi3>
1000d4bc:	b009883a 	mov	r4,r22
1000d4c0:	880b883a 	mov	r5,r17
1000d4c4:	102f883a 	mov	r23,r2
1000d4c8:	00039dc0 	call	100039dc <__udivsi3>
1000d4cc:	1009883a 	mov	r4,r2
1000d4d0:	a80b883a 	mov	r5,r21
1000d4d4:	00039ec0 	call	100039ec <__mulsi3>
1000d4d8:	b82e943a 	slli	r23,r23,16
1000d4dc:	a008d43a 	srli	r4,r20,16
1000d4e0:	b906b03a 	or	r3,r23,r4
1000d4e4:	1880042e 	bgeu	r3,r2,1000d4f8 <__umoddi3+0xec>
1000d4e8:	1cc7883a 	add	r3,r3,r19
1000d4ec:	1cc00236 	bltu	r3,r19,1000d4f8 <__umoddi3+0xec>
1000d4f0:	1880012e 	bgeu	r3,r2,1000d4f8 <__umoddi3+0xec>
1000d4f4:	1cc7883a 	add	r3,r3,r19
1000d4f8:	18a1c83a 	sub	r16,r3,r2
1000d4fc:	8009883a 	mov	r4,r16
1000d500:	880b883a 	mov	r5,r17
1000d504:	00039e40 	call	100039e4 <__umodsi3>
1000d508:	8009883a 	mov	r4,r16
1000d50c:	880b883a 	mov	r5,r17
1000d510:	102d883a 	mov	r22,r2
1000d514:	00039dc0 	call	100039dc <__udivsi3>
1000d518:	1009883a 	mov	r4,r2
1000d51c:	a80b883a 	mov	r5,r21
1000d520:	b02c943a 	slli	r22,r22,16
1000d524:	00039ec0 	call	100039ec <__mulsi3>
1000d528:	a13fffcc 	andi	r4,r20,65535
1000d52c:	b106b03a 	or	r3,r22,r4
1000d530:	1880572e 	bgeu	r3,r2,1000d690 <__umoddi3+0x284>
1000d534:	00005206 	br	1000d680 <__umoddi3+0x274>
1000d538:	29c05936 	bltu	r5,r7,1000d6a0 <__umoddi3+0x294>
1000d53c:	00bfffd4 	movui	r2,65535
1000d540:	11c0652e 	bgeu	r2,r7,1000d6d8 <__umoddi3+0x2cc>
1000d544:	00804034 	movhi	r2,256
1000d548:	10bfffc4 	addi	r2,r2,-1
1000d54c:	11c1172e 	bgeu	r2,r7,1000d9ac <__umoddi3+0x5a0>
1000d550:	01400604 	movi	r5,24
1000d554:	282b883a 	mov	r21,r5
1000d558:	394ad83a 	srl	r5,r7,r5
1000d55c:	00c40074 	movhi	r3,4097
1000d560:	18cce804 	addi	r3,r3,13216
1000d564:	194b883a 	add	r5,r3,r5
1000d568:	28800003 	ldbu	r2,0(r5)
1000d56c:	00c00804 	movi	r3,32
1000d570:	156b883a 	add	r21,r2,r21
1000d574:	1d69c83a 	sub	r20,r3,r21
1000d578:	a000671e 	bne	r20,zero,1000d718 <__umoddi3+0x30c>
1000d57c:	3c400136 	bltu	r7,r17,1000d584 <__umoddi3+0x178>
1000d580:	81812336 	bltu	r16,r6,1000da10 <__umoddi3+0x604>
1000d584:	8185c83a 	sub	r2,r16,r6
1000d588:	89e3c83a 	sub	r17,r17,r7
1000d58c:	8087803a 	cmpltu	r3,r16,r2
1000d590:	88edc83a 	sub	r22,r17,r3
1000d594:	b007883a 	mov	r3,r22
1000d598:	00004306 	br	1000d6a8 <__umoddi3+0x29c>
1000d59c:	3000041e 	bne	r6,zero,1000d5b0 <__umoddi3+0x1a4>
1000d5a0:	01000044 	movi	r4,1
1000d5a4:	000b883a 	mov	r5,zero
1000d5a8:	00039dc0 	call	100039dc <__udivsi3>
1000d5ac:	1027883a 	mov	r19,r2
1000d5b0:	00bfffd4 	movui	r2,65535
1000d5b4:	14c0532e 	bgeu	r2,r19,1000d704 <__umoddi3+0x2f8>
1000d5b8:	00804034 	movhi	r2,256
1000d5bc:	10bfffc4 	addi	r2,r2,-1
1000d5c0:	14c1032e 	bgeu	r2,r19,1000d9d0 <__umoddi3+0x5c4>
1000d5c4:	00800604 	movi	r2,24
1000d5c8:	1007883a 	mov	r3,r2
1000d5cc:	9884d83a 	srl	r2,r19,r2
1000d5d0:	01040074 	movhi	r4,4097
1000d5d4:	210ce804 	addi	r4,r4,13216
1000d5d8:	2085883a 	add	r2,r4,r2
1000d5dc:	11000003 	ldbu	r4,0(r2)
1000d5e0:	00800804 	movi	r2,32
1000d5e4:	20c7883a 	add	r3,r4,r3
1000d5e8:	10c5c83a 	sub	r2,r2,r3
1000d5ec:	1000b61e 	bne	r2,zero,1000d8c8 <__umoddi3+0x4bc>
1000d5f0:	982ad43a 	srli	r21,r19,16
1000d5f4:	8ce3c83a 	sub	r17,r17,r19
1000d5f8:	9dbfffcc 	andi	r22,r19,65535
1000d5fc:	0025883a 	mov	r18,zero
1000d600:	8809883a 	mov	r4,r17
1000d604:	a80b883a 	mov	r5,r21
1000d608:	00039e40 	call	100039e4 <__umodsi3>
1000d60c:	8809883a 	mov	r4,r17
1000d610:	a80b883a 	mov	r5,r21
1000d614:	102f883a 	mov	r23,r2
1000d618:	00039dc0 	call	100039dc <__udivsi3>
1000d61c:	1009883a 	mov	r4,r2
1000d620:	b00b883a 	mov	r5,r22
1000d624:	00039ec0 	call	100039ec <__mulsi3>
1000d628:	b82e943a 	slli	r23,r23,16
1000d62c:	a008d43a 	srli	r4,r20,16
1000d630:	b906b03a 	or	r3,r23,r4
1000d634:	1880032e 	bgeu	r3,r2,1000d644 <__umoddi3+0x238>
1000d638:	1cc7883a 	add	r3,r3,r19
1000d63c:	1cc00136 	bltu	r3,r19,1000d644 <__umoddi3+0x238>
1000d640:	1880f136 	bltu	r3,r2,1000da08 <__umoddi3+0x5fc>
1000d644:	18a1c83a 	sub	r16,r3,r2
1000d648:	8009883a 	mov	r4,r16
1000d64c:	a80b883a 	mov	r5,r21
1000d650:	00039e40 	call	100039e4 <__umodsi3>
1000d654:	8009883a 	mov	r4,r16
1000d658:	a80b883a 	mov	r5,r21
1000d65c:	1023883a 	mov	r17,r2
1000d660:	00039dc0 	call	100039dc <__udivsi3>
1000d664:	1009883a 	mov	r4,r2
1000d668:	b00b883a 	mov	r5,r22
1000d66c:	8822943a 	slli	r17,r17,16
1000d670:	00039ec0 	call	100039ec <__mulsi3>
1000d674:	a13fffcc 	andi	r4,r20,65535
1000d678:	8906b03a 	or	r3,r17,r4
1000d67c:	1880042e 	bgeu	r3,r2,1000d690 <__umoddi3+0x284>
1000d680:	1cc7883a 	add	r3,r3,r19
1000d684:	1cc00236 	bltu	r3,r19,1000d690 <__umoddi3+0x284>
1000d688:	1880012e 	bgeu	r3,r2,1000d690 <__umoddi3+0x284>
1000d68c:	1cc7883a 	add	r3,r3,r19
1000d690:	1887c83a 	sub	r3,r3,r2
1000d694:	1c84d83a 	srl	r2,r3,r18
1000d698:	0007883a 	mov	r3,zero
1000d69c:	00000206 	br	1000d6a8 <__umoddi3+0x29c>
1000d6a0:	2005883a 	mov	r2,r4
1000d6a4:	2807883a 	mov	r3,r5
1000d6a8:	dfc00b17 	ldw	ra,44(sp)
1000d6ac:	df000a17 	ldw	fp,40(sp)
1000d6b0:	ddc00917 	ldw	r23,36(sp)
1000d6b4:	dd800817 	ldw	r22,32(sp)
1000d6b8:	dd400717 	ldw	r21,28(sp)
1000d6bc:	dd000617 	ldw	r20,24(sp)
1000d6c0:	dcc00517 	ldw	r19,20(sp)
1000d6c4:	dc800417 	ldw	r18,16(sp)
1000d6c8:	dc400317 	ldw	r17,12(sp)
1000d6cc:	dc000217 	ldw	r16,8(sp)
1000d6d0:	dec00c04 	addi	sp,sp,48
1000d6d4:	f800283a 	ret
1000d6d8:	00803fc4 	movi	r2,255
1000d6dc:	11c0b02e 	bgeu	r2,r7,1000d9a0 <__umoddi3+0x594>
1000d6e0:	01400204 	movi	r5,8
1000d6e4:	282b883a 	mov	r21,r5
1000d6e8:	003f9b06 	br	1000d558 <__alt_data_end+0xf800d558>
1000d6ec:	00804034 	movhi	r2,256
1000d6f0:	10bfffc4 	addi	r2,r2,-1
1000d6f4:	1180b02e 	bgeu	r2,r6,1000d9b8 <__umoddi3+0x5ac>
1000d6f8:	01400604 	movi	r5,24
1000d6fc:	2805883a 	mov	r2,r5
1000d700:	003f5a06 	br	1000d46c <__alt_data_end+0xf800d46c>
1000d704:	00803fc4 	movi	r2,255
1000d708:	14c0ae2e 	bgeu	r2,r19,1000d9c4 <__umoddi3+0x5b8>
1000d70c:	00800204 	movi	r2,8
1000d710:	1007883a 	mov	r3,r2
1000d714:	003fad06 	br	1000d5cc <__alt_data_end+0xf800d5cc>
1000d718:	3d0a983a 	sll	r5,r7,r20
1000d71c:	356cd83a 	srl	r22,r6,r21
1000d720:	8d78d83a 	srl	fp,r17,r21
1000d724:	8d10983a 	sll	r8,r17,r20
1000d728:	2dacb03a 	or	r22,r5,r22
1000d72c:	b02ed43a 	srli	r23,r22,16
1000d730:	8564d83a 	srl	r18,r16,r21
1000d734:	e009883a 	mov	r4,fp
1000d738:	b80b883a 	mov	r5,r23
1000d73c:	44a4b03a 	or	r18,r8,r18
1000d740:	3526983a 	sll	r19,r6,r20
1000d744:	00039e40 	call	100039e4 <__umodsi3>
1000d748:	e009883a 	mov	r4,fp
1000d74c:	b80b883a 	mov	r5,r23
1000d750:	b47fffcc 	andi	r17,r22,65535
1000d754:	d8800015 	stw	r2,0(sp)
1000d758:	00039dc0 	call	100039dc <__udivsi3>
1000d75c:	1009883a 	mov	r4,r2
1000d760:	880b883a 	mov	r5,r17
1000d764:	1039883a 	mov	fp,r2
1000d768:	00039ec0 	call	100039ec <__mulsi3>
1000d76c:	d9800017 	ldw	r6,0(sp)
1000d770:	9008d43a 	srli	r4,r18,16
1000d774:	8520983a 	sll	r16,r16,r20
1000d778:	300c943a 	slli	r6,r6,16
1000d77c:	3106b03a 	or	r3,r6,r4
1000d780:	1880042e 	bgeu	r3,r2,1000d794 <__umoddi3+0x388>
1000d784:	1d87883a 	add	r3,r3,r22
1000d788:	e13fffc4 	addi	r4,fp,-1
1000d78c:	1d809a2e 	bgeu	r3,r22,1000d9f8 <__umoddi3+0x5ec>
1000d790:	2039883a 	mov	fp,r4
1000d794:	1887c83a 	sub	r3,r3,r2
1000d798:	1809883a 	mov	r4,r3
1000d79c:	b80b883a 	mov	r5,r23
1000d7a0:	d8c00115 	stw	r3,4(sp)
1000d7a4:	00039e40 	call	100039e4 <__umodsi3>
1000d7a8:	d8c00117 	ldw	r3,4(sp)
1000d7ac:	b80b883a 	mov	r5,r23
1000d7b0:	d8800015 	stw	r2,0(sp)
1000d7b4:	1809883a 	mov	r4,r3
1000d7b8:	00039dc0 	call	100039dc <__udivsi3>
1000d7bc:	880b883a 	mov	r5,r17
1000d7c0:	1009883a 	mov	r4,r2
1000d7c4:	102f883a 	mov	r23,r2
1000d7c8:	00039ec0 	call	100039ec <__mulsi3>
1000d7cc:	d9800017 	ldw	r6,0(sp)
1000d7d0:	947fffcc 	andi	r17,r18,65535
1000d7d4:	300c943a 	slli	r6,r6,16
1000d7d8:	3464b03a 	or	r18,r6,r17
1000d7dc:	9080042e 	bgeu	r18,r2,1000d7f0 <__umoddi3+0x3e4>
1000d7e0:	95a5883a 	add	r18,r18,r22
1000d7e4:	b8ffffc4 	addi	r3,r23,-1
1000d7e8:	95807f2e 	bgeu	r18,r22,1000d9e8 <__umoddi3+0x5dc>
1000d7ec:	182f883a 	mov	r23,r3
1000d7f0:	e038943a 	slli	fp,fp,16
1000d7f4:	980cd43a 	srli	r6,r19,16
1000d7f8:	98ffffcc 	andi	r3,r19,65535
1000d7fc:	bf38b03a 	or	fp,r23,fp
1000d800:	e02ed43a 	srli	r23,fp,16
1000d804:	e73fffcc 	andi	fp,fp,65535
1000d808:	180b883a 	mov	r5,r3
1000d80c:	e009883a 	mov	r4,fp
1000d810:	d9800015 	stw	r6,0(sp)
1000d814:	d8c00115 	stw	r3,4(sp)
1000d818:	90a5c83a 	sub	r18,r18,r2
1000d81c:	00039ec0 	call	100039ec <__mulsi3>
1000d820:	d8c00117 	ldw	r3,4(sp)
1000d824:	b809883a 	mov	r4,r23
1000d828:	1023883a 	mov	r17,r2
1000d82c:	180b883a 	mov	r5,r3
1000d830:	00039ec0 	call	100039ec <__mulsi3>
1000d834:	d9800017 	ldw	r6,0(sp)
1000d838:	b809883a 	mov	r4,r23
1000d83c:	d8800115 	stw	r2,4(sp)
1000d840:	300b883a 	mov	r5,r6
1000d844:	302f883a 	mov	r23,r6
1000d848:	00039ec0 	call	100039ec <__mulsi3>
1000d84c:	e009883a 	mov	r4,fp
1000d850:	b80b883a 	mov	r5,r23
1000d854:	d8800015 	stw	r2,0(sp)
1000d858:	00039ec0 	call	100039ec <__mulsi3>
1000d85c:	d8c00117 	ldw	r3,4(sp)
1000d860:	880cd43a 	srli	r6,r17,16
1000d864:	d9c00017 	ldw	r7,0(sp)
1000d868:	1885883a 	add	r2,r3,r2
1000d86c:	118d883a 	add	r6,r2,r6
1000d870:	30c0022e 	bgeu	r6,r3,1000d87c <__umoddi3+0x470>
1000d874:	00800074 	movhi	r2,1
1000d878:	388f883a 	add	r7,r7,r2
1000d87c:	3006d43a 	srli	r3,r6,16
1000d880:	300c943a 	slli	r6,r6,16
1000d884:	8c7fffcc 	andi	r17,r17,65535
1000d888:	38c7883a 	add	r3,r7,r3
1000d88c:	3463883a 	add	r17,r6,r17
1000d890:	90c03d36 	bltu	r18,r3,1000d988 <__umoddi3+0x57c>
1000d894:	90c06026 	beq	r18,r3,1000da18 <__umoddi3+0x60c>
1000d898:	90c9c83a 	sub	r4,r18,r3
1000d89c:	880f883a 	mov	r7,r17
1000d8a0:	81cfc83a 	sub	r7,r16,r7
1000d8a4:	81c7803a 	cmpltu	r3,r16,r7
1000d8a8:	20c7c83a 	sub	r3,r4,r3
1000d8ac:	1d44983a 	sll	r2,r3,r21
1000d8b0:	3d0ed83a 	srl	r7,r7,r20
1000d8b4:	1d06d83a 	srl	r3,r3,r20
1000d8b8:	11c4b03a 	or	r2,r2,r7
1000d8bc:	003f7a06 	br	1000d6a8 <__alt_data_end+0xf800d6a8>
1000d8c0:	0025883a 	mov	r18,zero
1000d8c4:	003ef806 	br	1000d4a8 <__alt_data_end+0xf800d4a8>
1000d8c8:	98a6983a 	sll	r19,r19,r2
1000d8cc:	88e8d83a 	srl	r20,r17,r3
1000d8d0:	80c6d83a 	srl	r3,r16,r3
1000d8d4:	982ad43a 	srli	r21,r19,16
1000d8d8:	88a2983a 	sll	r17,r17,r2
1000d8dc:	a009883a 	mov	r4,r20
1000d8e0:	a80b883a 	mov	r5,r21
1000d8e4:	88eeb03a 	or	r23,r17,r3
1000d8e8:	1025883a 	mov	r18,r2
1000d8ec:	00039e40 	call	100039e4 <__umodsi3>
1000d8f0:	a009883a 	mov	r4,r20
1000d8f4:	a80b883a 	mov	r5,r21
1000d8f8:	1023883a 	mov	r17,r2
1000d8fc:	9dbfffcc 	andi	r22,r19,65535
1000d900:	00039dc0 	call	100039dc <__udivsi3>
1000d904:	1009883a 	mov	r4,r2
1000d908:	b00b883a 	mov	r5,r22
1000d90c:	00039ec0 	call	100039ec <__mulsi3>
1000d910:	8822943a 	slli	r17,r17,16
1000d914:	b808d43a 	srli	r4,r23,16
1000d918:	84a8983a 	sll	r20,r16,r18
1000d91c:	8906b03a 	or	r3,r17,r4
1000d920:	1880042e 	bgeu	r3,r2,1000d934 <__umoddi3+0x528>
1000d924:	1cc7883a 	add	r3,r3,r19
1000d928:	1cc00236 	bltu	r3,r19,1000d934 <__umoddi3+0x528>
1000d92c:	1880012e 	bgeu	r3,r2,1000d934 <__umoddi3+0x528>
1000d930:	1cc7883a 	add	r3,r3,r19
1000d934:	18a1c83a 	sub	r16,r3,r2
1000d938:	8009883a 	mov	r4,r16
1000d93c:	a80b883a 	mov	r5,r21
1000d940:	00039e40 	call	100039e4 <__umodsi3>
1000d944:	8009883a 	mov	r4,r16
1000d948:	a80b883a 	mov	r5,r21
1000d94c:	1039883a 	mov	fp,r2
1000d950:	00039dc0 	call	100039dc <__udivsi3>
1000d954:	1009883a 	mov	r4,r2
1000d958:	b00b883a 	mov	r5,r22
1000d95c:	00039ec0 	call	100039ec <__mulsi3>
1000d960:	e006943a 	slli	r3,fp,16
1000d964:	b93fffcc 	andi	r4,r23,65535
1000d968:	1906b03a 	or	r3,r3,r4
1000d96c:	1880042e 	bgeu	r3,r2,1000d980 <__umoddi3+0x574>
1000d970:	1cc7883a 	add	r3,r3,r19
1000d974:	1cc00236 	bltu	r3,r19,1000d980 <__umoddi3+0x574>
1000d978:	1880012e 	bgeu	r3,r2,1000d980 <__umoddi3+0x574>
1000d97c:	1cc7883a 	add	r3,r3,r19
1000d980:	18a3c83a 	sub	r17,r3,r2
1000d984:	003f1e06 	br	1000d600 <__alt_data_end+0xf800d600>
1000d988:	8ccfc83a 	sub	r7,r17,r19
1000d98c:	1d89c83a 	sub	r4,r3,r22
1000d990:	89e3803a 	cmpltu	r17,r17,r7
1000d994:	2463c83a 	sub	r17,r4,r17
1000d998:	9449c83a 	sub	r4,r18,r17
1000d99c:	003fc006 	br	1000d8a0 <__alt_data_end+0xf800d8a0>
1000d9a0:	000b883a 	mov	r5,zero
1000d9a4:	002b883a 	mov	r21,zero
1000d9a8:	003eeb06 	br	1000d558 <__alt_data_end+0xf800d558>
1000d9ac:	01400404 	movi	r5,16
1000d9b0:	282b883a 	mov	r21,r5
1000d9b4:	003ee806 	br	1000d558 <__alt_data_end+0xf800d558>
1000d9b8:	01400404 	movi	r5,16
1000d9bc:	2805883a 	mov	r2,r5
1000d9c0:	003eaa06 	br	1000d46c <__alt_data_end+0xf800d46c>
1000d9c4:	0005883a 	mov	r2,zero
1000d9c8:	0007883a 	mov	r3,zero
1000d9cc:	003eff06 	br	1000d5cc <__alt_data_end+0xf800d5cc>
1000d9d0:	00800404 	movi	r2,16
1000d9d4:	1007883a 	mov	r3,r2
1000d9d8:	003efc06 	br	1000d5cc <__alt_data_end+0xf800d5cc>
1000d9dc:	000b883a 	mov	r5,zero
1000d9e0:	0005883a 	mov	r2,zero
1000d9e4:	003ea106 	br	1000d46c <__alt_data_end+0xf800d46c>
1000d9e8:	90bf802e 	bgeu	r18,r2,1000d7ec <__alt_data_end+0xf800d7ec>
1000d9ec:	bdffff84 	addi	r23,r23,-2
1000d9f0:	95a5883a 	add	r18,r18,r22
1000d9f4:	003f7e06 	br	1000d7f0 <__alt_data_end+0xf800d7f0>
1000d9f8:	18bf652e 	bgeu	r3,r2,1000d790 <__alt_data_end+0xf800d790>
1000d9fc:	e73fff84 	addi	fp,fp,-2
1000da00:	1d87883a 	add	r3,r3,r22
1000da04:	003f6306 	br	1000d794 <__alt_data_end+0xf800d794>
1000da08:	1cc7883a 	add	r3,r3,r19
1000da0c:	003f0d06 	br	1000d644 <__alt_data_end+0xf800d644>
1000da10:	8005883a 	mov	r2,r16
1000da14:	003edf06 	br	1000d594 <__alt_data_end+0xf800d594>
1000da18:	847fdb36 	bltu	r16,r17,1000d988 <__alt_data_end+0xf800d988>
1000da1c:	880f883a 	mov	r7,r17
1000da20:	0009883a 	mov	r4,zero
1000da24:	003f9e06 	br	1000d8a0 <__alt_data_end+0xf800d8a0>

1000da28 <__adddf3>:
1000da28:	02000434 	movhi	r8,16
1000da2c:	423fffc4 	addi	r8,r8,-1
1000da30:	defffb04 	addi	sp,sp,-20
1000da34:	2a12703a 	and	r9,r5,r8
1000da38:	2806d7fa 	srli	r3,r5,31
1000da3c:	3a10703a 	and	r8,r7,r8
1000da40:	3804d53a 	srli	r2,r7,20
1000da44:	3014d77a 	srli	r10,r6,29
1000da48:	dc000015 	stw	r16,0(sp)
1000da4c:	481290fa 	slli	r9,r9,3
1000da50:	2820d53a 	srli	r16,r5,20
1000da54:	401090fa 	slli	r8,r8,3
1000da58:	200ad77a 	srli	r5,r4,29
1000da5c:	380ed7fa 	srli	r7,r7,31
1000da60:	dc800215 	stw	r18,8(sp)
1000da64:	dc400115 	stw	r17,4(sp)
1000da68:	dfc00415 	stw	ra,16(sp)
1000da6c:	dcc00315 	stw	r19,12(sp)
1000da70:	1c803fcc 	andi	r18,r3,255
1000da74:	8401ffcc 	andi	r16,r16,2047
1000da78:	494ab03a 	or	r5,r9,r5
1000da7c:	202290fa 	slli	r17,r4,3
1000da80:	1081ffcc 	andi	r2,r2,2047
1000da84:	4290b03a 	or	r8,r8,r10
1000da88:	300c90fa 	slli	r6,r6,3
1000da8c:	91c07026 	beq	r18,r7,1000dc50 <__adddf3+0x228>
1000da90:	8087c83a 	sub	r3,r16,r2
1000da94:	00c0b30e 	bge	zero,r3,1000dd64 <__adddf3+0x33c>
1000da98:	10002a1e 	bne	r2,zero,1000db44 <__adddf3+0x11c>
1000da9c:	4184b03a 	or	r2,r8,r6
1000daa0:	1000991e 	bne	r2,zero,1000dd08 <__adddf3+0x2e0>
1000daa4:	888001cc 	andi	r2,r17,7
1000daa8:	10005b26 	beq	r2,zero,1000dc18 <__adddf3+0x1f0>
1000daac:	88c003cc 	andi	r3,r17,15
1000dab0:	00800104 	movi	r2,4
1000dab4:	18805826 	beq	r3,r2,1000dc18 <__adddf3+0x1f0>
1000dab8:	89800104 	addi	r6,r17,4
1000dabc:	3463803a 	cmpltu	r17,r6,r17
1000dac0:	2c4b883a 	add	r5,r5,r17
1000dac4:	2880202c 	andhi	r2,r5,128
1000dac8:	9007883a 	mov	r3,r18
1000dacc:	3023883a 	mov	r17,r6
1000dad0:	10005426 	beq	r2,zero,1000dc24 <__adddf3+0x1fc>
1000dad4:	84000044 	addi	r16,r16,1
1000dad8:	0081ffc4 	movi	r2,2047
1000dadc:	8080c126 	beq	r16,r2,1000dde4 <__adddf3+0x3bc>
1000dae0:	013fe034 	movhi	r4,65408
1000dae4:	213fffc4 	addi	r4,r4,-1
1000dae8:	290a703a 	and	r5,r5,r4
1000daec:	2804977a 	slli	r2,r5,29
1000daf0:	280a927a 	slli	r5,r5,9
1000daf4:	8822d0fa 	srli	r17,r17,3
1000daf8:	8401ffcc 	andi	r16,r16,2047
1000dafc:	2808d33a 	srli	r4,r5,12
1000db00:	1444b03a 	or	r2,r2,r17
1000db04:	8401ffcc 	andi	r16,r16,2047
1000db08:	800a953a 	slli	r5,r16,20
1000db0c:	18c03fcc 	andi	r3,r3,255
1000db10:	04000434 	movhi	r16,16
1000db14:	180697fa 	slli	r3,r3,31
1000db18:	843fffc4 	addi	r16,r16,-1
1000db1c:	2420703a 	and	r16,r4,r16
1000db20:	8160b03a 	or	r16,r16,r5
1000db24:	80c6b03a 	or	r3,r16,r3
1000db28:	dfc00417 	ldw	ra,16(sp)
1000db2c:	dcc00317 	ldw	r19,12(sp)
1000db30:	dc800217 	ldw	r18,8(sp)
1000db34:	dc400117 	ldw	r17,4(sp)
1000db38:	dc000017 	ldw	r16,0(sp)
1000db3c:	dec00504 	addi	sp,sp,20
1000db40:	f800283a 	ret
1000db44:	0081ffc4 	movi	r2,2047
1000db48:	80bfd626 	beq	r16,r2,1000daa4 <__alt_data_end+0xf800daa4>
1000db4c:	42002034 	orhi	r8,r8,128
1000db50:	00800e04 	movi	r2,56
1000db54:	10c0a616 	blt	r2,r3,1000ddf0 <__adddf3+0x3c8>
1000db58:	008007c4 	movi	r2,31
1000db5c:	10c0c916 	blt	r2,r3,1000de84 <__adddf3+0x45c>
1000db60:	00800804 	movi	r2,32
1000db64:	10c5c83a 	sub	r2,r2,r3
1000db68:	408e983a 	sll	r7,r8,r2
1000db6c:	30c8d83a 	srl	r4,r6,r3
1000db70:	3084983a 	sll	r2,r6,r2
1000db74:	40c6d83a 	srl	r3,r8,r3
1000db78:	390cb03a 	or	r6,r7,r4
1000db7c:	1004c03a 	cmpne	r2,r2,zero
1000db80:	308cb03a 	or	r6,r6,r2
1000db84:	898dc83a 	sub	r6,r17,r6
1000db88:	89a3803a 	cmpltu	r17,r17,r6
1000db8c:	28cbc83a 	sub	r5,r5,r3
1000db90:	2c4bc83a 	sub	r5,r5,r17
1000db94:	3023883a 	mov	r17,r6
1000db98:	2880202c 	andhi	r2,r5,128
1000db9c:	10006d26 	beq	r2,zero,1000dd54 <__adddf3+0x32c>
1000dba0:	04c02034 	movhi	r19,128
1000dba4:	9cffffc4 	addi	r19,r19,-1
1000dba8:	2ce6703a 	and	r19,r5,r19
1000dbac:	98007e26 	beq	r19,zero,1000dda8 <__adddf3+0x380>
1000dbb0:	9809883a 	mov	r4,r19
1000dbb4:	00101c00 	call	100101c0 <__clzsi2>
1000dbb8:	10fffe04 	addi	r3,r2,-8
1000dbbc:	010007c4 	movi	r4,31
1000dbc0:	20c07f16 	blt	r4,r3,1000ddc0 <__adddf3+0x398>
1000dbc4:	01400a04 	movi	r5,40
1000dbc8:	2885c83a 	sub	r2,r5,r2
1000dbcc:	888ad83a 	srl	r5,r17,r2
1000dbd0:	98e6983a 	sll	r19,r19,r3
1000dbd4:	88e2983a 	sll	r17,r17,r3
1000dbd8:	2ce6b03a 	or	r19,r5,r19
1000dbdc:	1c007c16 	blt	r3,r16,1000ddd0 <__adddf3+0x3a8>
1000dbe0:	1c21c83a 	sub	r16,r3,r16
1000dbe4:	81400044 	addi	r5,r16,1
1000dbe8:	00c007c4 	movi	r3,31
1000dbec:	19409816 	blt	r3,r5,1000de50 <__adddf3+0x428>
1000dbf0:	1c21c83a 	sub	r16,r3,r16
1000dbf4:	8c08983a 	sll	r4,r17,r16
1000dbf8:	8946d83a 	srl	r3,r17,r5
1000dbfc:	9c20983a 	sll	r16,r19,r16
1000dc00:	2008c03a 	cmpne	r4,r4,zero
1000dc04:	994ad83a 	srl	r5,r19,r5
1000dc08:	1c06b03a 	or	r3,r3,r16
1000dc0c:	1922b03a 	or	r17,r3,r4
1000dc10:	0021883a 	mov	r16,zero
1000dc14:	003fa306 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000dc18:	2880202c 	andhi	r2,r5,128
1000dc1c:	9007883a 	mov	r3,r18
1000dc20:	103fac1e 	bne	r2,zero,1000dad4 <__alt_data_end+0xf800dad4>
1000dc24:	2804977a 	slli	r2,r5,29
1000dc28:	8822d0fa 	srli	r17,r17,3
1000dc2c:	0101ffc4 	movi	r4,2047
1000dc30:	280ad0fa 	srli	r5,r5,3
1000dc34:	1444b03a 	or	r2,r2,r17
1000dc38:	81002c26 	beq	r16,r4,1000dcec <__adddf3+0x2c4>
1000dc3c:	8120703a 	and	r16,r16,r4
1000dc40:	01000434 	movhi	r4,16
1000dc44:	213fffc4 	addi	r4,r4,-1
1000dc48:	2908703a 	and	r4,r5,r4
1000dc4c:	003fad06 	br	1000db04 <__alt_data_end+0xf800db04>
1000dc50:	8089c83a 	sub	r4,r16,r2
1000dc54:	01006a0e 	bge	zero,r4,1000de00 <__adddf3+0x3d8>
1000dc58:	10003326 	beq	r2,zero,1000dd28 <__adddf3+0x300>
1000dc5c:	0081ffc4 	movi	r2,2047
1000dc60:	80bf9026 	beq	r16,r2,1000daa4 <__alt_data_end+0xf800daa4>
1000dc64:	42002034 	orhi	r8,r8,128
1000dc68:	00800e04 	movi	r2,56
1000dc6c:	1100b116 	blt	r2,r4,1000df34 <__adddf3+0x50c>
1000dc70:	008007c4 	movi	r2,31
1000dc74:	1100e216 	blt	r2,r4,1000e000 <__adddf3+0x5d8>
1000dc78:	00800804 	movi	r2,32
1000dc7c:	1105c83a 	sub	r2,r2,r4
1000dc80:	4092983a 	sll	r9,r8,r2
1000dc84:	310ed83a 	srl	r7,r6,r4
1000dc88:	3084983a 	sll	r2,r6,r2
1000dc8c:	4110d83a 	srl	r8,r8,r4
1000dc90:	49ccb03a 	or	r6,r9,r7
1000dc94:	1004c03a 	cmpne	r2,r2,zero
1000dc98:	308cb03a 	or	r6,r6,r2
1000dc9c:	344d883a 	add	r6,r6,r17
1000dca0:	3463803a 	cmpltu	r17,r6,r17
1000dca4:	414b883a 	add	r5,r8,r5
1000dca8:	2c4b883a 	add	r5,r5,r17
1000dcac:	3023883a 	mov	r17,r6
1000dcb0:	2880202c 	andhi	r2,r5,128
1000dcb4:	10002726 	beq	r2,zero,1000dd54 <__adddf3+0x32c>
1000dcb8:	84000044 	addi	r16,r16,1
1000dcbc:	0081ffc4 	movi	r2,2047
1000dcc0:	8080ae26 	beq	r16,r2,1000df7c <__adddf3+0x554>
1000dcc4:	00bfe034 	movhi	r2,65408
1000dcc8:	10bfffc4 	addi	r2,r2,-1
1000dccc:	288a703a 	and	r5,r5,r2
1000dcd0:	880cd07a 	srli	r6,r17,1
1000dcd4:	280897fa 	slli	r4,r5,31
1000dcd8:	88c0004c 	andi	r3,r17,1
1000dcdc:	30e2b03a 	or	r17,r6,r3
1000dce0:	280ad07a 	srli	r5,r5,1
1000dce4:	8922b03a 	or	r17,r17,r4
1000dce8:	003f6e06 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000dcec:	1148b03a 	or	r4,r2,r5
1000dcf0:	20003c26 	beq	r4,zero,1000dde4 <__adddf3+0x3bc>
1000dcf4:	29000234 	orhi	r4,r5,8
1000dcf8:	01400434 	movhi	r5,16
1000dcfc:	297fffc4 	addi	r5,r5,-1
1000dd00:	2148703a 	and	r4,r4,r5
1000dd04:	003f7f06 	br	1000db04 <__alt_data_end+0xf800db04>
1000dd08:	18ffffc4 	addi	r3,r3,-1
1000dd0c:	18004d1e 	bne	r3,zero,1000de44 <__adddf3+0x41c>
1000dd10:	898dc83a 	sub	r6,r17,r6
1000dd14:	89a3803a 	cmpltu	r17,r17,r6
1000dd18:	2a0bc83a 	sub	r5,r5,r8
1000dd1c:	2c4bc83a 	sub	r5,r5,r17
1000dd20:	3023883a 	mov	r17,r6
1000dd24:	003f9c06 	br	1000db98 <__alt_data_end+0xf800db98>
1000dd28:	4184b03a 	or	r2,r8,r6
1000dd2c:	103f5d26 	beq	r2,zero,1000daa4 <__alt_data_end+0xf800daa4>
1000dd30:	213fffc4 	addi	r4,r4,-1
1000dd34:	203fd926 	beq	r4,zero,1000dc9c <__alt_data_end+0xf800dc9c>
1000dd38:	0081ffc4 	movi	r2,2047
1000dd3c:	80bfca1e 	bne	r16,r2,1000dc68 <__alt_data_end+0xf800dc68>
1000dd40:	003f5806 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000dd44:	10c8b03a 	or	r4,r2,r3
1000dd48:	20008b26 	beq	r4,zero,1000df78 <__adddf3+0x550>
1000dd4c:	100b883a 	mov	r5,r2
1000dd50:	1823883a 	mov	r17,r3
1000dd54:	888001cc 	andi	r2,r17,7
1000dd58:	103f541e 	bne	r2,zero,1000daac <__alt_data_end+0xf800daac>
1000dd5c:	9007883a 	mov	r3,r18
1000dd60:	003fb006 	br	1000dc24 <__alt_data_end+0xf800dc24>
1000dd64:	1800531e 	bne	r3,zero,1000deb4 <__adddf3+0x48c>
1000dd68:	80800044 	addi	r2,r16,1
1000dd6c:	1081ffcc 	andi	r2,r2,2047
1000dd70:	00c00044 	movi	r3,1
1000dd74:	1880990e 	bge	r3,r2,1000dfdc <__adddf3+0x5b4>
1000dd78:	8985c83a 	sub	r2,r17,r6
1000dd7c:	8887803a 	cmpltu	r3,r17,r2
1000dd80:	2a27c83a 	sub	r19,r5,r8
1000dd84:	98e7c83a 	sub	r19,r19,r3
1000dd88:	98c0202c 	andhi	r3,r19,128
1000dd8c:	18006226 	beq	r3,zero,1000df18 <__adddf3+0x4f0>
1000dd90:	3463c83a 	sub	r17,r6,r17
1000dd94:	4151c83a 	sub	r8,r8,r5
1000dd98:	344d803a 	cmpltu	r6,r6,r17
1000dd9c:	41a7c83a 	sub	r19,r8,r6
1000dda0:	3825883a 	mov	r18,r7
1000dda4:	983f821e 	bne	r19,zero,1000dbb0 <__alt_data_end+0xf800dbb0>
1000dda8:	8809883a 	mov	r4,r17
1000ddac:	00101c00 	call	100101c0 <__clzsi2>
1000ddb0:	10800804 	addi	r2,r2,32
1000ddb4:	10fffe04 	addi	r3,r2,-8
1000ddb8:	010007c4 	movi	r4,31
1000ddbc:	20ff810e 	bge	r4,r3,1000dbc4 <__alt_data_end+0xf800dbc4>
1000ddc0:	14fff604 	addi	r19,r2,-40
1000ddc4:	8ce6983a 	sll	r19,r17,r19
1000ddc8:	0023883a 	mov	r17,zero
1000ddcc:	1c3f840e 	bge	r3,r16,1000dbe0 <__alt_data_end+0xf800dbe0>
1000ddd0:	017fe034 	movhi	r5,65408
1000ddd4:	297fffc4 	addi	r5,r5,-1
1000ddd8:	80e1c83a 	sub	r16,r16,r3
1000dddc:	994a703a 	and	r5,r19,r5
1000dde0:	003f3006 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000dde4:	0009883a 	mov	r4,zero
1000dde8:	0005883a 	mov	r2,zero
1000ddec:	003f4506 	br	1000db04 <__alt_data_end+0xf800db04>
1000ddf0:	418cb03a 	or	r6,r8,r6
1000ddf4:	300cc03a 	cmpne	r6,r6,zero
1000ddf8:	0007883a 	mov	r3,zero
1000ddfc:	003f6106 	br	1000db84 <__alt_data_end+0xf800db84>
1000de00:	2000921e 	bne	r4,zero,1000e04c <__adddf3+0x624>
1000de04:	80800044 	addi	r2,r16,1
1000de08:	11c1ffcc 	andi	r7,r2,2047
1000de0c:	01000044 	movi	r4,1
1000de10:	21c0610e 	bge	r4,r7,1000df98 <__adddf3+0x570>
1000de14:	0101ffc4 	movi	r4,2047
1000de18:	1100a326 	beq	r2,r4,1000e0a8 <__adddf3+0x680>
1000de1c:	344d883a 	add	r6,r6,r17
1000de20:	3463803a 	cmpltu	r17,r6,r17
1000de24:	414b883a 	add	r5,r8,r5
1000de28:	2c4b883a 	add	r5,r5,r17
1000de2c:	282297fa 	slli	r17,r5,31
1000de30:	300cd07a 	srli	r6,r6,1
1000de34:	280ad07a 	srli	r5,r5,1
1000de38:	1021883a 	mov	r16,r2
1000de3c:	89a2b03a 	or	r17,r17,r6
1000de40:	003f1806 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000de44:	0081ffc4 	movi	r2,2047
1000de48:	80bf411e 	bne	r16,r2,1000db50 <__alt_data_end+0xf800db50>
1000de4c:	003f1506 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000de50:	80bff844 	addi	r2,r16,-31
1000de54:	00c00804 	movi	r3,32
1000de58:	9884d83a 	srl	r2,r19,r2
1000de5c:	28c04a26 	beq	r5,r3,1000df88 <__adddf3+0x560>
1000de60:	00c00fc4 	movi	r3,63
1000de64:	1c21c83a 	sub	r16,r3,r16
1000de68:	9c26983a 	sll	r19,r19,r16
1000de6c:	9c62b03a 	or	r17,r19,r17
1000de70:	8822c03a 	cmpne	r17,r17,zero
1000de74:	88a2b03a 	or	r17,r17,r2
1000de78:	000b883a 	mov	r5,zero
1000de7c:	0021883a 	mov	r16,zero
1000de80:	003fb406 	br	1000dd54 <__alt_data_end+0xf800dd54>
1000de84:	18bff804 	addi	r2,r3,-32
1000de88:	01000804 	movi	r4,32
1000de8c:	4084d83a 	srl	r2,r8,r2
1000de90:	19003f26 	beq	r3,r4,1000df90 <__adddf3+0x568>
1000de94:	01001004 	movi	r4,64
1000de98:	20c7c83a 	sub	r3,r4,r3
1000de9c:	40d0983a 	sll	r8,r8,r3
1000dea0:	418cb03a 	or	r6,r8,r6
1000dea4:	300cc03a 	cmpne	r6,r6,zero
1000dea8:	308cb03a 	or	r6,r6,r2
1000deac:	0007883a 	mov	r3,zero
1000deb0:	003f3406 	br	1000db84 <__alt_data_end+0xf800db84>
1000deb4:	80002326 	beq	r16,zero,1000df44 <__adddf3+0x51c>
1000deb8:	0101ffc4 	movi	r4,2047
1000debc:	11005e26 	beq	r2,r4,1000e038 <__adddf3+0x610>
1000dec0:	00c7c83a 	sub	r3,zero,r3
1000dec4:	29402034 	orhi	r5,r5,128
1000dec8:	01000e04 	movi	r4,56
1000decc:	20c07216 	blt	r4,r3,1000e098 <__adddf3+0x670>
1000ded0:	010007c4 	movi	r4,31
1000ded4:	20c0ce16 	blt	r4,r3,1000e210 <__adddf3+0x7e8>
1000ded8:	01000804 	movi	r4,32
1000dedc:	20c9c83a 	sub	r4,r4,r3
1000dee0:	2914983a 	sll	r10,r5,r4
1000dee4:	88d2d83a 	srl	r9,r17,r3
1000dee8:	8908983a 	sll	r4,r17,r4
1000deec:	28c6d83a 	srl	r3,r5,r3
1000def0:	5262b03a 	or	r17,r10,r9
1000def4:	2008c03a 	cmpne	r4,r4,zero
1000def8:	8922b03a 	or	r17,r17,r4
1000defc:	3463c83a 	sub	r17,r6,r17
1000df00:	40c7c83a 	sub	r3,r8,r3
1000df04:	344d803a 	cmpltu	r6,r6,r17
1000df08:	198bc83a 	sub	r5,r3,r6
1000df0c:	1021883a 	mov	r16,r2
1000df10:	3825883a 	mov	r18,r7
1000df14:	003f2006 	br	1000db98 <__alt_data_end+0xf800db98>
1000df18:	9886b03a 	or	r3,r19,r2
1000df1c:	1800141e 	bne	r3,zero,1000df70 <__adddf3+0x548>
1000df20:	0007883a 	mov	r3,zero
1000df24:	000b883a 	mov	r5,zero
1000df28:	0023883a 	mov	r17,zero
1000df2c:	0021883a 	mov	r16,zero
1000df30:	003f3c06 	br	1000dc24 <__alt_data_end+0xf800dc24>
1000df34:	418cb03a 	or	r6,r8,r6
1000df38:	300cc03a 	cmpne	r6,r6,zero
1000df3c:	0011883a 	mov	r8,zero
1000df40:	003f5606 	br	1000dc9c <__alt_data_end+0xf800dc9c>
1000df44:	2c48b03a 	or	r4,r5,r17
1000df48:	20003b26 	beq	r4,zero,1000e038 <__adddf3+0x610>
1000df4c:	00c6303a 	nor	r3,zero,r3
1000df50:	1800371e 	bne	r3,zero,1000e030 <__adddf3+0x608>
1000df54:	3463c83a 	sub	r17,r6,r17
1000df58:	414bc83a 	sub	r5,r8,r5
1000df5c:	344d803a 	cmpltu	r6,r6,r17
1000df60:	298bc83a 	sub	r5,r5,r6
1000df64:	1021883a 	mov	r16,r2
1000df68:	3825883a 	mov	r18,r7
1000df6c:	003f0a06 	br	1000db98 <__alt_data_end+0xf800db98>
1000df70:	1023883a 	mov	r17,r2
1000df74:	003f0d06 	br	1000dbac <__alt_data_end+0xf800dbac>
1000df78:	0007883a 	mov	r3,zero
1000df7c:	000b883a 	mov	r5,zero
1000df80:	0023883a 	mov	r17,zero
1000df84:	003f2706 	br	1000dc24 <__alt_data_end+0xf800dc24>
1000df88:	0027883a 	mov	r19,zero
1000df8c:	003fb706 	br	1000de6c <__alt_data_end+0xf800de6c>
1000df90:	0011883a 	mov	r8,zero
1000df94:	003fc206 	br	1000dea0 <__alt_data_end+0xf800dea0>
1000df98:	2c44b03a 	or	r2,r5,r17
1000df9c:	8000871e 	bne	r16,zero,1000e1bc <__adddf3+0x794>
1000dfa0:	1000b126 	beq	r2,zero,1000e268 <__adddf3+0x840>
1000dfa4:	4184b03a 	or	r2,r8,r6
1000dfa8:	103ebe26 	beq	r2,zero,1000daa4 <__alt_data_end+0xf800daa4>
1000dfac:	3445883a 	add	r2,r6,r17
1000dfb0:	1463803a 	cmpltu	r17,r2,r17
1000dfb4:	414b883a 	add	r5,r8,r5
1000dfb8:	2c4b883a 	add	r5,r5,r17
1000dfbc:	28c0202c 	andhi	r3,r5,128
1000dfc0:	1023883a 	mov	r17,r2
1000dfc4:	183f6326 	beq	r3,zero,1000dd54 <__alt_data_end+0xf800dd54>
1000dfc8:	00bfe034 	movhi	r2,65408
1000dfcc:	10bfffc4 	addi	r2,r2,-1
1000dfd0:	2021883a 	mov	r16,r4
1000dfd4:	288a703a 	and	r5,r5,r2
1000dfd8:	003eb206 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000dfdc:	2c44b03a 	or	r2,r5,r17
1000dfe0:	8000251e 	bne	r16,zero,1000e078 <__adddf3+0x650>
1000dfe4:	10004b1e 	bne	r2,zero,1000e114 <__adddf3+0x6ec>
1000dfe8:	4184b03a 	or	r2,r8,r6
1000dfec:	103fe226 	beq	r2,zero,1000df78 <__alt_data_end+0xf800df78>
1000dff0:	400b883a 	mov	r5,r8
1000dff4:	3023883a 	mov	r17,r6
1000dff8:	3825883a 	mov	r18,r7
1000dffc:	003ea906 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e000:	20bff804 	addi	r2,r4,-32
1000e004:	01c00804 	movi	r7,32
1000e008:	4084d83a 	srl	r2,r8,r2
1000e00c:	21c07e26 	beq	r4,r7,1000e208 <__adddf3+0x7e0>
1000e010:	01c01004 	movi	r7,64
1000e014:	3909c83a 	sub	r4,r7,r4
1000e018:	4110983a 	sll	r8,r8,r4
1000e01c:	418cb03a 	or	r6,r8,r6
1000e020:	300cc03a 	cmpne	r6,r6,zero
1000e024:	308cb03a 	or	r6,r6,r2
1000e028:	0011883a 	mov	r8,zero
1000e02c:	003f1b06 	br	1000dc9c <__alt_data_end+0xf800dc9c>
1000e030:	0101ffc4 	movi	r4,2047
1000e034:	113fa41e 	bne	r2,r4,1000dec8 <__alt_data_end+0xf800dec8>
1000e038:	400b883a 	mov	r5,r8
1000e03c:	3023883a 	mov	r17,r6
1000e040:	1021883a 	mov	r16,r2
1000e044:	3825883a 	mov	r18,r7
1000e048:	003e9606 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e04c:	80001a1e 	bne	r16,zero,1000e0b8 <__adddf3+0x690>
1000e050:	2c4eb03a 	or	r7,r5,r17
1000e054:	38005526 	beq	r7,zero,1000e1ac <__adddf3+0x784>
1000e058:	0108303a 	nor	r4,zero,r4
1000e05c:	2000511e 	bne	r4,zero,1000e1a4 <__adddf3+0x77c>
1000e060:	89a3883a 	add	r17,r17,r6
1000e064:	414b883a 	add	r5,r8,r5
1000e068:	898d803a 	cmpltu	r6,r17,r6
1000e06c:	298b883a 	add	r5,r5,r6
1000e070:	1021883a 	mov	r16,r2
1000e074:	003f0e06 	br	1000dcb0 <__alt_data_end+0xf800dcb0>
1000e078:	1000341e 	bne	r2,zero,1000e14c <__adddf3+0x724>
1000e07c:	4184b03a 	or	r2,r8,r6
1000e080:	10006f26 	beq	r2,zero,1000e240 <__adddf3+0x818>
1000e084:	400b883a 	mov	r5,r8
1000e088:	3023883a 	mov	r17,r6
1000e08c:	3825883a 	mov	r18,r7
1000e090:	0401ffc4 	movi	r16,2047
1000e094:	003e8306 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e098:	2c62b03a 	or	r17,r5,r17
1000e09c:	8822c03a 	cmpne	r17,r17,zero
1000e0a0:	0007883a 	mov	r3,zero
1000e0a4:	003f9506 	br	1000defc <__alt_data_end+0xf800defc>
1000e0a8:	1021883a 	mov	r16,r2
1000e0ac:	000b883a 	mov	r5,zero
1000e0b0:	0023883a 	mov	r17,zero
1000e0b4:	003edb06 	br	1000dc24 <__alt_data_end+0xf800dc24>
1000e0b8:	01c1ffc4 	movi	r7,2047
1000e0bc:	11c03b26 	beq	r2,r7,1000e1ac <__adddf3+0x784>
1000e0c0:	0109c83a 	sub	r4,zero,r4
1000e0c4:	29402034 	orhi	r5,r5,128
1000e0c8:	01c00e04 	movi	r7,56
1000e0cc:	39006216 	blt	r7,r4,1000e258 <__adddf3+0x830>
1000e0d0:	01c007c4 	movi	r7,31
1000e0d4:	39006b16 	blt	r7,r4,1000e284 <__adddf3+0x85c>
1000e0d8:	01c00804 	movi	r7,32
1000e0dc:	390fc83a 	sub	r7,r7,r4
1000e0e0:	29d4983a 	sll	r10,r5,r7
1000e0e4:	8912d83a 	srl	r9,r17,r4
1000e0e8:	89ce983a 	sll	r7,r17,r7
1000e0ec:	2908d83a 	srl	r4,r5,r4
1000e0f0:	5262b03a 	or	r17,r10,r9
1000e0f4:	380ac03a 	cmpne	r5,r7,zero
1000e0f8:	8962b03a 	or	r17,r17,r5
1000e0fc:	89a3883a 	add	r17,r17,r6
1000e100:	2211883a 	add	r8,r4,r8
1000e104:	898d803a 	cmpltu	r6,r17,r6
1000e108:	418b883a 	add	r5,r8,r6
1000e10c:	1021883a 	mov	r16,r2
1000e110:	003ee706 	br	1000dcb0 <__alt_data_end+0xf800dcb0>
1000e114:	4184b03a 	or	r2,r8,r6
1000e118:	103e6226 	beq	r2,zero,1000daa4 <__alt_data_end+0xf800daa4>
1000e11c:	8987c83a 	sub	r3,r17,r6
1000e120:	88c9803a 	cmpltu	r4,r17,r3
1000e124:	2a05c83a 	sub	r2,r5,r8
1000e128:	1105c83a 	sub	r2,r2,r4
1000e12c:	1100202c 	andhi	r4,r2,128
1000e130:	203f0426 	beq	r4,zero,1000dd44 <__alt_data_end+0xf800dd44>
1000e134:	3463c83a 	sub	r17,r6,r17
1000e138:	414bc83a 	sub	r5,r8,r5
1000e13c:	344d803a 	cmpltu	r6,r6,r17
1000e140:	298bc83a 	sub	r5,r5,r6
1000e144:	3825883a 	mov	r18,r7
1000e148:	003e5606 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e14c:	4184b03a 	or	r2,r8,r6
1000e150:	10002b26 	beq	r2,zero,1000e200 <__adddf3+0x7d8>
1000e154:	2804d0fa 	srli	r2,r5,3
1000e158:	8822d0fa 	srli	r17,r17,3
1000e15c:	280a977a 	slli	r5,r5,29
1000e160:	10c0022c 	andhi	r3,r2,8
1000e164:	2c62b03a 	or	r17,r5,r17
1000e168:	18000826 	beq	r3,zero,1000e18c <__adddf3+0x764>
1000e16c:	4008d0fa 	srli	r4,r8,3
1000e170:	20c0022c 	andhi	r3,r4,8
1000e174:	1800051e 	bne	r3,zero,1000e18c <__adddf3+0x764>
1000e178:	300cd0fa 	srli	r6,r6,3
1000e17c:	4010977a 	slli	r8,r8,29
1000e180:	2005883a 	mov	r2,r4
1000e184:	3825883a 	mov	r18,r7
1000e188:	41a2b03a 	or	r17,r8,r6
1000e18c:	880ad77a 	srli	r5,r17,29
1000e190:	100490fa 	slli	r2,r2,3
1000e194:	882290fa 	slli	r17,r17,3
1000e198:	0401ffc4 	movi	r16,2047
1000e19c:	288ab03a 	or	r5,r5,r2
1000e1a0:	003e4006 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e1a4:	01c1ffc4 	movi	r7,2047
1000e1a8:	11ffc71e 	bne	r2,r7,1000e0c8 <__alt_data_end+0xf800e0c8>
1000e1ac:	400b883a 	mov	r5,r8
1000e1b0:	3023883a 	mov	r17,r6
1000e1b4:	1021883a 	mov	r16,r2
1000e1b8:	003e3a06 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e1bc:	10002d26 	beq	r2,zero,1000e274 <__adddf3+0x84c>
1000e1c0:	4184b03a 	or	r2,r8,r6
1000e1c4:	10000e26 	beq	r2,zero,1000e200 <__adddf3+0x7d8>
1000e1c8:	2804d0fa 	srli	r2,r5,3
1000e1cc:	8822d0fa 	srli	r17,r17,3
1000e1d0:	280a977a 	slli	r5,r5,29
1000e1d4:	10c0022c 	andhi	r3,r2,8
1000e1d8:	2c62b03a 	or	r17,r5,r17
1000e1dc:	183feb26 	beq	r3,zero,1000e18c <__alt_data_end+0xf800e18c>
1000e1e0:	4008d0fa 	srli	r4,r8,3
1000e1e4:	20c0022c 	andhi	r3,r4,8
1000e1e8:	183fe81e 	bne	r3,zero,1000e18c <__alt_data_end+0xf800e18c>
1000e1ec:	300cd0fa 	srli	r6,r6,3
1000e1f0:	4010977a 	slli	r8,r8,29
1000e1f4:	2005883a 	mov	r2,r4
1000e1f8:	41a2b03a 	or	r17,r8,r6
1000e1fc:	003fe306 	br	1000e18c <__alt_data_end+0xf800e18c>
1000e200:	0401ffc4 	movi	r16,2047
1000e204:	003e2706 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e208:	0011883a 	mov	r8,zero
1000e20c:	003f8306 	br	1000e01c <__alt_data_end+0xf800e01c>
1000e210:	193ff804 	addi	r4,r3,-32
1000e214:	02400804 	movi	r9,32
1000e218:	2908d83a 	srl	r4,r5,r4
1000e21c:	1a402526 	beq	r3,r9,1000e2b4 <__adddf3+0x88c>
1000e220:	02401004 	movi	r9,64
1000e224:	48c7c83a 	sub	r3,r9,r3
1000e228:	28ca983a 	sll	r5,r5,r3
1000e22c:	2c62b03a 	or	r17,r5,r17
1000e230:	8822c03a 	cmpne	r17,r17,zero
1000e234:	8922b03a 	or	r17,r17,r4
1000e238:	0007883a 	mov	r3,zero
1000e23c:	003f2f06 	br	1000defc <__alt_data_end+0xf800defc>
1000e240:	01402034 	movhi	r5,128
1000e244:	0007883a 	mov	r3,zero
1000e248:	297fffc4 	addi	r5,r5,-1
1000e24c:	047ffe04 	movi	r17,-8
1000e250:	0401ffc4 	movi	r16,2047
1000e254:	003e7306 	br	1000dc24 <__alt_data_end+0xf800dc24>
1000e258:	2c62b03a 	or	r17,r5,r17
1000e25c:	8822c03a 	cmpne	r17,r17,zero
1000e260:	0009883a 	mov	r4,zero
1000e264:	003fa506 	br	1000e0fc <__alt_data_end+0xf800e0fc>
1000e268:	400b883a 	mov	r5,r8
1000e26c:	3023883a 	mov	r17,r6
1000e270:	003e0c06 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e274:	400b883a 	mov	r5,r8
1000e278:	3023883a 	mov	r17,r6
1000e27c:	0401ffc4 	movi	r16,2047
1000e280:	003e0806 	br	1000daa4 <__alt_data_end+0xf800daa4>
1000e284:	21fff804 	addi	r7,r4,-32
1000e288:	02400804 	movi	r9,32
1000e28c:	29ced83a 	srl	r7,r5,r7
1000e290:	22400a26 	beq	r4,r9,1000e2bc <__adddf3+0x894>
1000e294:	02401004 	movi	r9,64
1000e298:	4909c83a 	sub	r4,r9,r4
1000e29c:	290a983a 	sll	r5,r5,r4
1000e2a0:	2c62b03a 	or	r17,r5,r17
1000e2a4:	8822c03a 	cmpne	r17,r17,zero
1000e2a8:	89e2b03a 	or	r17,r17,r7
1000e2ac:	0009883a 	mov	r4,zero
1000e2b0:	003f9206 	br	1000e0fc <__alt_data_end+0xf800e0fc>
1000e2b4:	000b883a 	mov	r5,zero
1000e2b8:	003fdc06 	br	1000e22c <__alt_data_end+0xf800e22c>
1000e2bc:	000b883a 	mov	r5,zero
1000e2c0:	003ff706 	br	1000e2a0 <__alt_data_end+0xf800e2a0>

1000e2c4 <__divdf3>:
1000e2c4:	defff004 	addi	sp,sp,-64
1000e2c8:	dc800815 	stw	r18,32(sp)
1000e2cc:	2824d53a 	srli	r18,r5,20
1000e2d0:	dd800c15 	stw	r22,48(sp)
1000e2d4:	282cd7fa 	srli	r22,r5,31
1000e2d8:	dc000615 	stw	r16,24(sp)
1000e2dc:	04000434 	movhi	r16,16
1000e2e0:	df000e15 	stw	fp,56(sp)
1000e2e4:	dd000a15 	stw	r20,40(sp)
1000e2e8:	dcc00915 	stw	r19,36(sp)
1000e2ec:	dc400715 	stw	r17,28(sp)
1000e2f0:	843fffc4 	addi	r16,r16,-1
1000e2f4:	dfc00f15 	stw	ra,60(sp)
1000e2f8:	ddc00d15 	stw	r23,52(sp)
1000e2fc:	dd400b15 	stw	r21,44(sp)
1000e300:	9481ffcc 	andi	r18,r18,2047
1000e304:	2029883a 	mov	r20,r4
1000e308:	2027883a 	mov	r19,r4
1000e30c:	2c22703a 	and	r17,r5,r16
1000e310:	b7003fcc 	andi	fp,r22,255
1000e314:	90005e26 	beq	r18,zero,1000e490 <__divdf3+0x1cc>
1000e318:	0081ffc4 	movi	r2,2047
1000e31c:	90803526 	beq	r18,r2,1000e3f4 <__divdf3+0x130>
1000e320:	8c000434 	orhi	r16,r17,16
1000e324:	2004d77a 	srli	r2,r4,29
1000e328:	802090fa 	slli	r16,r16,3
1000e32c:	202690fa 	slli	r19,r4,3
1000e330:	94bf0044 	addi	r18,r18,-1023
1000e334:	80a2b03a 	or	r17,r16,r2
1000e338:	0029883a 	mov	r20,zero
1000e33c:	0011883a 	mov	r8,zero
1000e340:	380ad53a 	srli	r5,r7,20
1000e344:	382ed7fa 	srli	r23,r7,31
1000e348:	04000434 	movhi	r16,16
1000e34c:	843fffc4 	addi	r16,r16,-1
1000e350:	2941ffcc 	andi	r5,r5,2047
1000e354:	302b883a 	mov	r21,r6
1000e358:	3c20703a 	and	r16,r7,r16
1000e35c:	ba403fcc 	andi	r9,r23,255
1000e360:	28006726 	beq	r5,zero,1000e500 <__divdf3+0x23c>
1000e364:	0081ffc4 	movi	r2,2047
1000e368:	28805f26 	beq	r5,r2,1000e4e8 <__divdf3+0x224>
1000e36c:	84000434 	orhi	r16,r16,16
1000e370:	3004d77a 	srli	r2,r6,29
1000e374:	802090fa 	slli	r16,r16,3
1000e378:	302a90fa 	slli	r21,r6,3
1000e37c:	297f0044 	addi	r5,r5,-1023
1000e380:	80a0b03a 	or	r16,r16,r2
1000e384:	000f883a 	mov	r7,zero
1000e388:	3d06b03a 	or	r3,r7,r20
1000e38c:	180690ba 	slli	r3,r3,2
1000e390:	00840074 	movhi	r2,4097
1000e394:	10b8ed04 	addi	r2,r2,-7244
1000e398:	1885883a 	add	r2,r3,r2
1000e39c:	10800017 	ldw	r2,0(r2)
1000e3a0:	b5c8f03a 	xor	r4,r22,r23
1000e3a4:	200d883a 	mov	r6,r4
1000e3a8:	25003fcc 	andi	r20,r4,255
1000e3ac:	9165c83a 	sub	r18,r18,r5
1000e3b0:	1000683a 	jmp	r2
1000e3b4:	1000e5fc 	xorhi	zero,r2,919
1000e3b8:	1000e42c 	andhi	zero,r2,912
1000e3bc:	1000e5c0 	call	11000e5c <_gp+0xfe3edc>
1000e3c0:	1000e410 	cmplti	zero,r2,912
1000e3c4:	1000e5c0 	call	11000e5c <_gp+0xfe3edc>
1000e3c8:	1000e594 	ori	zero,r2,918
1000e3cc:	1000e5c0 	call	11000e5c <_gp+0xfe3edc>
1000e3d0:	1000e410 	cmplti	zero,r2,912
1000e3d4:	1000e42c 	andhi	zero,r2,912
1000e3d8:	1000e42c 	andhi	zero,r2,912
1000e3dc:	1000e594 	ori	zero,r2,918
1000e3e0:	1000e410 	cmplti	zero,r2,912
1000e3e4:	1000e420 	cmpeqi	zero,r2,912
1000e3e8:	1000e420 	cmpeqi	zero,r2,912
1000e3ec:	1000e420 	cmpeqi	zero,r2,912
1000e3f0:	1000e5d0 	cmplti	zero,r2,919
1000e3f4:	8904b03a 	or	r2,r17,r4
1000e3f8:	1000631e 	bne	r2,zero,1000e588 <__divdf3+0x2c4>
1000e3fc:	05000204 	movi	r20,8
1000e400:	0023883a 	mov	r17,zero
1000e404:	0027883a 	mov	r19,zero
1000e408:	02000084 	movi	r8,2
1000e40c:	003fcc06 	br	1000e340 <__alt_data_end+0xf800e340>
1000e410:	8023883a 	mov	r17,r16
1000e414:	a827883a 	mov	r19,r21
1000e418:	4839883a 	mov	fp,r9
1000e41c:	3811883a 	mov	r8,r7
1000e420:	00800084 	movi	r2,2
1000e424:	4081531e 	bne	r8,r2,1000e974 <__divdf3+0x6b0>
1000e428:	e029883a 	mov	r20,fp
1000e42c:	a180004c 	andi	r6,r20,1
1000e430:	0201ffc4 	movi	r8,2047
1000e434:	000b883a 	mov	r5,zero
1000e438:	0027883a 	mov	r19,zero
1000e43c:	4010953a 	slli	r8,r8,20
1000e440:	30c03fcc 	andi	r3,r6,255
1000e444:	04000434 	movhi	r16,16
1000e448:	180697fa 	slli	r3,r3,31
1000e44c:	843fffc4 	addi	r16,r16,-1
1000e450:	2c20703a 	and	r16,r5,r16
1000e454:	8220b03a 	or	r16,r16,r8
1000e458:	80c6b03a 	or	r3,r16,r3
1000e45c:	9805883a 	mov	r2,r19
1000e460:	dfc00f17 	ldw	ra,60(sp)
1000e464:	df000e17 	ldw	fp,56(sp)
1000e468:	ddc00d17 	ldw	r23,52(sp)
1000e46c:	dd800c17 	ldw	r22,48(sp)
1000e470:	dd400b17 	ldw	r21,44(sp)
1000e474:	dd000a17 	ldw	r20,40(sp)
1000e478:	dcc00917 	ldw	r19,36(sp)
1000e47c:	dc800817 	ldw	r18,32(sp)
1000e480:	dc400717 	ldw	r17,28(sp)
1000e484:	dc000617 	ldw	r16,24(sp)
1000e488:	dec01004 	addi	sp,sp,64
1000e48c:	f800283a 	ret
1000e490:	8904b03a 	or	r2,r17,r4
1000e494:	10003726 	beq	r2,zero,1000e574 <__divdf3+0x2b0>
1000e498:	88014d26 	beq	r17,zero,1000e9d0 <__divdf3+0x70c>
1000e49c:	8809883a 	mov	r4,r17
1000e4a0:	d9800215 	stw	r6,8(sp)
1000e4a4:	d9c00515 	stw	r7,20(sp)
1000e4a8:	00101c00 	call	100101c0 <__clzsi2>
1000e4ac:	d9800217 	ldw	r6,8(sp)
1000e4b0:	d9c00517 	ldw	r7,20(sp)
1000e4b4:	1007883a 	mov	r3,r2
1000e4b8:	01000a04 	movi	r4,40
1000e4bc:	1cfffe04 	addi	r19,r3,-8
1000e4c0:	20c9c83a 	sub	r4,r4,r3
1000e4c4:	8cca983a 	sll	r5,r17,r19
1000e4c8:	a108d83a 	srl	r4,r20,r4
1000e4cc:	a4e6983a 	sll	r19,r20,r19
1000e4d0:	2162b03a 	or	r17,r4,r5
1000e4d4:	04bf0344 	movi	r18,-1011
1000e4d8:	90e5c83a 	sub	r18,r18,r3
1000e4dc:	0029883a 	mov	r20,zero
1000e4e0:	0011883a 	mov	r8,zero
1000e4e4:	003f9606 	br	1000e340 <__alt_data_end+0xf800e340>
1000e4e8:	8184b03a 	or	r2,r16,r6
1000e4ec:	10001f1e 	bne	r2,zero,1000e56c <__divdf3+0x2a8>
1000e4f0:	0021883a 	mov	r16,zero
1000e4f4:	002b883a 	mov	r21,zero
1000e4f8:	01c00084 	movi	r7,2
1000e4fc:	003fa206 	br	1000e388 <__alt_data_end+0xf800e388>
1000e500:	8184b03a 	or	r2,r16,r6
1000e504:	10001526 	beq	r2,zero,1000e55c <__divdf3+0x298>
1000e508:	80013d26 	beq	r16,zero,1000ea00 <__divdf3+0x73c>
1000e50c:	8009883a 	mov	r4,r16
1000e510:	d9800215 	stw	r6,8(sp)
1000e514:	da000315 	stw	r8,12(sp)
1000e518:	da400415 	stw	r9,16(sp)
1000e51c:	00101c00 	call	100101c0 <__clzsi2>
1000e520:	d9800217 	ldw	r6,8(sp)
1000e524:	da000317 	ldw	r8,12(sp)
1000e528:	da400417 	ldw	r9,16(sp)
1000e52c:	1007883a 	mov	r3,r2
1000e530:	01000a04 	movi	r4,40
1000e534:	1d7ffe04 	addi	r21,r3,-8
1000e538:	20c9c83a 	sub	r4,r4,r3
1000e53c:	8560983a 	sll	r16,r16,r21
1000e540:	3108d83a 	srl	r4,r6,r4
1000e544:	356a983a 	sll	r21,r6,r21
1000e548:	2420b03a 	or	r16,r4,r16
1000e54c:	017f0344 	movi	r5,-1011
1000e550:	28cbc83a 	sub	r5,r5,r3
1000e554:	000f883a 	mov	r7,zero
1000e558:	003f8b06 	br	1000e388 <__alt_data_end+0xf800e388>
1000e55c:	0021883a 	mov	r16,zero
1000e560:	002b883a 	mov	r21,zero
1000e564:	01c00044 	movi	r7,1
1000e568:	003f8706 	br	1000e388 <__alt_data_end+0xf800e388>
1000e56c:	01c000c4 	movi	r7,3
1000e570:	003f8506 	br	1000e388 <__alt_data_end+0xf800e388>
1000e574:	05000104 	movi	r20,4
1000e578:	0023883a 	mov	r17,zero
1000e57c:	0027883a 	mov	r19,zero
1000e580:	02000044 	movi	r8,1
1000e584:	003f6e06 	br	1000e340 <__alt_data_end+0xf800e340>
1000e588:	05000304 	movi	r20,12
1000e58c:	020000c4 	movi	r8,3
1000e590:	003f6b06 	br	1000e340 <__alt_data_end+0xf800e340>
1000e594:	01400434 	movhi	r5,16
1000e598:	000d883a 	mov	r6,zero
1000e59c:	297fffc4 	addi	r5,r5,-1
1000e5a0:	04ffffc4 	movi	r19,-1
1000e5a4:	0201ffc4 	movi	r8,2047
1000e5a8:	003fa406 	br	1000e43c <__alt_data_end+0xf800e43c>
1000e5ac:	043f0084 	movi	r16,-1022
1000e5b0:	84a1c83a 	sub	r16,r16,r18
1000e5b4:	00800e04 	movi	r2,56
1000e5b8:	14014d0e 	bge	r2,r16,1000eaf0 <__divdf3+0x82c>
1000e5bc:	a180004c 	andi	r6,r20,1
1000e5c0:	0011883a 	mov	r8,zero
1000e5c4:	000b883a 	mov	r5,zero
1000e5c8:	0027883a 	mov	r19,zero
1000e5cc:	003f9b06 	br	1000e43c <__alt_data_end+0xf800e43c>
1000e5d0:	8880022c 	andhi	r2,r17,8
1000e5d4:	1000f026 	beq	r2,zero,1000e998 <__divdf3+0x6d4>
1000e5d8:	8080022c 	andhi	r2,r16,8
1000e5dc:	1000ee1e 	bne	r2,zero,1000e998 <__divdf3+0x6d4>
1000e5e0:	00800434 	movhi	r2,16
1000e5e4:	81400234 	orhi	r5,r16,8
1000e5e8:	10bfffc4 	addi	r2,r2,-1
1000e5ec:	b80d883a 	mov	r6,r23
1000e5f0:	288a703a 	and	r5,r5,r2
1000e5f4:	a827883a 	mov	r19,r21
1000e5f8:	003fea06 	br	1000e5a4 <__alt_data_end+0xf800e5a4>
1000e5fc:	84411c36 	bltu	r16,r17,1000ea70 <__divdf3+0x7ac>
1000e600:	8c011a26 	beq	r17,r16,1000ea6c <__divdf3+0x7a8>
1000e604:	94bfffc4 	addi	r18,r18,-1
1000e608:	dcc00015 	stw	r19,0(sp)
1000e60c:	8811883a 	mov	r8,r17
1000e610:	002d883a 	mov	r22,zero
1000e614:	a80cd63a 	srli	r6,r21,24
1000e618:	8020923a 	slli	r16,r16,8
1000e61c:	a82a923a 	slli	r21,r21,8
1000e620:	4009883a 	mov	r4,r8
1000e624:	342eb03a 	or	r23,r6,r16
1000e628:	dd400115 	stw	r21,4(sp)
1000e62c:	b82ad43a 	srli	r21,r23,16
1000e630:	da000315 	stw	r8,12(sp)
1000e634:	bcffffcc 	andi	r19,r23,65535
1000e638:	a80b883a 	mov	r5,r21
1000e63c:	00039dc0 	call	100039dc <__udivsi3>
1000e640:	1009883a 	mov	r4,r2
1000e644:	980b883a 	mov	r5,r19
1000e648:	1023883a 	mov	r17,r2
1000e64c:	00039ec0 	call	100039ec <__mulsi3>
1000e650:	da000317 	ldw	r8,12(sp)
1000e654:	a80b883a 	mov	r5,r21
1000e658:	1039883a 	mov	fp,r2
1000e65c:	4009883a 	mov	r4,r8
1000e660:	00039e40 	call	100039e4 <__umodsi3>
1000e664:	d8c00017 	ldw	r3,0(sp)
1000e668:	1004943a 	slli	r2,r2,16
1000e66c:	1810d43a 	srli	r8,r3,16
1000e670:	120eb03a 	or	r7,r2,r8
1000e674:	3f00062e 	bgeu	r7,fp,1000e690 <__divdf3+0x3cc>
1000e678:	3dcf883a 	add	r7,r7,r23
1000e67c:	88bfffc4 	addi	r2,r17,-1
1000e680:	3dc10a36 	bltu	r7,r23,1000eaac <__divdf3+0x7e8>
1000e684:	3f01092e 	bgeu	r7,fp,1000eaac <__divdf3+0x7e8>
1000e688:	8c7fff84 	addi	r17,r17,-2
1000e68c:	3dcf883a 	add	r7,r7,r23
1000e690:	3f39c83a 	sub	fp,r7,fp
1000e694:	e009883a 	mov	r4,fp
1000e698:	a80b883a 	mov	r5,r21
1000e69c:	00039dc0 	call	100039dc <__udivsi3>
1000e6a0:	1009883a 	mov	r4,r2
1000e6a4:	980b883a 	mov	r5,r19
1000e6a8:	1021883a 	mov	r16,r2
1000e6ac:	00039ec0 	call	100039ec <__mulsi3>
1000e6b0:	e009883a 	mov	r4,fp
1000e6b4:	a80b883a 	mov	r5,r21
1000e6b8:	d8800315 	stw	r2,12(sp)
1000e6bc:	00039e40 	call	100039e4 <__umodsi3>
1000e6c0:	d9000017 	ldw	r4,0(sp)
1000e6c4:	1004943a 	slli	r2,r2,16
1000e6c8:	da000317 	ldw	r8,12(sp)
1000e6cc:	20ffffcc 	andi	r3,r4,65535
1000e6d0:	10ceb03a 	or	r7,r2,r3
1000e6d4:	3a00062e 	bgeu	r7,r8,1000e6f0 <__divdf3+0x42c>
1000e6d8:	3dcf883a 	add	r7,r7,r23
1000e6dc:	80bfffc4 	addi	r2,r16,-1
1000e6e0:	3dc0f036 	bltu	r7,r23,1000eaa4 <__divdf3+0x7e0>
1000e6e4:	3a00ef2e 	bgeu	r7,r8,1000eaa4 <__divdf3+0x7e0>
1000e6e8:	843fff84 	addi	r16,r16,-2
1000e6ec:	3dcf883a 	add	r7,r7,r23
1000e6f0:	d8c00117 	ldw	r3,4(sp)
1000e6f4:	8822943a 	slli	r17,r17,16
1000e6f8:	3a0fc83a 	sub	r7,r7,r8
1000e6fc:	1806d43a 	srli	r3,r3,16
1000e700:	8462b03a 	or	r17,r16,r17
1000e704:	8affffcc 	andi	r11,r17,65535
1000e708:	d8c00015 	stw	r3,0(sp)
1000e70c:	d8c00117 	ldw	r3,4(sp)
1000e710:	8820d43a 	srli	r16,r17,16
1000e714:	5809883a 	mov	r4,r11
1000e718:	1f3fffcc 	andi	fp,r3,65535
1000e71c:	e00b883a 	mov	r5,fp
1000e720:	d9c00515 	stw	r7,20(sp)
1000e724:	dac00215 	stw	r11,8(sp)
1000e728:	00039ec0 	call	100039ec <__mulsi3>
1000e72c:	8009883a 	mov	r4,r16
1000e730:	e00b883a 	mov	r5,fp
1000e734:	d8800415 	stw	r2,16(sp)
1000e738:	00039ec0 	call	100039ec <__mulsi3>
1000e73c:	d9400017 	ldw	r5,0(sp)
1000e740:	8009883a 	mov	r4,r16
1000e744:	d8800315 	stw	r2,12(sp)
1000e748:	00039ec0 	call	100039ec <__mulsi3>
1000e74c:	dac00217 	ldw	r11,8(sp)
1000e750:	d9400017 	ldw	r5,0(sp)
1000e754:	d8800215 	stw	r2,8(sp)
1000e758:	5809883a 	mov	r4,r11
1000e75c:	00039ec0 	call	100039ec <__mulsi3>
1000e760:	da400417 	ldw	r9,16(sp)
1000e764:	da800317 	ldw	r10,12(sp)
1000e768:	d9c00517 	ldw	r7,20(sp)
1000e76c:	480ad43a 	srli	r5,r9,16
1000e770:	5085883a 	add	r2,r10,r2
1000e774:	db000217 	ldw	r12,8(sp)
1000e778:	1151883a 	add	r8,r2,r5
1000e77c:	4280022e 	bgeu	r8,r10,1000e788 <__divdf3+0x4c4>
1000e780:	00800074 	movhi	r2,1
1000e784:	6099883a 	add	r12,r12,r2
1000e788:	400ad43a 	srli	r5,r8,16
1000e78c:	4010943a 	slli	r8,r8,16
1000e790:	4c3fffcc 	andi	r16,r9,65535
1000e794:	6149883a 	add	r4,r12,r5
1000e798:	4411883a 	add	r8,r8,r16
1000e79c:	3900a736 	bltu	r7,r4,1000ea3c <__divdf3+0x778>
1000e7a0:	3900c426 	beq	r7,r4,1000eab4 <__divdf3+0x7f0>
1000e7a4:	3909c83a 	sub	r4,r7,r4
1000e7a8:	b221c83a 	sub	r16,r22,r8
1000e7ac:	b42d803a 	cmpltu	r22,r22,r16
1000e7b0:	25adc83a 	sub	r22,r4,r22
1000e7b4:	b5c0c626 	beq	r22,r23,1000ead0 <__divdf3+0x80c>
1000e7b8:	b009883a 	mov	r4,r22
1000e7bc:	a80b883a 	mov	r5,r21
1000e7c0:	00039dc0 	call	100039dc <__udivsi3>
1000e7c4:	1009883a 	mov	r4,r2
1000e7c8:	980b883a 	mov	r5,r19
1000e7cc:	d8800315 	stw	r2,12(sp)
1000e7d0:	00039ec0 	call	100039ec <__mulsi3>
1000e7d4:	a80b883a 	mov	r5,r21
1000e7d8:	b009883a 	mov	r4,r22
1000e7dc:	d8800415 	stw	r2,16(sp)
1000e7e0:	00039e40 	call	100039e4 <__umodsi3>
1000e7e4:	1004943a 	slli	r2,r2,16
1000e7e8:	800ed43a 	srli	r7,r16,16
1000e7ec:	da400417 	ldw	r9,16(sp)
1000e7f0:	da000317 	ldw	r8,12(sp)
1000e7f4:	11cab03a 	or	r5,r2,r7
1000e7f8:	2a40062e 	bgeu	r5,r9,1000e814 <__divdf3+0x550>
1000e7fc:	2dcb883a 	add	r5,r5,r23
1000e800:	40bfffc4 	addi	r2,r8,-1
1000e804:	2dc0b436 	bltu	r5,r23,1000ead8 <__divdf3+0x814>
1000e808:	2a40b32e 	bgeu	r5,r9,1000ead8 <__divdf3+0x814>
1000e80c:	423fff84 	addi	r8,r8,-2
1000e810:	2dcb883a 	add	r5,r5,r23
1000e814:	2a6dc83a 	sub	r22,r5,r9
1000e818:	b009883a 	mov	r4,r22
1000e81c:	a80b883a 	mov	r5,r21
1000e820:	da000315 	stw	r8,12(sp)
1000e824:	00039dc0 	call	100039dc <__udivsi3>
1000e828:	980b883a 	mov	r5,r19
1000e82c:	1009883a 	mov	r4,r2
1000e830:	d8800415 	stw	r2,16(sp)
1000e834:	00039ec0 	call	100039ec <__mulsi3>
1000e838:	b009883a 	mov	r4,r22
1000e83c:	a80b883a 	mov	r5,r21
1000e840:	1027883a 	mov	r19,r2
1000e844:	00039e40 	call	100039e4 <__umodsi3>
1000e848:	1004943a 	slli	r2,r2,16
1000e84c:	843fffcc 	andi	r16,r16,65535
1000e850:	da000317 	ldw	r8,12(sp)
1000e854:	140eb03a 	or	r7,r2,r16
1000e858:	da400417 	ldw	r9,16(sp)
1000e85c:	3cc0062e 	bgeu	r7,r19,1000e878 <__divdf3+0x5b4>
1000e860:	3dcf883a 	add	r7,r7,r23
1000e864:	48bfffc4 	addi	r2,r9,-1
1000e868:	3dc09d36 	bltu	r7,r23,1000eae0 <__divdf3+0x81c>
1000e86c:	3cc09c2e 	bgeu	r7,r19,1000eae0 <__divdf3+0x81c>
1000e870:	4a7fff84 	addi	r9,r9,-2
1000e874:	3dcf883a 	add	r7,r7,r23
1000e878:	4010943a 	slli	r8,r8,16
1000e87c:	3cebc83a 	sub	r21,r7,r19
1000e880:	e00b883a 	mov	r5,fp
1000e884:	4a26b03a 	or	r19,r9,r8
1000e888:	99ffffcc 	andi	r7,r19,65535
1000e88c:	9820d43a 	srli	r16,r19,16
1000e890:	3809883a 	mov	r4,r7
1000e894:	d9c00515 	stw	r7,20(sp)
1000e898:	00039ec0 	call	100039ec <__mulsi3>
1000e89c:	8009883a 	mov	r4,r16
1000e8a0:	e00b883a 	mov	r5,fp
1000e8a4:	102d883a 	mov	r22,r2
1000e8a8:	00039ec0 	call	100039ec <__mulsi3>
1000e8ac:	d9400017 	ldw	r5,0(sp)
1000e8b0:	8009883a 	mov	r4,r16
1000e8b4:	1039883a 	mov	fp,r2
1000e8b8:	00039ec0 	call	100039ec <__mulsi3>
1000e8bc:	d9c00517 	ldw	r7,20(sp)
1000e8c0:	d9400017 	ldw	r5,0(sp)
1000e8c4:	1021883a 	mov	r16,r2
1000e8c8:	3809883a 	mov	r4,r7
1000e8cc:	00039ec0 	call	100039ec <__mulsi3>
1000e8d0:	b008d43a 	srli	r4,r22,16
1000e8d4:	e085883a 	add	r2,fp,r2
1000e8d8:	1109883a 	add	r4,r2,r4
1000e8dc:	2700022e 	bgeu	r4,fp,1000e8e8 <__divdf3+0x624>
1000e8e0:	00800074 	movhi	r2,1
1000e8e4:	80a1883a 	add	r16,r16,r2
1000e8e8:	200ad43a 	srli	r5,r4,16
1000e8ec:	2008943a 	slli	r4,r4,16
1000e8f0:	b5bfffcc 	andi	r22,r22,65535
1000e8f4:	8145883a 	add	r2,r16,r5
1000e8f8:	2589883a 	add	r4,r4,r22
1000e8fc:	a8802c36 	bltu	r21,r2,1000e9b0 <__divdf3+0x6ec>
1000e900:	a880a426 	beq	r21,r2,1000eb94 <__divdf3+0x8d0>
1000e904:	9cc00054 	ori	r19,r19,1
1000e908:	9200ffc4 	addi	r8,r18,1023
1000e90c:	023f270e 	bge	zero,r8,1000e5ac <__alt_data_end+0xf800e5ac>
1000e910:	988001cc 	andi	r2,r19,7
1000e914:	10000726 	beq	r2,zero,1000e934 <__divdf3+0x670>
1000e918:	990003cc 	andi	r4,r19,15
1000e91c:	00800104 	movi	r2,4
1000e920:	20800426 	beq	r4,r2,1000e934 <__divdf3+0x670>
1000e924:	9885883a 	add	r2,r19,r2
1000e928:	14e7803a 	cmpltu	r19,r2,r19
1000e92c:	8ce3883a 	add	r17,r17,r19
1000e930:	1027883a 	mov	r19,r2
1000e934:	8880402c 	andhi	r2,r17,256
1000e938:	10000426 	beq	r2,zero,1000e94c <__divdf3+0x688>
1000e93c:	00bfc034 	movhi	r2,65280
1000e940:	10bfffc4 	addi	r2,r2,-1
1000e944:	92010004 	addi	r8,r18,1024
1000e948:	88a2703a 	and	r17,r17,r2
1000e94c:	0081ff84 	movi	r2,2046
1000e950:	123eb616 	blt	r2,r8,1000e42c <__alt_data_end+0xf800e42c>
1000e954:	9826d0fa 	srli	r19,r19,3
1000e958:	8804977a 	slli	r2,r17,29
1000e95c:	8820927a 	slli	r16,r17,9
1000e960:	4201ffcc 	andi	r8,r8,2047
1000e964:	14e6b03a 	or	r19,r2,r19
1000e968:	800ad33a 	srli	r5,r16,12
1000e96c:	a180004c 	andi	r6,r20,1
1000e970:	003eb206 	br	1000e43c <__alt_data_end+0xf800e43c>
1000e974:	008000c4 	movi	r2,3
1000e978:	4080ac26 	beq	r8,r2,1000ec2c <__divdf3+0x968>
1000e97c:	00800044 	movi	r2,1
1000e980:	4080591e 	bne	r8,r2,1000eae8 <__divdf3+0x824>
1000e984:	e00d883a 	mov	r6,fp
1000e988:	0011883a 	mov	r8,zero
1000e98c:	000b883a 	mov	r5,zero
1000e990:	0027883a 	mov	r19,zero
1000e994:	003ea906 	br	1000e43c <__alt_data_end+0xf800e43c>
1000e998:	00800434 	movhi	r2,16
1000e99c:	89400234 	orhi	r5,r17,8
1000e9a0:	10bfffc4 	addi	r2,r2,-1
1000e9a4:	b00d883a 	mov	r6,r22
1000e9a8:	288a703a 	and	r5,r5,r2
1000e9ac:	003efd06 	br	1000e5a4 <__alt_data_end+0xf800e5a4>
1000e9b0:	adcf883a 	add	r7,r21,r23
1000e9b4:	997fffc4 	addi	r5,r19,-1
1000e9b8:	3dc0412e 	bgeu	r7,r23,1000eac0 <__divdf3+0x7fc>
1000e9bc:	2827883a 	mov	r19,r5
1000e9c0:	38bfd01e 	bne	r7,r2,1000e904 <__alt_data_end+0xf800e904>
1000e9c4:	d8c00117 	ldw	r3,4(sp)
1000e9c8:	193fce1e 	bne	r3,r4,1000e904 <__alt_data_end+0xf800e904>
1000e9cc:	003fce06 	br	1000e908 <__alt_data_end+0xf800e908>
1000e9d0:	d9800215 	stw	r6,8(sp)
1000e9d4:	d9c00515 	stw	r7,20(sp)
1000e9d8:	00101c00 	call	100101c0 <__clzsi2>
1000e9dc:	10c00804 	addi	r3,r2,32
1000e9e0:	010009c4 	movi	r4,39
1000e9e4:	d9800217 	ldw	r6,8(sp)
1000e9e8:	d9c00517 	ldw	r7,20(sp)
1000e9ec:	20feb20e 	bge	r4,r3,1000e4b8 <__alt_data_end+0xf800e4b8>
1000e9f0:	117ffe04 	addi	r5,r2,-8
1000e9f4:	a162983a 	sll	r17,r20,r5
1000e9f8:	0027883a 	mov	r19,zero
1000e9fc:	003eb506 	br	1000e4d4 <__alt_data_end+0xf800e4d4>
1000ea00:	3009883a 	mov	r4,r6
1000ea04:	d9800215 	stw	r6,8(sp)
1000ea08:	da000315 	stw	r8,12(sp)
1000ea0c:	da400415 	stw	r9,16(sp)
1000ea10:	00101c00 	call	100101c0 <__clzsi2>
1000ea14:	10c00804 	addi	r3,r2,32
1000ea18:	010009c4 	movi	r4,39
1000ea1c:	d9800217 	ldw	r6,8(sp)
1000ea20:	da000317 	ldw	r8,12(sp)
1000ea24:	da400417 	ldw	r9,16(sp)
1000ea28:	20fec10e 	bge	r4,r3,1000e530 <__alt_data_end+0xf800e530>
1000ea2c:	10bffe04 	addi	r2,r2,-8
1000ea30:	a8a0983a 	sll	r16,r21,r2
1000ea34:	002b883a 	mov	r21,zero
1000ea38:	003ec406 	br	1000e54c <__alt_data_end+0xf800e54c>
1000ea3c:	d8c00117 	ldw	r3,4(sp)
1000ea40:	b0ed883a 	add	r22,r22,r3
1000ea44:	b0c5803a 	cmpltu	r2,r22,r3
1000ea48:	15c5883a 	add	r2,r2,r23
1000ea4c:	11cf883a 	add	r7,r2,r7
1000ea50:	88bfffc4 	addi	r2,r17,-1
1000ea54:	b9c00d2e 	bgeu	r23,r7,1000ea8c <__divdf3+0x7c8>
1000ea58:	39003f36 	bltu	r7,r4,1000eb58 <__divdf3+0x894>
1000ea5c:	21c06a26 	beq	r4,r7,1000ec08 <__divdf3+0x944>
1000ea60:	3909c83a 	sub	r4,r7,r4
1000ea64:	1023883a 	mov	r17,r2
1000ea68:	003f4f06 	br	1000e7a8 <__alt_data_end+0xf800e7a8>
1000ea6c:	9d7ee536 	bltu	r19,r21,1000e604 <__alt_data_end+0xf800e604>
1000ea70:	982ed07a 	srli	r23,r19,1
1000ea74:	880497fa 	slli	r2,r17,31
1000ea78:	8810d07a 	srli	r8,r17,1
1000ea7c:	982c97fa 	slli	r22,r19,31
1000ea80:	b884b03a 	or	r2,r23,r2
1000ea84:	d8800015 	stw	r2,0(sp)
1000ea88:	003ee206 	br	1000e614 <__alt_data_end+0xf800e614>
1000ea8c:	3dfff41e 	bne	r7,r23,1000ea60 <__alt_data_end+0xf800ea60>
1000ea90:	d8c00117 	ldw	r3,4(sp)
1000ea94:	b0fff02e 	bgeu	r22,r3,1000ea58 <__alt_data_end+0xf800ea58>
1000ea98:	b909c83a 	sub	r4,r23,r4
1000ea9c:	1023883a 	mov	r17,r2
1000eaa0:	003f4106 	br	1000e7a8 <__alt_data_end+0xf800e7a8>
1000eaa4:	1021883a 	mov	r16,r2
1000eaa8:	003f1106 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000eaac:	1023883a 	mov	r17,r2
1000eab0:	003ef706 	br	1000e690 <__alt_data_end+0xf800e690>
1000eab4:	b23fe136 	bltu	r22,r8,1000ea3c <__alt_data_end+0xf800ea3c>
1000eab8:	0009883a 	mov	r4,zero
1000eabc:	003f3a06 	br	1000e7a8 <__alt_data_end+0xf800e7a8>
1000eac0:	38802c36 	bltu	r7,r2,1000eb74 <__divdf3+0x8b0>
1000eac4:	11c05326 	beq	r2,r7,1000ec14 <__divdf3+0x950>
1000eac8:	2827883a 	mov	r19,r5
1000eacc:	003f8d06 	br	1000e904 <__alt_data_end+0xf800e904>
1000ead0:	04ffffc4 	movi	r19,-1
1000ead4:	003f8c06 	br	1000e908 <__alt_data_end+0xf800e908>
1000ead8:	1011883a 	mov	r8,r2
1000eadc:	003f4d06 	br	1000e814 <__alt_data_end+0xf800e814>
1000eae0:	1013883a 	mov	r9,r2
1000eae4:	003f6406 	br	1000e878 <__alt_data_end+0xf800e878>
1000eae8:	e029883a 	mov	r20,fp
1000eaec:	003f8606 	br	1000e908 <__alt_data_end+0xf800e908>
1000eaf0:	008007c4 	movi	r2,31
1000eaf4:	14002a16 	blt	r2,r16,1000eba0 <__divdf3+0x8dc>
1000eaf8:	91410784 	addi	r5,r18,1054
1000eafc:	9c0cd83a 	srl	r6,r19,r16
1000eb00:	8948983a 	sll	r4,r17,r5
1000eb04:	9944983a 	sll	r2,r19,r5
1000eb08:	8c20d83a 	srl	r16,r17,r16
1000eb0c:	3108b03a 	or	r4,r6,r4
1000eb10:	1004c03a 	cmpne	r2,r2,zero
1000eb14:	2084b03a 	or	r2,r4,r2
1000eb18:	110001cc 	andi	r4,r2,7
1000eb1c:	20000726 	beq	r4,zero,1000eb3c <__divdf3+0x878>
1000eb20:	114003cc 	andi	r5,r2,15
1000eb24:	01000104 	movi	r4,4
1000eb28:	29000426 	beq	r5,r4,1000eb3c <__divdf3+0x878>
1000eb2c:	11000104 	addi	r4,r2,4
1000eb30:	2085803a 	cmpltu	r2,r4,r2
1000eb34:	80a1883a 	add	r16,r16,r2
1000eb38:	2005883a 	mov	r2,r4
1000eb3c:	8100202c 	andhi	r4,r16,128
1000eb40:	20002d26 	beq	r4,zero,1000ebf8 <__divdf3+0x934>
1000eb44:	a180004c 	andi	r6,r20,1
1000eb48:	02000044 	movi	r8,1
1000eb4c:	000b883a 	mov	r5,zero
1000eb50:	0027883a 	mov	r19,zero
1000eb54:	003e3906 	br	1000e43c <__alt_data_end+0xf800e43c>
1000eb58:	d8c00117 	ldw	r3,4(sp)
1000eb5c:	8c7fff84 	addi	r17,r17,-2
1000eb60:	b0ed883a 	add	r22,r22,r3
1000eb64:	b0c5803a 	cmpltu	r2,r22,r3
1000eb68:	15c5883a 	add	r2,r2,r23
1000eb6c:	11cf883a 	add	r7,r2,r7
1000eb70:	003f0c06 	br	1000e7a4 <__alt_data_end+0xf800e7a4>
1000eb74:	d8c00117 	ldw	r3,4(sp)
1000eb78:	997fff84 	addi	r5,r19,-2
1000eb7c:	18d1883a 	add	r8,r3,r3
1000eb80:	40c7803a 	cmpltu	r3,r8,r3
1000eb84:	1dcd883a 	add	r6,r3,r23
1000eb88:	398f883a 	add	r7,r7,r6
1000eb8c:	da000115 	stw	r8,4(sp)
1000eb90:	003f8a06 	br	1000e9bc <__alt_data_end+0xf800e9bc>
1000eb94:	203f861e 	bne	r4,zero,1000e9b0 <__alt_data_end+0xf800e9b0>
1000eb98:	d8000115 	stw	zero,4(sp)
1000eb9c:	003f8906 	br	1000e9c4 <__alt_data_end+0xf800e9c4>
1000eba0:	00bef884 	movi	r2,-1054
1000eba4:	1485c83a 	sub	r2,r2,r18
1000eba8:	01000804 	movi	r4,32
1000ebac:	8884d83a 	srl	r2,r17,r2
1000ebb0:	81001c26 	beq	r16,r4,1000ec24 <__divdf3+0x960>
1000ebb4:	91010f84 	addi	r4,r18,1086
1000ebb8:	8908983a 	sll	r4,r17,r4
1000ebbc:	24c8b03a 	or	r4,r4,r19
1000ebc0:	2008c03a 	cmpne	r4,r4,zero
1000ebc4:	2084b03a 	or	r2,r4,r2
1000ebc8:	140001cc 	andi	r16,r2,7
1000ebcc:	8000061e 	bne	r16,zero,1000ebe8 <__divdf3+0x924>
1000ebd0:	000b883a 	mov	r5,zero
1000ebd4:	1004d0fa 	srli	r2,r2,3
1000ebd8:	a180004c 	andi	r6,r20,1
1000ebdc:	0011883a 	mov	r8,zero
1000ebe0:	1426b03a 	or	r19,r2,r16
1000ebe4:	003e1506 	br	1000e43c <__alt_data_end+0xf800e43c>
1000ebe8:	114003cc 	andi	r5,r2,15
1000ebec:	01000104 	movi	r4,4
1000ebf0:	0021883a 	mov	r16,zero
1000ebf4:	293fcd1e 	bne	r5,r4,1000eb2c <__alt_data_end+0xf800eb2c>
1000ebf8:	800a927a 	slli	r5,r16,9
1000ebfc:	8020977a 	slli	r16,r16,29
1000ec00:	280ad33a 	srli	r5,r5,12
1000ec04:	003ff306 	br	1000ebd4 <__alt_data_end+0xf800ebd4>
1000ec08:	b23fd336 	bltu	r22,r8,1000eb58 <__alt_data_end+0xf800eb58>
1000ec0c:	1023883a 	mov	r17,r2
1000ec10:	003fa906 	br	1000eab8 <__alt_data_end+0xf800eab8>
1000ec14:	d8c00117 	ldw	r3,4(sp)
1000ec18:	193fd636 	bltu	r3,r4,1000eb74 <__alt_data_end+0xf800eb74>
1000ec1c:	2827883a 	mov	r19,r5
1000ec20:	003f6806 	br	1000e9c4 <__alt_data_end+0xf800e9c4>
1000ec24:	0009883a 	mov	r4,zero
1000ec28:	003fe406 	br	1000ebbc <__alt_data_end+0xf800ebbc>
1000ec2c:	00800434 	movhi	r2,16
1000ec30:	89400234 	orhi	r5,r17,8
1000ec34:	10bfffc4 	addi	r2,r2,-1
1000ec38:	e00d883a 	mov	r6,fp
1000ec3c:	288a703a 	and	r5,r5,r2
1000ec40:	003e5806 	br	1000e5a4 <__alt_data_end+0xf800e5a4>

1000ec44 <__eqdf2>:
1000ec44:	2804d53a 	srli	r2,r5,20
1000ec48:	3806d53a 	srli	r3,r7,20
1000ec4c:	02000434 	movhi	r8,16
1000ec50:	423fffc4 	addi	r8,r8,-1
1000ec54:	1081ffcc 	andi	r2,r2,2047
1000ec58:	0241ffc4 	movi	r9,2047
1000ec5c:	2a14703a 	and	r10,r5,r8
1000ec60:	18c1ffcc 	andi	r3,r3,2047
1000ec64:	3a10703a 	and	r8,r7,r8
1000ec68:	280ad7fa 	srli	r5,r5,31
1000ec6c:	380ed7fa 	srli	r7,r7,31
1000ec70:	12400f26 	beq	r2,r9,1000ecb0 <__eqdf2+0x6c>
1000ec74:	0241ffc4 	movi	r9,2047
1000ec78:	1a400326 	beq	r3,r9,1000ec88 <__eqdf2+0x44>
1000ec7c:	10c00526 	beq	r2,r3,1000ec94 <__eqdf2+0x50>
1000ec80:	00800044 	movi	r2,1
1000ec84:	f800283a 	ret
1000ec88:	4192b03a 	or	r9,r8,r6
1000ec8c:	483ffc1e 	bne	r9,zero,1000ec80 <__alt_data_end+0xf800ec80>
1000ec90:	10fffb1e 	bne	r2,r3,1000ec80 <__alt_data_end+0xf800ec80>
1000ec94:	523ffa1e 	bne	r10,r8,1000ec80 <__alt_data_end+0xf800ec80>
1000ec98:	21bff91e 	bne	r4,r6,1000ec80 <__alt_data_end+0xf800ec80>
1000ec9c:	29c00826 	beq	r5,r7,1000ecc0 <__eqdf2+0x7c>
1000eca0:	103ff71e 	bne	r2,zero,1000ec80 <__alt_data_end+0xf800ec80>
1000eca4:	5104b03a 	or	r2,r10,r4
1000eca8:	1004c03a 	cmpne	r2,r2,zero
1000ecac:	f800283a 	ret
1000ecb0:	5112b03a 	or	r9,r10,r4
1000ecb4:	483fef26 	beq	r9,zero,1000ec74 <__alt_data_end+0xf800ec74>
1000ecb8:	00800044 	movi	r2,1
1000ecbc:	f800283a 	ret
1000ecc0:	0005883a 	mov	r2,zero
1000ecc4:	f800283a 	ret

1000ecc8 <__gedf2>:
1000ecc8:	2804d53a 	srli	r2,r5,20
1000eccc:	3806d53a 	srli	r3,r7,20
1000ecd0:	02000434 	movhi	r8,16
1000ecd4:	423fffc4 	addi	r8,r8,-1
1000ecd8:	0241ffc4 	movi	r9,2047
1000ecdc:	1081ffcc 	andi	r2,r2,2047
1000ece0:	2a14703a 	and	r10,r5,r8
1000ece4:	1a46703a 	and	r3,r3,r9
1000ece8:	3a10703a 	and	r8,r7,r8
1000ecec:	280ad7fa 	srli	r5,r5,31
1000ecf0:	380ed7fa 	srli	r7,r7,31
1000ecf4:	12400b26 	beq	r2,r9,1000ed24 <__gedf2+0x5c>
1000ecf8:	1a401626 	beq	r3,r9,1000ed54 <__gedf2+0x8c>
1000ecfc:	10000c1e 	bne	r2,zero,1000ed30 <__gedf2+0x68>
1000ed00:	5112b03a 	or	r9,r10,r4
1000ed04:	4813003a 	cmpeq	r9,r9,zero
1000ed08:	4817883a 	mov	r11,r9
1000ed0c:	18000c1e 	bne	r3,zero,1000ed40 <__gedf2+0x78>
1000ed10:	4198b03a 	or	r12,r8,r6
1000ed14:	60000a1e 	bne	r12,zero,1000ed40 <__gedf2+0x78>
1000ed18:	48001326 	beq	r9,zero,1000ed68 <__gedf2+0xa0>
1000ed1c:	0005883a 	mov	r2,zero
1000ed20:	f800283a 	ret
1000ed24:	5112b03a 	or	r9,r10,r4
1000ed28:	4800191e 	bne	r9,zero,1000ed90 <__gedf2+0xc8>
1000ed2c:	18800926 	beq	r3,r2,1000ed54 <__gedf2+0x8c>
1000ed30:	18000b1e 	bne	r3,zero,1000ed60 <__gedf2+0x98>
1000ed34:	4192b03a 	or	r9,r8,r6
1000ed38:	0017883a 	mov	r11,zero
1000ed3c:	48000a26 	beq	r9,zero,1000ed68 <__gedf2+0xa0>
1000ed40:	39c03fcc 	andi	r7,r7,255
1000ed44:	58000726 	beq	r11,zero,1000ed64 <__gedf2+0x9c>
1000ed48:	3800081e 	bne	r7,zero,1000ed6c <__gedf2+0xa4>
1000ed4c:	00bfffc4 	movi	r2,-1
1000ed50:	f800283a 	ret
1000ed54:	4192b03a 	or	r9,r8,r6
1000ed58:	48000d1e 	bne	r9,zero,1000ed90 <__gedf2+0xc8>
1000ed5c:	103fe826 	beq	r2,zero,1000ed00 <__alt_data_end+0xf800ed00>
1000ed60:	39c03fcc 	andi	r7,r7,255
1000ed64:	29c00326 	beq	r5,r7,1000ed74 <__gedf2+0xac>
1000ed68:	283ff81e 	bne	r5,zero,1000ed4c <__alt_data_end+0xf800ed4c>
1000ed6c:	00800044 	movi	r2,1
1000ed70:	f800283a 	ret
1000ed74:	18bffc16 	blt	r3,r2,1000ed68 <__alt_data_end+0xf800ed68>
1000ed78:	10c00316 	blt	r2,r3,1000ed88 <__gedf2+0xc0>
1000ed7c:	42bffa36 	bltu	r8,r10,1000ed68 <__alt_data_end+0xf800ed68>
1000ed80:	52000526 	beq	r10,r8,1000ed98 <__gedf2+0xd0>
1000ed84:	523fe52e 	bgeu	r10,r8,1000ed1c <__alt_data_end+0xf800ed1c>
1000ed88:	283ff026 	beq	r5,zero,1000ed4c <__alt_data_end+0xf800ed4c>
1000ed8c:	003ff706 	br	1000ed6c <__alt_data_end+0xf800ed6c>
1000ed90:	00bfff84 	movi	r2,-2
1000ed94:	f800283a 	ret
1000ed98:	313ff336 	bltu	r6,r4,1000ed68 <__alt_data_end+0xf800ed68>
1000ed9c:	21bfdf2e 	bgeu	r4,r6,1000ed1c <__alt_data_end+0xf800ed1c>
1000eda0:	283fea26 	beq	r5,zero,1000ed4c <__alt_data_end+0xf800ed4c>
1000eda4:	003ff106 	br	1000ed6c <__alt_data_end+0xf800ed6c>

1000eda8 <__ledf2>:
1000eda8:	2804d53a 	srli	r2,r5,20
1000edac:	3810d53a 	srli	r8,r7,20
1000edb0:	00c00434 	movhi	r3,16
1000edb4:	18ffffc4 	addi	r3,r3,-1
1000edb8:	0241ffc4 	movi	r9,2047
1000edbc:	1081ffcc 	andi	r2,r2,2047
1000edc0:	28d4703a 	and	r10,r5,r3
1000edc4:	4250703a 	and	r8,r8,r9
1000edc8:	38c6703a 	and	r3,r7,r3
1000edcc:	280ad7fa 	srli	r5,r5,31
1000edd0:	380ed7fa 	srli	r7,r7,31
1000edd4:	12400b26 	beq	r2,r9,1000ee04 <__ledf2+0x5c>
1000edd8:	42401926 	beq	r8,r9,1000ee40 <__ledf2+0x98>
1000eddc:	10000c1e 	bne	r2,zero,1000ee10 <__ledf2+0x68>
1000ede0:	5112b03a 	or	r9,r10,r4
1000ede4:	4813003a 	cmpeq	r9,r9,zero
1000ede8:	4817883a 	mov	r11,r9
1000edec:	40000f26 	beq	r8,zero,1000ee2c <__ledf2+0x84>
1000edf0:	39c03fcc 	andi	r7,r7,255
1000edf4:	58001826 	beq	r11,zero,1000ee58 <__ledf2+0xb0>
1000edf8:	38000a1e 	bne	r7,zero,1000ee24 <__ledf2+0x7c>
1000edfc:	00bfffc4 	movi	r2,-1
1000ee00:	f800283a 	ret
1000ee04:	5112b03a 	or	r9,r10,r4
1000ee08:	48000f1e 	bne	r9,zero,1000ee48 <__ledf2+0xa0>
1000ee0c:	40800c26 	beq	r8,r2,1000ee40 <__ledf2+0x98>
1000ee10:	4000101e 	bne	r8,zero,1000ee54 <__ledf2+0xac>
1000ee14:	1992b03a 	or	r9,r3,r6
1000ee18:	0017883a 	mov	r11,zero
1000ee1c:	483ff41e 	bne	r9,zero,1000edf0 <__alt_data_end+0xf800edf0>
1000ee20:	283ff61e 	bne	r5,zero,1000edfc <__alt_data_end+0xf800edfc>
1000ee24:	00800044 	movi	r2,1
1000ee28:	f800283a 	ret
1000ee2c:	1998b03a 	or	r12,r3,r6
1000ee30:	603fef1e 	bne	r12,zero,1000edf0 <__alt_data_end+0xf800edf0>
1000ee34:	483ffa26 	beq	r9,zero,1000ee20 <__alt_data_end+0xf800ee20>
1000ee38:	0005883a 	mov	r2,zero
1000ee3c:	f800283a 	ret
1000ee40:	1992b03a 	or	r9,r3,r6
1000ee44:	48000226 	beq	r9,zero,1000ee50 <__ledf2+0xa8>
1000ee48:	00800084 	movi	r2,2
1000ee4c:	f800283a 	ret
1000ee50:	103fe326 	beq	r2,zero,1000ede0 <__alt_data_end+0xf800ede0>
1000ee54:	39c03fcc 	andi	r7,r7,255
1000ee58:	29fff11e 	bne	r5,r7,1000ee20 <__alt_data_end+0xf800ee20>
1000ee5c:	40bff016 	blt	r8,r2,1000ee20 <__alt_data_end+0xf800ee20>
1000ee60:	12000316 	blt	r2,r8,1000ee70 <__ledf2+0xc8>
1000ee64:	1abfee36 	bltu	r3,r10,1000ee20 <__alt_data_end+0xf800ee20>
1000ee68:	50c00326 	beq	r10,r3,1000ee78 <__ledf2+0xd0>
1000ee6c:	50fff22e 	bgeu	r10,r3,1000ee38 <__alt_data_end+0xf800ee38>
1000ee70:	283fe226 	beq	r5,zero,1000edfc <__alt_data_end+0xf800edfc>
1000ee74:	003feb06 	br	1000ee24 <__alt_data_end+0xf800ee24>
1000ee78:	313fe936 	bltu	r6,r4,1000ee20 <__alt_data_end+0xf800ee20>
1000ee7c:	21bfee2e 	bgeu	r4,r6,1000ee38 <__alt_data_end+0xf800ee38>
1000ee80:	283fde26 	beq	r5,zero,1000edfc <__alt_data_end+0xf800edfc>
1000ee84:	003fe706 	br	1000ee24 <__alt_data_end+0xf800ee24>

1000ee88 <__muldf3>:
1000ee88:	deffee04 	addi	sp,sp,-72
1000ee8c:	dd000c15 	stw	r20,48(sp)
1000ee90:	2828d53a 	srli	r20,r5,20
1000ee94:	dd400d15 	stw	r21,52(sp)
1000ee98:	282ad7fa 	srli	r21,r5,31
1000ee9c:	dc000815 	stw	r16,32(sp)
1000eea0:	04000434 	movhi	r16,16
1000eea4:	ddc00f15 	stw	r23,60(sp)
1000eea8:	dcc00b15 	stw	r19,44(sp)
1000eeac:	dc800a15 	stw	r18,40(sp)
1000eeb0:	843fffc4 	addi	r16,r16,-1
1000eeb4:	dfc01115 	stw	ra,68(sp)
1000eeb8:	df001015 	stw	fp,64(sp)
1000eebc:	dd800e15 	stw	r22,56(sp)
1000eec0:	dc400915 	stw	r17,36(sp)
1000eec4:	a501ffcc 	andi	r20,r20,2047
1000eec8:	2025883a 	mov	r18,r4
1000eecc:	202f883a 	mov	r23,r4
1000eed0:	2c20703a 	and	r16,r5,r16
1000eed4:	a827883a 	mov	r19,r21
1000eed8:	aa403fcc 	andi	r9,r21,255
1000eedc:	a0005926 	beq	r20,zero,1000f044 <__muldf3+0x1bc>
1000eee0:	0081ffc4 	movi	r2,2047
1000eee4:	a0803426 	beq	r20,r2,1000efb8 <__muldf3+0x130>
1000eee8:	84000434 	orhi	r16,r16,16
1000eeec:	2004d77a 	srli	r2,r4,29
1000eef0:	802090fa 	slli	r16,r16,3
1000eef4:	202e90fa 	slli	r23,r4,3
1000eef8:	a53f0044 	addi	r20,r20,-1023
1000eefc:	80a0b03a 	or	r16,r16,r2
1000ef00:	000b883a 	mov	r5,zero
1000ef04:	0039883a 	mov	fp,zero
1000ef08:	3806d53a 	srli	r3,r7,20
1000ef0c:	382cd7fa 	srli	r22,r7,31
1000ef10:	00800434 	movhi	r2,16
1000ef14:	10bfffc4 	addi	r2,r2,-1
1000ef18:	18c1ffcc 	andi	r3,r3,2047
1000ef1c:	3025883a 	mov	r18,r6
1000ef20:	38a2703a 	and	r17,r7,r2
1000ef24:	b2803fcc 	andi	r10,r22,255
1000ef28:	18006426 	beq	r3,zero,1000f0bc <__muldf3+0x234>
1000ef2c:	0081ffc4 	movi	r2,2047
1000ef30:	18805c26 	beq	r3,r2,1000f0a4 <__muldf3+0x21c>
1000ef34:	8c400434 	orhi	r17,r17,16
1000ef38:	3004d77a 	srli	r2,r6,29
1000ef3c:	882290fa 	slli	r17,r17,3
1000ef40:	302490fa 	slli	r18,r6,3
1000ef44:	18ff0044 	addi	r3,r3,-1023
1000ef48:	88a2b03a 	or	r17,r17,r2
1000ef4c:	000f883a 	mov	r7,zero
1000ef50:	394ab03a 	or	r5,r7,r5
1000ef54:	280a90ba 	slli	r5,r5,2
1000ef58:	00840074 	movhi	r2,4097
1000ef5c:	10bbde04 	addi	r2,r2,-4232
1000ef60:	288b883a 	add	r5,r5,r2
1000ef64:	28800017 	ldw	r2,0(r5)
1000ef68:	a0c7883a 	add	r3,r20,r3
1000ef6c:	b54cf03a 	xor	r6,r22,r21
1000ef70:	1a000044 	addi	r8,r3,1
1000ef74:	1000683a 	jmp	r2
1000ef78:	1000f1bc 	xorhi	zero,r2,966
1000ef7c:	1000f1a8 	cmpgeui	zero,r2,966
1000ef80:	1000f1a8 	cmpgeui	zero,r2,966
1000ef84:	1000f194 	ori	zero,r2,966
1000ef88:	1000efd4 	ori	zero,r2,959
1000ef8c:	1000efd4 	ori	zero,r2,959
1000ef90:	1000f17c 	xorhi	zero,r2,965
1000ef94:	1000f194 	ori	zero,r2,966
1000ef98:	1000efd4 	ori	zero,r2,959
1000ef9c:	1000f17c 	xorhi	zero,r2,965
1000efa0:	1000efd4 	ori	zero,r2,959
1000efa4:	1000f194 	ori	zero,r2,966
1000efa8:	1000efd8 	cmpnei	zero,r2,959
1000efac:	1000efd8 	cmpnei	zero,r2,959
1000efb0:	1000efd8 	cmpnei	zero,r2,959
1000efb4:	1000f4f8 	rdprs	zero,r2,979
1000efb8:	8104b03a 	or	r2,r16,r4
1000efbc:	10006c1e 	bne	r2,zero,1000f170 <__muldf3+0x2e8>
1000efc0:	01400204 	movi	r5,8
1000efc4:	0021883a 	mov	r16,zero
1000efc8:	002f883a 	mov	r23,zero
1000efcc:	07000084 	movi	fp,2
1000efd0:	003fcd06 	br	1000ef08 <__alt_data_end+0xf800ef08>
1000efd4:	3013883a 	mov	r9,r6
1000efd8:	00800084 	movi	r2,2
1000efdc:	e080501e 	bne	fp,r2,1000f120 <__muldf3+0x298>
1000efe0:	4cc0004c 	andi	r19,r9,1
1000efe4:	0101ffc4 	movi	r4,2047
1000efe8:	0021883a 	mov	r16,zero
1000efec:	002f883a 	mov	r23,zero
1000eff0:	2008953a 	slli	r4,r4,20
1000eff4:	98c03fcc 	andi	r3,r19,255
1000eff8:	04400434 	movhi	r17,16
1000effc:	8c7fffc4 	addi	r17,r17,-1
1000f000:	180697fa 	slli	r3,r3,31
1000f004:	8460703a 	and	r16,r16,r17
1000f008:	8120b03a 	or	r16,r16,r4
1000f00c:	80c6b03a 	or	r3,r16,r3
1000f010:	b805883a 	mov	r2,r23
1000f014:	dfc01117 	ldw	ra,68(sp)
1000f018:	df001017 	ldw	fp,64(sp)
1000f01c:	ddc00f17 	ldw	r23,60(sp)
1000f020:	dd800e17 	ldw	r22,56(sp)
1000f024:	dd400d17 	ldw	r21,52(sp)
1000f028:	dd000c17 	ldw	r20,48(sp)
1000f02c:	dcc00b17 	ldw	r19,44(sp)
1000f030:	dc800a17 	ldw	r18,40(sp)
1000f034:	dc400917 	ldw	r17,36(sp)
1000f038:	dc000817 	ldw	r16,32(sp)
1000f03c:	dec01204 	addi	sp,sp,72
1000f040:	f800283a 	ret
1000f044:	8104b03a 	or	r2,r16,r4
1000f048:	10004426 	beq	r2,zero,1000f15c <__muldf3+0x2d4>
1000f04c:	80014b26 	beq	r16,zero,1000f57c <__muldf3+0x6f4>
1000f050:	8009883a 	mov	r4,r16
1000f054:	d9800715 	stw	r6,28(sp)
1000f058:	d9c00215 	stw	r7,8(sp)
1000f05c:	da400415 	stw	r9,16(sp)
1000f060:	00101c00 	call	100101c0 <__clzsi2>
1000f064:	d9800717 	ldw	r6,28(sp)
1000f068:	d9c00217 	ldw	r7,8(sp)
1000f06c:	da400417 	ldw	r9,16(sp)
1000f070:	1007883a 	mov	r3,r2
1000f074:	01000a04 	movi	r4,40
1000f078:	1dfffe04 	addi	r23,r3,-8
1000f07c:	20c9c83a 	sub	r4,r4,r3
1000f080:	85e0983a 	sll	r16,r16,r23
1000f084:	9108d83a 	srl	r4,r18,r4
1000f088:	95ee983a 	sll	r23,r18,r23
1000f08c:	2420b03a 	or	r16,r4,r16
1000f090:	053f0344 	movi	r20,-1011
1000f094:	a0e9c83a 	sub	r20,r20,r3
1000f098:	000b883a 	mov	r5,zero
1000f09c:	0039883a 	mov	fp,zero
1000f0a0:	003f9906 	br	1000ef08 <__alt_data_end+0xf800ef08>
1000f0a4:	8984b03a 	or	r2,r17,r6
1000f0a8:	10002a1e 	bne	r2,zero,1000f154 <__muldf3+0x2cc>
1000f0ac:	0023883a 	mov	r17,zero
1000f0b0:	0025883a 	mov	r18,zero
1000f0b4:	01c00084 	movi	r7,2
1000f0b8:	003fa506 	br	1000ef50 <__alt_data_end+0xf800ef50>
1000f0bc:	8984b03a 	or	r2,r17,r6
1000f0c0:	10002026 	beq	r2,zero,1000f144 <__muldf3+0x2bc>
1000f0c4:	88011c26 	beq	r17,zero,1000f538 <__muldf3+0x6b0>
1000f0c8:	8809883a 	mov	r4,r17
1000f0cc:	d9400215 	stw	r5,8(sp)
1000f0d0:	d9800715 	stw	r6,28(sp)
1000f0d4:	da400415 	stw	r9,16(sp)
1000f0d8:	da800315 	stw	r10,12(sp)
1000f0dc:	00101c00 	call	100101c0 <__clzsi2>
1000f0e0:	d9400217 	ldw	r5,8(sp)
1000f0e4:	d9800717 	ldw	r6,28(sp)
1000f0e8:	da400417 	ldw	r9,16(sp)
1000f0ec:	da800317 	ldw	r10,12(sp)
1000f0f0:	1007883a 	mov	r3,r2
1000f0f4:	01000a04 	movi	r4,40
1000f0f8:	1cbffe04 	addi	r18,r3,-8
1000f0fc:	20c9c83a 	sub	r4,r4,r3
1000f100:	8ca2983a 	sll	r17,r17,r18
1000f104:	3108d83a 	srl	r4,r6,r4
1000f108:	34a4983a 	sll	r18,r6,r18
1000f10c:	2462b03a 	or	r17,r4,r17
1000f110:	00bf0344 	movi	r2,-1011
1000f114:	10c7c83a 	sub	r3,r2,r3
1000f118:	000f883a 	mov	r7,zero
1000f11c:	003f8c06 	br	1000ef50 <__alt_data_end+0xf800ef50>
1000f120:	008000c4 	movi	r2,3
1000f124:	e0816d26 	beq	fp,r2,1000f6dc <__muldf3+0x854>
1000f128:	00800044 	movi	r2,1
1000f12c:	e081321e 	bne	fp,r2,1000f5f8 <__muldf3+0x770>
1000f130:	48a6703a 	and	r19,r9,r2
1000f134:	0009883a 	mov	r4,zero
1000f138:	0021883a 	mov	r16,zero
1000f13c:	002f883a 	mov	r23,zero
1000f140:	003fab06 	br	1000eff0 <__alt_data_end+0xf800eff0>
1000f144:	0023883a 	mov	r17,zero
1000f148:	0025883a 	mov	r18,zero
1000f14c:	01c00044 	movi	r7,1
1000f150:	003f7f06 	br	1000ef50 <__alt_data_end+0xf800ef50>
1000f154:	01c000c4 	movi	r7,3
1000f158:	003f7d06 	br	1000ef50 <__alt_data_end+0xf800ef50>
1000f15c:	01400104 	movi	r5,4
1000f160:	0021883a 	mov	r16,zero
1000f164:	002f883a 	mov	r23,zero
1000f168:	07000044 	movi	fp,1
1000f16c:	003f6606 	br	1000ef08 <__alt_data_end+0xf800ef08>
1000f170:	01400304 	movi	r5,12
1000f174:	070000c4 	movi	fp,3
1000f178:	003f6306 	br	1000ef08 <__alt_data_end+0xf800ef08>
1000f17c:	04000434 	movhi	r16,16
1000f180:	0027883a 	mov	r19,zero
1000f184:	843fffc4 	addi	r16,r16,-1
1000f188:	05ffffc4 	movi	r23,-1
1000f18c:	0101ffc4 	movi	r4,2047
1000f190:	003f9706 	br	1000eff0 <__alt_data_end+0xf800eff0>
1000f194:	8821883a 	mov	r16,r17
1000f198:	902f883a 	mov	r23,r18
1000f19c:	5013883a 	mov	r9,r10
1000f1a0:	3839883a 	mov	fp,r7
1000f1a4:	003f8c06 	br	1000efd8 <__alt_data_end+0xf800efd8>
1000f1a8:	8821883a 	mov	r16,r17
1000f1ac:	902f883a 	mov	r23,r18
1000f1b0:	3013883a 	mov	r9,r6
1000f1b4:	3839883a 	mov	fp,r7
1000f1b8:	003f8706 	br	1000efd8 <__alt_data_end+0xf800efd8>
1000f1bc:	b82ad43a 	srli	r21,r23,16
1000f1c0:	9038d43a 	srli	fp,r18,16
1000f1c4:	bdffffcc 	andi	r23,r23,65535
1000f1c8:	94bfffcc 	andi	r18,r18,65535
1000f1cc:	9009883a 	mov	r4,r18
1000f1d0:	b80b883a 	mov	r5,r23
1000f1d4:	d8c00515 	stw	r3,20(sp)
1000f1d8:	d9800715 	stw	r6,28(sp)
1000f1dc:	da000615 	stw	r8,24(sp)
1000f1e0:	00039ec0 	call	100039ec <__mulsi3>
1000f1e4:	9009883a 	mov	r4,r18
1000f1e8:	a80b883a 	mov	r5,r21
1000f1ec:	1029883a 	mov	r20,r2
1000f1f0:	00039ec0 	call	100039ec <__mulsi3>
1000f1f4:	e009883a 	mov	r4,fp
1000f1f8:	a80b883a 	mov	r5,r21
1000f1fc:	102d883a 	mov	r22,r2
1000f200:	00039ec0 	call	100039ec <__mulsi3>
1000f204:	e009883a 	mov	r4,fp
1000f208:	b80b883a 	mov	r5,r23
1000f20c:	1027883a 	mov	r19,r2
1000f210:	00039ec0 	call	100039ec <__mulsi3>
1000f214:	a008d43a 	srli	r4,r20,16
1000f218:	b085883a 	add	r2,r22,r2
1000f21c:	d8c00517 	ldw	r3,20(sp)
1000f220:	110f883a 	add	r7,r2,r4
1000f224:	d9800717 	ldw	r6,28(sp)
1000f228:	da000617 	ldw	r8,24(sp)
1000f22c:	3d80022e 	bgeu	r7,r22,1000f238 <__muldf3+0x3b0>
1000f230:	00800074 	movhi	r2,1
1000f234:	98a7883a 	add	r19,r19,r2
1000f238:	3804943a 	slli	r2,r7,16
1000f23c:	380ed43a 	srli	r7,r7,16
1000f240:	882cd43a 	srli	r22,r17,16
1000f244:	a53fffcc 	andi	r20,r20,65535
1000f248:	8c7fffcc 	andi	r17,r17,65535
1000f24c:	1529883a 	add	r20,r2,r20
1000f250:	8809883a 	mov	r4,r17
1000f254:	b80b883a 	mov	r5,r23
1000f258:	d8c00515 	stw	r3,20(sp)
1000f25c:	d9800715 	stw	r6,28(sp)
1000f260:	da000615 	stw	r8,24(sp)
1000f264:	d9c00015 	stw	r7,0(sp)
1000f268:	dd000115 	stw	r20,4(sp)
1000f26c:	00039ec0 	call	100039ec <__mulsi3>
1000f270:	a80b883a 	mov	r5,r21
1000f274:	8809883a 	mov	r4,r17
1000f278:	d8800415 	stw	r2,16(sp)
1000f27c:	00039ec0 	call	100039ec <__mulsi3>
1000f280:	a80b883a 	mov	r5,r21
1000f284:	b009883a 	mov	r4,r22
1000f288:	1029883a 	mov	r20,r2
1000f28c:	00039ec0 	call	100039ec <__mulsi3>
1000f290:	b009883a 	mov	r4,r22
1000f294:	b80b883a 	mov	r5,r23
1000f298:	102b883a 	mov	r21,r2
1000f29c:	00039ec0 	call	100039ec <__mulsi3>
1000f2a0:	da400417 	ldw	r9,16(sp)
1000f2a4:	a085883a 	add	r2,r20,r2
1000f2a8:	d8c00517 	ldw	r3,20(sp)
1000f2ac:	4808d43a 	srli	r4,r9,16
1000f2b0:	d9800717 	ldw	r6,28(sp)
1000f2b4:	da000617 	ldw	r8,24(sp)
1000f2b8:	1109883a 	add	r4,r2,r4
1000f2bc:	2500022e 	bgeu	r4,r20,1000f2c8 <__muldf3+0x440>
1000f2c0:	00800074 	movhi	r2,1
1000f2c4:	a8ab883a 	add	r21,r21,r2
1000f2c8:	200e943a 	slli	r7,r4,16
1000f2cc:	2004d43a 	srli	r2,r4,16
1000f2d0:	802ed43a 	srli	r23,r16,16
1000f2d4:	843fffcc 	andi	r16,r16,65535
1000f2d8:	4d3fffcc 	andi	r20,r9,65535
1000f2dc:	9009883a 	mov	r4,r18
1000f2e0:	800b883a 	mov	r5,r16
1000f2e4:	3d29883a 	add	r20,r7,r20
1000f2e8:	d8c00515 	stw	r3,20(sp)
1000f2ec:	d9800715 	stw	r6,28(sp)
1000f2f0:	da000615 	stw	r8,24(sp)
1000f2f4:	a8ab883a 	add	r21,r21,r2
1000f2f8:	00039ec0 	call	100039ec <__mulsi3>
1000f2fc:	9009883a 	mov	r4,r18
1000f300:	b80b883a 	mov	r5,r23
1000f304:	d8800315 	stw	r2,12(sp)
1000f308:	00039ec0 	call	100039ec <__mulsi3>
1000f30c:	e009883a 	mov	r4,fp
1000f310:	b80b883a 	mov	r5,r23
1000f314:	1025883a 	mov	r18,r2
1000f318:	00039ec0 	call	100039ec <__mulsi3>
1000f31c:	e009883a 	mov	r4,fp
1000f320:	800b883a 	mov	r5,r16
1000f324:	d8800215 	stw	r2,8(sp)
1000f328:	00039ec0 	call	100039ec <__mulsi3>
1000f32c:	da800317 	ldw	r10,12(sp)
1000f330:	d9400017 	ldw	r5,0(sp)
1000f334:	9085883a 	add	r2,r18,r2
1000f338:	5008d43a 	srli	r4,r10,16
1000f33c:	a153883a 	add	r9,r20,r5
1000f340:	d8c00517 	ldw	r3,20(sp)
1000f344:	1109883a 	add	r4,r2,r4
1000f348:	d9800717 	ldw	r6,28(sp)
1000f34c:	da000617 	ldw	r8,24(sp)
1000f350:	dac00217 	ldw	r11,8(sp)
1000f354:	2480022e 	bgeu	r4,r18,1000f360 <__muldf3+0x4d8>
1000f358:	00800074 	movhi	r2,1
1000f35c:	5897883a 	add	r11,r11,r2
1000f360:	200e943a 	slli	r7,r4,16
1000f364:	2038d43a 	srli	fp,r4,16
1000f368:	52bfffcc 	andi	r10,r10,65535
1000f36c:	3a8f883a 	add	r7,r7,r10
1000f370:	8809883a 	mov	r4,r17
1000f374:	800b883a 	mov	r5,r16
1000f378:	d8c00515 	stw	r3,20(sp)
1000f37c:	d9800715 	stw	r6,28(sp)
1000f380:	d9c00215 	stw	r7,8(sp)
1000f384:	da000615 	stw	r8,24(sp)
1000f388:	da400415 	stw	r9,16(sp)
1000f38c:	5f39883a 	add	fp,r11,fp
1000f390:	00039ec0 	call	100039ec <__mulsi3>
1000f394:	8809883a 	mov	r4,r17
1000f398:	b80b883a 	mov	r5,r23
1000f39c:	1025883a 	mov	r18,r2
1000f3a0:	00039ec0 	call	100039ec <__mulsi3>
1000f3a4:	b009883a 	mov	r4,r22
1000f3a8:	b80b883a 	mov	r5,r23
1000f3ac:	d8800315 	stw	r2,12(sp)
1000f3b0:	00039ec0 	call	100039ec <__mulsi3>
1000f3b4:	b009883a 	mov	r4,r22
1000f3b8:	800b883a 	mov	r5,r16
1000f3bc:	1023883a 	mov	r17,r2
1000f3c0:	00039ec0 	call	100039ec <__mulsi3>
1000f3c4:	da800317 	ldw	r10,12(sp)
1000f3c8:	9008d43a 	srli	r4,r18,16
1000f3cc:	d8c00517 	ldw	r3,20(sp)
1000f3d0:	5085883a 	add	r2,r10,r2
1000f3d4:	1109883a 	add	r4,r2,r4
1000f3d8:	d9800717 	ldw	r6,28(sp)
1000f3dc:	d9c00217 	ldw	r7,8(sp)
1000f3e0:	da000617 	ldw	r8,24(sp)
1000f3e4:	da400417 	ldw	r9,16(sp)
1000f3e8:	2280022e 	bgeu	r4,r10,1000f3f4 <__muldf3+0x56c>
1000f3ec:	00800074 	movhi	r2,1
1000f3f0:	88a3883a 	add	r17,r17,r2
1000f3f4:	2004943a 	slli	r2,r4,16
1000f3f8:	94bfffcc 	andi	r18,r18,65535
1000f3fc:	4ce7883a 	add	r19,r9,r19
1000f400:	14a5883a 	add	r18,r2,r18
1000f404:	9d29803a 	cmpltu	r20,r19,r20
1000f408:	9565883a 	add	r18,r18,r21
1000f40c:	9505883a 	add	r2,r18,r20
1000f410:	99e7883a 	add	r19,r19,r7
1000f414:	99cf803a 	cmpltu	r7,r19,r7
1000f418:	e08b883a 	add	r5,fp,r2
1000f41c:	2008d43a 	srli	r4,r4,16
1000f420:	29ef883a 	add	r23,r5,r7
1000f424:	1529803a 	cmpltu	r20,r2,r20
1000f428:	956b803a 	cmpltu	r21,r18,r21
1000f42c:	b9cf803a 	cmpltu	r7,r23,r7
1000f430:	a564b03a 	or	r18,r20,r21
1000f434:	2f39803a 	cmpltu	fp,r5,fp
1000f438:	9125883a 	add	r18,r18,r4
1000f43c:	3f38b03a 	or	fp,r7,fp
1000f440:	9725883a 	add	r18,r18,fp
1000f444:	9804927a 	slli	r2,r19,9
1000f448:	9463883a 	add	r17,r18,r17
1000f44c:	d9000117 	ldw	r4,4(sp)
1000f450:	b820d5fa 	srli	r16,r23,23
1000f454:	8822927a 	slli	r17,r17,9
1000f458:	9826d5fa 	srli	r19,r19,23
1000f45c:	1104b03a 	or	r2,r2,r4
1000f460:	b82e927a 	slli	r23,r23,9
1000f464:	1004c03a 	cmpne	r2,r2,zero
1000f468:	8c20b03a 	or	r16,r17,r16
1000f46c:	14e6b03a 	or	r19,r2,r19
1000f470:	8080402c 	andhi	r2,r16,256
1000f474:	9deeb03a 	or	r23,r19,r23
1000f478:	10000726 	beq	r2,zero,1000f498 <__muldf3+0x610>
1000f47c:	b804d07a 	srli	r2,r23,1
1000f480:	800697fa 	slli	r3,r16,31
1000f484:	bdc0004c 	andi	r23,r23,1
1000f488:	8020d07a 	srli	r16,r16,1
1000f48c:	b8aeb03a 	or	r23,r23,r2
1000f490:	b8eeb03a 	or	r23,r23,r3
1000f494:	4007883a 	mov	r3,r8
1000f498:	1900ffc4 	addi	r4,r3,1023
1000f49c:	01004d0e 	bge	zero,r4,1000f5d4 <__muldf3+0x74c>
1000f4a0:	b88001cc 	andi	r2,r23,7
1000f4a4:	10000726 	beq	r2,zero,1000f4c4 <__muldf3+0x63c>
1000f4a8:	b94003cc 	andi	r5,r23,15
1000f4ac:	00800104 	movi	r2,4
1000f4b0:	28800426 	beq	r5,r2,1000f4c4 <__muldf3+0x63c>
1000f4b4:	b885883a 	add	r2,r23,r2
1000f4b8:	15ef803a 	cmpltu	r23,r2,r23
1000f4bc:	85e1883a 	add	r16,r16,r23
1000f4c0:	102f883a 	mov	r23,r2
1000f4c4:	8080402c 	andhi	r2,r16,256
1000f4c8:	10000426 	beq	r2,zero,1000f4dc <__muldf3+0x654>
1000f4cc:	00bfc034 	movhi	r2,65280
1000f4d0:	10bfffc4 	addi	r2,r2,-1
1000f4d4:	19010004 	addi	r4,r3,1024
1000f4d8:	80a0703a 	and	r16,r16,r2
1000f4dc:	0081ff84 	movi	r2,2046
1000f4e0:	1100340e 	bge	r2,r4,1000f5b4 <__muldf3+0x72c>
1000f4e4:	34c0004c 	andi	r19,r6,1
1000f4e8:	0101ffc4 	movi	r4,2047
1000f4ec:	0021883a 	mov	r16,zero
1000f4f0:	002f883a 	mov	r23,zero
1000f4f4:	003ebe06 	br	1000eff0 <__alt_data_end+0xf800eff0>
1000f4f8:	8080022c 	andhi	r2,r16,8
1000f4fc:	10000926 	beq	r2,zero,1000f524 <__muldf3+0x69c>
1000f500:	8880022c 	andhi	r2,r17,8
1000f504:	1000071e 	bne	r2,zero,1000f524 <__muldf3+0x69c>
1000f508:	00800434 	movhi	r2,16
1000f50c:	8c000234 	orhi	r16,r17,8
1000f510:	10bfffc4 	addi	r2,r2,-1
1000f514:	b027883a 	mov	r19,r22
1000f518:	80a0703a 	and	r16,r16,r2
1000f51c:	902f883a 	mov	r23,r18
1000f520:	003f1a06 	br	1000f18c <__alt_data_end+0xf800f18c>
1000f524:	00800434 	movhi	r2,16
1000f528:	84000234 	orhi	r16,r16,8
1000f52c:	10bfffc4 	addi	r2,r2,-1
1000f530:	80a0703a 	and	r16,r16,r2
1000f534:	003f1506 	br	1000f18c <__alt_data_end+0xf800f18c>
1000f538:	3009883a 	mov	r4,r6
1000f53c:	d9400215 	stw	r5,8(sp)
1000f540:	d9800715 	stw	r6,28(sp)
1000f544:	da400415 	stw	r9,16(sp)
1000f548:	da800315 	stw	r10,12(sp)
1000f54c:	00101c00 	call	100101c0 <__clzsi2>
1000f550:	10c00804 	addi	r3,r2,32
1000f554:	010009c4 	movi	r4,39
1000f558:	d9400217 	ldw	r5,8(sp)
1000f55c:	d9800717 	ldw	r6,28(sp)
1000f560:	da400417 	ldw	r9,16(sp)
1000f564:	da800317 	ldw	r10,12(sp)
1000f568:	20fee20e 	bge	r4,r3,1000f0f4 <__alt_data_end+0xf800f0f4>
1000f56c:	147ffe04 	addi	r17,r2,-8
1000f570:	9462983a 	sll	r17,r18,r17
1000f574:	0025883a 	mov	r18,zero
1000f578:	003ee506 	br	1000f110 <__alt_data_end+0xf800f110>
1000f57c:	d9800715 	stw	r6,28(sp)
1000f580:	d9c00215 	stw	r7,8(sp)
1000f584:	da400415 	stw	r9,16(sp)
1000f588:	00101c00 	call	100101c0 <__clzsi2>
1000f58c:	10c00804 	addi	r3,r2,32
1000f590:	010009c4 	movi	r4,39
1000f594:	d9800717 	ldw	r6,28(sp)
1000f598:	d9c00217 	ldw	r7,8(sp)
1000f59c:	da400417 	ldw	r9,16(sp)
1000f5a0:	20feb40e 	bge	r4,r3,1000f074 <__alt_data_end+0xf800f074>
1000f5a4:	143ffe04 	addi	r16,r2,-8
1000f5a8:	9420983a 	sll	r16,r18,r16
1000f5ac:	002f883a 	mov	r23,zero
1000f5b0:	003eb706 	br	1000f090 <__alt_data_end+0xf800f090>
1000f5b4:	8004977a 	slli	r2,r16,29
1000f5b8:	b82ed0fa 	srli	r23,r23,3
1000f5bc:	8020927a 	slli	r16,r16,9
1000f5c0:	2101ffcc 	andi	r4,r4,2047
1000f5c4:	15eeb03a 	or	r23,r2,r23
1000f5c8:	8020d33a 	srli	r16,r16,12
1000f5cc:	34c0004c 	andi	r19,r6,1
1000f5d0:	003e8706 	br	1000eff0 <__alt_data_end+0xf800eff0>
1000f5d4:	00bf0084 	movi	r2,-1022
1000f5d8:	10c5c83a 	sub	r2,r2,r3
1000f5dc:	01000e04 	movi	r4,56
1000f5e0:	2080080e 	bge	r4,r2,1000f604 <__muldf3+0x77c>
1000f5e4:	34c0004c 	andi	r19,r6,1
1000f5e8:	0009883a 	mov	r4,zero
1000f5ec:	0021883a 	mov	r16,zero
1000f5f0:	002f883a 	mov	r23,zero
1000f5f4:	003e7e06 	br	1000eff0 <__alt_data_end+0xf800eff0>
1000f5f8:	4007883a 	mov	r3,r8
1000f5fc:	480d883a 	mov	r6,r9
1000f600:	003fa506 	br	1000f498 <__alt_data_end+0xf800f498>
1000f604:	010007c4 	movi	r4,31
1000f608:	20801816 	blt	r4,r2,1000f66c <__muldf3+0x7e4>
1000f60c:	18c10784 	addi	r3,r3,1054
1000f610:	80c8983a 	sll	r4,r16,r3
1000f614:	b88ad83a 	srl	r5,r23,r2
1000f618:	b8c6983a 	sll	r3,r23,r3
1000f61c:	80a0d83a 	srl	r16,r16,r2
1000f620:	2908b03a 	or	r4,r5,r4
1000f624:	1804c03a 	cmpne	r2,r3,zero
1000f628:	2088b03a 	or	r4,r4,r2
1000f62c:	208001cc 	andi	r2,r4,7
1000f630:	10000726 	beq	r2,zero,1000f650 <__muldf3+0x7c8>
1000f634:	20c003cc 	andi	r3,r4,15
1000f638:	00800104 	movi	r2,4
1000f63c:	18800426 	beq	r3,r2,1000f650 <__muldf3+0x7c8>
1000f640:	20c00104 	addi	r3,r4,4
1000f644:	1905803a 	cmpltu	r2,r3,r4
1000f648:	80a1883a 	add	r16,r16,r2
1000f64c:	1809883a 	mov	r4,r3
1000f650:	8080202c 	andhi	r2,r16,128
1000f654:	10001b26 	beq	r2,zero,1000f6c4 <__muldf3+0x83c>
1000f658:	34c0004c 	andi	r19,r6,1
1000f65c:	01000044 	movi	r4,1
1000f660:	0021883a 	mov	r16,zero
1000f664:	002f883a 	mov	r23,zero
1000f668:	003e6106 	br	1000eff0 <__alt_data_end+0xf800eff0>
1000f66c:	013ef884 	movi	r4,-1054
1000f670:	20c9c83a 	sub	r4,r4,r3
1000f674:	01400804 	movi	r5,32
1000f678:	8108d83a 	srl	r4,r16,r4
1000f67c:	11401526 	beq	r2,r5,1000f6d4 <__muldf3+0x84c>
1000f680:	18c10f84 	addi	r3,r3,1086
1000f684:	80e0983a 	sll	r16,r16,r3
1000f688:	85eeb03a 	or	r23,r16,r23
1000f68c:	b804c03a 	cmpne	r2,r23,zero
1000f690:	1108b03a 	or	r4,r2,r4
1000f694:	20c001cc 	andi	r3,r4,7
1000f698:	1800061e 	bne	r3,zero,1000f6b4 <__muldf3+0x82c>
1000f69c:	0021883a 	mov	r16,zero
1000f6a0:	202ed0fa 	srli	r23,r4,3
1000f6a4:	34c0004c 	andi	r19,r6,1
1000f6a8:	0009883a 	mov	r4,zero
1000f6ac:	b8eeb03a 	or	r23,r23,r3
1000f6b0:	003e4f06 	br	1000eff0 <__alt_data_end+0xf800eff0>
1000f6b4:	20c003cc 	andi	r3,r4,15
1000f6b8:	00800104 	movi	r2,4
1000f6bc:	0021883a 	mov	r16,zero
1000f6c0:	18bfdf1e 	bne	r3,r2,1000f640 <__alt_data_end+0xf800f640>
1000f6c4:	8004927a 	slli	r2,r16,9
1000f6c8:	8006977a 	slli	r3,r16,29
1000f6cc:	1020d33a 	srli	r16,r2,12
1000f6d0:	003ff306 	br	1000f6a0 <__alt_data_end+0xf800f6a0>
1000f6d4:	0021883a 	mov	r16,zero
1000f6d8:	003feb06 	br	1000f688 <__alt_data_end+0xf800f688>
1000f6dc:	00800434 	movhi	r2,16
1000f6e0:	84000234 	orhi	r16,r16,8
1000f6e4:	10bfffc4 	addi	r2,r2,-1
1000f6e8:	4cc0004c 	andi	r19,r9,1
1000f6ec:	80a0703a 	and	r16,r16,r2
1000f6f0:	003ea606 	br	1000f18c <__alt_data_end+0xf800f18c>

1000f6f4 <__subdf3>:
1000f6f4:	00c00434 	movhi	r3,16
1000f6f8:	18ffffc4 	addi	r3,r3,-1
1000f6fc:	defffb04 	addi	sp,sp,-20
1000f700:	28d2703a 	and	r9,r5,r3
1000f704:	3814d53a 	srli	r10,r7,20
1000f708:	38c6703a 	and	r3,r7,r3
1000f70c:	3004d77a 	srli	r2,r6,29
1000f710:	dc800215 	stw	r18,8(sp)
1000f714:	dc000015 	stw	r16,0(sp)
1000f718:	2824d7fa 	srli	r18,r5,31
1000f71c:	2820d53a 	srli	r16,r5,20
1000f720:	481290fa 	slli	r9,r9,3
1000f724:	200ad77a 	srli	r5,r4,29
1000f728:	180690fa 	slli	r3,r3,3
1000f72c:	dc400115 	stw	r17,4(sp)
1000f730:	dfc00415 	stw	ra,16(sp)
1000f734:	202290fa 	slli	r17,r4,3
1000f738:	dcc00315 	stw	r19,12(sp)
1000f73c:	5281ffcc 	andi	r10,r10,2047
1000f740:	0101ffc4 	movi	r4,2047
1000f744:	9011883a 	mov	r8,r18
1000f748:	8401ffcc 	andi	r16,r16,2047
1000f74c:	94803fcc 	andi	r18,r18,255
1000f750:	494ab03a 	or	r5,r9,r5
1000f754:	380ed7fa 	srli	r7,r7,31
1000f758:	1886b03a 	or	r3,r3,r2
1000f75c:	300c90fa 	slli	r6,r6,3
1000f760:	51009026 	beq	r10,r4,1000f9a4 <__subdf3+0x2b0>
1000f764:	39c0005c 	xori	r7,r7,1
1000f768:	8285c83a 	sub	r2,r16,r10
1000f76c:	91c06f26 	beq	r18,r7,1000f92c <__subdf3+0x238>
1000f770:	0080b10e 	bge	zero,r2,1000fa38 <__subdf3+0x344>
1000f774:	50002a1e 	bne	r10,zero,1000f820 <__subdf3+0x12c>
1000f778:	1988b03a 	or	r4,r3,r6
1000f77c:	2000941e 	bne	r4,zero,1000f9d0 <__subdf3+0x2dc>
1000f780:	888001cc 	andi	r2,r17,7
1000f784:	10005b26 	beq	r2,zero,1000f8f4 <__subdf3+0x200>
1000f788:	88c003cc 	andi	r3,r17,15
1000f78c:	00800104 	movi	r2,4
1000f790:	18805826 	beq	r3,r2,1000f8f4 <__subdf3+0x200>
1000f794:	88c00104 	addi	r3,r17,4
1000f798:	1c63803a 	cmpltu	r17,r3,r17
1000f79c:	2c4b883a 	add	r5,r5,r17
1000f7a0:	2880202c 	andhi	r2,r5,128
1000f7a4:	9200004c 	andi	r8,r18,1
1000f7a8:	1823883a 	mov	r17,r3
1000f7ac:	10005426 	beq	r2,zero,1000f900 <__subdf3+0x20c>
1000f7b0:	84000044 	addi	r16,r16,1
1000f7b4:	0081ffc4 	movi	r2,2047
1000f7b8:	8080bf26 	beq	r16,r2,1000fab8 <__subdf3+0x3c4>
1000f7bc:	013fe034 	movhi	r4,65408
1000f7c0:	213fffc4 	addi	r4,r4,-1
1000f7c4:	290a703a 	and	r5,r5,r4
1000f7c8:	2804977a 	slli	r2,r5,29
1000f7cc:	280a927a 	slli	r5,r5,9
1000f7d0:	8822d0fa 	srli	r17,r17,3
1000f7d4:	8401ffcc 	andi	r16,r16,2047
1000f7d8:	2808d33a 	srli	r4,r5,12
1000f7dc:	1444b03a 	or	r2,r2,r17
1000f7e0:	8401ffcc 	andi	r16,r16,2047
1000f7e4:	800a953a 	slli	r5,r16,20
1000f7e8:	40c03fcc 	andi	r3,r8,255
1000f7ec:	04000434 	movhi	r16,16
1000f7f0:	180697fa 	slli	r3,r3,31
1000f7f4:	843fffc4 	addi	r16,r16,-1
1000f7f8:	2420703a 	and	r16,r4,r16
1000f7fc:	8160b03a 	or	r16,r16,r5
1000f800:	80c6b03a 	or	r3,r16,r3
1000f804:	dfc00417 	ldw	ra,16(sp)
1000f808:	dcc00317 	ldw	r19,12(sp)
1000f80c:	dc800217 	ldw	r18,8(sp)
1000f810:	dc400117 	ldw	r17,4(sp)
1000f814:	dc000017 	ldw	r16,0(sp)
1000f818:	dec00504 	addi	sp,sp,20
1000f81c:	f800283a 	ret
1000f820:	0101ffc4 	movi	r4,2047
1000f824:	813fd626 	beq	r16,r4,1000f780 <__alt_data_end+0xf800f780>
1000f828:	18c02034 	orhi	r3,r3,128
1000f82c:	01000e04 	movi	r4,56
1000f830:	2080a416 	blt	r4,r2,1000fac4 <__subdf3+0x3d0>
1000f834:	010007c4 	movi	r4,31
1000f838:	2080c716 	blt	r4,r2,1000fb58 <__subdf3+0x464>
1000f83c:	01000804 	movi	r4,32
1000f840:	2089c83a 	sub	r4,r4,r2
1000f844:	1910983a 	sll	r8,r3,r4
1000f848:	308ed83a 	srl	r7,r6,r2
1000f84c:	3108983a 	sll	r4,r6,r4
1000f850:	1884d83a 	srl	r2,r3,r2
1000f854:	41ccb03a 	or	r6,r8,r7
1000f858:	2008c03a 	cmpne	r4,r4,zero
1000f85c:	310cb03a 	or	r6,r6,r4
1000f860:	898dc83a 	sub	r6,r17,r6
1000f864:	89a3803a 	cmpltu	r17,r17,r6
1000f868:	288bc83a 	sub	r5,r5,r2
1000f86c:	2c4bc83a 	sub	r5,r5,r17
1000f870:	3023883a 	mov	r17,r6
1000f874:	2880202c 	andhi	r2,r5,128
1000f878:	10006b26 	beq	r2,zero,1000fa28 <__subdf3+0x334>
1000f87c:	04c02034 	movhi	r19,128
1000f880:	9cffffc4 	addi	r19,r19,-1
1000f884:	2ce6703a 	and	r19,r5,r19
1000f888:	98007c26 	beq	r19,zero,1000fa7c <__subdf3+0x388>
1000f88c:	9809883a 	mov	r4,r19
1000f890:	00101c00 	call	100101c0 <__clzsi2>
1000f894:	10fffe04 	addi	r3,r2,-8
1000f898:	010007c4 	movi	r4,31
1000f89c:	20c07d16 	blt	r4,r3,1000fa94 <__subdf3+0x3a0>
1000f8a0:	01400a04 	movi	r5,40
1000f8a4:	2885c83a 	sub	r2,r5,r2
1000f8a8:	888ad83a 	srl	r5,r17,r2
1000f8ac:	98e6983a 	sll	r19,r19,r3
1000f8b0:	88e2983a 	sll	r17,r17,r3
1000f8b4:	2ce6b03a 	or	r19,r5,r19
1000f8b8:	1c007a16 	blt	r3,r16,1000faa4 <__subdf3+0x3b0>
1000f8bc:	1c21c83a 	sub	r16,r3,r16
1000f8c0:	81400044 	addi	r5,r16,1
1000f8c4:	00c007c4 	movi	r3,31
1000f8c8:	19409616 	blt	r3,r5,1000fb24 <__subdf3+0x430>
1000f8cc:	1c21c83a 	sub	r16,r3,r16
1000f8d0:	8c08983a 	sll	r4,r17,r16
1000f8d4:	8946d83a 	srl	r3,r17,r5
1000f8d8:	9c20983a 	sll	r16,r19,r16
1000f8dc:	2008c03a 	cmpne	r4,r4,zero
1000f8e0:	994ad83a 	srl	r5,r19,r5
1000f8e4:	1c06b03a 	or	r3,r3,r16
1000f8e8:	1922b03a 	or	r17,r3,r4
1000f8ec:	0021883a 	mov	r16,zero
1000f8f0:	003fa306 	br	1000f780 <__alt_data_end+0xf800f780>
1000f8f4:	2880202c 	andhi	r2,r5,128
1000f8f8:	9200004c 	andi	r8,r18,1
1000f8fc:	103fac1e 	bne	r2,zero,1000f7b0 <__alt_data_end+0xf800f7b0>
1000f900:	2804977a 	slli	r2,r5,29
1000f904:	8822d0fa 	srli	r17,r17,3
1000f908:	00c1ffc4 	movi	r3,2047
1000f90c:	280ad0fa 	srli	r5,r5,3
1000f910:	1444b03a 	or	r2,r2,r17
1000f914:	80c02726 	beq	r16,r3,1000f9b4 <__subdf3+0x2c0>
1000f918:	01000434 	movhi	r4,16
1000f91c:	213fffc4 	addi	r4,r4,-1
1000f920:	80e0703a 	and	r16,r16,r3
1000f924:	2908703a 	and	r4,r5,r4
1000f928:	003fad06 	br	1000f7e0 <__alt_data_end+0xf800f7e0>
1000f92c:	0080690e 	bge	zero,r2,1000fad4 <__subdf3+0x3e0>
1000f930:	50002f26 	beq	r10,zero,1000f9f0 <__subdf3+0x2fc>
1000f934:	0101ffc4 	movi	r4,2047
1000f938:	813f9126 	beq	r16,r4,1000f780 <__alt_data_end+0xf800f780>
1000f93c:	18c02034 	orhi	r3,r3,128
1000f940:	01000e04 	movi	r4,56
1000f944:	2080b00e 	bge	r4,r2,1000fc08 <__subdf3+0x514>
1000f948:	198cb03a 	or	r6,r3,r6
1000f94c:	300ec03a 	cmpne	r7,r6,zero
1000f950:	0005883a 	mov	r2,zero
1000f954:	3c4f883a 	add	r7,r7,r17
1000f958:	3c63803a 	cmpltu	r17,r7,r17
1000f95c:	114b883a 	add	r5,r2,r5
1000f960:	2c4b883a 	add	r5,r5,r17
1000f964:	3823883a 	mov	r17,r7
1000f968:	2880202c 	andhi	r2,r5,128
1000f96c:	10002e26 	beq	r2,zero,1000fa28 <__subdf3+0x334>
1000f970:	84000044 	addi	r16,r16,1
1000f974:	0081ffc4 	movi	r2,2047
1000f978:	8080de26 	beq	r16,r2,1000fcf4 <__subdf3+0x600>
1000f97c:	00bfe034 	movhi	r2,65408
1000f980:	10bfffc4 	addi	r2,r2,-1
1000f984:	288a703a 	and	r5,r5,r2
1000f988:	880cd07a 	srli	r6,r17,1
1000f98c:	280897fa 	slli	r4,r5,31
1000f990:	88c0004c 	andi	r3,r17,1
1000f994:	30e2b03a 	or	r17,r6,r3
1000f998:	280ad07a 	srli	r5,r5,1
1000f99c:	8922b03a 	or	r17,r17,r4
1000f9a0:	003f7706 	br	1000f780 <__alt_data_end+0xf800f780>
1000f9a4:	1984b03a 	or	r2,r3,r6
1000f9a8:	103f6e26 	beq	r2,zero,1000f764 <__alt_data_end+0xf800f764>
1000f9ac:	39c03fcc 	andi	r7,r7,255
1000f9b0:	003f6d06 	br	1000f768 <__alt_data_end+0xf800f768>
1000f9b4:	1146b03a 	or	r3,r2,r5
1000f9b8:	18003f26 	beq	r3,zero,1000fab8 <__subdf3+0x3c4>
1000f9bc:	00c00434 	movhi	r3,16
1000f9c0:	29000234 	orhi	r4,r5,8
1000f9c4:	18ffffc4 	addi	r3,r3,-1
1000f9c8:	20c8703a 	and	r4,r4,r3
1000f9cc:	003f8406 	br	1000f7e0 <__alt_data_end+0xf800f7e0>
1000f9d0:	10bfffc4 	addi	r2,r2,-1
1000f9d4:	1000501e 	bne	r2,zero,1000fb18 <__subdf3+0x424>
1000f9d8:	898fc83a 	sub	r7,r17,r6
1000f9dc:	89e3803a 	cmpltu	r17,r17,r7
1000f9e0:	28cbc83a 	sub	r5,r5,r3
1000f9e4:	2c4bc83a 	sub	r5,r5,r17
1000f9e8:	3823883a 	mov	r17,r7
1000f9ec:	003fa106 	br	1000f874 <__alt_data_end+0xf800f874>
1000f9f0:	1988b03a 	or	r4,r3,r6
1000f9f4:	203f6226 	beq	r4,zero,1000f780 <__alt_data_end+0xf800f780>
1000f9f8:	10bfffc4 	addi	r2,r2,-1
1000f9fc:	10009b1e 	bne	r2,zero,1000fc6c <__subdf3+0x578>
1000fa00:	344d883a 	add	r6,r6,r17
1000fa04:	3463803a 	cmpltu	r17,r6,r17
1000fa08:	194b883a 	add	r5,r3,r5
1000fa0c:	2c4b883a 	add	r5,r5,r17
1000fa10:	3023883a 	mov	r17,r6
1000fa14:	003fd406 	br	1000f968 <__alt_data_end+0xf800f968>
1000fa18:	1106b03a 	or	r3,r2,r4
1000fa1c:	1800b426 	beq	r3,zero,1000fcf0 <__subdf3+0x5fc>
1000fa20:	100b883a 	mov	r5,r2
1000fa24:	2023883a 	mov	r17,r4
1000fa28:	888001cc 	andi	r2,r17,7
1000fa2c:	103f561e 	bne	r2,zero,1000f788 <__alt_data_end+0xf800f788>
1000fa30:	9200004c 	andi	r8,r18,1
1000fa34:	003fb206 	br	1000f900 <__alt_data_end+0xf800f900>
1000fa38:	1000531e 	bne	r2,zero,1000fb88 <__subdf3+0x494>
1000fa3c:	80800044 	addi	r2,r16,1
1000fa40:	1081ffcc 	andi	r2,r2,2047
1000fa44:	01000044 	movi	r4,1
1000fa48:	2080a00e 	bge	r4,r2,1000fccc <__subdf3+0x5d8>
1000fa4c:	8985c83a 	sub	r2,r17,r6
1000fa50:	8889803a 	cmpltu	r4,r17,r2
1000fa54:	28e7c83a 	sub	r19,r5,r3
1000fa58:	9927c83a 	sub	r19,r19,r4
1000fa5c:	9900202c 	andhi	r4,r19,128
1000fa60:	20006226 	beq	r4,zero,1000fbec <__subdf3+0x4f8>
1000fa64:	3463c83a 	sub	r17,r6,r17
1000fa68:	194bc83a 	sub	r5,r3,r5
1000fa6c:	344d803a 	cmpltu	r6,r6,r17
1000fa70:	29a7c83a 	sub	r19,r5,r6
1000fa74:	3825883a 	mov	r18,r7
1000fa78:	983f841e 	bne	r19,zero,1000f88c <__alt_data_end+0xf800f88c>
1000fa7c:	8809883a 	mov	r4,r17
1000fa80:	00101c00 	call	100101c0 <__clzsi2>
1000fa84:	10800804 	addi	r2,r2,32
1000fa88:	10fffe04 	addi	r3,r2,-8
1000fa8c:	010007c4 	movi	r4,31
1000fa90:	20ff830e 	bge	r4,r3,1000f8a0 <__alt_data_end+0xf800f8a0>
1000fa94:	14fff604 	addi	r19,r2,-40
1000fa98:	8ce6983a 	sll	r19,r17,r19
1000fa9c:	0023883a 	mov	r17,zero
1000faa0:	1c3f860e 	bge	r3,r16,1000f8bc <__alt_data_end+0xf800f8bc>
1000faa4:	017fe034 	movhi	r5,65408
1000faa8:	297fffc4 	addi	r5,r5,-1
1000faac:	80e1c83a 	sub	r16,r16,r3
1000fab0:	994a703a 	and	r5,r19,r5
1000fab4:	003f3206 	br	1000f780 <__alt_data_end+0xf800f780>
1000fab8:	0009883a 	mov	r4,zero
1000fabc:	0005883a 	mov	r2,zero
1000fac0:	003f4706 	br	1000f7e0 <__alt_data_end+0xf800f7e0>
1000fac4:	198cb03a 	or	r6,r3,r6
1000fac8:	300cc03a 	cmpne	r6,r6,zero
1000facc:	0005883a 	mov	r2,zero
1000fad0:	003f6306 	br	1000f860 <__alt_data_end+0xf800f860>
1000fad4:	10009d1e 	bne	r2,zero,1000fd4c <__subdf3+0x658>
1000fad8:	81c00044 	addi	r7,r16,1
1000fadc:	3881ffcc 	andi	r2,r7,2047
1000fae0:	02400044 	movi	r9,1
1000fae4:	4880680e 	bge	r9,r2,1000fc88 <__subdf3+0x594>
1000fae8:	0081ffc4 	movi	r2,2047
1000faec:	3880ae26 	beq	r7,r2,1000fda8 <__subdf3+0x6b4>
1000faf0:	344d883a 	add	r6,r6,r17
1000faf4:	3463803a 	cmpltu	r17,r6,r17
1000faf8:	194b883a 	add	r5,r3,r5
1000fafc:	2c4b883a 	add	r5,r5,r17
1000fb00:	282297fa 	slli	r17,r5,31
1000fb04:	300cd07a 	srli	r6,r6,1
1000fb08:	280ad07a 	srli	r5,r5,1
1000fb0c:	3821883a 	mov	r16,r7
1000fb10:	89a2b03a 	or	r17,r17,r6
1000fb14:	003f1a06 	br	1000f780 <__alt_data_end+0xf800f780>
1000fb18:	0101ffc4 	movi	r4,2047
1000fb1c:	813f431e 	bne	r16,r4,1000f82c <__alt_data_end+0xf800f82c>
1000fb20:	003f1706 	br	1000f780 <__alt_data_end+0xf800f780>
1000fb24:	80bff844 	addi	r2,r16,-31
1000fb28:	00c00804 	movi	r3,32
1000fb2c:	9884d83a 	srl	r2,r19,r2
1000fb30:	28c05126 	beq	r5,r3,1000fc78 <__subdf3+0x584>
1000fb34:	00c00fc4 	movi	r3,63
1000fb38:	1c21c83a 	sub	r16,r3,r16
1000fb3c:	9c26983a 	sll	r19,r19,r16
1000fb40:	9c62b03a 	or	r17,r19,r17
1000fb44:	8822c03a 	cmpne	r17,r17,zero
1000fb48:	88a2b03a 	or	r17,r17,r2
1000fb4c:	000b883a 	mov	r5,zero
1000fb50:	0021883a 	mov	r16,zero
1000fb54:	003fb406 	br	1000fa28 <__alt_data_end+0xf800fa28>
1000fb58:	113ff804 	addi	r4,r2,-32
1000fb5c:	01c00804 	movi	r7,32
1000fb60:	1908d83a 	srl	r4,r3,r4
1000fb64:	11c04626 	beq	r2,r7,1000fc80 <__subdf3+0x58c>
1000fb68:	01c01004 	movi	r7,64
1000fb6c:	3885c83a 	sub	r2,r7,r2
1000fb70:	1884983a 	sll	r2,r3,r2
1000fb74:	118cb03a 	or	r6,r2,r6
1000fb78:	300cc03a 	cmpne	r6,r6,zero
1000fb7c:	310cb03a 	or	r6,r6,r4
1000fb80:	0005883a 	mov	r2,zero
1000fb84:	003f3606 	br	1000f860 <__alt_data_end+0xf800f860>
1000fb88:	80002b26 	beq	r16,zero,1000fc38 <__subdf3+0x544>
1000fb8c:	0101ffc4 	movi	r4,2047
1000fb90:	51006926 	beq	r10,r4,1000fd38 <__subdf3+0x644>
1000fb94:	0085c83a 	sub	r2,zero,r2
1000fb98:	29402034 	orhi	r5,r5,128
1000fb9c:	01000e04 	movi	r4,56
1000fba0:	20807d16 	blt	r4,r2,1000fd98 <__subdf3+0x6a4>
1000fba4:	010007c4 	movi	r4,31
1000fba8:	2080d916 	blt	r4,r2,1000ff10 <__subdf3+0x81c>
1000fbac:	01000804 	movi	r4,32
1000fbb0:	2089c83a 	sub	r4,r4,r2
1000fbb4:	2912983a 	sll	r9,r5,r4
1000fbb8:	8890d83a 	srl	r8,r17,r2
1000fbbc:	8908983a 	sll	r4,r17,r4
1000fbc0:	2884d83a 	srl	r2,r5,r2
1000fbc4:	4a22b03a 	or	r17,r9,r8
1000fbc8:	2008c03a 	cmpne	r4,r4,zero
1000fbcc:	8922b03a 	or	r17,r17,r4
1000fbd0:	3463c83a 	sub	r17,r6,r17
1000fbd4:	1885c83a 	sub	r2,r3,r2
1000fbd8:	344d803a 	cmpltu	r6,r6,r17
1000fbdc:	118bc83a 	sub	r5,r2,r6
1000fbe0:	5021883a 	mov	r16,r10
1000fbe4:	3825883a 	mov	r18,r7
1000fbe8:	003f2206 	br	1000f874 <__alt_data_end+0xf800f874>
1000fbec:	9886b03a 	or	r3,r19,r2
1000fbf0:	18001c1e 	bne	r3,zero,1000fc64 <__subdf3+0x570>
1000fbf4:	0011883a 	mov	r8,zero
1000fbf8:	000b883a 	mov	r5,zero
1000fbfc:	0023883a 	mov	r17,zero
1000fc00:	0021883a 	mov	r16,zero
1000fc04:	003f3e06 	br	1000f900 <__alt_data_end+0xf800f900>
1000fc08:	010007c4 	movi	r4,31
1000fc0c:	20803c16 	blt	r4,r2,1000fd00 <__subdf3+0x60c>
1000fc10:	01000804 	movi	r4,32
1000fc14:	2089c83a 	sub	r4,r4,r2
1000fc18:	1912983a 	sll	r9,r3,r4
1000fc1c:	308ed83a 	srl	r7,r6,r2
1000fc20:	3108983a 	sll	r4,r6,r4
1000fc24:	1884d83a 	srl	r2,r3,r2
1000fc28:	49ceb03a 	or	r7,r9,r7
1000fc2c:	2008c03a 	cmpne	r4,r4,zero
1000fc30:	390eb03a 	or	r7,r7,r4
1000fc34:	003f4706 	br	1000f954 <__alt_data_end+0xf800f954>
1000fc38:	2c48b03a 	or	r4,r5,r17
1000fc3c:	20003e26 	beq	r4,zero,1000fd38 <__subdf3+0x644>
1000fc40:	0084303a 	nor	r2,zero,r2
1000fc44:	10003a1e 	bne	r2,zero,1000fd30 <__subdf3+0x63c>
1000fc48:	3463c83a 	sub	r17,r6,r17
1000fc4c:	194bc83a 	sub	r5,r3,r5
1000fc50:	344d803a 	cmpltu	r6,r6,r17
1000fc54:	298bc83a 	sub	r5,r5,r6
1000fc58:	5021883a 	mov	r16,r10
1000fc5c:	3825883a 	mov	r18,r7
1000fc60:	003f0406 	br	1000f874 <__alt_data_end+0xf800f874>
1000fc64:	1023883a 	mov	r17,r2
1000fc68:	003f0706 	br	1000f888 <__alt_data_end+0xf800f888>
1000fc6c:	0101ffc4 	movi	r4,2047
1000fc70:	813f331e 	bne	r16,r4,1000f940 <__alt_data_end+0xf800f940>
1000fc74:	003ec206 	br	1000f780 <__alt_data_end+0xf800f780>
1000fc78:	0027883a 	mov	r19,zero
1000fc7c:	003fb006 	br	1000fb40 <__alt_data_end+0xf800fb40>
1000fc80:	0005883a 	mov	r2,zero
1000fc84:	003fbb06 	br	1000fb74 <__alt_data_end+0xf800fb74>
1000fc88:	2c44b03a 	or	r2,r5,r17
1000fc8c:	80008b1e 	bne	r16,zero,1000febc <__subdf3+0x7c8>
1000fc90:	1000b526 	beq	r2,zero,1000ff68 <__subdf3+0x874>
1000fc94:	1984b03a 	or	r2,r3,r6
1000fc98:	103eb926 	beq	r2,zero,1000f780 <__alt_data_end+0xf800f780>
1000fc9c:	3449883a 	add	r4,r6,r17
1000fca0:	2463803a 	cmpltu	r17,r4,r17
1000fca4:	194b883a 	add	r5,r3,r5
1000fca8:	2c4b883a 	add	r5,r5,r17
1000fcac:	2880202c 	andhi	r2,r5,128
1000fcb0:	2023883a 	mov	r17,r4
1000fcb4:	103f5c26 	beq	r2,zero,1000fa28 <__alt_data_end+0xf800fa28>
1000fcb8:	00bfe034 	movhi	r2,65408
1000fcbc:	10bfffc4 	addi	r2,r2,-1
1000fcc0:	4821883a 	mov	r16,r9
1000fcc4:	288a703a 	and	r5,r5,r2
1000fcc8:	003ead06 	br	1000f780 <__alt_data_end+0xf800f780>
1000fccc:	2c44b03a 	or	r2,r5,r17
1000fcd0:	8000291e 	bne	r16,zero,1000fd78 <__subdf3+0x684>
1000fcd4:	10004f1e 	bne	r2,zero,1000fe14 <__subdf3+0x720>
1000fcd8:	1984b03a 	or	r2,r3,r6
1000fcdc:	10000426 	beq	r2,zero,1000fcf0 <__subdf3+0x5fc>
1000fce0:	180b883a 	mov	r5,r3
1000fce4:	3023883a 	mov	r17,r6
1000fce8:	3825883a 	mov	r18,r7
1000fcec:	003ea406 	br	1000f780 <__alt_data_end+0xf800f780>
1000fcf0:	0011883a 	mov	r8,zero
1000fcf4:	000b883a 	mov	r5,zero
1000fcf8:	0023883a 	mov	r17,zero
1000fcfc:	003f0006 	br	1000f900 <__alt_data_end+0xf800f900>
1000fd00:	11fff804 	addi	r7,r2,-32
1000fd04:	19c8d83a 	srl	r4,r3,r7
1000fd08:	01c00804 	movi	r7,32
1000fd0c:	11c07e26 	beq	r2,r7,1000ff08 <__subdf3+0x814>
1000fd10:	01c01004 	movi	r7,64
1000fd14:	3885c83a 	sub	r2,r7,r2
1000fd18:	1884983a 	sll	r2,r3,r2
1000fd1c:	118cb03a 	or	r6,r2,r6
1000fd20:	300ec03a 	cmpne	r7,r6,zero
1000fd24:	390eb03a 	or	r7,r7,r4
1000fd28:	0005883a 	mov	r2,zero
1000fd2c:	003f0906 	br	1000f954 <__alt_data_end+0xf800f954>
1000fd30:	0101ffc4 	movi	r4,2047
1000fd34:	513f991e 	bne	r10,r4,1000fb9c <__alt_data_end+0xf800fb9c>
1000fd38:	180b883a 	mov	r5,r3
1000fd3c:	3023883a 	mov	r17,r6
1000fd40:	5021883a 	mov	r16,r10
1000fd44:	3825883a 	mov	r18,r7
1000fd48:	003e8d06 	br	1000f780 <__alt_data_end+0xf800f780>
1000fd4c:	80001a1e 	bne	r16,zero,1000fdb8 <__subdf3+0x6c4>
1000fd50:	2c48b03a 	or	r4,r5,r17
1000fd54:	20005526 	beq	r4,zero,1000feac <__subdf3+0x7b8>
1000fd58:	0084303a 	nor	r2,zero,r2
1000fd5c:	1000511e 	bne	r2,zero,1000fea4 <__subdf3+0x7b0>
1000fd60:	89a3883a 	add	r17,r17,r6
1000fd64:	194b883a 	add	r5,r3,r5
1000fd68:	898d803a 	cmpltu	r6,r17,r6
1000fd6c:	298b883a 	add	r5,r5,r6
1000fd70:	5021883a 	mov	r16,r10
1000fd74:	003efc06 	br	1000f968 <__alt_data_end+0xf800f968>
1000fd78:	1000341e 	bne	r2,zero,1000fe4c <__subdf3+0x758>
1000fd7c:	1984b03a 	or	r2,r3,r6
1000fd80:	10006f26 	beq	r2,zero,1000ff40 <__subdf3+0x84c>
1000fd84:	180b883a 	mov	r5,r3
1000fd88:	3023883a 	mov	r17,r6
1000fd8c:	3825883a 	mov	r18,r7
1000fd90:	0401ffc4 	movi	r16,2047
1000fd94:	003e7a06 	br	1000f780 <__alt_data_end+0xf800f780>
1000fd98:	2c62b03a 	or	r17,r5,r17
1000fd9c:	8822c03a 	cmpne	r17,r17,zero
1000fda0:	0005883a 	mov	r2,zero
1000fda4:	003f8a06 	br	1000fbd0 <__alt_data_end+0xf800fbd0>
1000fda8:	3821883a 	mov	r16,r7
1000fdac:	000b883a 	mov	r5,zero
1000fdb0:	0023883a 	mov	r17,zero
1000fdb4:	003ed206 	br	1000f900 <__alt_data_end+0xf800f900>
1000fdb8:	0101ffc4 	movi	r4,2047
1000fdbc:	51003b26 	beq	r10,r4,1000feac <__subdf3+0x7b8>
1000fdc0:	0085c83a 	sub	r2,zero,r2
1000fdc4:	29402034 	orhi	r5,r5,128
1000fdc8:	01000e04 	movi	r4,56
1000fdcc:	20806216 	blt	r4,r2,1000ff58 <__subdf3+0x864>
1000fdd0:	010007c4 	movi	r4,31
1000fdd4:	20806b16 	blt	r4,r2,1000ff84 <__subdf3+0x890>
1000fdd8:	01000804 	movi	r4,32
1000fddc:	2089c83a 	sub	r4,r4,r2
1000fde0:	2912983a 	sll	r9,r5,r4
1000fde4:	888ed83a 	srl	r7,r17,r2
1000fde8:	8908983a 	sll	r4,r17,r4
1000fdec:	2884d83a 	srl	r2,r5,r2
1000fdf0:	49e2b03a 	or	r17,r9,r7
1000fdf4:	2008c03a 	cmpne	r4,r4,zero
1000fdf8:	8922b03a 	or	r17,r17,r4
1000fdfc:	89a3883a 	add	r17,r17,r6
1000fe00:	10c5883a 	add	r2,r2,r3
1000fe04:	898d803a 	cmpltu	r6,r17,r6
1000fe08:	118b883a 	add	r5,r2,r6
1000fe0c:	5021883a 	mov	r16,r10
1000fe10:	003ed506 	br	1000f968 <__alt_data_end+0xf800f968>
1000fe14:	1984b03a 	or	r2,r3,r6
1000fe18:	103e5926 	beq	r2,zero,1000f780 <__alt_data_end+0xf800f780>
1000fe1c:	8989c83a 	sub	r4,r17,r6
1000fe20:	8911803a 	cmpltu	r8,r17,r4
1000fe24:	28c5c83a 	sub	r2,r5,r3
1000fe28:	1205c83a 	sub	r2,r2,r8
1000fe2c:	1200202c 	andhi	r8,r2,128
1000fe30:	403ef926 	beq	r8,zero,1000fa18 <__alt_data_end+0xf800fa18>
1000fe34:	3463c83a 	sub	r17,r6,r17
1000fe38:	194bc83a 	sub	r5,r3,r5
1000fe3c:	344d803a 	cmpltu	r6,r6,r17
1000fe40:	298bc83a 	sub	r5,r5,r6
1000fe44:	3825883a 	mov	r18,r7
1000fe48:	003e4d06 	br	1000f780 <__alt_data_end+0xf800f780>
1000fe4c:	1984b03a 	or	r2,r3,r6
1000fe50:	10002b26 	beq	r2,zero,1000ff00 <__subdf3+0x80c>
1000fe54:	2808d0fa 	srli	r4,r5,3
1000fe58:	8822d0fa 	srli	r17,r17,3
1000fe5c:	280a977a 	slli	r5,r5,29
1000fe60:	2080022c 	andhi	r2,r4,8
1000fe64:	2c62b03a 	or	r17,r5,r17
1000fe68:	10000826 	beq	r2,zero,1000fe8c <__subdf3+0x798>
1000fe6c:	1810d0fa 	srli	r8,r3,3
1000fe70:	4080022c 	andhi	r2,r8,8
1000fe74:	1000051e 	bne	r2,zero,1000fe8c <__subdf3+0x798>
1000fe78:	300cd0fa 	srli	r6,r6,3
1000fe7c:	1804977a 	slli	r2,r3,29
1000fe80:	4009883a 	mov	r4,r8
1000fe84:	3825883a 	mov	r18,r7
1000fe88:	11a2b03a 	or	r17,r2,r6
1000fe8c:	880ad77a 	srli	r5,r17,29
1000fe90:	200890fa 	slli	r4,r4,3
1000fe94:	882290fa 	slli	r17,r17,3
1000fe98:	0401ffc4 	movi	r16,2047
1000fe9c:	290ab03a 	or	r5,r5,r4
1000fea0:	003e3706 	br	1000f780 <__alt_data_end+0xf800f780>
1000fea4:	0101ffc4 	movi	r4,2047
1000fea8:	513fc71e 	bne	r10,r4,1000fdc8 <__alt_data_end+0xf800fdc8>
1000feac:	180b883a 	mov	r5,r3
1000feb0:	3023883a 	mov	r17,r6
1000feb4:	5021883a 	mov	r16,r10
1000feb8:	003e3106 	br	1000f780 <__alt_data_end+0xf800f780>
1000febc:	10002d26 	beq	r2,zero,1000ff74 <__subdf3+0x880>
1000fec0:	1984b03a 	or	r2,r3,r6
1000fec4:	10000e26 	beq	r2,zero,1000ff00 <__subdf3+0x80c>
1000fec8:	2808d0fa 	srli	r4,r5,3
1000fecc:	8822d0fa 	srli	r17,r17,3
1000fed0:	280a977a 	slli	r5,r5,29
1000fed4:	2080022c 	andhi	r2,r4,8
1000fed8:	2c62b03a 	or	r17,r5,r17
1000fedc:	103feb26 	beq	r2,zero,1000fe8c <__alt_data_end+0xf800fe8c>
1000fee0:	180ed0fa 	srli	r7,r3,3
1000fee4:	3880022c 	andhi	r2,r7,8
1000fee8:	103fe81e 	bne	r2,zero,1000fe8c <__alt_data_end+0xf800fe8c>
1000feec:	300cd0fa 	srli	r6,r6,3
1000fef0:	1804977a 	slli	r2,r3,29
1000fef4:	3809883a 	mov	r4,r7
1000fef8:	11a2b03a 	or	r17,r2,r6
1000fefc:	003fe306 	br	1000fe8c <__alt_data_end+0xf800fe8c>
1000ff00:	0401ffc4 	movi	r16,2047
1000ff04:	003e1e06 	br	1000f780 <__alt_data_end+0xf800f780>
1000ff08:	0005883a 	mov	r2,zero
1000ff0c:	003f8306 	br	1000fd1c <__alt_data_end+0xf800fd1c>
1000ff10:	113ff804 	addi	r4,r2,-32
1000ff14:	02000804 	movi	r8,32
1000ff18:	2908d83a 	srl	r4,r5,r4
1000ff1c:	12002526 	beq	r2,r8,1000ffb4 <__subdf3+0x8c0>
1000ff20:	02001004 	movi	r8,64
1000ff24:	4085c83a 	sub	r2,r8,r2
1000ff28:	288a983a 	sll	r5,r5,r2
1000ff2c:	2c62b03a 	or	r17,r5,r17
1000ff30:	8822c03a 	cmpne	r17,r17,zero
1000ff34:	8922b03a 	or	r17,r17,r4
1000ff38:	0005883a 	mov	r2,zero
1000ff3c:	003f2406 	br	1000fbd0 <__alt_data_end+0xf800fbd0>
1000ff40:	01402034 	movhi	r5,128
1000ff44:	0011883a 	mov	r8,zero
1000ff48:	297fffc4 	addi	r5,r5,-1
1000ff4c:	047ffe04 	movi	r17,-8
1000ff50:	0401ffc4 	movi	r16,2047
1000ff54:	003e6a06 	br	1000f900 <__alt_data_end+0xf800f900>
1000ff58:	2c62b03a 	or	r17,r5,r17
1000ff5c:	8822c03a 	cmpne	r17,r17,zero
1000ff60:	0005883a 	mov	r2,zero
1000ff64:	003fa506 	br	1000fdfc <__alt_data_end+0xf800fdfc>
1000ff68:	180b883a 	mov	r5,r3
1000ff6c:	3023883a 	mov	r17,r6
1000ff70:	003e0306 	br	1000f780 <__alt_data_end+0xf800f780>
1000ff74:	180b883a 	mov	r5,r3
1000ff78:	3023883a 	mov	r17,r6
1000ff7c:	0401ffc4 	movi	r16,2047
1000ff80:	003dff06 	br	1000f780 <__alt_data_end+0xf800f780>
1000ff84:	113ff804 	addi	r4,r2,-32
1000ff88:	01c00804 	movi	r7,32
1000ff8c:	2908d83a 	srl	r4,r5,r4
1000ff90:	11c00a26 	beq	r2,r7,1000ffbc <__subdf3+0x8c8>
1000ff94:	01c01004 	movi	r7,64
1000ff98:	3885c83a 	sub	r2,r7,r2
1000ff9c:	288a983a 	sll	r5,r5,r2
1000ffa0:	2c62b03a 	or	r17,r5,r17
1000ffa4:	8822c03a 	cmpne	r17,r17,zero
1000ffa8:	8922b03a 	or	r17,r17,r4
1000ffac:	0005883a 	mov	r2,zero
1000ffb0:	003f9206 	br	1000fdfc <__alt_data_end+0xf800fdfc>
1000ffb4:	000b883a 	mov	r5,zero
1000ffb8:	003fdc06 	br	1000ff2c <__alt_data_end+0xf800ff2c>
1000ffbc:	000b883a 	mov	r5,zero
1000ffc0:	003ff706 	br	1000ffa0 <__alt_data_end+0xf800ffa0>

1000ffc4 <__fixdfsi>:
1000ffc4:	2806d53a 	srli	r3,r5,20
1000ffc8:	00800434 	movhi	r2,16
1000ffcc:	10bfffc4 	addi	r2,r2,-1
1000ffd0:	18c1ffcc 	andi	r3,r3,2047
1000ffd4:	0180ff84 	movi	r6,1022
1000ffd8:	2884703a 	and	r2,r5,r2
1000ffdc:	280ad7fa 	srli	r5,r5,31
1000ffe0:	30c0130e 	bge	r6,r3,10010030 <__fixdfsi+0x6c>
1000ffe4:	01810744 	movi	r6,1053
1000ffe8:	30c00d16 	blt	r6,r3,10010020 <__fixdfsi+0x5c>
1000ffec:	01810cc4 	movi	r6,1075
1000fff0:	30cdc83a 	sub	r6,r6,r3
1000fff4:	01c007c4 	movi	r7,31
1000fff8:	10800434 	orhi	r2,r2,16
1000fffc:	39800e0e 	bge	r7,r6,10010038 <__fixdfsi+0x74>
10010000:	010104c4 	movi	r4,1043
10010004:	20c7c83a 	sub	r3,r4,r3
10010008:	10c6d83a 	srl	r3,r2,r3
1001000c:	29403fcc 	andi	r5,r5,255
10010010:	0145c83a 	sub	r2,zero,r5
10010014:	1884f03a 	xor	r2,r3,r2
10010018:	1145883a 	add	r2,r2,r5
1001001c:	f800283a 	ret
10010020:	00a00034 	movhi	r2,32768
10010024:	10bfffc4 	addi	r2,r2,-1
10010028:	2885883a 	add	r2,r5,r2
1001002c:	f800283a 	ret
10010030:	0005883a 	mov	r2,zero
10010034:	f800283a 	ret
10010038:	18fefb44 	addi	r3,r3,-1043
1001003c:	2188d83a 	srl	r4,r4,r6
10010040:	10c6983a 	sll	r3,r2,r3
10010044:	20c6b03a 	or	r3,r4,r3
10010048:	003ff006 	br	1001000c <__alt_data_end+0xf801000c>

1001004c <__floatsidf>:
1001004c:	defffd04 	addi	sp,sp,-12
10010050:	dc400115 	stw	r17,4(sp)
10010054:	dfc00215 	stw	ra,8(sp)
10010058:	dc000015 	stw	r16,0(sp)
1001005c:	2023883a 	mov	r17,r4
10010060:	20001426 	beq	r4,zero,100100b4 <__floatsidf+0x68>
10010064:	2020d7fa 	srli	r16,r4,31
10010068:	80000126 	beq	r16,zero,10010070 <__floatsidf+0x24>
1001006c:	0123c83a 	sub	r17,zero,r4
10010070:	8809883a 	mov	r4,r17
10010074:	00101c00 	call	100101c0 <__clzsi2>
10010078:	01410784 	movi	r5,1054
1001007c:	00c00284 	movi	r3,10
10010080:	288bc83a 	sub	r5,r5,r2
10010084:	18801c16 	blt	r3,r2,100100f8 <__floatsidf+0xac>
10010088:	00c002c4 	movi	r3,11
1001008c:	1887c83a 	sub	r3,r3,r2
10010090:	88c8d83a 	srl	r4,r17,r3
10010094:	00c00434 	movhi	r3,16
10010098:	18ffffc4 	addi	r3,r3,-1
1001009c:	10800544 	addi	r2,r2,21
100100a0:	20c8703a 	and	r4,r4,r3
100100a4:	8884983a 	sll	r2,r17,r2
100100a8:	28c1ffcc 	andi	r3,r5,2047
100100ac:	800d883a 	mov	r6,r16
100100b0:	00000406 	br	100100c4 <__floatsidf+0x78>
100100b4:	000d883a 	mov	r6,zero
100100b8:	0007883a 	mov	r3,zero
100100bc:	0009883a 	mov	r4,zero
100100c0:	0005883a 	mov	r2,zero
100100c4:	180a953a 	slli	r5,r3,20
100100c8:	31803fcc 	andi	r6,r6,255
100100cc:	00c00434 	movhi	r3,16
100100d0:	300c97fa 	slli	r6,r6,31
100100d4:	18ffffc4 	addi	r3,r3,-1
100100d8:	20c6703a 	and	r3,r4,r3
100100dc:	1946b03a 	or	r3,r3,r5
100100e0:	1986b03a 	or	r3,r3,r6
100100e4:	dfc00217 	ldw	ra,8(sp)
100100e8:	dc400117 	ldw	r17,4(sp)
100100ec:	dc000017 	ldw	r16,0(sp)
100100f0:	dec00304 	addi	sp,sp,12
100100f4:	f800283a 	ret
100100f8:	10fffd44 	addi	r3,r2,-11
100100fc:	88c8983a 	sll	r4,r17,r3
10010100:	00800434 	movhi	r2,16
10010104:	10bfffc4 	addi	r2,r2,-1
10010108:	2088703a 	and	r4,r4,r2
1001010c:	28c1ffcc 	andi	r3,r5,2047
10010110:	800d883a 	mov	r6,r16
10010114:	0005883a 	mov	r2,zero
10010118:	003fea06 	br	100100c4 <__alt_data_end+0xf80100c4>

1001011c <__floatunsidf>:
1001011c:	defffe04 	addi	sp,sp,-8
10010120:	dc000015 	stw	r16,0(sp)
10010124:	dfc00115 	stw	ra,4(sp)
10010128:	2021883a 	mov	r16,r4
1001012c:	20001026 	beq	r4,zero,10010170 <__floatunsidf+0x54>
10010130:	00101c00 	call	100101c0 <__clzsi2>
10010134:	01410784 	movi	r5,1054
10010138:	100d883a 	mov	r6,r2
1001013c:	288bc83a 	sub	r5,r5,r2
10010140:	00800284 	movi	r2,10
10010144:	11801616 	blt	r2,r6,100101a0 <__floatunsidf+0x84>
10010148:	008002c4 	movi	r2,11
1001014c:	1185c83a 	sub	r2,r2,r6
10010150:	8084d83a 	srl	r2,r16,r2
10010154:	00c00434 	movhi	r3,16
10010158:	31c00544 	addi	r7,r6,21
1001015c:	18ffffc4 	addi	r3,r3,-1
10010160:	81e0983a 	sll	r16,r16,r7
10010164:	10cc703a 	and	r6,r2,r3
10010168:	2941ffcc 	andi	r5,r5,2047
1001016c:	00000206 	br	10010178 <__floatunsidf+0x5c>
10010170:	000b883a 	mov	r5,zero
10010174:	000d883a 	mov	r6,zero
10010178:	280a953a 	slli	r5,r5,20
1001017c:	00c00434 	movhi	r3,16
10010180:	18ffffc4 	addi	r3,r3,-1
10010184:	30c6703a 	and	r3,r6,r3
10010188:	8005883a 	mov	r2,r16
1001018c:	1946b03a 	or	r3,r3,r5
10010190:	dfc00117 	ldw	ra,4(sp)
10010194:	dc000017 	ldw	r16,0(sp)
10010198:	dec00204 	addi	sp,sp,8
1001019c:	f800283a 	ret
100101a0:	31bffd44 	addi	r6,r6,-11
100101a4:	818c983a 	sll	r6,r16,r6
100101a8:	00800434 	movhi	r2,16
100101ac:	10bfffc4 	addi	r2,r2,-1
100101b0:	2941ffcc 	andi	r5,r5,2047
100101b4:	0021883a 	mov	r16,zero
100101b8:	308c703a 	and	r6,r6,r2
100101bc:	003fee06 	br	10010178 <__alt_data_end+0xf8010178>

100101c0 <__clzsi2>:
100101c0:	00bfffd4 	movui	r2,65535
100101c4:	11000b36 	bltu	r2,r4,100101f4 <__clzsi2+0x34>
100101c8:	00803fc4 	movi	r2,255
100101cc:	1100122e 	bgeu	r2,r4,10010218 <__clzsi2+0x58>
100101d0:	00c00204 	movi	r3,8
100101d4:	01400604 	movi	r5,24
100101d8:	20c8d83a 	srl	r4,r4,r3
100101dc:	00840074 	movhi	r2,4097
100101e0:	108ce804 	addi	r2,r2,13216
100101e4:	1109883a 	add	r4,r2,r4
100101e8:	20800003 	ldbu	r2,0(r4)
100101ec:	2885c83a 	sub	r2,r5,r2
100101f0:	f800283a 	ret
100101f4:	00804034 	movhi	r2,256
100101f8:	10bfffc4 	addi	r2,r2,-1
100101fc:	11000336 	bltu	r2,r4,1001020c <__clzsi2+0x4c>
10010200:	00c00404 	movi	r3,16
10010204:	180b883a 	mov	r5,r3
10010208:	003ff306 	br	100101d8 <__alt_data_end+0xf80101d8>
1001020c:	00c00604 	movi	r3,24
10010210:	01400204 	movi	r5,8
10010214:	003ff006 	br	100101d8 <__alt_data_end+0xf80101d8>
10010218:	0007883a 	mov	r3,zero
1001021c:	01400804 	movi	r5,32
10010220:	003fed06 	br	100101d8 <__alt_data_end+0xf80101d8>

10010224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010224:	defffe04 	addi	sp,sp,-8
10010228:	dfc00115 	stw	ra,4(sp)
1001022c:	df000015 	stw	fp,0(sp)
10010230:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010234:	00840074 	movhi	r2,4097
10010238:	1093eb04 	addi	r2,r2,20396
1001023c:	10800017 	ldw	r2,0(r2)
10010240:	10000526 	beq	r2,zero,10010258 <alt_get_errno+0x34>
10010244:	00840074 	movhi	r2,4097
10010248:	1093eb04 	addi	r2,r2,20396
1001024c:	10800017 	ldw	r2,0(r2)
10010250:	103ee83a 	callr	r2
10010254:	00000206 	br	10010260 <alt_get_errno+0x3c>
10010258:	00840074 	movhi	r2,4097
1001025c:	109aba04 	addi	r2,r2,27368
}
10010260:	e037883a 	mov	sp,fp
10010264:	dfc00117 	ldw	ra,4(sp)
10010268:	df000017 	ldw	fp,0(sp)
1001026c:	dec00204 	addi	sp,sp,8
10010270:	f800283a 	ret

10010274 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10010274:	defffb04 	addi	sp,sp,-20
10010278:	dfc00415 	stw	ra,16(sp)
1001027c:	df000315 	stw	fp,12(sp)
10010280:	df000304 	addi	fp,sp,12
10010284:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10010288:	e0bfff17 	ldw	r2,-4(fp)
1001028c:	10000816 	blt	r2,zero,100102b0 <close+0x3c>
10010290:	e13fff17 	ldw	r4,-4(fp)
10010294:	01400304 	movi	r5,12
10010298:	00039ec0 	call	100039ec <__mulsi3>
1001029c:	1007883a 	mov	r3,r2
100102a0:	00840074 	movhi	r2,4097
100102a4:	108f6804 	addi	r2,r2,15776
100102a8:	1885883a 	add	r2,r3,r2
100102ac:	00000106 	br	100102b4 <close+0x40>
100102b0:	0005883a 	mov	r2,zero
100102b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100102b8:	e0bffd17 	ldw	r2,-12(fp)
100102bc:	10001926 	beq	r2,zero,10010324 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100102c0:	e0bffd17 	ldw	r2,-12(fp)
100102c4:	10800017 	ldw	r2,0(r2)
100102c8:	10800417 	ldw	r2,16(r2)
100102cc:	10000626 	beq	r2,zero,100102e8 <close+0x74>
100102d0:	e0bffd17 	ldw	r2,-12(fp)
100102d4:	10800017 	ldw	r2,0(r2)
100102d8:	10800417 	ldw	r2,16(r2)
100102dc:	e13ffd17 	ldw	r4,-12(fp)
100102e0:	103ee83a 	callr	r2
100102e4:	00000106 	br	100102ec <close+0x78>
100102e8:	0005883a 	mov	r2,zero
100102ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100102f0:	e13fff17 	ldw	r4,-4(fp)
100102f4:	00109980 	call	10010998 <alt_release_fd>
    if (rval < 0)
100102f8:	e0bffe17 	ldw	r2,-8(fp)
100102fc:	1000070e 	bge	r2,zero,1001031c <close+0xa8>
    {
      ALT_ERRNO = -rval;
10010300:	00102240 	call	10010224 <alt_get_errno>
10010304:	1007883a 	mov	r3,r2
10010308:	e0bffe17 	ldw	r2,-8(fp)
1001030c:	0085c83a 	sub	r2,zero,r2
10010310:	18800015 	stw	r2,0(r3)
      return -1;
10010314:	00bfffc4 	movi	r2,-1
10010318:	00000706 	br	10010338 <close+0xc4>
    }
    return 0;
1001031c:	0005883a 	mov	r2,zero
10010320:	00000506 	br	10010338 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010324:	00102240 	call	10010224 <alt_get_errno>
10010328:	1007883a 	mov	r3,r2
1001032c:	00801444 	movi	r2,81
10010330:	18800015 	stw	r2,0(r3)
    return -1;
10010334:	00bfffc4 	movi	r2,-1
  }
}
10010338:	e037883a 	mov	sp,fp
1001033c:	dfc00117 	ldw	ra,4(sp)
10010340:	df000017 	ldw	fp,0(sp)
10010344:	dec00204 	addi	sp,sp,8
10010348:	f800283a 	ret

1001034c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1001034c:	defffc04 	addi	sp,sp,-16
10010350:	df000315 	stw	fp,12(sp)
10010354:	df000304 	addi	fp,sp,12
10010358:	e13ffd15 	stw	r4,-12(fp)
1001035c:	e17ffe15 	stw	r5,-8(fp)
10010360:	e1bfff15 	stw	r6,-4(fp)
  return len;
10010364:	e0bfff17 	ldw	r2,-4(fp)
}
10010368:	e037883a 	mov	sp,fp
1001036c:	df000017 	ldw	fp,0(sp)
10010370:	dec00104 	addi	sp,sp,4
10010374:	f800283a 	ret

10010378 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010378:	defffe04 	addi	sp,sp,-8
1001037c:	dfc00115 	stw	ra,4(sp)
10010380:	df000015 	stw	fp,0(sp)
10010384:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010388:	00840074 	movhi	r2,4097
1001038c:	1093eb04 	addi	r2,r2,20396
10010390:	10800017 	ldw	r2,0(r2)
10010394:	10000526 	beq	r2,zero,100103ac <alt_get_errno+0x34>
10010398:	00840074 	movhi	r2,4097
1001039c:	1093eb04 	addi	r2,r2,20396
100103a0:	10800017 	ldw	r2,0(r2)
100103a4:	103ee83a 	callr	r2
100103a8:	00000206 	br	100103b4 <alt_get_errno+0x3c>
100103ac:	00840074 	movhi	r2,4097
100103b0:	109aba04 	addi	r2,r2,27368
}
100103b4:	e037883a 	mov	sp,fp
100103b8:	dfc00117 	ldw	ra,4(sp)
100103bc:	df000017 	ldw	fp,0(sp)
100103c0:	dec00204 	addi	sp,sp,8
100103c4:	f800283a 	ret

100103c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100103c8:	defffb04 	addi	sp,sp,-20
100103cc:	dfc00415 	stw	ra,16(sp)
100103d0:	df000315 	stw	fp,12(sp)
100103d4:	df000304 	addi	fp,sp,12
100103d8:	e13ffe15 	stw	r4,-8(fp)
100103dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100103e0:	e0bffe17 	ldw	r2,-8(fp)
100103e4:	10000816 	blt	r2,zero,10010408 <fstat+0x40>
100103e8:	e13ffe17 	ldw	r4,-8(fp)
100103ec:	01400304 	movi	r5,12
100103f0:	00039ec0 	call	100039ec <__mulsi3>
100103f4:	1007883a 	mov	r3,r2
100103f8:	00840074 	movhi	r2,4097
100103fc:	108f6804 	addi	r2,r2,15776
10010400:	1885883a 	add	r2,r3,r2
10010404:	00000106 	br	1001040c <fstat+0x44>
10010408:	0005883a 	mov	r2,zero
1001040c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10010410:	e0bffd17 	ldw	r2,-12(fp)
10010414:	10001026 	beq	r2,zero,10010458 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10010418:	e0bffd17 	ldw	r2,-12(fp)
1001041c:	10800017 	ldw	r2,0(r2)
10010420:	10800817 	ldw	r2,32(r2)
10010424:	10000726 	beq	r2,zero,10010444 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10010428:	e0bffd17 	ldw	r2,-12(fp)
1001042c:	10800017 	ldw	r2,0(r2)
10010430:	10800817 	ldw	r2,32(r2)
10010434:	e13ffd17 	ldw	r4,-12(fp)
10010438:	e17fff17 	ldw	r5,-4(fp)
1001043c:	103ee83a 	callr	r2
10010440:	00000a06 	br	1001046c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10010444:	e0bfff17 	ldw	r2,-4(fp)
10010448:	00c80004 	movi	r3,8192
1001044c:	10c00115 	stw	r3,4(r2)
      return 0;
10010450:	0005883a 	mov	r2,zero
10010454:	00000506 	br	1001046c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010458:	00103780 	call	10010378 <alt_get_errno>
1001045c:	1007883a 	mov	r3,r2
10010460:	00801444 	movi	r2,81
10010464:	18800015 	stw	r2,0(r3)
    return -1;
10010468:	00bfffc4 	movi	r2,-1
  }
}
1001046c:	e037883a 	mov	sp,fp
10010470:	dfc00117 	ldw	ra,4(sp)
10010474:	df000017 	ldw	fp,0(sp)
10010478:	dec00204 	addi	sp,sp,8
1001047c:	f800283a 	ret

10010480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010480:	defffe04 	addi	sp,sp,-8
10010484:	dfc00115 	stw	ra,4(sp)
10010488:	df000015 	stw	fp,0(sp)
1001048c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010490:	00840074 	movhi	r2,4097
10010494:	1093eb04 	addi	r2,r2,20396
10010498:	10800017 	ldw	r2,0(r2)
1001049c:	10000526 	beq	r2,zero,100104b4 <alt_get_errno+0x34>
100104a0:	00840074 	movhi	r2,4097
100104a4:	1093eb04 	addi	r2,r2,20396
100104a8:	10800017 	ldw	r2,0(r2)
100104ac:	103ee83a 	callr	r2
100104b0:	00000206 	br	100104bc <alt_get_errno+0x3c>
100104b4:	00840074 	movhi	r2,4097
100104b8:	109aba04 	addi	r2,r2,27368
}
100104bc:	e037883a 	mov	sp,fp
100104c0:	dfc00117 	ldw	ra,4(sp)
100104c4:	df000017 	ldw	fp,0(sp)
100104c8:	dec00204 	addi	sp,sp,8
100104cc:	f800283a 	ret

100104d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100104d0:	deffed04 	addi	sp,sp,-76
100104d4:	dfc01215 	stw	ra,72(sp)
100104d8:	df001115 	stw	fp,68(sp)
100104dc:	df001104 	addi	fp,sp,68
100104e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100104e4:	e0bfff17 	ldw	r2,-4(fp)
100104e8:	10000816 	blt	r2,zero,1001050c <isatty+0x3c>
100104ec:	e13fff17 	ldw	r4,-4(fp)
100104f0:	01400304 	movi	r5,12
100104f4:	00039ec0 	call	100039ec <__mulsi3>
100104f8:	1007883a 	mov	r3,r2
100104fc:	00840074 	movhi	r2,4097
10010500:	108f6804 	addi	r2,r2,15776
10010504:	1885883a 	add	r2,r3,r2
10010508:	00000106 	br	10010510 <isatty+0x40>
1001050c:	0005883a 	mov	r2,zero
10010510:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10010514:	e0bfef17 	ldw	r2,-68(fp)
10010518:	10000e26 	beq	r2,zero,10010554 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1001051c:	e0bfef17 	ldw	r2,-68(fp)
10010520:	10800017 	ldw	r2,0(r2)
10010524:	10800817 	ldw	r2,32(r2)
10010528:	1000021e 	bne	r2,zero,10010534 <isatty+0x64>
    {
      return 1;
1001052c:	00800044 	movi	r2,1
10010530:	00000d06 	br	10010568 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10010534:	e0bff004 	addi	r2,fp,-64
10010538:	e13fff17 	ldw	r4,-4(fp)
1001053c:	100b883a 	mov	r5,r2
10010540:	00103c80 	call	100103c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10010544:	e0bff117 	ldw	r2,-60(fp)
10010548:	10880020 	cmpeqi	r2,r2,8192
1001054c:	10803fcc 	andi	r2,r2,255
10010550:	00000506 	br	10010568 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010554:	00104800 	call	10010480 <alt_get_errno>
10010558:	1007883a 	mov	r3,r2
1001055c:	00801444 	movi	r2,81
10010560:	18800015 	stw	r2,0(r3)
    return 0;
10010564:	0005883a 	mov	r2,zero
  }
}
10010568:	e037883a 	mov	sp,fp
1001056c:	dfc00117 	ldw	ra,4(sp)
10010570:	df000017 	ldw	fp,0(sp)
10010574:	dec00204 	addi	sp,sp,8
10010578:	f800283a 	ret

1001057c <alt_load_section>:
1001057c:	defffc04 	addi	sp,sp,-16
10010580:	df000315 	stw	fp,12(sp)
10010584:	df000304 	addi	fp,sp,12
10010588:	e13ffd15 	stw	r4,-12(fp)
1001058c:	e17ffe15 	stw	r5,-8(fp)
10010590:	e1bfff15 	stw	r6,-4(fp)
10010594:	e0fffe17 	ldw	r3,-8(fp)
10010598:	e0bffd17 	ldw	r2,-12(fp)
1001059c:	18800c26 	beq	r3,r2,100105d0 <alt_load_section+0x54>
100105a0:	00000806 	br	100105c4 <alt_load_section+0x48>
100105a4:	e0bffe17 	ldw	r2,-8(fp)
100105a8:	10c00104 	addi	r3,r2,4
100105ac:	e0fffe15 	stw	r3,-8(fp)
100105b0:	e0fffd17 	ldw	r3,-12(fp)
100105b4:	19000104 	addi	r4,r3,4
100105b8:	e13ffd15 	stw	r4,-12(fp)
100105bc:	18c00017 	ldw	r3,0(r3)
100105c0:	10c00015 	stw	r3,0(r2)
100105c4:	e0fffe17 	ldw	r3,-8(fp)
100105c8:	e0bfff17 	ldw	r2,-4(fp)
100105cc:	18bff51e 	bne	r3,r2,100105a4 <__alt_data_end+0xf80105a4>
100105d0:	e037883a 	mov	sp,fp
100105d4:	df000017 	ldw	fp,0(sp)
100105d8:	dec00104 	addi	sp,sp,4
100105dc:	f800283a 	ret

100105e0 <alt_load>:
100105e0:	defffe04 	addi	sp,sp,-8
100105e4:	dfc00115 	stw	ra,4(sp)
100105e8:	df000015 	stw	fp,0(sp)
100105ec:	d839883a 	mov	fp,sp
100105f0:	01040074 	movhi	r4,4097
100105f4:	2113f004 	addi	r4,r4,20416
100105f8:	01440074 	movhi	r5,4097
100105fc:	294d3504 	addi	r5,r5,13524
10010600:	01840074 	movhi	r6,4097
10010604:	3193f004 	addi	r6,r6,20416
10010608:	001057c0 	call	1001057c <alt_load_section>
1001060c:	01040034 	movhi	r4,4096
10010610:	21000804 	addi	r4,r4,32
10010614:	01440034 	movhi	r5,4096
10010618:	29400804 	addi	r5,r5,32
1001061c:	01840034 	movhi	r6,4096
10010620:	31806f04 	addi	r6,r6,444
10010624:	001057c0 	call	1001057c <alt_load_section>
10010628:	01040074 	movhi	r4,4097
1001062c:	210a9a04 	addi	r4,r4,10856
10010630:	01440074 	movhi	r5,4097
10010634:	294a9a04 	addi	r5,r5,10856
10010638:	01840074 	movhi	r6,4097
1001063c:	318d3504 	addi	r6,r6,13524
10010640:	001057c0 	call	1001057c <alt_load_section>
10010644:	00119e00 	call	100119e0 <alt_dcache_flush_all>
10010648:	0011ba80 	call	10011ba8 <alt_icache_flush_all>
1001064c:	e037883a 	mov	sp,fp
10010650:	dfc00117 	ldw	ra,4(sp)
10010654:	df000017 	ldw	fp,0(sp)
10010658:	dec00204 	addi	sp,sp,8
1001065c:	f800283a 	ret

10010660 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010660:	defffe04 	addi	sp,sp,-8
10010664:	dfc00115 	stw	ra,4(sp)
10010668:	df000015 	stw	fp,0(sp)
1001066c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010670:	00840074 	movhi	r2,4097
10010674:	1093eb04 	addi	r2,r2,20396
10010678:	10800017 	ldw	r2,0(r2)
1001067c:	10000526 	beq	r2,zero,10010694 <alt_get_errno+0x34>
10010680:	00840074 	movhi	r2,4097
10010684:	1093eb04 	addi	r2,r2,20396
10010688:	10800017 	ldw	r2,0(r2)
1001068c:	103ee83a 	callr	r2
10010690:	00000206 	br	1001069c <alt_get_errno+0x3c>
10010694:	00840074 	movhi	r2,4097
10010698:	109aba04 	addi	r2,r2,27368
}
1001069c:	e037883a 	mov	sp,fp
100106a0:	dfc00117 	ldw	ra,4(sp)
100106a4:	df000017 	ldw	fp,0(sp)
100106a8:	dec00204 	addi	sp,sp,8
100106ac:	f800283a 	ret

100106b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
100106b0:	defff904 	addi	sp,sp,-28
100106b4:	dfc00615 	stw	ra,24(sp)
100106b8:	df000515 	stw	fp,20(sp)
100106bc:	df000504 	addi	fp,sp,20
100106c0:	e13ffd15 	stw	r4,-12(fp)
100106c4:	e17ffe15 	stw	r5,-8(fp)
100106c8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100106cc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100106d0:	e0bffd17 	ldw	r2,-12(fp)
100106d4:	10000816 	blt	r2,zero,100106f8 <lseek+0x48>
100106d8:	e13ffd17 	ldw	r4,-12(fp)
100106dc:	01400304 	movi	r5,12
100106e0:	00039ec0 	call	100039ec <__mulsi3>
100106e4:	1007883a 	mov	r3,r2
100106e8:	00840074 	movhi	r2,4097
100106ec:	108f6804 	addi	r2,r2,15776
100106f0:	1885883a 	add	r2,r3,r2
100106f4:	00000106 	br	100106fc <lseek+0x4c>
100106f8:	0005883a 	mov	r2,zero
100106fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10010700:	e0bffc17 	ldw	r2,-16(fp)
10010704:	10001026 	beq	r2,zero,10010748 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10010708:	e0bffc17 	ldw	r2,-16(fp)
1001070c:	10800017 	ldw	r2,0(r2)
10010710:	10800717 	ldw	r2,28(r2)
10010714:	10000926 	beq	r2,zero,1001073c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10010718:	e0bffc17 	ldw	r2,-16(fp)
1001071c:	10800017 	ldw	r2,0(r2)
10010720:	10800717 	ldw	r2,28(r2)
10010724:	e13ffc17 	ldw	r4,-16(fp)
10010728:	e17ffe17 	ldw	r5,-8(fp)
1001072c:	e1bfff17 	ldw	r6,-4(fp)
10010730:	103ee83a 	callr	r2
10010734:	e0bffb15 	stw	r2,-20(fp)
10010738:	00000506 	br	10010750 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1001073c:	00bfde84 	movi	r2,-134
10010740:	e0bffb15 	stw	r2,-20(fp)
10010744:	00000206 	br	10010750 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10010748:	00bfebc4 	movi	r2,-81
1001074c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10010750:	e0bffb17 	ldw	r2,-20(fp)
10010754:	1000070e 	bge	r2,zero,10010774 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10010758:	00106600 	call	10010660 <alt_get_errno>
1001075c:	1007883a 	mov	r3,r2
10010760:	e0bffb17 	ldw	r2,-20(fp)
10010764:	0085c83a 	sub	r2,zero,r2
10010768:	18800015 	stw	r2,0(r3)
    rc = -1;
1001076c:	00bfffc4 	movi	r2,-1
10010770:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10010774:	e0bffb17 	ldw	r2,-20(fp)
}
10010778:	e037883a 	mov	sp,fp
1001077c:	dfc00117 	ldw	ra,4(sp)
10010780:	df000017 	ldw	fp,0(sp)
10010784:	dec00204 	addi	sp,sp,8
10010788:	f800283a 	ret

1001078c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1001078c:	defffd04 	addi	sp,sp,-12
10010790:	dfc00215 	stw	ra,8(sp)
10010794:	df000115 	stw	fp,4(sp)
10010798:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1001079c:	0009883a 	mov	r4,zero
100107a0:	0010c800 	call	10010c80 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100107a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100107a8:	0010cb40 	call	10010cb4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
100107ac:	01040074 	movhi	r4,4097
100107b0:	210d2b04 	addi	r4,r4,13484
100107b4:	01440074 	movhi	r5,4097
100107b8:	294d2b04 	addi	r5,r5,13484
100107bc:	01840074 	movhi	r6,4097
100107c0:	318d2b04 	addi	r6,r6,13484
100107c4:	0011f740 	call	10011f74 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100107c8:	0011af00 	call	10011af0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100107cc:	01040074 	movhi	r4,4097
100107d0:	2106d304 	addi	r4,r4,6988
100107d4:	00126c40 	call	100126c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100107d8:	d126db17 	ldw	r4,-25748(gp)
100107dc:	d0e6dc17 	ldw	r3,-25744(gp)
100107e0:	d0a6dd17 	ldw	r2,-25740(gp)
100107e4:	180b883a 	mov	r5,r3
100107e8:	100d883a 	mov	r6,r2
100107ec:	000031c0 	call	1000031c <main>
100107f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100107f4:	01000044 	movi	r4,1
100107f8:	00102740 	call	10010274 <close>
  exit (result);
100107fc:	e13fff17 	ldw	r4,-4(fp)
10010800:	00126d80 	call	100126d8 <exit>

10010804 <__malloc_lock>:
10010804:	defffe04 	addi	sp,sp,-8
10010808:	df000115 	stw	fp,4(sp)
1001080c:	df000104 	addi	fp,sp,4
10010810:	e13fff15 	stw	r4,-4(fp)
10010814:	e037883a 	mov	sp,fp
10010818:	df000017 	ldw	fp,0(sp)
1001081c:	dec00104 	addi	sp,sp,4
10010820:	f800283a 	ret

10010824 <__malloc_unlock>:
10010824:	defffe04 	addi	sp,sp,-8
10010828:	df000115 	stw	fp,4(sp)
1001082c:	df000104 	addi	fp,sp,4
10010830:	e13fff15 	stw	r4,-4(fp)
10010834:	e037883a 	mov	sp,fp
10010838:	df000017 	ldw	fp,0(sp)
1001083c:	dec00104 	addi	sp,sp,4
10010840:	f800283a 	ret

10010844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010844:	defffe04 	addi	sp,sp,-8
10010848:	dfc00115 	stw	ra,4(sp)
1001084c:	df000015 	stw	fp,0(sp)
10010850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010854:	00840074 	movhi	r2,4097
10010858:	1093eb04 	addi	r2,r2,20396
1001085c:	10800017 	ldw	r2,0(r2)
10010860:	10000526 	beq	r2,zero,10010878 <alt_get_errno+0x34>
10010864:	00840074 	movhi	r2,4097
10010868:	1093eb04 	addi	r2,r2,20396
1001086c:	10800017 	ldw	r2,0(r2)
10010870:	103ee83a 	callr	r2
10010874:	00000206 	br	10010880 <alt_get_errno+0x3c>
10010878:	00840074 	movhi	r2,4097
1001087c:	109aba04 	addi	r2,r2,27368
}
10010880:	e037883a 	mov	sp,fp
10010884:	dfc00117 	ldw	ra,4(sp)
10010888:	df000017 	ldw	fp,0(sp)
1001088c:	dec00204 	addi	sp,sp,8
10010890:	f800283a 	ret

10010894 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10010894:	defff904 	addi	sp,sp,-28
10010898:	dfc00615 	stw	ra,24(sp)
1001089c:	df000515 	stw	fp,20(sp)
100108a0:	df000504 	addi	fp,sp,20
100108a4:	e13ffd15 	stw	r4,-12(fp)
100108a8:	e17ffe15 	stw	r5,-8(fp)
100108ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100108b0:	e0bffd17 	ldw	r2,-12(fp)
100108b4:	10000816 	blt	r2,zero,100108d8 <read+0x44>
100108b8:	e13ffd17 	ldw	r4,-12(fp)
100108bc:	01400304 	movi	r5,12
100108c0:	00039ec0 	call	100039ec <__mulsi3>
100108c4:	1007883a 	mov	r3,r2
100108c8:	00840074 	movhi	r2,4097
100108cc:	108f6804 	addi	r2,r2,15776
100108d0:	1885883a 	add	r2,r3,r2
100108d4:	00000106 	br	100108dc <read+0x48>
100108d8:	0005883a 	mov	r2,zero
100108dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100108e0:	e0bffb17 	ldw	r2,-20(fp)
100108e4:	10002226 	beq	r2,zero,10010970 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100108e8:	e0bffb17 	ldw	r2,-20(fp)
100108ec:	10800217 	ldw	r2,8(r2)
100108f0:	108000cc 	andi	r2,r2,3
100108f4:	10800060 	cmpeqi	r2,r2,1
100108f8:	1000181e 	bne	r2,zero,1001095c <read+0xc8>
        (fd->dev->read))
100108fc:	e0bffb17 	ldw	r2,-20(fp)
10010900:	10800017 	ldw	r2,0(r2)
10010904:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10010908:	10001426 	beq	r2,zero,1001095c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1001090c:	e0bffb17 	ldw	r2,-20(fp)
10010910:	10800017 	ldw	r2,0(r2)
10010914:	10800517 	ldw	r2,20(r2)
10010918:	e0ffff17 	ldw	r3,-4(fp)
1001091c:	e13ffb17 	ldw	r4,-20(fp)
10010920:	e17ffe17 	ldw	r5,-8(fp)
10010924:	180d883a 	mov	r6,r3
10010928:	103ee83a 	callr	r2
1001092c:	e0bffc15 	stw	r2,-16(fp)
10010930:	e0bffc17 	ldw	r2,-16(fp)
10010934:	1000070e 	bge	r2,zero,10010954 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10010938:	00108440 	call	10010844 <alt_get_errno>
1001093c:	1007883a 	mov	r3,r2
10010940:	e0bffc17 	ldw	r2,-16(fp)
10010944:	0085c83a 	sub	r2,zero,r2
10010948:	18800015 	stw	r2,0(r3)
          return -1;
1001094c:	00bfffc4 	movi	r2,-1
10010950:	00000c06 	br	10010984 <read+0xf0>
        }
        return rval;
10010954:	e0bffc17 	ldw	r2,-16(fp)
10010958:	00000a06 	br	10010984 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1001095c:	00108440 	call	10010844 <alt_get_errno>
10010960:	1007883a 	mov	r3,r2
10010964:	00800344 	movi	r2,13
10010968:	18800015 	stw	r2,0(r3)
1001096c:	00000406 	br	10010980 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10010970:	00108440 	call	10010844 <alt_get_errno>
10010974:	1007883a 	mov	r3,r2
10010978:	00801444 	movi	r2,81
1001097c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010980:	00bfffc4 	movi	r2,-1
}
10010984:	e037883a 	mov	sp,fp
10010988:	dfc00117 	ldw	ra,4(sp)
1001098c:	df000017 	ldw	fp,0(sp)
10010990:	dec00204 	addi	sp,sp,8
10010994:	f800283a 	ret

10010998 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010998:	defffc04 	addi	sp,sp,-16
1001099c:	dfc00315 	stw	ra,12(sp)
100109a0:	df000215 	stw	fp,8(sp)
100109a4:	dc000115 	stw	r16,4(sp)
100109a8:	df000204 	addi	fp,sp,8
100109ac:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
100109b0:	e0bffe17 	ldw	r2,-8(fp)
100109b4:	108000d0 	cmplti	r2,r2,3
100109b8:	1000111e 	bne	r2,zero,10010a00 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100109bc:	04040074 	movhi	r16,4097
100109c0:	840f6804 	addi	r16,r16,15776
100109c4:	e0bffe17 	ldw	r2,-8(fp)
100109c8:	1009883a 	mov	r4,r2
100109cc:	01400304 	movi	r5,12
100109d0:	00039ec0 	call	100039ec <__mulsi3>
100109d4:	8085883a 	add	r2,r16,r2
100109d8:	10800204 	addi	r2,r2,8
100109dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100109e0:	04040074 	movhi	r16,4097
100109e4:	840f6804 	addi	r16,r16,15776
100109e8:	e0bffe17 	ldw	r2,-8(fp)
100109ec:	1009883a 	mov	r4,r2
100109f0:	01400304 	movi	r5,12
100109f4:	00039ec0 	call	100039ec <__mulsi3>
100109f8:	8085883a 	add	r2,r16,r2
100109fc:	10000015 	stw	zero,0(r2)
  }
}
10010a00:	e6ffff04 	addi	sp,fp,-4
10010a04:	dfc00217 	ldw	ra,8(sp)
10010a08:	df000117 	ldw	fp,4(sp)
10010a0c:	dc000017 	ldw	r16,0(sp)
10010a10:	dec00304 	addi	sp,sp,12
10010a14:	f800283a 	ret

10010a18 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10010a18:	defff904 	addi	sp,sp,-28
10010a1c:	df000615 	stw	fp,24(sp)
10010a20:	df000604 	addi	fp,sp,24
10010a24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010a28:	0005303a 	rdctl	r2,status
10010a2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010a30:	e0fffc17 	ldw	r3,-16(fp)
10010a34:	00bfff84 	movi	r2,-2
10010a38:	1884703a 	and	r2,r3,r2
10010a3c:	1001703a 	wrctl	status,r2
  
  return context;
10010a40:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10010a44:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10010a48:	d0a00c17 	ldw	r2,-32720(gp)
10010a4c:	10c000c4 	addi	r3,r2,3
10010a50:	00bfff04 	movi	r2,-4
10010a54:	1884703a 	and	r2,r3,r2
10010a58:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010a5c:	d0e00c17 	ldw	r3,-32720(gp)
10010a60:	e0bfff17 	ldw	r2,-4(fp)
10010a64:	1887883a 	add	r3,r3,r2
10010a68:	00860034 	movhi	r2,6144
10010a6c:	10800004 	addi	r2,r2,0
10010a70:	10c0062e 	bgeu	r2,r3,10010a8c <sbrk+0x74>
10010a74:	e0bffa17 	ldw	r2,-24(fp)
10010a78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010a7c:	e0bffd17 	ldw	r2,-12(fp)
10010a80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010a84:	00bfffc4 	movi	r2,-1
10010a88:	00000b06 	br	10010ab8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010a8c:	d0a00c17 	ldw	r2,-32720(gp)
10010a90:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10010a94:	d0e00c17 	ldw	r3,-32720(gp)
10010a98:	e0bfff17 	ldw	r2,-4(fp)
10010a9c:	1885883a 	add	r2,r3,r2
10010aa0:	d0a00c15 	stw	r2,-32720(gp)
10010aa4:	e0bffa17 	ldw	r2,-24(fp)
10010aa8:	e0bffe15 	stw	r2,-8(fp)
10010aac:	e0bffe17 	ldw	r2,-8(fp)
10010ab0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010ab4:	e0bffb17 	ldw	r2,-20(fp)
} 
10010ab8:	e037883a 	mov	sp,fp
10010abc:	df000017 	ldw	fp,0(sp)
10010ac0:	dec00104 	addi	sp,sp,4
10010ac4:	f800283a 	ret

10010ac8 <usleep>:
10010ac8:	defffd04 	addi	sp,sp,-12
10010acc:	dfc00215 	stw	ra,8(sp)
10010ad0:	df000115 	stw	fp,4(sp)
10010ad4:	df000104 	addi	fp,sp,4
10010ad8:	e13fff15 	stw	r4,-4(fp)
10010adc:	e13fff17 	ldw	r4,-4(fp)
10010ae0:	00118880 	call	10011888 <alt_busy_sleep>
10010ae4:	e037883a 	mov	sp,fp
10010ae8:	dfc00117 	ldw	ra,4(sp)
10010aec:	df000017 	ldw	fp,0(sp)
10010af0:	dec00204 	addi	sp,sp,8
10010af4:	f800283a 	ret

10010af8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010af8:	defffe04 	addi	sp,sp,-8
10010afc:	dfc00115 	stw	ra,4(sp)
10010b00:	df000015 	stw	fp,0(sp)
10010b04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010b08:	00840074 	movhi	r2,4097
10010b0c:	1093eb04 	addi	r2,r2,20396
10010b10:	10800017 	ldw	r2,0(r2)
10010b14:	10000526 	beq	r2,zero,10010b2c <alt_get_errno+0x34>
10010b18:	00840074 	movhi	r2,4097
10010b1c:	1093eb04 	addi	r2,r2,20396
10010b20:	10800017 	ldw	r2,0(r2)
10010b24:	103ee83a 	callr	r2
10010b28:	00000206 	br	10010b34 <alt_get_errno+0x3c>
10010b2c:	00840074 	movhi	r2,4097
10010b30:	109aba04 	addi	r2,r2,27368
}
10010b34:	e037883a 	mov	sp,fp
10010b38:	dfc00117 	ldw	ra,4(sp)
10010b3c:	df000017 	ldw	fp,0(sp)
10010b40:	dec00204 	addi	sp,sp,8
10010b44:	f800283a 	ret

10010b48 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10010b48:	defff904 	addi	sp,sp,-28
10010b4c:	dfc00615 	stw	ra,24(sp)
10010b50:	df000515 	stw	fp,20(sp)
10010b54:	df000504 	addi	fp,sp,20
10010b58:	e13ffd15 	stw	r4,-12(fp)
10010b5c:	e17ffe15 	stw	r5,-8(fp)
10010b60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010b64:	e0bffd17 	ldw	r2,-12(fp)
10010b68:	10000816 	blt	r2,zero,10010b8c <write+0x44>
10010b6c:	e13ffd17 	ldw	r4,-12(fp)
10010b70:	01400304 	movi	r5,12
10010b74:	00039ec0 	call	100039ec <__mulsi3>
10010b78:	1007883a 	mov	r3,r2
10010b7c:	00840074 	movhi	r2,4097
10010b80:	108f6804 	addi	r2,r2,15776
10010b84:	1885883a 	add	r2,r3,r2
10010b88:	00000106 	br	10010b90 <write+0x48>
10010b8c:	0005883a 	mov	r2,zero
10010b90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010b94:	e0bffb17 	ldw	r2,-20(fp)
10010b98:	10002126 	beq	r2,zero,10010c20 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010b9c:	e0bffb17 	ldw	r2,-20(fp)
10010ba0:	10800217 	ldw	r2,8(r2)
10010ba4:	108000cc 	andi	r2,r2,3
10010ba8:	10001826 	beq	r2,zero,10010c0c <write+0xc4>
10010bac:	e0bffb17 	ldw	r2,-20(fp)
10010bb0:	10800017 	ldw	r2,0(r2)
10010bb4:	10800617 	ldw	r2,24(r2)
10010bb8:	10001426 	beq	r2,zero,10010c0c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010bbc:	e0bffb17 	ldw	r2,-20(fp)
10010bc0:	10800017 	ldw	r2,0(r2)
10010bc4:	10800617 	ldw	r2,24(r2)
10010bc8:	e0ffff17 	ldw	r3,-4(fp)
10010bcc:	e13ffb17 	ldw	r4,-20(fp)
10010bd0:	e17ffe17 	ldw	r5,-8(fp)
10010bd4:	180d883a 	mov	r6,r3
10010bd8:	103ee83a 	callr	r2
10010bdc:	e0bffc15 	stw	r2,-16(fp)
10010be0:	e0bffc17 	ldw	r2,-16(fp)
10010be4:	1000070e 	bge	r2,zero,10010c04 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10010be8:	0010af80 	call	10010af8 <alt_get_errno>
10010bec:	1007883a 	mov	r3,r2
10010bf0:	e0bffc17 	ldw	r2,-16(fp)
10010bf4:	0085c83a 	sub	r2,zero,r2
10010bf8:	18800015 	stw	r2,0(r3)
        return -1;
10010bfc:	00bfffc4 	movi	r2,-1
10010c00:	00000c06 	br	10010c34 <write+0xec>
      }
      return rval;
10010c04:	e0bffc17 	ldw	r2,-16(fp)
10010c08:	00000a06 	br	10010c34 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010c0c:	0010af80 	call	10010af8 <alt_get_errno>
10010c10:	1007883a 	mov	r3,r2
10010c14:	00800344 	movi	r2,13
10010c18:	18800015 	stw	r2,0(r3)
10010c1c:	00000406 	br	10010c30 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010c20:	0010af80 	call	10010af8 <alt_get_errno>
10010c24:	1007883a 	mov	r3,r2
10010c28:	00801444 	movi	r2,81
10010c2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010c30:	00bfffc4 	movi	r2,-1
}
10010c34:	e037883a 	mov	sp,fp
10010c38:	dfc00117 	ldw	ra,4(sp)
10010c3c:	df000017 	ldw	fp,0(sp)
10010c40:	dec00204 	addi	sp,sp,8
10010c44:	f800283a 	ret

10010c48 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010c48:	defffd04 	addi	sp,sp,-12
10010c4c:	dfc00215 	stw	ra,8(sp)
10010c50:	df000115 	stw	fp,4(sp)
10010c54:	df000104 	addi	fp,sp,4
10010c58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010c5c:	e13fff17 	ldw	r4,-4(fp)
10010c60:	01440074 	movhi	r5,4097
10010c64:	2953e804 	addi	r5,r5,20384
10010c68:	0011a4c0 	call	10011a4c <alt_dev_llist_insert>
}
10010c6c:	e037883a 	mov	sp,fp
10010c70:	dfc00117 	ldw	ra,4(sp)
10010c74:	df000017 	ldw	fp,0(sp)
10010c78:	dec00204 	addi	sp,sp,8
10010c7c:	f800283a 	ret

10010c80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010c80:	defffd04 	addi	sp,sp,-12
10010c84:	dfc00215 	stw	ra,8(sp)
10010c88:	df000115 	stw	fp,4(sp)
10010c8c:	df000104 	addi	fp,sp,4
10010c90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10010c94:	001242c0 	call	1001242c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010c98:	00800044 	movi	r2,1
10010c9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010ca0:	e037883a 	mov	sp,fp
10010ca4:	dfc00117 	ldw	ra,4(sp)
10010ca8:	df000017 	ldw	fp,0(sp)
10010cac:	dec00204 	addi	sp,sp,8
10010cb0:	f800283a 	ret

10010cb4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010cb4:	defffe04 	addi	sp,sp,-8
10010cb8:	dfc00115 	stw	ra,4(sp)
10010cbc:	df000015 	stw	fp,0(sp)
10010cc0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010cc4:	01040074 	movhi	r4,4097
10010cc8:	210fd204 	addi	r4,r4,16200
10010ccc:	000b883a 	mov	r5,zero
10010cd0:	000d883a 	mov	r6,zero
10010cd4:	0010e600 	call	10010e60 <altera_avalon_jtag_uart_init>
10010cd8:	01040074 	movhi	r4,4097
10010cdc:	210fc804 	addi	r4,r4,16160
10010ce0:	0010c480 	call	10010c48 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010ce4:	0001883a 	nop
}
10010ce8:	e037883a 	mov	sp,fp
10010cec:	dfc00117 	ldw	ra,4(sp)
10010cf0:	df000017 	ldw	fp,0(sp)
10010cf4:	dec00204 	addi	sp,sp,8
10010cf8:	f800283a 	ret

10010cfc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010cfc:	defffa04 	addi	sp,sp,-24
10010d00:	dfc00515 	stw	ra,20(sp)
10010d04:	df000415 	stw	fp,16(sp)
10010d08:	df000404 	addi	fp,sp,16
10010d0c:	e13ffd15 	stw	r4,-12(fp)
10010d10:	e17ffe15 	stw	r5,-8(fp)
10010d14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010d18:	e0bffd17 	ldw	r2,-12(fp)
10010d1c:	10800017 	ldw	r2,0(r2)
10010d20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010d24:	e0bffc17 	ldw	r2,-16(fp)
10010d28:	10c00a04 	addi	r3,r2,40
10010d2c:	e0bffd17 	ldw	r2,-12(fp)
10010d30:	10800217 	ldw	r2,8(r2)
10010d34:	1809883a 	mov	r4,r3
10010d38:	e17ffe17 	ldw	r5,-8(fp)
10010d3c:	e1bfff17 	ldw	r6,-4(fp)
10010d40:	100f883a 	mov	r7,r2
10010d44:	00113240 	call	10011324 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010d48:	e037883a 	mov	sp,fp
10010d4c:	dfc00117 	ldw	ra,4(sp)
10010d50:	df000017 	ldw	fp,0(sp)
10010d54:	dec00204 	addi	sp,sp,8
10010d58:	f800283a 	ret

10010d5c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010d5c:	defffa04 	addi	sp,sp,-24
10010d60:	dfc00515 	stw	ra,20(sp)
10010d64:	df000415 	stw	fp,16(sp)
10010d68:	df000404 	addi	fp,sp,16
10010d6c:	e13ffd15 	stw	r4,-12(fp)
10010d70:	e17ffe15 	stw	r5,-8(fp)
10010d74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010d78:	e0bffd17 	ldw	r2,-12(fp)
10010d7c:	10800017 	ldw	r2,0(r2)
10010d80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010d84:	e0bffc17 	ldw	r2,-16(fp)
10010d88:	10c00a04 	addi	r3,r2,40
10010d8c:	e0bffd17 	ldw	r2,-12(fp)
10010d90:	10800217 	ldw	r2,8(r2)
10010d94:	1809883a 	mov	r4,r3
10010d98:	e17ffe17 	ldw	r5,-8(fp)
10010d9c:	e1bfff17 	ldw	r6,-4(fp)
10010da0:	100f883a 	mov	r7,r2
10010da4:	00115300 	call	10011530 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010da8:	e037883a 	mov	sp,fp
10010dac:	dfc00117 	ldw	ra,4(sp)
10010db0:	df000017 	ldw	fp,0(sp)
10010db4:	dec00204 	addi	sp,sp,8
10010db8:	f800283a 	ret

10010dbc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010dbc:	defffc04 	addi	sp,sp,-16
10010dc0:	dfc00315 	stw	ra,12(sp)
10010dc4:	df000215 	stw	fp,8(sp)
10010dc8:	df000204 	addi	fp,sp,8
10010dcc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010dd0:	e0bfff17 	ldw	r2,-4(fp)
10010dd4:	10800017 	ldw	r2,0(r2)
10010dd8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010ddc:	e0bffe17 	ldw	r2,-8(fp)
10010de0:	10c00a04 	addi	r3,r2,40
10010de4:	e0bfff17 	ldw	r2,-4(fp)
10010de8:	10800217 	ldw	r2,8(r2)
10010dec:	1809883a 	mov	r4,r3
10010df0:	100b883a 	mov	r5,r2
10010df4:	00111d00 	call	100111d0 <altera_avalon_jtag_uart_close>
}
10010df8:	e037883a 	mov	sp,fp
10010dfc:	dfc00117 	ldw	ra,4(sp)
10010e00:	df000017 	ldw	fp,0(sp)
10010e04:	dec00204 	addi	sp,sp,8
10010e08:	f800283a 	ret

10010e0c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010e0c:	defffa04 	addi	sp,sp,-24
10010e10:	dfc00515 	stw	ra,20(sp)
10010e14:	df000415 	stw	fp,16(sp)
10010e18:	df000404 	addi	fp,sp,16
10010e1c:	e13ffd15 	stw	r4,-12(fp)
10010e20:	e17ffe15 	stw	r5,-8(fp)
10010e24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010e28:	e0bffd17 	ldw	r2,-12(fp)
10010e2c:	10800017 	ldw	r2,0(r2)
10010e30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010e34:	e0bffc17 	ldw	r2,-16(fp)
10010e38:	10800a04 	addi	r2,r2,40
10010e3c:	1009883a 	mov	r4,r2
10010e40:	e17ffe17 	ldw	r5,-8(fp)
10010e44:	e1bfff17 	ldw	r6,-4(fp)
10010e48:	00112380 	call	10011238 <altera_avalon_jtag_uart_ioctl>
}
10010e4c:	e037883a 	mov	sp,fp
10010e50:	dfc00117 	ldw	ra,4(sp)
10010e54:	df000017 	ldw	fp,0(sp)
10010e58:	dec00204 	addi	sp,sp,8
10010e5c:	f800283a 	ret

10010e60 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010e60:	defffa04 	addi	sp,sp,-24
10010e64:	dfc00515 	stw	ra,20(sp)
10010e68:	df000415 	stw	fp,16(sp)
10010e6c:	df000404 	addi	fp,sp,16
10010e70:	e13ffd15 	stw	r4,-12(fp)
10010e74:	e17ffe15 	stw	r5,-8(fp)
10010e78:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010e7c:	e0bffd17 	ldw	r2,-12(fp)
10010e80:	00c00044 	movi	r3,1
10010e84:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010e88:	e0bffd17 	ldw	r2,-12(fp)
10010e8c:	10800017 	ldw	r2,0(r2)
10010e90:	10800104 	addi	r2,r2,4
10010e94:	1007883a 	mov	r3,r2
10010e98:	e0bffd17 	ldw	r2,-12(fp)
10010e9c:	10800817 	ldw	r2,32(r2)
10010ea0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010ea4:	e0fffe17 	ldw	r3,-8(fp)
10010ea8:	e0bfff17 	ldw	r2,-4(fp)
10010eac:	d8000015 	stw	zero,0(sp)
10010eb0:	1809883a 	mov	r4,r3
10010eb4:	100b883a 	mov	r5,r2
10010eb8:	01840074 	movhi	r6,4097
10010ebc:	3183c904 	addi	r6,r6,3876
10010ec0:	e1fffd17 	ldw	r7,-12(fp)
10010ec4:	0011bc40 	call	10011bc4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010ec8:	e0bffd17 	ldw	r2,-12(fp)
10010ecc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010ed0:	e0bffd17 	ldw	r2,-12(fp)
10010ed4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010ed8:	00840074 	movhi	r2,4097
10010edc:	109abf04 	addi	r2,r2,27388
10010ee0:	10800017 	ldw	r2,0(r2)
10010ee4:	1809883a 	mov	r4,r3
10010ee8:	100b883a 	mov	r5,r2
10010eec:	01840074 	movhi	r6,4097
10010ef0:	31844a04 	addi	r6,r6,4392
10010ef4:	e1fffd17 	ldw	r7,-12(fp)
10010ef8:	00117480 	call	10011748 <alt_alarm_start>
10010efc:	1000040e 	bge	r2,zero,10010f10 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010f00:	e0fffd17 	ldw	r3,-12(fp)
10010f04:	00a00034 	movhi	r2,32768
10010f08:	10bfffc4 	addi	r2,r2,-1
10010f0c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010f10:	e037883a 	mov	sp,fp
10010f14:	dfc00117 	ldw	ra,4(sp)
10010f18:	df000017 	ldw	fp,0(sp)
10010f1c:	dec00204 	addi	sp,sp,8
10010f20:	f800283a 	ret

10010f24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010f24:	defff804 	addi	sp,sp,-32
10010f28:	df000715 	stw	fp,28(sp)
10010f2c:	df000704 	addi	fp,sp,28
10010f30:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010f34:	e0bfff17 	ldw	r2,-4(fp)
10010f38:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010f3c:	e0bffb17 	ldw	r2,-20(fp)
10010f40:	10800017 	ldw	r2,0(r2)
10010f44:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010f48:	e0bffc17 	ldw	r2,-16(fp)
10010f4c:	10800104 	addi	r2,r2,4
10010f50:	10800037 	ldwio	r2,0(r2)
10010f54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010f58:	e0bffd17 	ldw	r2,-12(fp)
10010f5c:	1080c00c 	andi	r2,r2,768
10010f60:	1000011e 	bne	r2,zero,10010f68 <altera_avalon_jtag_uart_irq+0x44>
      break;
10010f64:	00006c06 	br	10011118 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010f68:	e0bffd17 	ldw	r2,-12(fp)
10010f6c:	1080400c 	andi	r2,r2,256
10010f70:	10003426 	beq	r2,zero,10011044 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010f74:	00800074 	movhi	r2,1
10010f78:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010f7c:	e0bffb17 	ldw	r2,-20(fp)
10010f80:	10800a17 	ldw	r2,40(r2)
10010f84:	10800044 	addi	r2,r2,1
10010f88:	1081ffcc 	andi	r2,r2,2047
10010f8c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010f90:	e0bffb17 	ldw	r2,-20(fp)
10010f94:	10c00b17 	ldw	r3,44(r2)
10010f98:	e0bffe17 	ldw	r2,-8(fp)
10010f9c:	1880011e 	bne	r3,r2,10010fa4 <altera_avalon_jtag_uart_irq+0x80>
          break;
10010fa0:	00001606 	br	10010ffc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010fa4:	e0bffc17 	ldw	r2,-16(fp)
10010fa8:	10800037 	ldwio	r2,0(r2)
10010fac:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010fb0:	e0bff917 	ldw	r2,-28(fp)
10010fb4:	10a0000c 	andi	r2,r2,32768
10010fb8:	1000011e 	bne	r2,zero,10010fc0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10010fbc:	00000f06 	br	10010ffc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010fc0:	e0bffb17 	ldw	r2,-20(fp)
10010fc4:	10800a17 	ldw	r2,40(r2)
10010fc8:	e0fff917 	ldw	r3,-28(fp)
10010fcc:	1809883a 	mov	r4,r3
10010fd0:	e0fffb17 	ldw	r3,-20(fp)
10010fd4:	1885883a 	add	r2,r3,r2
10010fd8:	10800e04 	addi	r2,r2,56
10010fdc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010fe0:	e0bffb17 	ldw	r2,-20(fp)
10010fe4:	10800a17 	ldw	r2,40(r2)
10010fe8:	10800044 	addi	r2,r2,1
10010fec:	10c1ffcc 	andi	r3,r2,2047
10010ff0:	e0bffb17 	ldw	r2,-20(fp)
10010ff4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010ff8:	003fe006 	br	10010f7c <__alt_data_end+0xf8010f7c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010ffc:	e0bff917 	ldw	r2,-28(fp)
10011000:	10bfffec 	andhi	r2,r2,65535
10011004:	10000f26 	beq	r2,zero,10011044 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011008:	e0bffb17 	ldw	r2,-20(fp)
1001100c:	10c00817 	ldw	r3,32(r2)
10011010:	00bfff84 	movi	r2,-2
10011014:	1886703a 	and	r3,r3,r2
10011018:	e0bffb17 	ldw	r2,-20(fp)
1001101c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10011020:	e0bffc17 	ldw	r2,-16(fp)
10011024:	10800104 	addi	r2,r2,4
10011028:	1007883a 	mov	r3,r2
1001102c:	e0bffb17 	ldw	r2,-20(fp)
10011030:	10800817 	ldw	r2,32(r2)
10011034:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011038:	e0bffc17 	ldw	r2,-16(fp)
1001103c:	10800104 	addi	r2,r2,4
10011040:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10011044:	e0bffd17 	ldw	r2,-12(fp)
10011048:	1080800c 	andi	r2,r2,512
1001104c:	10003126 	beq	r2,zero,10011114 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10011050:	e0bffd17 	ldw	r2,-12(fp)
10011054:	1004d43a 	srli	r2,r2,16
10011058:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1001105c:	00001406 	br	100110b0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10011060:	e0bffc17 	ldw	r2,-16(fp)
10011064:	e0fffb17 	ldw	r3,-20(fp)
10011068:	18c00d17 	ldw	r3,52(r3)
1001106c:	e13ffb17 	ldw	r4,-20(fp)
10011070:	20c7883a 	add	r3,r4,r3
10011074:	18c20e04 	addi	r3,r3,2104
10011078:	18c00003 	ldbu	r3,0(r3)
1001107c:	18c03fcc 	andi	r3,r3,255
10011080:	18c0201c 	xori	r3,r3,128
10011084:	18ffe004 	addi	r3,r3,-128
10011088:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001108c:	e0bffb17 	ldw	r2,-20(fp)
10011090:	10800d17 	ldw	r2,52(r2)
10011094:	10800044 	addi	r2,r2,1
10011098:	10c1ffcc 	andi	r3,r2,2047
1001109c:	e0bffb17 	ldw	r2,-20(fp)
100110a0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100110a4:	e0bffa17 	ldw	r2,-24(fp)
100110a8:	10bfffc4 	addi	r2,r2,-1
100110ac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100110b0:	e0bffa17 	ldw	r2,-24(fp)
100110b4:	10000526 	beq	r2,zero,100110cc <altera_avalon_jtag_uart_irq+0x1a8>
100110b8:	e0bffb17 	ldw	r2,-20(fp)
100110bc:	10c00d17 	ldw	r3,52(r2)
100110c0:	e0bffb17 	ldw	r2,-20(fp)
100110c4:	10800c17 	ldw	r2,48(r2)
100110c8:	18bfe51e 	bne	r3,r2,10011060 <__alt_data_end+0xf8011060>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100110cc:	e0bffa17 	ldw	r2,-24(fp)
100110d0:	10001026 	beq	r2,zero,10011114 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100110d4:	e0bffb17 	ldw	r2,-20(fp)
100110d8:	10c00817 	ldw	r3,32(r2)
100110dc:	00bfff44 	movi	r2,-3
100110e0:	1886703a 	and	r3,r3,r2
100110e4:	e0bffb17 	ldw	r2,-20(fp)
100110e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100110ec:	e0bffb17 	ldw	r2,-20(fp)
100110f0:	10800017 	ldw	r2,0(r2)
100110f4:	10800104 	addi	r2,r2,4
100110f8:	1007883a 	mov	r3,r2
100110fc:	e0bffb17 	ldw	r2,-20(fp)
10011100:	10800817 	ldw	r2,32(r2)
10011104:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011108:	e0bffc17 	ldw	r2,-16(fp)
1001110c:	10800104 	addi	r2,r2,4
10011110:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10011114:	003f8c06 	br	10010f48 <__alt_data_end+0xf8010f48>
}
10011118:	e037883a 	mov	sp,fp
1001111c:	df000017 	ldw	fp,0(sp)
10011120:	dec00104 	addi	sp,sp,4
10011124:	f800283a 	ret

10011128 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10011128:	defff804 	addi	sp,sp,-32
1001112c:	df000715 	stw	fp,28(sp)
10011130:	df000704 	addi	fp,sp,28
10011134:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10011138:	e0bffb17 	ldw	r2,-20(fp)
1001113c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10011140:	e0bff917 	ldw	r2,-28(fp)
10011144:	10800017 	ldw	r2,0(r2)
10011148:	10800104 	addi	r2,r2,4
1001114c:	10800037 	ldwio	r2,0(r2)
10011150:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10011154:	e0bffa17 	ldw	r2,-24(fp)
10011158:	1081000c 	andi	r2,r2,1024
1001115c:	10000b26 	beq	r2,zero,1001118c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10011160:	e0bff917 	ldw	r2,-28(fp)
10011164:	10800017 	ldw	r2,0(r2)
10011168:	10800104 	addi	r2,r2,4
1001116c:	1007883a 	mov	r3,r2
10011170:	e0bff917 	ldw	r2,-28(fp)
10011174:	10800817 	ldw	r2,32(r2)
10011178:	10810014 	ori	r2,r2,1024
1001117c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10011180:	e0bff917 	ldw	r2,-28(fp)
10011184:	10000915 	stw	zero,36(r2)
10011188:	00000a06 	br	100111b4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1001118c:	e0bff917 	ldw	r2,-28(fp)
10011190:	10c00917 	ldw	r3,36(r2)
10011194:	00a00034 	movhi	r2,32768
10011198:	10bfff04 	addi	r2,r2,-4
1001119c:	10c00536 	bltu	r2,r3,100111b4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100111a0:	e0bff917 	ldw	r2,-28(fp)
100111a4:	10800917 	ldw	r2,36(r2)
100111a8:	10c00044 	addi	r3,r2,1
100111ac:	e0bff917 	ldw	r2,-28(fp)
100111b0:	10c00915 	stw	r3,36(r2)
100111b4:	00840074 	movhi	r2,4097
100111b8:	109abf04 	addi	r2,r2,27388
100111bc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100111c0:	e037883a 	mov	sp,fp
100111c4:	df000017 	ldw	fp,0(sp)
100111c8:	dec00104 	addi	sp,sp,4
100111cc:	f800283a 	ret

100111d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100111d0:	defffd04 	addi	sp,sp,-12
100111d4:	df000215 	stw	fp,8(sp)
100111d8:	df000204 	addi	fp,sp,8
100111dc:	e13ffe15 	stw	r4,-8(fp)
100111e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100111e4:	00000506 	br	100111fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100111e8:	e0bfff17 	ldw	r2,-4(fp)
100111ec:	1090000c 	andi	r2,r2,16384
100111f0:	10000226 	beq	r2,zero,100111fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100111f4:	00bffd44 	movi	r2,-11
100111f8:	00000b06 	br	10011228 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100111fc:	e0bffe17 	ldw	r2,-8(fp)
10011200:	10c00d17 	ldw	r3,52(r2)
10011204:	e0bffe17 	ldw	r2,-8(fp)
10011208:	10800c17 	ldw	r2,48(r2)
1001120c:	18800526 	beq	r3,r2,10011224 <altera_avalon_jtag_uart_close+0x54>
10011210:	e0bffe17 	ldw	r2,-8(fp)
10011214:	10c00917 	ldw	r3,36(r2)
10011218:	e0bffe17 	ldw	r2,-8(fp)
1001121c:	10800117 	ldw	r2,4(r2)
10011220:	18bff136 	bltu	r3,r2,100111e8 <__alt_data_end+0xf80111e8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10011224:	0005883a 	mov	r2,zero
}
10011228:	e037883a 	mov	sp,fp
1001122c:	df000017 	ldw	fp,0(sp)
10011230:	dec00104 	addi	sp,sp,4
10011234:	f800283a 	ret

10011238 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10011238:	defffa04 	addi	sp,sp,-24
1001123c:	df000515 	stw	fp,20(sp)
10011240:	df000504 	addi	fp,sp,20
10011244:	e13ffd15 	stw	r4,-12(fp)
10011248:	e17ffe15 	stw	r5,-8(fp)
1001124c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10011250:	00bff9c4 	movi	r2,-25
10011254:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10011258:	e0bffe17 	ldw	r2,-8(fp)
1001125c:	10da8060 	cmpeqi	r3,r2,27137
10011260:	1800031e 	bne	r3,zero,10011270 <altera_avalon_jtag_uart_ioctl+0x38>
10011264:	109a80a0 	cmpeqi	r2,r2,27138
10011268:	1000191e 	bne	r2,zero,100112d0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1001126c:	00002806 	br	10011310 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10011270:	e0bffd17 	ldw	r2,-12(fp)
10011274:	10c00117 	ldw	r3,4(r2)
10011278:	00a00034 	movhi	r2,32768
1001127c:	10bfffc4 	addi	r2,r2,-1
10011280:	18801226 	beq	r3,r2,100112cc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10011284:	e0bfff17 	ldw	r2,-4(fp)
10011288:	10800017 	ldw	r2,0(r2)
1001128c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10011290:	e0bffc17 	ldw	r2,-16(fp)
10011294:	10800090 	cmplti	r2,r2,2
10011298:	1000061e 	bne	r2,zero,100112b4 <altera_avalon_jtag_uart_ioctl+0x7c>
1001129c:	e0fffc17 	ldw	r3,-16(fp)
100112a0:	00a00034 	movhi	r2,32768
100112a4:	10bfffc4 	addi	r2,r2,-1
100112a8:	18800226 	beq	r3,r2,100112b4 <altera_avalon_jtag_uart_ioctl+0x7c>
100112ac:	e0bffc17 	ldw	r2,-16(fp)
100112b0:	00000206 	br	100112bc <altera_avalon_jtag_uart_ioctl+0x84>
100112b4:	00a00034 	movhi	r2,32768
100112b8:	10bfff84 	addi	r2,r2,-2
100112bc:	e0fffd17 	ldw	r3,-12(fp)
100112c0:	18800115 	stw	r2,4(r3)
      rc = 0;
100112c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100112c8:	00001106 	br	10011310 <altera_avalon_jtag_uart_ioctl+0xd8>
100112cc:	00001006 	br	10011310 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100112d0:	e0bffd17 	ldw	r2,-12(fp)
100112d4:	10c00117 	ldw	r3,4(r2)
100112d8:	00a00034 	movhi	r2,32768
100112dc:	10bfffc4 	addi	r2,r2,-1
100112e0:	18800a26 	beq	r3,r2,1001130c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100112e4:	e0bffd17 	ldw	r2,-12(fp)
100112e8:	10c00917 	ldw	r3,36(r2)
100112ec:	e0bffd17 	ldw	r2,-12(fp)
100112f0:	10800117 	ldw	r2,4(r2)
100112f4:	1885803a 	cmpltu	r2,r3,r2
100112f8:	10c03fcc 	andi	r3,r2,255
100112fc:	e0bfff17 	ldw	r2,-4(fp)
10011300:	10c00015 	stw	r3,0(r2)
      rc = 0;
10011304:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011308:	00000006 	br	1001130c <altera_avalon_jtag_uart_ioctl+0xd4>
1001130c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10011310:	e0bffb17 	ldw	r2,-20(fp)
}
10011314:	e037883a 	mov	sp,fp
10011318:	df000017 	ldw	fp,0(sp)
1001131c:	dec00104 	addi	sp,sp,4
10011320:	f800283a 	ret

10011324 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10011324:	defff304 	addi	sp,sp,-52
10011328:	dfc00c15 	stw	ra,48(sp)
1001132c:	df000b15 	stw	fp,44(sp)
10011330:	df000b04 	addi	fp,sp,44
10011334:	e13ffc15 	stw	r4,-16(fp)
10011338:	e17ffd15 	stw	r5,-12(fp)
1001133c:	e1bffe15 	stw	r6,-8(fp)
10011340:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10011344:	e0bffd17 	ldw	r2,-12(fp)
10011348:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001134c:	00004906 	br	10011474 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10011350:	e0bffc17 	ldw	r2,-16(fp)
10011354:	10800a17 	ldw	r2,40(r2)
10011358:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1001135c:	e0bffc17 	ldw	r2,-16(fp)
10011360:	10800b17 	ldw	r2,44(r2)
10011364:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10011368:	e0fff717 	ldw	r3,-36(fp)
1001136c:	e0bff817 	ldw	r2,-32(fp)
10011370:	18800536 	bltu	r3,r2,10011388 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10011374:	e0fff717 	ldw	r3,-36(fp)
10011378:	e0bff817 	ldw	r2,-32(fp)
1001137c:	1885c83a 	sub	r2,r3,r2
10011380:	e0bff615 	stw	r2,-40(fp)
10011384:	00000406 	br	10011398 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10011388:	00c20004 	movi	r3,2048
1001138c:	e0bff817 	ldw	r2,-32(fp)
10011390:	1885c83a 	sub	r2,r3,r2
10011394:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011398:	e0bff617 	ldw	r2,-40(fp)
1001139c:	1000011e 	bne	r2,zero,100113a4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
100113a0:	00001d06 	br	10011418 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
100113a4:	e0fffe17 	ldw	r3,-8(fp)
100113a8:	e0bff617 	ldw	r2,-40(fp)
100113ac:	1880022e 	bgeu	r3,r2,100113b8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
100113b0:	e0bffe17 	ldw	r2,-8(fp)
100113b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100113b8:	e0bff817 	ldw	r2,-32(fp)
100113bc:	10800e04 	addi	r2,r2,56
100113c0:	e0fffc17 	ldw	r3,-16(fp)
100113c4:	1885883a 	add	r2,r3,r2
100113c8:	e13ff517 	ldw	r4,-44(fp)
100113cc:	100b883a 	mov	r5,r2
100113d0:	e1bff617 	ldw	r6,-40(fp)
100113d4:	00092dc0 	call	100092dc <memcpy>
      ptr   += n;
100113d8:	e0fff517 	ldw	r3,-44(fp)
100113dc:	e0bff617 	ldw	r2,-40(fp)
100113e0:	1885883a 	add	r2,r3,r2
100113e4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100113e8:	e0fffe17 	ldw	r3,-8(fp)
100113ec:	e0bff617 	ldw	r2,-40(fp)
100113f0:	1885c83a 	sub	r2,r3,r2
100113f4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100113f8:	e0fff817 	ldw	r3,-32(fp)
100113fc:	e0bff617 	ldw	r2,-40(fp)
10011400:	1885883a 	add	r2,r3,r2
10011404:	10c1ffcc 	andi	r3,r2,2047
10011408:	e0bffc17 	ldw	r2,-16(fp)
1001140c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10011410:	e0bffe17 	ldw	r2,-8(fp)
10011414:	00bfce16 	blt	zero,r2,10011350 <__alt_data_end+0xf8011350>

    /* If we read any data then return it */
    if (ptr != buffer)
10011418:	e0fff517 	ldw	r3,-44(fp)
1001141c:	e0bffd17 	ldw	r2,-12(fp)
10011420:	18800126 	beq	r3,r2,10011428 <altera_avalon_jtag_uart_read+0x104>
      break;
10011424:	00001506 	br	1001147c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10011428:	e0bfff17 	ldw	r2,-4(fp)
1001142c:	1090000c 	andi	r2,r2,16384
10011430:	10000126 	beq	r2,zero,10011438 <altera_avalon_jtag_uart_read+0x114>
      break;
10011434:	00001106 	br	1001147c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10011438:	0001883a 	nop
1001143c:	e0bffc17 	ldw	r2,-16(fp)
10011440:	10c00a17 	ldw	r3,40(r2)
10011444:	e0bff717 	ldw	r2,-36(fp)
10011448:	1880051e 	bne	r3,r2,10011460 <altera_avalon_jtag_uart_read+0x13c>
1001144c:	e0bffc17 	ldw	r2,-16(fp)
10011450:	10c00917 	ldw	r3,36(r2)
10011454:	e0bffc17 	ldw	r2,-16(fp)
10011458:	10800117 	ldw	r2,4(r2)
1001145c:	18bff736 	bltu	r3,r2,1001143c <__alt_data_end+0xf801143c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10011460:	e0bffc17 	ldw	r2,-16(fp)
10011464:	10c00a17 	ldw	r3,40(r2)
10011468:	e0bff717 	ldw	r2,-36(fp)
1001146c:	1880011e 	bne	r3,r2,10011474 <altera_avalon_jtag_uart_read+0x150>
      break;
10011470:	00000206 	br	1001147c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011474:	e0bffe17 	ldw	r2,-8(fp)
10011478:	00bfb516 	blt	zero,r2,10011350 <__alt_data_end+0xf8011350>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1001147c:	e0fff517 	ldw	r3,-44(fp)
10011480:	e0bffd17 	ldw	r2,-12(fp)
10011484:	18801826 	beq	r3,r2,100114e8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011488:	0005303a 	rdctl	r2,status
1001148c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011490:	e0fffa17 	ldw	r3,-24(fp)
10011494:	00bfff84 	movi	r2,-2
10011498:	1884703a 	and	r2,r3,r2
1001149c:	1001703a 	wrctl	status,r2
  
  return context;
100114a0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100114a4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100114a8:	e0bffc17 	ldw	r2,-16(fp)
100114ac:	10800817 	ldw	r2,32(r2)
100114b0:	10c00054 	ori	r3,r2,1
100114b4:	e0bffc17 	ldw	r2,-16(fp)
100114b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100114bc:	e0bffc17 	ldw	r2,-16(fp)
100114c0:	10800017 	ldw	r2,0(r2)
100114c4:	10800104 	addi	r2,r2,4
100114c8:	1007883a 	mov	r3,r2
100114cc:	e0bffc17 	ldw	r2,-16(fp)
100114d0:	10800817 	ldw	r2,32(r2)
100114d4:	18800035 	stwio	r2,0(r3)
100114d8:	e0bff917 	ldw	r2,-28(fp)
100114dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100114e0:	e0bffb17 	ldw	r2,-20(fp)
100114e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100114e8:	e0fff517 	ldw	r3,-44(fp)
100114ec:	e0bffd17 	ldw	r2,-12(fp)
100114f0:	18800426 	beq	r3,r2,10011504 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
100114f4:	e0fff517 	ldw	r3,-44(fp)
100114f8:	e0bffd17 	ldw	r2,-12(fp)
100114fc:	1885c83a 	sub	r2,r3,r2
10011500:	00000606 	br	1001151c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10011504:	e0bfff17 	ldw	r2,-4(fp)
10011508:	1090000c 	andi	r2,r2,16384
1001150c:	10000226 	beq	r2,zero,10011518 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10011510:	00bffd44 	movi	r2,-11
10011514:	00000106 	br	1001151c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10011518:	00bffec4 	movi	r2,-5
}
1001151c:	e037883a 	mov	sp,fp
10011520:	dfc00117 	ldw	ra,4(sp)
10011524:	df000017 	ldw	fp,0(sp)
10011528:	dec00204 	addi	sp,sp,8
1001152c:	f800283a 	ret

10011530 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10011530:	defff304 	addi	sp,sp,-52
10011534:	dfc00c15 	stw	ra,48(sp)
10011538:	df000b15 	stw	fp,44(sp)
1001153c:	df000b04 	addi	fp,sp,44
10011540:	e13ffc15 	stw	r4,-16(fp)
10011544:	e17ffd15 	stw	r5,-12(fp)
10011548:	e1bffe15 	stw	r6,-8(fp)
1001154c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10011550:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10011554:	e0bffd17 	ldw	r2,-12(fp)
10011558:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001155c:	00003806 	br	10011640 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10011560:	e0bffc17 	ldw	r2,-16(fp)
10011564:	10800c17 	ldw	r2,48(r2)
10011568:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1001156c:	e0bffc17 	ldw	r2,-16(fp)
10011570:	10800d17 	ldw	r2,52(r2)
10011574:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10011578:	e0fff817 	ldw	r3,-32(fp)
1001157c:	e0bff517 	ldw	r2,-44(fp)
10011580:	1880062e 	bgeu	r3,r2,1001159c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10011584:	e0fff517 	ldw	r3,-44(fp)
10011588:	e0bff817 	ldw	r2,-32(fp)
1001158c:	1885c83a 	sub	r2,r3,r2
10011590:	10bfffc4 	addi	r2,r2,-1
10011594:	e0bff615 	stw	r2,-40(fp)
10011598:	00000b06 	br	100115c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1001159c:	e0bff517 	ldw	r2,-44(fp)
100115a0:	10000526 	beq	r2,zero,100115b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100115a4:	00c20004 	movi	r3,2048
100115a8:	e0bff817 	ldw	r2,-32(fp)
100115ac:	1885c83a 	sub	r2,r3,r2
100115b0:	e0bff615 	stw	r2,-40(fp)
100115b4:	00000406 	br	100115c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100115b8:	00c1ffc4 	movi	r3,2047
100115bc:	e0bff817 	ldw	r2,-32(fp)
100115c0:	1885c83a 	sub	r2,r3,r2
100115c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100115c8:	e0bff617 	ldw	r2,-40(fp)
100115cc:	1000011e 	bne	r2,zero,100115d4 <altera_avalon_jtag_uart_write+0xa4>
        break;
100115d0:	00001d06 	br	10011648 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
100115d4:	e0fffe17 	ldw	r3,-8(fp)
100115d8:	e0bff617 	ldw	r2,-40(fp)
100115dc:	1880022e 	bgeu	r3,r2,100115e8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
100115e0:	e0bffe17 	ldw	r2,-8(fp)
100115e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100115e8:	e0bff817 	ldw	r2,-32(fp)
100115ec:	10820e04 	addi	r2,r2,2104
100115f0:	e0fffc17 	ldw	r3,-16(fp)
100115f4:	1885883a 	add	r2,r3,r2
100115f8:	1009883a 	mov	r4,r2
100115fc:	e17ffd17 	ldw	r5,-12(fp)
10011600:	e1bff617 	ldw	r6,-40(fp)
10011604:	00092dc0 	call	100092dc <memcpy>
      ptr   += n;
10011608:	e0fffd17 	ldw	r3,-12(fp)
1001160c:	e0bff617 	ldw	r2,-40(fp)
10011610:	1885883a 	add	r2,r3,r2
10011614:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10011618:	e0fffe17 	ldw	r3,-8(fp)
1001161c:	e0bff617 	ldw	r2,-40(fp)
10011620:	1885c83a 	sub	r2,r3,r2
10011624:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011628:	e0fff817 	ldw	r3,-32(fp)
1001162c:	e0bff617 	ldw	r2,-40(fp)
10011630:	1885883a 	add	r2,r3,r2
10011634:	10c1ffcc 	andi	r3,r2,2047
10011638:	e0bffc17 	ldw	r2,-16(fp)
1001163c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011640:	e0bffe17 	ldw	r2,-8(fp)
10011644:	00bfc616 	blt	zero,r2,10011560 <__alt_data_end+0xf8011560>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011648:	0005303a 	rdctl	r2,status
1001164c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011650:	e0fffa17 	ldw	r3,-24(fp)
10011654:	00bfff84 	movi	r2,-2
10011658:	1884703a 	and	r2,r3,r2
1001165c:	1001703a 	wrctl	status,r2
  
  return context;
10011660:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10011664:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10011668:	e0bffc17 	ldw	r2,-16(fp)
1001166c:	10800817 	ldw	r2,32(r2)
10011670:	10c00094 	ori	r3,r2,2
10011674:	e0bffc17 	ldw	r2,-16(fp)
10011678:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001167c:	e0bffc17 	ldw	r2,-16(fp)
10011680:	10800017 	ldw	r2,0(r2)
10011684:	10800104 	addi	r2,r2,4
10011688:	1007883a 	mov	r3,r2
1001168c:	e0bffc17 	ldw	r2,-16(fp)
10011690:	10800817 	ldw	r2,32(r2)
10011694:	18800035 	stwio	r2,0(r3)
10011698:	e0bff917 	ldw	r2,-28(fp)
1001169c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100116a0:	e0bffb17 	ldw	r2,-20(fp)
100116a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100116a8:	e0bffe17 	ldw	r2,-8(fp)
100116ac:	0080120e 	bge	zero,r2,100116f8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
100116b0:	e0bfff17 	ldw	r2,-4(fp)
100116b4:	1090000c 	andi	r2,r2,16384
100116b8:	10000126 	beq	r2,zero,100116c0 <altera_avalon_jtag_uart_write+0x190>
        break;
100116bc:	00001006 	br	10011700 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100116c0:	0001883a 	nop
100116c4:	e0bffc17 	ldw	r2,-16(fp)
100116c8:	10c00d17 	ldw	r3,52(r2)
100116cc:	e0bff517 	ldw	r2,-44(fp)
100116d0:	1880051e 	bne	r3,r2,100116e8 <altera_avalon_jtag_uart_write+0x1b8>
100116d4:	e0bffc17 	ldw	r2,-16(fp)
100116d8:	10c00917 	ldw	r3,36(r2)
100116dc:	e0bffc17 	ldw	r2,-16(fp)
100116e0:	10800117 	ldw	r2,4(r2)
100116e4:	18bff736 	bltu	r3,r2,100116c4 <__alt_data_end+0xf80116c4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100116e8:	e0bffc17 	ldw	r2,-16(fp)
100116ec:	10800917 	ldw	r2,36(r2)
100116f0:	10000126 	beq	r2,zero,100116f8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
100116f4:	00000206 	br	10011700 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
100116f8:	e0bffe17 	ldw	r2,-8(fp)
100116fc:	00bf9716 	blt	zero,r2,1001155c <__alt_data_end+0xf801155c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10011700:	e0fffd17 	ldw	r3,-12(fp)
10011704:	e0bff717 	ldw	r2,-36(fp)
10011708:	18800426 	beq	r3,r2,1001171c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1001170c:	e0fffd17 	ldw	r3,-12(fp)
10011710:	e0bff717 	ldw	r2,-36(fp)
10011714:	1885c83a 	sub	r2,r3,r2
10011718:	00000606 	br	10011734 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1001171c:	e0bfff17 	ldw	r2,-4(fp)
10011720:	1090000c 	andi	r2,r2,16384
10011724:	10000226 	beq	r2,zero,10011730 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10011728:	00bffd44 	movi	r2,-11
1001172c:	00000106 	br	10011734 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10011730:	00bffec4 	movi	r2,-5
}
10011734:	e037883a 	mov	sp,fp
10011738:	dfc00117 	ldw	ra,4(sp)
1001173c:	df000017 	ldw	fp,0(sp)
10011740:	dec00204 	addi	sp,sp,8
10011744:	f800283a 	ret

10011748 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10011748:	defff504 	addi	sp,sp,-44
1001174c:	df000a15 	stw	fp,40(sp)
10011750:	df000a04 	addi	fp,sp,40
10011754:	e13ffc15 	stw	r4,-16(fp)
10011758:	e17ffd15 	stw	r5,-12(fp)
1001175c:	e1bffe15 	stw	r6,-8(fp)
10011760:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10011764:	e03ff615 	stw	zero,-40(fp)
10011768:	00840074 	movhi	r2,4097
1001176c:	109abf04 	addi	r2,r2,27388
10011770:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10011774:	10003f26 	beq	r2,zero,10011874 <alt_alarm_start+0x12c>
  {
    if (alarm)
10011778:	e0bffc17 	ldw	r2,-16(fp)
1001177c:	10003b26 	beq	r2,zero,1001186c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10011780:	e0bffc17 	ldw	r2,-16(fp)
10011784:	e0fffe17 	ldw	r3,-8(fp)
10011788:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001178c:	e0bffc17 	ldw	r2,-16(fp)
10011790:	e0ffff17 	ldw	r3,-4(fp)
10011794:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011798:	0005303a 	rdctl	r2,status
1001179c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100117a0:	e0fff817 	ldw	r3,-32(fp)
100117a4:	00bfff84 	movi	r2,-2
100117a8:	1884703a 	and	r2,r3,r2
100117ac:	1001703a 	wrctl	status,r2
  
  return context;
100117b0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100117b4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100117b8:	00840074 	movhi	r2,4097
100117bc:	109ac004 	addi	r2,r2,27392
100117c0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100117c4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100117c8:	e0fffd17 	ldw	r3,-12(fp)
100117cc:	e0bff617 	ldw	r2,-40(fp)
100117d0:	1885883a 	add	r2,r3,r2
100117d4:	10c00044 	addi	r3,r2,1
100117d8:	e0bffc17 	ldw	r2,-16(fp)
100117dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100117e0:	e0bffc17 	ldw	r2,-16(fp)
100117e4:	10c00217 	ldw	r3,8(r2)
100117e8:	e0bff617 	ldw	r2,-40(fp)
100117ec:	1880042e 	bgeu	r3,r2,10011800 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100117f0:	e0bffc17 	ldw	r2,-16(fp)
100117f4:	00c00044 	movi	r3,1
100117f8:	10c00405 	stb	r3,16(r2)
100117fc:	00000206 	br	10011808 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10011800:	e0bffc17 	ldw	r2,-16(fp)
10011804:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10011808:	e0fffc17 	ldw	r3,-16(fp)
1001180c:	00840074 	movhi	r2,4097
10011810:	1093ee04 	addi	r2,r2,20408
10011814:	e0bff915 	stw	r2,-28(fp)
10011818:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001181c:	e0bffa17 	ldw	r2,-24(fp)
10011820:	e0fff917 	ldw	r3,-28(fp)
10011824:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011828:	e0bff917 	ldw	r2,-28(fp)
1001182c:	10c00017 	ldw	r3,0(r2)
10011830:	e0bffa17 	ldw	r2,-24(fp)
10011834:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011838:	e0bff917 	ldw	r2,-28(fp)
1001183c:	10800017 	ldw	r2,0(r2)
10011840:	e0fffa17 	ldw	r3,-24(fp)
10011844:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011848:	e0bff917 	ldw	r2,-28(fp)
1001184c:	e0fffa17 	ldw	r3,-24(fp)
10011850:	10c00015 	stw	r3,0(r2)
10011854:	e0bff717 	ldw	r2,-36(fp)
10011858:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001185c:	e0bffb17 	ldw	r2,-20(fp)
10011860:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10011864:	0005883a 	mov	r2,zero
10011868:	00000306 	br	10011878 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1001186c:	00bffa84 	movi	r2,-22
10011870:	00000106 	br	10011878 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10011874:	00bfde84 	movi	r2,-134
  }
}
10011878:	e037883a 	mov	sp,fp
1001187c:	df000017 	ldw	fp,0(sp)
10011880:	dec00104 	addi	sp,sp,4
10011884:	f800283a 	ret

10011888 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10011888:	defffa04 	addi	sp,sp,-24
1001188c:	dfc00515 	stw	ra,20(sp)
10011890:	df000415 	stw	fp,16(sp)
10011894:	df000404 	addi	fp,sp,16
10011898:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001189c:	00800244 	movi	r2,9
100118a0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
100118a4:	e13ffd17 	ldw	r4,-12(fp)
100118a8:	014003f4 	movhi	r5,15
100118ac:	29509004 	addi	r5,r5,16960
100118b0:	00039ec0 	call	100039ec <__mulsi3>
100118b4:	0100bef4 	movhi	r4,763
100118b8:	213c2004 	addi	r4,r4,-3968
100118bc:	100b883a 	mov	r5,r2
100118c0:	00039dc0 	call	100039dc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100118c4:	01200034 	movhi	r4,32768
100118c8:	213fffc4 	addi	r4,r4,-1
100118cc:	100b883a 	mov	r5,r2
100118d0:	00039dc0 	call	100039dc <__udivsi3>
100118d4:	e13fff17 	ldw	r4,-4(fp)
100118d8:	100b883a 	mov	r5,r2
100118dc:	00039dc0 	call	100039dc <__udivsi3>
100118e0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100118e4:	e0bffe17 	ldw	r2,-8(fp)
100118e8:	10002a26 	beq	r2,zero,10011994 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100118ec:	e03ffc15 	stw	zero,-16(fp)
100118f0:	00001706 	br	10011950 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100118f4:	00a00034 	movhi	r2,32768
100118f8:	10bfffc4 	addi	r2,r2,-1
100118fc:	10bfffc4 	addi	r2,r2,-1
10011900:	103ffe1e 	bne	r2,zero,100118fc <__alt_data_end+0xf80118fc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10011904:	e13ffd17 	ldw	r4,-12(fp)
10011908:	014003f4 	movhi	r5,15
1001190c:	29509004 	addi	r5,r5,16960
10011910:	00039ec0 	call	100039ec <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10011914:	0100bef4 	movhi	r4,763
10011918:	213c2004 	addi	r4,r4,-3968
1001191c:	100b883a 	mov	r5,r2
10011920:	00039dc0 	call	100039dc <__udivsi3>
10011924:	01200034 	movhi	r4,32768
10011928:	213fffc4 	addi	r4,r4,-1
1001192c:	100b883a 	mov	r5,r2
10011930:	00039dc0 	call	100039dc <__udivsi3>
10011934:	1007883a 	mov	r3,r2
10011938:	e0bfff17 	ldw	r2,-4(fp)
1001193c:	10c5c83a 	sub	r2,r2,r3
10011940:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10011944:	e0bffc17 	ldw	r2,-16(fp)
10011948:	10800044 	addi	r2,r2,1
1001194c:	e0bffc15 	stw	r2,-16(fp)
10011950:	e0fffc17 	ldw	r3,-16(fp)
10011954:	e0bffe17 	ldw	r2,-8(fp)
10011958:	18bfe616 	blt	r3,r2,100118f4 <__alt_data_end+0xf80118f4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001195c:	e13ffd17 	ldw	r4,-12(fp)
10011960:	014003f4 	movhi	r5,15
10011964:	29509004 	addi	r5,r5,16960
10011968:	00039ec0 	call	100039ec <__mulsi3>
1001196c:	0100bef4 	movhi	r4,763
10011970:	213c2004 	addi	r4,r4,-3968
10011974:	100b883a 	mov	r5,r2
10011978:	00039dc0 	call	100039dc <__udivsi3>
1001197c:	1009883a 	mov	r4,r2
10011980:	e17fff17 	ldw	r5,-4(fp)
10011984:	00039ec0 	call	100039ec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011988:	10bfffc4 	addi	r2,r2,-1
1001198c:	103ffe1e 	bne	r2,zero,10011988 <__alt_data_end+0xf8011988>
10011990:	00000d06 	br	100119c8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10011994:	e13ffd17 	ldw	r4,-12(fp)
10011998:	014003f4 	movhi	r5,15
1001199c:	29509004 	addi	r5,r5,16960
100119a0:	00039ec0 	call	100039ec <__mulsi3>
100119a4:	0100bef4 	movhi	r4,763
100119a8:	213c2004 	addi	r4,r4,-3968
100119ac:	100b883a 	mov	r5,r2
100119b0:	00039dc0 	call	100039dc <__udivsi3>
100119b4:	1009883a 	mov	r4,r2
100119b8:	e17fff17 	ldw	r5,-4(fp)
100119bc:	00039ec0 	call	100039ec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100119c0:	10bfffc4 	addi	r2,r2,-1
100119c4:	00bffe16 	blt	zero,r2,100119c0 <__alt_data_end+0xf80119c0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100119c8:	0005883a 	mov	r2,zero
}
100119cc:	e037883a 	mov	sp,fp
100119d0:	dfc00117 	ldw	ra,4(sp)
100119d4:	df000017 	ldw	fp,0(sp)
100119d8:	dec00204 	addi	sp,sp,8
100119dc:	f800283a 	ret

100119e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100119e0:	deffff04 	addi	sp,sp,-4
100119e4:	df000015 	stw	fp,0(sp)
100119e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100119ec:	e037883a 	mov	sp,fp
100119f0:	df000017 	ldw	fp,0(sp)
100119f4:	dec00104 	addi	sp,sp,4
100119f8:	f800283a 	ret

100119fc <alt_get_errno>:
100119fc:	defffe04 	addi	sp,sp,-8
10011a00:	dfc00115 	stw	ra,4(sp)
10011a04:	df000015 	stw	fp,0(sp)
10011a08:	d839883a 	mov	fp,sp
10011a0c:	00840074 	movhi	r2,4097
10011a10:	1093eb04 	addi	r2,r2,20396
10011a14:	10800017 	ldw	r2,0(r2)
10011a18:	10000526 	beq	r2,zero,10011a30 <alt_get_errno+0x34>
10011a1c:	00840074 	movhi	r2,4097
10011a20:	1093eb04 	addi	r2,r2,20396
10011a24:	10800017 	ldw	r2,0(r2)
10011a28:	103ee83a 	callr	r2
10011a2c:	00000206 	br	10011a38 <alt_get_errno+0x3c>
10011a30:	00840074 	movhi	r2,4097
10011a34:	109aba04 	addi	r2,r2,27368
10011a38:	e037883a 	mov	sp,fp
10011a3c:	dfc00117 	ldw	ra,4(sp)
10011a40:	df000017 	ldw	fp,0(sp)
10011a44:	dec00204 	addi	sp,sp,8
10011a48:	f800283a 	ret

10011a4c <alt_dev_llist_insert>:
10011a4c:	defffa04 	addi	sp,sp,-24
10011a50:	dfc00515 	stw	ra,20(sp)
10011a54:	df000415 	stw	fp,16(sp)
10011a58:	df000404 	addi	fp,sp,16
10011a5c:	e13ffe15 	stw	r4,-8(fp)
10011a60:	e17fff15 	stw	r5,-4(fp)
10011a64:	e0bffe17 	ldw	r2,-8(fp)
10011a68:	10000326 	beq	r2,zero,10011a78 <alt_dev_llist_insert+0x2c>
10011a6c:	e0bffe17 	ldw	r2,-8(fp)
10011a70:	10800217 	ldw	r2,8(r2)
10011a74:	1000061e 	bne	r2,zero,10011a90 <alt_dev_llist_insert+0x44>
10011a78:	00119fc0 	call	100119fc <alt_get_errno>
10011a7c:	1007883a 	mov	r3,r2
10011a80:	00800584 	movi	r2,22
10011a84:	18800015 	stw	r2,0(r3)
10011a88:	00bffa84 	movi	r2,-22
10011a8c:	00001306 	br	10011adc <alt_dev_llist_insert+0x90>
10011a90:	e0bffe17 	ldw	r2,-8(fp)
10011a94:	e0ffff17 	ldw	r3,-4(fp)
10011a98:	e0fffc15 	stw	r3,-16(fp)
10011a9c:	e0bffd15 	stw	r2,-12(fp)
10011aa0:	e0bffd17 	ldw	r2,-12(fp)
10011aa4:	e0fffc17 	ldw	r3,-16(fp)
10011aa8:	10c00115 	stw	r3,4(r2)
10011aac:	e0bffc17 	ldw	r2,-16(fp)
10011ab0:	10c00017 	ldw	r3,0(r2)
10011ab4:	e0bffd17 	ldw	r2,-12(fp)
10011ab8:	10c00015 	stw	r3,0(r2)
10011abc:	e0bffc17 	ldw	r2,-16(fp)
10011ac0:	10800017 	ldw	r2,0(r2)
10011ac4:	e0fffd17 	ldw	r3,-12(fp)
10011ac8:	10c00115 	stw	r3,4(r2)
10011acc:	e0bffc17 	ldw	r2,-16(fp)
10011ad0:	e0fffd17 	ldw	r3,-12(fp)
10011ad4:	10c00015 	stw	r3,0(r2)
10011ad8:	0005883a 	mov	r2,zero
10011adc:	e037883a 	mov	sp,fp
10011ae0:	dfc00117 	ldw	ra,4(sp)
10011ae4:	df000017 	ldw	fp,0(sp)
10011ae8:	dec00204 	addi	sp,sp,8
10011aec:	f800283a 	ret

10011af0 <_do_ctors>:
10011af0:	defffd04 	addi	sp,sp,-12
10011af4:	dfc00215 	stw	ra,8(sp)
10011af8:	df000115 	stw	fp,4(sp)
10011afc:	df000104 	addi	fp,sp,4
10011b00:	00840074 	movhi	r2,4097
10011b04:	108a9904 	addi	r2,r2,10852
10011b08:	e0bfff15 	stw	r2,-4(fp)
10011b0c:	00000606 	br	10011b28 <_do_ctors+0x38>
10011b10:	e0bfff17 	ldw	r2,-4(fp)
10011b14:	10800017 	ldw	r2,0(r2)
10011b18:	103ee83a 	callr	r2
10011b1c:	e0bfff17 	ldw	r2,-4(fp)
10011b20:	10bfff04 	addi	r2,r2,-4
10011b24:	e0bfff15 	stw	r2,-4(fp)
10011b28:	e0ffff17 	ldw	r3,-4(fp)
10011b2c:	00840074 	movhi	r2,4097
10011b30:	108a9a04 	addi	r2,r2,10856
10011b34:	18bff62e 	bgeu	r3,r2,10011b10 <__alt_data_end+0xf8011b10>
10011b38:	e037883a 	mov	sp,fp
10011b3c:	dfc00117 	ldw	ra,4(sp)
10011b40:	df000017 	ldw	fp,0(sp)
10011b44:	dec00204 	addi	sp,sp,8
10011b48:	f800283a 	ret

10011b4c <_do_dtors>:
10011b4c:	defffd04 	addi	sp,sp,-12
10011b50:	dfc00215 	stw	ra,8(sp)
10011b54:	df000115 	stw	fp,4(sp)
10011b58:	df000104 	addi	fp,sp,4
10011b5c:	00840074 	movhi	r2,4097
10011b60:	108a9904 	addi	r2,r2,10852
10011b64:	e0bfff15 	stw	r2,-4(fp)
10011b68:	00000606 	br	10011b84 <_do_dtors+0x38>
10011b6c:	e0bfff17 	ldw	r2,-4(fp)
10011b70:	10800017 	ldw	r2,0(r2)
10011b74:	103ee83a 	callr	r2
10011b78:	e0bfff17 	ldw	r2,-4(fp)
10011b7c:	10bfff04 	addi	r2,r2,-4
10011b80:	e0bfff15 	stw	r2,-4(fp)
10011b84:	e0ffff17 	ldw	r3,-4(fp)
10011b88:	00840074 	movhi	r2,4097
10011b8c:	108a9a04 	addi	r2,r2,10856
10011b90:	18bff62e 	bgeu	r3,r2,10011b6c <__alt_data_end+0xf8011b6c>
10011b94:	e037883a 	mov	sp,fp
10011b98:	dfc00117 	ldw	ra,4(sp)
10011b9c:	df000017 	ldw	fp,0(sp)
10011ba0:	dec00204 	addi	sp,sp,8
10011ba4:	f800283a 	ret

10011ba8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011ba8:	deffff04 	addi	sp,sp,-4
10011bac:	df000015 	stw	fp,0(sp)
10011bb0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10011bb4:	e037883a 	mov	sp,fp
10011bb8:	df000017 	ldw	fp,0(sp)
10011bbc:	dec00104 	addi	sp,sp,4
10011bc0:	f800283a 	ret

10011bc4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011bc4:	defff904 	addi	sp,sp,-28
10011bc8:	dfc00615 	stw	ra,24(sp)
10011bcc:	df000515 	stw	fp,20(sp)
10011bd0:	df000504 	addi	fp,sp,20
10011bd4:	e13ffc15 	stw	r4,-16(fp)
10011bd8:	e17ffd15 	stw	r5,-12(fp)
10011bdc:	e1bffe15 	stw	r6,-8(fp)
10011be0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011be4:	e0800217 	ldw	r2,8(fp)
10011be8:	d8800015 	stw	r2,0(sp)
10011bec:	e13ffc17 	ldw	r4,-16(fp)
10011bf0:	e17ffd17 	ldw	r5,-12(fp)
10011bf4:	e1bffe17 	ldw	r6,-8(fp)
10011bf8:	e1ffff17 	ldw	r7,-4(fp)
10011bfc:	0011da40 	call	10011da4 <alt_iic_isr_register>
}  
10011c00:	e037883a 	mov	sp,fp
10011c04:	dfc00117 	ldw	ra,4(sp)
10011c08:	df000017 	ldw	fp,0(sp)
10011c0c:	dec00204 	addi	sp,sp,8
10011c10:	f800283a 	ret

10011c14 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011c14:	defff904 	addi	sp,sp,-28
10011c18:	df000615 	stw	fp,24(sp)
10011c1c:	df000604 	addi	fp,sp,24
10011c20:	e13ffe15 	stw	r4,-8(fp)
10011c24:	e17fff15 	stw	r5,-4(fp)
10011c28:	e0bfff17 	ldw	r2,-4(fp)
10011c2c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011c30:	0005303a 	rdctl	r2,status
10011c34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011c38:	e0fffb17 	ldw	r3,-20(fp)
10011c3c:	00bfff84 	movi	r2,-2
10011c40:	1884703a 	and	r2,r3,r2
10011c44:	1001703a 	wrctl	status,r2
  
  return context;
10011c48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011c4c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10011c50:	e0bffa17 	ldw	r2,-24(fp)
10011c54:	00c00044 	movi	r3,1
10011c58:	1884983a 	sll	r2,r3,r2
10011c5c:	1007883a 	mov	r3,r2
10011c60:	00840074 	movhi	r2,4097
10011c64:	109abe04 	addi	r2,r2,27384
10011c68:	10800017 	ldw	r2,0(r2)
10011c6c:	1886b03a 	or	r3,r3,r2
10011c70:	00840074 	movhi	r2,4097
10011c74:	109abe04 	addi	r2,r2,27384
10011c78:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011c7c:	00840074 	movhi	r2,4097
10011c80:	109abe04 	addi	r2,r2,27384
10011c84:	10800017 	ldw	r2,0(r2)
10011c88:	100170fa 	wrctl	ienable,r2
10011c8c:	e0bffc17 	ldw	r2,-16(fp)
10011c90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011c94:	e0bffd17 	ldw	r2,-12(fp)
10011c98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011c9c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10011ca0:	0001883a 	nop
}
10011ca4:	e037883a 	mov	sp,fp
10011ca8:	df000017 	ldw	fp,0(sp)
10011cac:	dec00104 	addi	sp,sp,4
10011cb0:	f800283a 	ret

10011cb4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011cb4:	defff904 	addi	sp,sp,-28
10011cb8:	df000615 	stw	fp,24(sp)
10011cbc:	df000604 	addi	fp,sp,24
10011cc0:	e13ffe15 	stw	r4,-8(fp)
10011cc4:	e17fff15 	stw	r5,-4(fp)
10011cc8:	e0bfff17 	ldw	r2,-4(fp)
10011ccc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011cd0:	0005303a 	rdctl	r2,status
10011cd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011cd8:	e0fffb17 	ldw	r3,-20(fp)
10011cdc:	00bfff84 	movi	r2,-2
10011ce0:	1884703a 	and	r2,r3,r2
10011ce4:	1001703a 	wrctl	status,r2
  
  return context;
10011ce8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011cec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011cf0:	e0bffa17 	ldw	r2,-24(fp)
10011cf4:	00c00044 	movi	r3,1
10011cf8:	1884983a 	sll	r2,r3,r2
10011cfc:	0084303a 	nor	r2,zero,r2
10011d00:	1007883a 	mov	r3,r2
10011d04:	00840074 	movhi	r2,4097
10011d08:	109abe04 	addi	r2,r2,27384
10011d0c:	10800017 	ldw	r2,0(r2)
10011d10:	1886703a 	and	r3,r3,r2
10011d14:	00840074 	movhi	r2,4097
10011d18:	109abe04 	addi	r2,r2,27384
10011d1c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011d20:	00840074 	movhi	r2,4097
10011d24:	109abe04 	addi	r2,r2,27384
10011d28:	10800017 	ldw	r2,0(r2)
10011d2c:	100170fa 	wrctl	ienable,r2
10011d30:	e0bffc17 	ldw	r2,-16(fp)
10011d34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011d38:	e0bffd17 	ldw	r2,-12(fp)
10011d3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011d40:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011d44:	0001883a 	nop
}
10011d48:	e037883a 	mov	sp,fp
10011d4c:	df000017 	ldw	fp,0(sp)
10011d50:	dec00104 	addi	sp,sp,4
10011d54:	f800283a 	ret

10011d58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011d58:	defffc04 	addi	sp,sp,-16
10011d5c:	df000315 	stw	fp,12(sp)
10011d60:	df000304 	addi	fp,sp,12
10011d64:	e13ffe15 	stw	r4,-8(fp)
10011d68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011d6c:	000530fa 	rdctl	r2,ienable
10011d70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011d74:	e0bfff17 	ldw	r2,-4(fp)
10011d78:	00c00044 	movi	r3,1
10011d7c:	1884983a 	sll	r2,r3,r2
10011d80:	1007883a 	mov	r3,r2
10011d84:	e0bffd17 	ldw	r2,-12(fp)
10011d88:	1884703a 	and	r2,r3,r2
10011d8c:	1004c03a 	cmpne	r2,r2,zero
10011d90:	10803fcc 	andi	r2,r2,255
}
10011d94:	e037883a 	mov	sp,fp
10011d98:	df000017 	ldw	fp,0(sp)
10011d9c:	dec00104 	addi	sp,sp,4
10011da0:	f800283a 	ret

10011da4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011da4:	defff504 	addi	sp,sp,-44
10011da8:	dfc00a15 	stw	ra,40(sp)
10011dac:	df000915 	stw	fp,36(sp)
10011db0:	df000904 	addi	fp,sp,36
10011db4:	e13ffc15 	stw	r4,-16(fp)
10011db8:	e17ffd15 	stw	r5,-12(fp)
10011dbc:	e1bffe15 	stw	r6,-8(fp)
10011dc0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011dc4:	00bffa84 	movi	r2,-22
10011dc8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011dcc:	e0bffd17 	ldw	r2,-12(fp)
10011dd0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011dd4:	e0bff817 	ldw	r2,-32(fp)
10011dd8:	10800808 	cmpgei	r2,r2,32
10011ddc:	1000271e 	bne	r2,zero,10011e7c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011de0:	0005303a 	rdctl	r2,status
10011de4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011de8:	e0fffa17 	ldw	r3,-24(fp)
10011dec:	00bfff84 	movi	r2,-2
10011df0:	1884703a 	and	r2,r3,r2
10011df4:	1001703a 	wrctl	status,r2
  
  return context;
10011df8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011dfc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10011e00:	00840074 	movhi	r2,4097
10011e04:	109b0704 	addi	r2,r2,27676
10011e08:	e0fff817 	ldw	r3,-32(fp)
10011e0c:	180690fa 	slli	r3,r3,3
10011e10:	10c5883a 	add	r2,r2,r3
10011e14:	e0fffe17 	ldw	r3,-8(fp)
10011e18:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011e1c:	00840074 	movhi	r2,4097
10011e20:	109b0704 	addi	r2,r2,27676
10011e24:	e0fff817 	ldw	r3,-32(fp)
10011e28:	180690fa 	slli	r3,r3,3
10011e2c:	10c5883a 	add	r2,r2,r3
10011e30:	10800104 	addi	r2,r2,4
10011e34:	e0ffff17 	ldw	r3,-4(fp)
10011e38:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011e3c:	e0bffe17 	ldw	r2,-8(fp)
10011e40:	10000526 	beq	r2,zero,10011e58 <alt_iic_isr_register+0xb4>
10011e44:	e0bff817 	ldw	r2,-32(fp)
10011e48:	e13ffc17 	ldw	r4,-16(fp)
10011e4c:	100b883a 	mov	r5,r2
10011e50:	0011c140 	call	10011c14 <alt_ic_irq_enable>
10011e54:	00000406 	br	10011e68 <alt_iic_isr_register+0xc4>
10011e58:	e0bff817 	ldw	r2,-32(fp)
10011e5c:	e13ffc17 	ldw	r4,-16(fp)
10011e60:	100b883a 	mov	r5,r2
10011e64:	0011cb40 	call	10011cb4 <alt_ic_irq_disable>
10011e68:	e0bff715 	stw	r2,-36(fp)
10011e6c:	e0bff917 	ldw	r2,-28(fp)
10011e70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011e74:	e0bffb17 	ldw	r2,-20(fp)
10011e78:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011e7c:	e0bff717 	ldw	r2,-36(fp)
}
10011e80:	e037883a 	mov	sp,fp
10011e84:	dfc00117 	ldw	ra,4(sp)
10011e88:	df000017 	ldw	fp,0(sp)
10011e8c:	dec00204 	addi	sp,sp,8
10011e90:	f800283a 	ret

10011e94 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011e94:	defff804 	addi	sp,sp,-32
10011e98:	dfc00715 	stw	ra,28(sp)
10011e9c:	df000615 	stw	fp,24(sp)
10011ea0:	dc000515 	stw	r16,20(sp)
10011ea4:	df000604 	addi	fp,sp,24
10011ea8:	e13ffb15 	stw	r4,-20(fp)
10011eac:	e17ffc15 	stw	r5,-16(fp)
10011eb0:	e1bffd15 	stw	r6,-12(fp)
10011eb4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011eb8:	e13ffc17 	ldw	r4,-16(fp)
10011ebc:	e17ffd17 	ldw	r5,-12(fp)
10011ec0:	e1bffe17 	ldw	r6,-8(fp)
10011ec4:	00121300 	call	10012130 <open>
10011ec8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011ecc:	e0bffa17 	ldw	r2,-24(fp)
10011ed0:	10002216 	blt	r2,zero,10011f5c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011ed4:	04040074 	movhi	r16,4097
10011ed8:	840f6804 	addi	r16,r16,15776
10011edc:	e0bffa17 	ldw	r2,-24(fp)
10011ee0:	1009883a 	mov	r4,r2
10011ee4:	01400304 	movi	r5,12
10011ee8:	00039ec0 	call	100039ec <__mulsi3>
10011eec:	8085883a 	add	r2,r16,r2
10011ef0:	10c00017 	ldw	r3,0(r2)
10011ef4:	e0bffb17 	ldw	r2,-20(fp)
10011ef8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011efc:	04040074 	movhi	r16,4097
10011f00:	840f6804 	addi	r16,r16,15776
10011f04:	e0bffa17 	ldw	r2,-24(fp)
10011f08:	1009883a 	mov	r4,r2
10011f0c:	01400304 	movi	r5,12
10011f10:	00039ec0 	call	100039ec <__mulsi3>
10011f14:	8085883a 	add	r2,r16,r2
10011f18:	10800104 	addi	r2,r2,4
10011f1c:	10c00017 	ldw	r3,0(r2)
10011f20:	e0bffb17 	ldw	r2,-20(fp)
10011f24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011f28:	04040074 	movhi	r16,4097
10011f2c:	840f6804 	addi	r16,r16,15776
10011f30:	e0bffa17 	ldw	r2,-24(fp)
10011f34:	1009883a 	mov	r4,r2
10011f38:	01400304 	movi	r5,12
10011f3c:	00039ec0 	call	100039ec <__mulsi3>
10011f40:	8085883a 	add	r2,r16,r2
10011f44:	10800204 	addi	r2,r2,8
10011f48:	10c00017 	ldw	r3,0(r2)
10011f4c:	e0bffb17 	ldw	r2,-20(fp)
10011f50:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011f54:	e13ffa17 	ldw	r4,-24(fp)
10011f58:	00109980 	call	10010998 <alt_release_fd>
  }
} 
10011f5c:	e6ffff04 	addi	sp,fp,-4
10011f60:	dfc00217 	ldw	ra,8(sp)
10011f64:	df000117 	ldw	fp,4(sp)
10011f68:	dc000017 	ldw	r16,0(sp)
10011f6c:	dec00304 	addi	sp,sp,12
10011f70:	f800283a 	ret

10011f74 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10011f74:	defffb04 	addi	sp,sp,-20
10011f78:	dfc00415 	stw	ra,16(sp)
10011f7c:	df000315 	stw	fp,12(sp)
10011f80:	df000304 	addi	fp,sp,12
10011f84:	e13ffd15 	stw	r4,-12(fp)
10011f88:	e17ffe15 	stw	r5,-8(fp)
10011f8c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011f90:	01040074 	movhi	r4,4097
10011f94:	210f6b04 	addi	r4,r4,15788
10011f98:	e17ffd17 	ldw	r5,-12(fp)
10011f9c:	01800044 	movi	r6,1
10011fa0:	01c07fc4 	movi	r7,511
10011fa4:	0011e940 	call	10011e94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011fa8:	01040074 	movhi	r4,4097
10011fac:	210f6804 	addi	r4,r4,15776
10011fb0:	e17ffe17 	ldw	r5,-8(fp)
10011fb4:	000d883a 	mov	r6,zero
10011fb8:	01c07fc4 	movi	r7,511
10011fbc:	0011e940 	call	10011e94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011fc0:	01040074 	movhi	r4,4097
10011fc4:	210f6e04 	addi	r4,r4,15800
10011fc8:	e17fff17 	ldw	r5,-4(fp)
10011fcc:	01800044 	movi	r6,1
10011fd0:	01c07fc4 	movi	r7,511
10011fd4:	0011e940 	call	10011e94 <alt_open_fd>
}  
10011fd8:	e037883a 	mov	sp,fp
10011fdc:	dfc00117 	ldw	ra,4(sp)
10011fe0:	df000017 	ldw	fp,0(sp)
10011fe4:	dec00204 	addi	sp,sp,8
10011fe8:	f800283a 	ret

10011fec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011fec:	defffe04 	addi	sp,sp,-8
10011ff0:	dfc00115 	stw	ra,4(sp)
10011ff4:	df000015 	stw	fp,0(sp)
10011ff8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011ffc:	00840074 	movhi	r2,4097
10012000:	1093eb04 	addi	r2,r2,20396
10012004:	10800017 	ldw	r2,0(r2)
10012008:	10000526 	beq	r2,zero,10012020 <alt_get_errno+0x34>
1001200c:	00840074 	movhi	r2,4097
10012010:	1093eb04 	addi	r2,r2,20396
10012014:	10800017 	ldw	r2,0(r2)
10012018:	103ee83a 	callr	r2
1001201c:	00000206 	br	10012028 <alt_get_errno+0x3c>
10012020:	00840074 	movhi	r2,4097
10012024:	109aba04 	addi	r2,r2,27368
}
10012028:	e037883a 	mov	sp,fp
1001202c:	dfc00117 	ldw	ra,4(sp)
10012030:	df000017 	ldw	fp,0(sp)
10012034:	dec00204 	addi	sp,sp,8
10012038:	f800283a 	ret

1001203c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1001203c:	defffb04 	addi	sp,sp,-20
10012040:	dfc00415 	stw	ra,16(sp)
10012044:	df000315 	stw	fp,12(sp)
10012048:	dc000215 	stw	r16,8(sp)
1001204c:	df000304 	addi	fp,sp,12
10012050:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10012054:	e0bffe17 	ldw	r2,-8(fp)
10012058:	10800217 	ldw	r2,8(r2)
1001205c:	10d00034 	orhi	r3,r2,16384
10012060:	e0bffe17 	ldw	r2,-8(fp)
10012064:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012068:	e03ffd15 	stw	zero,-12(fp)
1001206c:	00002306 	br	100120fc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10012070:	04040074 	movhi	r16,4097
10012074:	840f6804 	addi	r16,r16,15776
10012078:	e0bffd17 	ldw	r2,-12(fp)
1001207c:	1009883a 	mov	r4,r2
10012080:	01400304 	movi	r5,12
10012084:	00039ec0 	call	100039ec <__mulsi3>
10012088:	8085883a 	add	r2,r16,r2
1001208c:	10c00017 	ldw	r3,0(r2)
10012090:	e0bffe17 	ldw	r2,-8(fp)
10012094:	10800017 	ldw	r2,0(r2)
10012098:	1880151e 	bne	r3,r2,100120f0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001209c:	04040074 	movhi	r16,4097
100120a0:	840f6804 	addi	r16,r16,15776
100120a4:	e0bffd17 	ldw	r2,-12(fp)
100120a8:	1009883a 	mov	r4,r2
100120ac:	01400304 	movi	r5,12
100120b0:	00039ec0 	call	100039ec <__mulsi3>
100120b4:	8085883a 	add	r2,r16,r2
100120b8:	10800204 	addi	r2,r2,8
100120bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100120c0:	10000b0e 	bge	r2,zero,100120f0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100120c4:	e13ffd17 	ldw	r4,-12(fp)
100120c8:	01400304 	movi	r5,12
100120cc:	00039ec0 	call	100039ec <__mulsi3>
100120d0:	1007883a 	mov	r3,r2
100120d4:	00840074 	movhi	r2,4097
100120d8:	108f6804 	addi	r2,r2,15776
100120dc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100120e0:	e0bffe17 	ldw	r2,-8(fp)
100120e4:	18800226 	beq	r3,r2,100120f0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100120e8:	00bffcc4 	movi	r2,-13
100120ec:	00000a06 	br	10012118 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100120f0:	e0bffd17 	ldw	r2,-12(fp)
100120f4:	10800044 	addi	r2,r2,1
100120f8:	e0bffd15 	stw	r2,-12(fp)
100120fc:	00840074 	movhi	r2,4097
10012100:	1093ea04 	addi	r2,r2,20392
10012104:	10800017 	ldw	r2,0(r2)
10012108:	1007883a 	mov	r3,r2
1001210c:	e0bffd17 	ldw	r2,-12(fp)
10012110:	18bfd72e 	bgeu	r3,r2,10012070 <__alt_data_end+0xf8012070>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10012114:	0005883a 	mov	r2,zero
}
10012118:	e6ffff04 	addi	sp,fp,-4
1001211c:	dfc00217 	ldw	ra,8(sp)
10012120:	df000117 	ldw	fp,4(sp)
10012124:	dc000017 	ldw	r16,0(sp)
10012128:	dec00304 	addi	sp,sp,12
1001212c:	f800283a 	ret

10012130 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10012130:	defff604 	addi	sp,sp,-40
10012134:	dfc00915 	stw	ra,36(sp)
10012138:	df000815 	stw	fp,32(sp)
1001213c:	df000804 	addi	fp,sp,32
10012140:	e13ffd15 	stw	r4,-12(fp)
10012144:	e17ffe15 	stw	r5,-8(fp)
10012148:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001214c:	00bfffc4 	movi	r2,-1
10012150:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10012154:	00bffb44 	movi	r2,-19
10012158:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1001215c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10012160:	e13ffd17 	ldw	r4,-12(fp)
10012164:	01440074 	movhi	r5,4097
10012168:	2953e804 	addi	r5,r5,20384
1001216c:	001244c0 	call	1001244c <alt_find_dev>
10012170:	e0bff815 	stw	r2,-32(fp)
10012174:	e0bff817 	ldw	r2,-32(fp)
10012178:	1000051e 	bne	r2,zero,10012190 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1001217c:	e13ffd17 	ldw	r4,-12(fp)
10012180:	00124dc0 	call	100124dc <alt_find_file>
10012184:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10012188:	00800044 	movi	r2,1
1001218c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10012190:	e0bff817 	ldw	r2,-32(fp)
10012194:	10002b26 	beq	r2,zero,10012244 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10012198:	e13ff817 	ldw	r4,-32(fp)
1001219c:	00125f00 	call	100125f0 <alt_get_fd>
100121a0:	e0bff915 	stw	r2,-28(fp)
100121a4:	e0bff917 	ldw	r2,-28(fp)
100121a8:	1000030e 	bge	r2,zero,100121b8 <open+0x88>
    {
      status = index;
100121ac:	e0bff917 	ldw	r2,-28(fp)
100121b0:	e0bffa15 	stw	r2,-24(fp)
100121b4:	00002506 	br	1001224c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
100121b8:	e13ff917 	ldw	r4,-28(fp)
100121bc:	01400304 	movi	r5,12
100121c0:	00039ec0 	call	100039ec <__mulsi3>
100121c4:	1007883a 	mov	r3,r2
100121c8:	00840074 	movhi	r2,4097
100121cc:	108f6804 	addi	r2,r2,15776
100121d0:	1885883a 	add	r2,r3,r2
100121d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100121d8:	e0fffe17 	ldw	r3,-8(fp)
100121dc:	00900034 	movhi	r2,16384
100121e0:	10bfffc4 	addi	r2,r2,-1
100121e4:	1886703a 	and	r3,r3,r2
100121e8:	e0bffc17 	ldw	r2,-16(fp)
100121ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100121f0:	e0bffb17 	ldw	r2,-20(fp)
100121f4:	1000051e 	bne	r2,zero,1001220c <open+0xdc>
100121f8:	e13ffc17 	ldw	r4,-16(fp)
100121fc:	001203c0 	call	1001203c <alt_file_locked>
10012200:	e0bffa15 	stw	r2,-24(fp)
10012204:	e0bffa17 	ldw	r2,-24(fp)
10012208:	10001016 	blt	r2,zero,1001224c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1001220c:	e0bff817 	ldw	r2,-32(fp)
10012210:	10800317 	ldw	r2,12(r2)
10012214:	10000826 	beq	r2,zero,10012238 <open+0x108>
10012218:	e0bff817 	ldw	r2,-32(fp)
1001221c:	10800317 	ldw	r2,12(r2)
10012220:	e13ffc17 	ldw	r4,-16(fp)
10012224:	e17ffd17 	ldw	r5,-12(fp)
10012228:	e1bffe17 	ldw	r6,-8(fp)
1001222c:	e1ffff17 	ldw	r7,-4(fp)
10012230:	103ee83a 	callr	r2
10012234:	00000106 	br	1001223c <open+0x10c>
10012238:	0005883a 	mov	r2,zero
1001223c:	e0bffa15 	stw	r2,-24(fp)
10012240:	00000206 	br	1001224c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10012244:	00bffb44 	movi	r2,-19
10012248:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1001224c:	e0bffa17 	ldw	r2,-24(fp)
10012250:	1000090e 	bge	r2,zero,10012278 <open+0x148>
  {
    alt_release_fd (index);  
10012254:	e13ff917 	ldw	r4,-28(fp)
10012258:	00109980 	call	10010998 <alt_release_fd>
    ALT_ERRNO = -status;
1001225c:	0011fec0 	call	10011fec <alt_get_errno>
10012260:	1007883a 	mov	r3,r2
10012264:	e0bffa17 	ldw	r2,-24(fp)
10012268:	0085c83a 	sub	r2,zero,r2
1001226c:	18800015 	stw	r2,0(r3)
    return -1;
10012270:	00bfffc4 	movi	r2,-1
10012274:	00000106 	br	1001227c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10012278:	e0bff917 	ldw	r2,-28(fp)
}
1001227c:	e037883a 	mov	sp,fp
10012280:	dfc00117 	ldw	ra,4(sp)
10012284:	df000017 	ldw	fp,0(sp)
10012288:	dec00204 	addi	sp,sp,8
1001228c:	f800283a 	ret

10012290 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10012290:	defffa04 	addi	sp,sp,-24
10012294:	df000515 	stw	fp,20(sp)
10012298:	df000504 	addi	fp,sp,20
1001229c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100122a0:	0005303a 	rdctl	r2,status
100122a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100122a8:	e0fffc17 	ldw	r3,-16(fp)
100122ac:	00bfff84 	movi	r2,-2
100122b0:	1884703a 	and	r2,r3,r2
100122b4:	1001703a 	wrctl	status,r2
  
  return context;
100122b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100122bc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100122c0:	e0bfff17 	ldw	r2,-4(fp)
100122c4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100122c8:	e0bffd17 	ldw	r2,-12(fp)
100122cc:	10800017 	ldw	r2,0(r2)
100122d0:	e0fffd17 	ldw	r3,-12(fp)
100122d4:	18c00117 	ldw	r3,4(r3)
100122d8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100122dc:	e0bffd17 	ldw	r2,-12(fp)
100122e0:	10800117 	ldw	r2,4(r2)
100122e4:	e0fffd17 	ldw	r3,-12(fp)
100122e8:	18c00017 	ldw	r3,0(r3)
100122ec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100122f0:	e0bffd17 	ldw	r2,-12(fp)
100122f4:	e0fffd17 	ldw	r3,-12(fp)
100122f8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100122fc:	e0bffd17 	ldw	r2,-12(fp)
10012300:	e0fffd17 	ldw	r3,-12(fp)
10012304:	10c00015 	stw	r3,0(r2)
10012308:	e0bffb17 	ldw	r2,-20(fp)
1001230c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012310:	e0bffe17 	ldw	r2,-8(fp)
10012314:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10012318:	e037883a 	mov	sp,fp
1001231c:	df000017 	ldw	fp,0(sp)
10012320:	dec00104 	addi	sp,sp,4
10012324:	f800283a 	ret

10012328 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10012328:	defffb04 	addi	sp,sp,-20
1001232c:	dfc00415 	stw	ra,16(sp)
10012330:	df000315 	stw	fp,12(sp)
10012334:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10012338:	d0a00e17 	ldw	r2,-32712(gp)
1001233c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10012340:	d0a6e017 	ldw	r2,-25728(gp)
10012344:	10800044 	addi	r2,r2,1
10012348:	d0a6e015 	stw	r2,-25728(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001234c:	00002e06 	br	10012408 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10012350:	e0bffd17 	ldw	r2,-12(fp)
10012354:	10800017 	ldw	r2,0(r2)
10012358:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001235c:	e0bffd17 	ldw	r2,-12(fp)
10012360:	10800403 	ldbu	r2,16(r2)
10012364:	10803fcc 	andi	r2,r2,255
10012368:	10000426 	beq	r2,zero,1001237c <alt_tick+0x54>
1001236c:	d0a6e017 	ldw	r2,-25728(gp)
10012370:	1000021e 	bne	r2,zero,1001237c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10012374:	e0bffd17 	ldw	r2,-12(fp)
10012378:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001237c:	e0bffd17 	ldw	r2,-12(fp)
10012380:	10800217 	ldw	r2,8(r2)
10012384:	d0e6e017 	ldw	r3,-25728(gp)
10012388:	18801d36 	bltu	r3,r2,10012400 <alt_tick+0xd8>
1001238c:	e0bffd17 	ldw	r2,-12(fp)
10012390:	10800403 	ldbu	r2,16(r2)
10012394:	10803fcc 	andi	r2,r2,255
10012398:	1000191e 	bne	r2,zero,10012400 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001239c:	e0bffd17 	ldw	r2,-12(fp)
100123a0:	10800317 	ldw	r2,12(r2)
100123a4:	e0fffd17 	ldw	r3,-12(fp)
100123a8:	18c00517 	ldw	r3,20(r3)
100123ac:	1809883a 	mov	r4,r3
100123b0:	103ee83a 	callr	r2
100123b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100123b8:	e0bfff17 	ldw	r2,-4(fp)
100123bc:	1000031e 	bne	r2,zero,100123cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100123c0:	e13ffd17 	ldw	r4,-12(fp)
100123c4:	00122900 	call	10012290 <alt_alarm_stop>
100123c8:	00000d06 	br	10012400 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100123cc:	e0bffd17 	ldw	r2,-12(fp)
100123d0:	10c00217 	ldw	r3,8(r2)
100123d4:	e0bfff17 	ldw	r2,-4(fp)
100123d8:	1887883a 	add	r3,r3,r2
100123dc:	e0bffd17 	ldw	r2,-12(fp)
100123e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100123e4:	e0bffd17 	ldw	r2,-12(fp)
100123e8:	10c00217 	ldw	r3,8(r2)
100123ec:	d0a6e017 	ldw	r2,-25728(gp)
100123f0:	1880032e 	bgeu	r3,r2,10012400 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100123f4:	e0bffd17 	ldw	r2,-12(fp)
100123f8:	00c00044 	movi	r3,1
100123fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10012400:	e0bffe17 	ldw	r2,-8(fp)
10012404:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012408:	e0fffd17 	ldw	r3,-12(fp)
1001240c:	d0a00e04 	addi	r2,gp,-32712
10012410:	18bfcf1e 	bne	r3,r2,10012350 <__alt_data_end+0xf8012350>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10012414:	0001883a 	nop
}
10012418:	e037883a 	mov	sp,fp
1001241c:	dfc00117 	ldw	ra,4(sp)
10012420:	df000017 	ldw	fp,0(sp)
10012424:	dec00204 	addi	sp,sp,8
10012428:	f800283a 	ret

1001242c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
1001242c:	deffff04 	addi	sp,sp,-4
10012430:	df000015 	stw	fp,0(sp)
10012434:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10012438:	000170fa 	wrctl	ienable,zero
}
1001243c:	e037883a 	mov	sp,fp
10012440:	df000017 	ldw	fp,0(sp)
10012444:	dec00104 	addi	sp,sp,4
10012448:	f800283a 	ret

1001244c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001244c:	defffa04 	addi	sp,sp,-24
10012450:	dfc00515 	stw	ra,20(sp)
10012454:	df000415 	stw	fp,16(sp)
10012458:	df000404 	addi	fp,sp,16
1001245c:	e13ffe15 	stw	r4,-8(fp)
10012460:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10012464:	e0bfff17 	ldw	r2,-4(fp)
10012468:	10800017 	ldw	r2,0(r2)
1001246c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10012470:	e13ffe17 	ldw	r4,-8(fp)
10012474:	0003b480 	call	10003b48 <strlen>
10012478:	10800044 	addi	r2,r2,1
1001247c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10012480:	00000d06 	br	100124b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10012484:	e0bffc17 	ldw	r2,-16(fp)
10012488:	10c00217 	ldw	r3,8(r2)
1001248c:	e0bffd17 	ldw	r2,-12(fp)
10012490:	1809883a 	mov	r4,r3
10012494:	e17ffe17 	ldw	r5,-8(fp)
10012498:	100d883a 	mov	r6,r2
1001249c:	00127100 	call	10012710 <memcmp>
100124a0:	1000021e 	bne	r2,zero,100124ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100124a4:	e0bffc17 	ldw	r2,-16(fp)
100124a8:	00000706 	br	100124c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100124ac:	e0bffc17 	ldw	r2,-16(fp)
100124b0:	10800017 	ldw	r2,0(r2)
100124b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100124b8:	e0fffc17 	ldw	r3,-16(fp)
100124bc:	e0bfff17 	ldw	r2,-4(fp)
100124c0:	18bff01e 	bne	r3,r2,10012484 <__alt_data_end+0xf8012484>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100124c4:	0005883a 	mov	r2,zero
}
100124c8:	e037883a 	mov	sp,fp
100124cc:	dfc00117 	ldw	ra,4(sp)
100124d0:	df000017 	ldw	fp,0(sp)
100124d4:	dec00204 	addi	sp,sp,8
100124d8:	f800283a 	ret

100124dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100124dc:	defffb04 	addi	sp,sp,-20
100124e0:	dfc00415 	stw	ra,16(sp)
100124e4:	df000315 	stw	fp,12(sp)
100124e8:	df000304 	addi	fp,sp,12
100124ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100124f0:	00840074 	movhi	r2,4097
100124f4:	1093e604 	addi	r2,r2,20376
100124f8:	10800017 	ldw	r2,0(r2)
100124fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10012500:	00003106 	br	100125c8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10012504:	e0bffd17 	ldw	r2,-12(fp)
10012508:	10800217 	ldw	r2,8(r2)
1001250c:	1009883a 	mov	r4,r2
10012510:	0003b480 	call	10003b48 <strlen>
10012514:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10012518:	e0bffd17 	ldw	r2,-12(fp)
1001251c:	10c00217 	ldw	r3,8(r2)
10012520:	e0bffe17 	ldw	r2,-8(fp)
10012524:	10bfffc4 	addi	r2,r2,-1
10012528:	1885883a 	add	r2,r3,r2
1001252c:	10800003 	ldbu	r2,0(r2)
10012530:	10803fcc 	andi	r2,r2,255
10012534:	1080201c 	xori	r2,r2,128
10012538:	10bfe004 	addi	r2,r2,-128
1001253c:	10800bd8 	cmpnei	r2,r2,47
10012540:	1000031e 	bne	r2,zero,10012550 <alt_find_file+0x74>
    {
      len -= 1;
10012544:	e0bffe17 	ldw	r2,-8(fp)
10012548:	10bfffc4 	addi	r2,r2,-1
1001254c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10012550:	e0bffe17 	ldw	r2,-8(fp)
10012554:	e0ffff17 	ldw	r3,-4(fp)
10012558:	1885883a 	add	r2,r3,r2
1001255c:	10800003 	ldbu	r2,0(r2)
10012560:	10803fcc 	andi	r2,r2,255
10012564:	1080201c 	xori	r2,r2,128
10012568:	10bfe004 	addi	r2,r2,-128
1001256c:	10800be0 	cmpeqi	r2,r2,47
10012570:	1000081e 	bne	r2,zero,10012594 <alt_find_file+0xb8>
10012574:	e0bffe17 	ldw	r2,-8(fp)
10012578:	e0ffff17 	ldw	r3,-4(fp)
1001257c:	1885883a 	add	r2,r3,r2
10012580:	10800003 	ldbu	r2,0(r2)
10012584:	10803fcc 	andi	r2,r2,255
10012588:	1080201c 	xori	r2,r2,128
1001258c:	10bfe004 	addi	r2,r2,-128
10012590:	10000a1e 	bne	r2,zero,100125bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10012594:	e0bffd17 	ldw	r2,-12(fp)
10012598:	10c00217 	ldw	r3,8(r2)
1001259c:	e0bffe17 	ldw	r2,-8(fp)
100125a0:	1809883a 	mov	r4,r3
100125a4:	e17fff17 	ldw	r5,-4(fp)
100125a8:	100d883a 	mov	r6,r2
100125ac:	00127100 	call	10012710 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100125b0:	1000021e 	bne	r2,zero,100125bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100125b4:	e0bffd17 	ldw	r2,-12(fp)
100125b8:	00000806 	br	100125dc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100125bc:	e0bffd17 	ldw	r2,-12(fp)
100125c0:	10800017 	ldw	r2,0(r2)
100125c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100125c8:	e0fffd17 	ldw	r3,-12(fp)
100125cc:	00840074 	movhi	r2,4097
100125d0:	1093e604 	addi	r2,r2,20376
100125d4:	18bfcb1e 	bne	r3,r2,10012504 <__alt_data_end+0xf8012504>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100125d8:	0005883a 	mov	r2,zero
}
100125dc:	e037883a 	mov	sp,fp
100125e0:	dfc00117 	ldw	ra,4(sp)
100125e4:	df000017 	ldw	fp,0(sp)
100125e8:	dec00204 	addi	sp,sp,8
100125ec:	f800283a 	ret

100125f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100125f0:	defffa04 	addi	sp,sp,-24
100125f4:	dfc00515 	stw	ra,20(sp)
100125f8:	df000415 	stw	fp,16(sp)
100125fc:	dc000315 	stw	r16,12(sp)
10012600:	df000404 	addi	fp,sp,16
10012604:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10012608:	00bffa04 	movi	r2,-24
1001260c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012610:	e03ffc15 	stw	zero,-16(fp)
10012614:	00002106 	br	1001269c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10012618:	04040074 	movhi	r16,4097
1001261c:	840f6804 	addi	r16,r16,15776
10012620:	e0bffc17 	ldw	r2,-16(fp)
10012624:	1009883a 	mov	r4,r2
10012628:	01400304 	movi	r5,12
1001262c:	00039ec0 	call	100039ec <__mulsi3>
10012630:	8085883a 	add	r2,r16,r2
10012634:	10800017 	ldw	r2,0(r2)
10012638:	1000151e 	bne	r2,zero,10012690 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1001263c:	04040074 	movhi	r16,4097
10012640:	840f6804 	addi	r16,r16,15776
10012644:	e0bffc17 	ldw	r2,-16(fp)
10012648:	1009883a 	mov	r4,r2
1001264c:	01400304 	movi	r5,12
10012650:	00039ec0 	call	100039ec <__mulsi3>
10012654:	8085883a 	add	r2,r16,r2
10012658:	e0fffe17 	ldw	r3,-8(fp)
1001265c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10012660:	00840074 	movhi	r2,4097
10012664:	1093ea04 	addi	r2,r2,20392
10012668:	10c00017 	ldw	r3,0(r2)
1001266c:	e0bffc17 	ldw	r2,-16(fp)
10012670:	1880040e 	bge	r3,r2,10012684 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10012674:	00840074 	movhi	r2,4097
10012678:	1093ea04 	addi	r2,r2,20392
1001267c:	e0fffc17 	ldw	r3,-16(fp)
10012680:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10012684:	e0bffc17 	ldw	r2,-16(fp)
10012688:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1001268c:	00000606 	br	100126a8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012690:	e0bffc17 	ldw	r2,-16(fp)
10012694:	10800044 	addi	r2,r2,1
10012698:	e0bffc15 	stw	r2,-16(fp)
1001269c:	e0bffc17 	ldw	r2,-16(fp)
100126a0:	10800810 	cmplti	r2,r2,32
100126a4:	103fdc1e 	bne	r2,zero,10012618 <__alt_data_end+0xf8012618>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100126a8:	e0bffd17 	ldw	r2,-12(fp)
}
100126ac:	e6ffff04 	addi	sp,fp,-4
100126b0:	dfc00217 	ldw	ra,8(sp)
100126b4:	df000117 	ldw	fp,4(sp)
100126b8:	dc000017 	ldw	r16,0(sp)
100126bc:	dec00304 	addi	sp,sp,12
100126c0:	f800283a 	ret

100126c4 <atexit>:
100126c4:	200b883a 	mov	r5,r4
100126c8:	000d883a 	mov	r6,zero
100126cc:	0009883a 	mov	r4,zero
100126d0:	000f883a 	mov	r7,zero
100126d4:	001278c1 	jmpi	1001278c <__register_exitproc>

100126d8 <exit>:
100126d8:	defffe04 	addi	sp,sp,-8
100126dc:	000b883a 	mov	r5,zero
100126e0:	dc000015 	stw	r16,0(sp)
100126e4:	dfc00115 	stw	ra,4(sp)
100126e8:	2021883a 	mov	r16,r4
100126ec:	00128a00 	call	100128a0 <__call_exitprocs>
100126f0:	00840074 	movhi	r2,4097
100126f4:	1093e004 	addi	r2,r2,20352
100126f8:	11000017 	ldw	r4,0(r2)
100126fc:	20800f17 	ldw	r2,60(r4)
10012700:	10000126 	beq	r2,zero,10012708 <exit+0x30>
10012704:	103ee83a 	callr	r2
10012708:	8009883a 	mov	r4,r16
1001270c:	0012a340 	call	10012a34 <_exit>

10012710 <memcmp>:
10012710:	01c000c4 	movi	r7,3
10012714:	3980192e 	bgeu	r7,r6,1001277c <memcmp+0x6c>
10012718:	2144b03a 	or	r2,r4,r5
1001271c:	11c4703a 	and	r2,r2,r7
10012720:	10000f26 	beq	r2,zero,10012760 <memcmp+0x50>
10012724:	20800003 	ldbu	r2,0(r4)
10012728:	28c00003 	ldbu	r3,0(r5)
1001272c:	10c0151e 	bne	r2,r3,10012784 <memcmp+0x74>
10012730:	31bfff84 	addi	r6,r6,-2
10012734:	01ffffc4 	movi	r7,-1
10012738:	00000406 	br	1001274c <memcmp+0x3c>
1001273c:	20800003 	ldbu	r2,0(r4)
10012740:	28c00003 	ldbu	r3,0(r5)
10012744:	31bfffc4 	addi	r6,r6,-1
10012748:	10c00e1e 	bne	r2,r3,10012784 <memcmp+0x74>
1001274c:	21000044 	addi	r4,r4,1
10012750:	29400044 	addi	r5,r5,1
10012754:	31fff91e 	bne	r6,r7,1001273c <__alt_data_end+0xf801273c>
10012758:	0005883a 	mov	r2,zero
1001275c:	f800283a 	ret
10012760:	20c00017 	ldw	r3,0(r4)
10012764:	28800017 	ldw	r2,0(r5)
10012768:	1880041e 	bne	r3,r2,1001277c <memcmp+0x6c>
1001276c:	31bfff04 	addi	r6,r6,-4
10012770:	21000104 	addi	r4,r4,4
10012774:	29400104 	addi	r5,r5,4
10012778:	39bff936 	bltu	r7,r6,10012760 <__alt_data_end+0xf8012760>
1001277c:	303fe91e 	bne	r6,zero,10012724 <__alt_data_end+0xf8012724>
10012780:	003ff506 	br	10012758 <__alt_data_end+0xf8012758>
10012784:	10c5c83a 	sub	r2,r2,r3
10012788:	f800283a 	ret

1001278c <__register_exitproc>:
1001278c:	00840074 	movhi	r2,4097
10012790:	defffa04 	addi	sp,sp,-24
10012794:	1093e004 	addi	r2,r2,20352
10012798:	dc000315 	stw	r16,12(sp)
1001279c:	14000017 	ldw	r16,0(r2)
100127a0:	dc400415 	stw	r17,16(sp)
100127a4:	dfc00515 	stw	ra,20(sp)
100127a8:	80805217 	ldw	r2,328(r16)
100127ac:	2023883a 	mov	r17,r4
100127b0:	10003626 	beq	r2,zero,1001288c <__register_exitproc+0x100>
100127b4:	10c00117 	ldw	r3,4(r2)
100127b8:	010007c4 	movi	r4,31
100127bc:	20c00e16 	blt	r4,r3,100127f8 <__register_exitproc+0x6c>
100127c0:	1a400044 	addi	r9,r3,1
100127c4:	8800211e 	bne	r17,zero,1001284c <__register_exitproc+0xc0>
100127c8:	18c00084 	addi	r3,r3,2
100127cc:	18c7883a 	add	r3,r3,r3
100127d0:	18c7883a 	add	r3,r3,r3
100127d4:	12400115 	stw	r9,4(r2)
100127d8:	10c7883a 	add	r3,r2,r3
100127dc:	19400015 	stw	r5,0(r3)
100127e0:	0005883a 	mov	r2,zero
100127e4:	dfc00517 	ldw	ra,20(sp)
100127e8:	dc400417 	ldw	r17,16(sp)
100127ec:	dc000317 	ldw	r16,12(sp)
100127f0:	dec00604 	addi	sp,sp,24
100127f4:	f800283a 	ret
100127f8:	00800034 	movhi	r2,0
100127fc:	10800004 	addi	r2,r2,0
10012800:	10002526 	beq	r2,zero,10012898 <__register_exitproc+0x10c>
10012804:	01006404 	movi	r4,400
10012808:	d9400015 	stw	r5,0(sp)
1001280c:	d9800115 	stw	r6,4(sp)
10012810:	d9c00215 	stw	r7,8(sp)
10012814:	00000000 	call	10000000 <__reset>
10012818:	d9400017 	ldw	r5,0(sp)
1001281c:	d9800117 	ldw	r6,4(sp)
10012820:	d9c00217 	ldw	r7,8(sp)
10012824:	10001c26 	beq	r2,zero,10012898 <__register_exitproc+0x10c>
10012828:	80c05217 	ldw	r3,328(r16)
1001282c:	10000115 	stw	zero,4(r2)
10012830:	02400044 	movi	r9,1
10012834:	10c00015 	stw	r3,0(r2)
10012838:	80805215 	stw	r2,328(r16)
1001283c:	10006215 	stw	zero,392(r2)
10012840:	10006315 	stw	zero,396(r2)
10012844:	0007883a 	mov	r3,zero
10012848:	883fdf26 	beq	r17,zero,100127c8 <__alt_data_end+0xf80127c8>
1001284c:	18d1883a 	add	r8,r3,r3
10012850:	4211883a 	add	r8,r8,r8
10012854:	1211883a 	add	r8,r2,r8
10012858:	41802215 	stw	r6,136(r8)
1001285c:	01000044 	movi	r4,1
10012860:	11806217 	ldw	r6,392(r2)
10012864:	20c8983a 	sll	r4,r4,r3
10012868:	310cb03a 	or	r6,r6,r4
1001286c:	11806215 	stw	r6,392(r2)
10012870:	41c04215 	stw	r7,264(r8)
10012874:	01800084 	movi	r6,2
10012878:	89bfd31e 	bne	r17,r6,100127c8 <__alt_data_end+0xf80127c8>
1001287c:	11806317 	ldw	r6,396(r2)
10012880:	3108b03a 	or	r4,r6,r4
10012884:	11006315 	stw	r4,396(r2)
10012888:	003fcf06 	br	100127c8 <__alt_data_end+0xf80127c8>
1001288c:	80805304 	addi	r2,r16,332
10012890:	80805215 	stw	r2,328(r16)
10012894:	003fc706 	br	100127b4 <__alt_data_end+0xf80127b4>
10012898:	00bfffc4 	movi	r2,-1
1001289c:	003fd106 	br	100127e4 <__alt_data_end+0xf80127e4>

100128a0 <__call_exitprocs>:
100128a0:	00840074 	movhi	r2,4097
100128a4:	1093e004 	addi	r2,r2,20352
100128a8:	10800017 	ldw	r2,0(r2)
100128ac:	defff404 	addi	sp,sp,-48
100128b0:	dd800815 	stw	r22,32(sp)
100128b4:	d8800015 	stw	r2,0(sp)
100128b8:	10805204 	addi	r2,r2,328
100128bc:	dd000615 	stw	r20,24(sp)
100128c0:	dc800415 	stw	r18,16(sp)
100128c4:	dfc00b15 	stw	ra,44(sp)
100128c8:	df000a15 	stw	fp,40(sp)
100128cc:	ddc00915 	stw	r23,36(sp)
100128d0:	dd400715 	stw	r21,28(sp)
100128d4:	dcc00515 	stw	r19,20(sp)
100128d8:	dc400315 	stw	r17,12(sp)
100128dc:	dc000215 	stw	r16,8(sp)
100128e0:	2025883a 	mov	r18,r4
100128e4:	2829883a 	mov	r20,r5
100128e8:	d8800115 	stw	r2,4(sp)
100128ec:	05bfffc4 	movi	r22,-1
100128f0:	d8800017 	ldw	r2,0(sp)
100128f4:	14c05217 	ldw	r19,328(r2)
100128f8:	98001d26 	beq	r19,zero,10012970 <__call_exitprocs+0xd0>
100128fc:	dd400117 	ldw	r21,4(sp)
10012900:	98800117 	ldw	r2,4(r19)
10012904:	173fffc4 	addi	fp,r2,-1
10012908:	e0000d16 	blt	fp,zero,10012940 <__call_exitprocs+0xa0>
1001290c:	14000044 	addi	r16,r2,1
10012910:	8421883a 	add	r16,r16,r16
10012914:	8421883a 	add	r16,r16,r16
10012918:	84402004 	addi	r17,r16,128
1001291c:	9c63883a 	add	r17,r19,r17
10012920:	9c21883a 	add	r16,r19,r16
10012924:	a0001e26 	beq	r20,zero,100129a0 <__call_exitprocs+0x100>
10012928:	80804017 	ldw	r2,256(r16)
1001292c:	15001c26 	beq	r2,r20,100129a0 <__call_exitprocs+0x100>
10012930:	e73fffc4 	addi	fp,fp,-1
10012934:	843fff04 	addi	r16,r16,-4
10012938:	8c7fff04 	addi	r17,r17,-4
1001293c:	e5bff91e 	bne	fp,r22,10012924 <__alt_data_end+0xf8012924>
10012940:	00800034 	movhi	r2,0
10012944:	10800004 	addi	r2,r2,0
10012948:	10000926 	beq	r2,zero,10012970 <__call_exitprocs+0xd0>
1001294c:	98800117 	ldw	r2,4(r19)
10012950:	1000311e 	bne	r2,zero,10012a18 <__call_exitprocs+0x178>
10012954:	98800017 	ldw	r2,0(r19)
10012958:	10003426 	beq	r2,zero,10012a2c <__call_exitprocs+0x18c>
1001295c:	9809883a 	mov	r4,r19
10012960:	a8800015 	stw	r2,0(r21)
10012964:	00000000 	call	10000000 <__reset>
10012968:	acc00017 	ldw	r19,0(r21)
1001296c:	983fe41e 	bne	r19,zero,10012900 <__alt_data_end+0xf8012900>
10012970:	dfc00b17 	ldw	ra,44(sp)
10012974:	df000a17 	ldw	fp,40(sp)
10012978:	ddc00917 	ldw	r23,36(sp)
1001297c:	dd800817 	ldw	r22,32(sp)
10012980:	dd400717 	ldw	r21,28(sp)
10012984:	dd000617 	ldw	r20,24(sp)
10012988:	dcc00517 	ldw	r19,20(sp)
1001298c:	dc800417 	ldw	r18,16(sp)
10012990:	dc400317 	ldw	r17,12(sp)
10012994:	dc000217 	ldw	r16,8(sp)
10012998:	dec00c04 	addi	sp,sp,48
1001299c:	f800283a 	ret
100129a0:	98800117 	ldw	r2,4(r19)
100129a4:	80c00017 	ldw	r3,0(r16)
100129a8:	10bfffc4 	addi	r2,r2,-1
100129ac:	17001526 	beq	r2,fp,10012a04 <__call_exitprocs+0x164>
100129b0:	80000015 	stw	zero,0(r16)
100129b4:	183fde26 	beq	r3,zero,10012930 <__alt_data_end+0xf8012930>
100129b8:	00800044 	movi	r2,1
100129bc:	1708983a 	sll	r4,r2,fp
100129c0:	98806217 	ldw	r2,392(r19)
100129c4:	9dc00117 	ldw	r23,4(r19)
100129c8:	2084703a 	and	r2,r4,r2
100129cc:	1000061e 	bne	r2,zero,100129e8 <__call_exitprocs+0x148>
100129d0:	183ee83a 	callr	r3
100129d4:	98800117 	ldw	r2,4(r19)
100129d8:	15ffc51e 	bne	r2,r23,100128f0 <__alt_data_end+0xf80128f0>
100129dc:	a8800017 	ldw	r2,0(r21)
100129e0:	14ffd326 	beq	r2,r19,10012930 <__alt_data_end+0xf8012930>
100129e4:	003fc206 	br	100128f0 <__alt_data_end+0xf80128f0>
100129e8:	98806317 	ldw	r2,396(r19)
100129ec:	2084703a 	and	r2,r4,r2
100129f0:	1000061e 	bne	r2,zero,10012a0c <__call_exitprocs+0x16c>
100129f4:	89400017 	ldw	r5,0(r17)
100129f8:	9009883a 	mov	r4,r18
100129fc:	183ee83a 	callr	r3
10012a00:	003ff406 	br	100129d4 <__alt_data_end+0xf80129d4>
10012a04:	9f000115 	stw	fp,4(r19)
10012a08:	003fea06 	br	100129b4 <__alt_data_end+0xf80129b4>
10012a0c:	89000017 	ldw	r4,0(r17)
10012a10:	183ee83a 	callr	r3
10012a14:	003fef06 	br	100129d4 <__alt_data_end+0xf80129d4>
10012a18:	98800017 	ldw	r2,0(r19)
10012a1c:	982b883a 	mov	r21,r19
10012a20:	1027883a 	mov	r19,r2
10012a24:	983fb61e 	bne	r19,zero,10012900 <__alt_data_end+0xf8012900>
10012a28:	003fd106 	br	10012970 <__alt_data_end+0xf8012970>
10012a2c:	0005883a 	mov	r2,zero
10012a30:	003ffa06 	br	10012a1c <__alt_data_end+0xf8012a1c>

10012a34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10012a34:	defffd04 	addi	sp,sp,-12
10012a38:	df000215 	stw	fp,8(sp)
10012a3c:	df000204 	addi	fp,sp,8
10012a40:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10012a44:	0001883a 	nop
10012a48:	e0bfff17 	ldw	r2,-4(fp)
10012a4c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10012a50:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10012a54:	10000226 	beq	r2,zero,10012a60 <_exit+0x2c>
    ALT_SIM_FAIL();
10012a58:	002af070 	cmpltui	zero,zero,43969
10012a5c:	00000106 	br	10012a64 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10012a60:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012a64:	003fff06 	br	10012a64 <__alt_data_end+0xf8012a64>
